{"root":"0:0:2141","crate_version":"0.11.3","includes_private":false,"index":{"a:2:3098:246-0:156:2619":{"id":"a:2:3098:246-0:156:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:45:2396":{"id":"0:45:2396","crate_id":0,"name":"format_timestamp_nanos","span":{"filename":"src/logger.rs","begin":[306,4],"end":[308,5]},"visibility":"public","docs":"Configures the timestamp to use nanosecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:2376":{"id":"0:38:2376","crate_id":0,"name":"format_module_path","span":{"filename":"src/logger.rs","begin":[266,4],"end":[269,5]},"visibility":"public","docs":"Whether or not to write the module path in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:407":{"id":"0:407","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[91,9],"end":[91,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3093:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13135:35549":{"id":"2:13135:35549","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12331:1699","crate::ops::IndexMut":"2:3374:10198","str::slice_unchecked":"2:13134:35548"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2607:2639":{"id":"2:2607:2639","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2338":{"id":"0:53:2338","crate_id":0,"name":"parse_write_style","span":{"filename":"src/logger.rs","begin":[452,4],"end":[455,5]},"visibility":"public","docs":"Parses whether or not to write styles in the same form as the `RUST_LOG_STYLE`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write_style",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:380":{"id":"0:380","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31976:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2885-0:398:2139":{"id":"b:2:2885-0:398:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13148:33385":{"id":"2:13148:33385","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43712:6967","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:2290":{"id":"0:49:2290","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[390,4],"end":[393,5]},"visibility":"public","docs":"Adds filters to the logger.\n\nThe given module (if any) will log at most the specified level provided.\nIf no module is provided then the filter will apply to all log messages.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter(Some(\"path::to::module\"), LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["module",{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:223:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2336":{"id":"0:50:2336","crate_id":0,"name":"parse_filters","span":{"filename":"src/logger.rs","begin":[399,4],"end":[402,5]},"visibility":"public","docs":"Parses the directives string in the same form as the `RUST_LOG`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["filters",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41:2384":{"id":"0:41:2384","crate_id":0,"name":"format_timestamp","span":{"filename":"src/logger.rs","begin":[285,4],"end":[288,5]},"visibility":"public","docs":"Configures if timestamp should be included and in what precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["timestamp",{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"fmt::TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:817":{"id":"0:102:817","crate_id":0,"name":"from","span":{"filename":"src/logger.rs","begin":[807,4],"end":[809,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["filter_env",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13152:28587":{"id":"2:13152:28587","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:4797"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[812,0],"end":[819,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:105:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:40:2381":{"id":"0:40:2381","crate_id":0,"name":"format_indent","span":{"filename":"src/logger.rs","begin":[279,4],"end":[282,5]},"visibility":"public","docs":"Configures the amount of spaces to use to indent multiline log records.\nA value of `None` disables any kind of indentation.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["indent",{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:2345":{"id":"0:68:2345","crate_id":0,"name":"from_default_env","span":{"filename":"src/logger.rs","begin":[607,4],"end":[609,5]},"visibility":"public","docs":"Creates the logger from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The logger will use the\n[default environment variables].\n\n# Examples\n\nCreates a logger using the default environment variables:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_default_env();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2878:2334":{"id":"2:2878:2334","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2852:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:3092":{"id":"5:5621:3092","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2893:136":{"id":"2:2893:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31902:8561","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:5:727-0:365:2140":{"id":"b:5:727-0:365:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:2970","5:730:2539","5:731:3617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2605-0:324:2289":{"id":"b:2:2605-0:324:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:321-0:398:2139":{"id":"0:321-0:398:2139","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[274,28],"end":[274,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::TimestampPrecision","name":"TimestampPrecision","id":"0:398:2139","glob":false}}},"2:13134:35548":{"id":"2:13134:35548","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12331:1699","str::slice_mut_unchecked":"2:13135:35549","crate::ops::Index":"2:39104:10197"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2875-0:355:248":{"id":"b:2:2875-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2878:2334"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13238:29787":{"id":"2:13238:29787","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41632:3118-0:60:2469":{"id":"a:2:41632:3118-0:60:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:3118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:41633:3117-0:355:248":{"id":"a:2:41633:3117-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:3117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:46:2399":{"id":"0:46:2399","crate_id":0,"name":"format_suffix","span":{"filename":"src/logger.rs","begin":[311,4],"end":[314,5]},"visibility":"public","docs":"Configures the end of line suffix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["suffix",{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:398:2139":{"id":"b:2:2605-0:398:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2879-0:60:2469":{"id":"b:2:2879-0:60:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2602-0:60:2469":{"id":"b:2:2602-0:60:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2604:2259"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2605-0:156:2619":{"id":"b:2:2605-0:156:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:160:787":{"id":"0:160:787","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/humantime.rs","begin":[84,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13162:3558":{"id":"2:13162:3558","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41540:190","prim@char":"1:12325:458","self::pattern":"2:12804:4797"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:15529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:259:2514":{"id":"0:259:2514","crate_id":0,"name":"flush","span":{"filename":"src/fmt/mod.rs","begin":[185,4],"end":[187,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3022:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:2385":{"id":"0:151:2385","crate_id":0,"name":"timestamp","span":{"filename":"src/fmt/humantime.rs","begin":[28,4],"end":[33,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC.\n\n# Examples\n\nInclude the current timestamp with the log record:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    let ts = buf.timestamp();\n\n    writeln!(buf, \"{}: {}: {}\", ts, record.level(), record.args())\n});\n```","links":{"`Timestamp`":"0:156:2619"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13141:6968":{"id":"2:13141:6968","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43390:6961","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:730:2539":{"id":"5:730:2539","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2602-0:355:248":{"id":"b:2:2602-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2604:2259"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:39:2378":{"id":"0:39:2378","crate_id":0,"name":"format_target","span":{"filename":"src/logger.rs","begin":[272,4],"end":[275,5]},"visibility":"public","docs":"Whether or not to write the target in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245":{"id":"0:245","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[104,0],"end":[108,1]},"visibility":"default","docs":"The default timestamp precision is seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:246:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32031:3181-0:355:248":{"id":"a:2:32031:3181-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:3181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/target.rs","begin":[14,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:212:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3098:246-0:398:2139":{"id":"a:2:3098:246-0:398:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41633:3117-0:324:2289":{"id":"a:2:41633:3117-0:324:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:3117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:79:787":{"id":"0:79:787","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[695,4],"end":[699,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[803,0],"end":[810,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::borrow::Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:102:817"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5620:36264":{"id":"5:5620:36264","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:295:2368","`String`":"5:7632:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2368","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336:2320":{"id":"0:336:2320","crate_id":0,"name":"Env","span":{"filename":"src/logger.rs","begin":[713,0],"end":[716,1]},"visibility":"public","docs":"Set of environment variables to configure from.\n\n# Default environment variables\n\nBy default, the `Env` will read the following environment variables:\n\n- `RUST_LOG`: the level filter\n- `RUST_LOG_STYLE`: whether or not to print styles with records.\n\nThese sources can be configured using the builder methods on `Env`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:80","a:2:41633:3117-0:336:2320","a:2:31974:236-0:336:2320","a:2:41632:3118-0:336:2320","a:2:32031:3181-0:336:2320","a:2:3133:3512-0:336:2320","a:2:3098:246-0:336:2320","b:2:2885-0:336:2320","b:2:2879-0:336:2320","b:2:2890-0:336:2320","b:2:2605-0:336:2320","b:2:2875-0:336:2320","b:2:2602-0:336:2320","b:2:3714-0:336:2320","0:340","0:103","0:99"]}}},"b:2:2602-0:156:2619":{"id":"b:2:2602-0:156:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2604:2259"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:247:142":{"id":"0:247:142","crate_id":0,"name":"Formatter","span":{"filename":"src/fmt/mod.rs","begin":[130,0],"end":[133,1]},"visibility":"public","docs":"A formatter to write logs into.\n\n`Formatter` implements the standard [`Write`] trait for writing log records.\nIt also supports terminal styling using ANSI escape codes.\n\n# Examples\n\nUse the [`writeln`] macro to format a log record.\nAn instance of a `Formatter` is passed to an `env_logger` format as `buf`:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}: {}\", record.level(), record.args()));\n```\n\n[`Write`]: std::io::Write\n[`writeln`]: std::writeln","links":{"std::io::Write":"1:3590:2657","std::writeln":"2:16:2946"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:150","0:255","a:2:41633:3117-0:247:142","a:2:31974:236-0:247:142","a:2:41632:3118-0:247:142","a:2:32031:3181-0:247:142","a:2:3133:3512-0:247:142","a:2:3098:246-0:247:142","b:2:2885-0:247:142","b:2:2879-0:247:142","b:2:2890-0:247:142","b:2:2605-0:247:142","b:2:2875-0:247:142","b:2:2602-0:247:142","b:2:3714-0:247:142","0:260","0:257"]}}},"a:2:41633:3117-0:247:142":{"id":"a:2:41633:3117-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:3117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:31974:236-0:156:2619":{"id":"a:2:31974:236-0:156:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:729:2970":{"id":"5:729:2970","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:65:2317":{"id":"0:65:2317","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[583,4],"end":[588,5]},"visibility":"public","docs":"Creates the logger from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nCreate a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_env(\"MY_LOG\");\n```\n\nCreate a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Logger, Env};\n\nlet env = Env::new().filter_or(\"MY_LOG\", \"info\").write_style_or(\"MY_LOG_STYLE\", \"always\");\n\nlet logger = Logger::from_env(env);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2885-0:336:2320":{"id":"b:2:2885-0:336:2320","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[623,0],"end":[692,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Log","id":"20:120:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:72:2504","0:73:2145","0:77:2514"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[694,0],"end":[700,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5623:29840":{"id":"5:5623:29840","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13240:29789"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403:2394":{"id":"0:403:2394","crate_id":0,"name":"Micros","span":{"filename":"src/fmt/mod.rs","begin":[98,4],"end":[98,10]},"visibility":"default","docs":"Microsecond precision (6 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13130:28544":{"id":"2:13130:28544","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13207:35557":{"id":"2:13207:35557","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323-0:3:2138":{"id":"0:323-0:3:2138","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[275,0],"end":[275,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::logger","name":"logger","id":"0:3:2138","glob":true}}},"b:2:2890-0:398:2139":{"id":"b:2:2890-0:398:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:82:1161":{"id":"0:82:1161","crate_id":0,"name":"new","span":{"filename":"src/logger.rs","begin":[720,4],"end":[722,5]},"visibility":"public","docs":"Get a default set of environment variables.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41632:3118-0:365:2140":{"id":"a:2:41632:3118-0:365:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:3118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:365:2140":{"id":"0:365:2140","crate_id":0,"name":"WriteStyle","span":{"filename":"src/fmt/writer/mod.rs","begin":[13,0],"end":[21,1]},"visibility":"public","docs":"Whether or not to print styles to the target.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:385:2777","0:366:2779","0:368:2645"],"impls":["a:2:41633:3117-0:365:2140","a:2:31974:236-0:365:2140","a:2:41632:3118-0:365:2140","a:2:32031:3181-0:365:2140","a:2:3133:3512-0:365:2140","a:2:3098:246-0:365:2140","b:2:2885-0:365:2140","b:2:2879-0:365:2140","b:2:2890-0:365:2140","b:2:2605-0:365:2140","b:2:2875-0:365:2140","b:2:2602-0:365:2140","b:2:3714-0:365:2140","b:5:727-0:365:2140","0:372","0:380","0:373","0:222","0:220","0:377","0:375","0:370","0:383","0:381"]}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[10,0],"end":[70,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::fmt::Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:2385","0:152:2695","0:153:2696","0:154:2697","0:155:2698"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3133:3512-0:247:142":{"id":"a:2:3133:3512-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:3512","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2875-0:365:2140":{"id":"b:2:2875-0:365:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2878:2334"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2604:2259":{"id":"2:2604:2259","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399:2388":{"id":"0:399:2388","crate_id":0,"name":"Seconds","span":{"filename":"src/fmt/mod.rs","begin":[94,4],"end":[94,11]},"visibility":"default","docs":"Full second precision (0 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:3133:3512-0:398:2139":{"id":"a:2:3133:3512-0:398:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:3512","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2885-0:60:2469":{"id":"b:2:2885-0:60:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13122:2717":{"id":"2:13122:2717","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12352:2716"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13136:28569":{"id":"2:13136:28569","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13138:28573","str::split_at_mut":"2:13137:28570"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31974:236-0:324:2289":{"id":"a:2:31974:236-0:324:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13137:28570":{"id":"2:13137:28570","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13136:28569","str::split_at_mut_checked":"2:13139:28574"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13225:35563":{"id":"2:13225:35563","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:4797"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:15529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3098:246-0:324:2289":{"id":"a:2:3098:246-0:324:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:31974:236-0:398:2139":{"id":"a:2:31974:236-0:398:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13117:35545":{"id":"2:13117:35545","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2885-0:156:2619":{"id":"b:2:2885-0:156:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:371:462":{"id":"0:371:462","crate_id":0,"name":"clone","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401:2391":{"id":"0:401:2391","crate_id":0,"name":"Millis","span":{"filename":"src/fmt/mod.rs","begin":[96,4],"end":[96,10]},"visibility":"default","docs":"Millisecond precision (3 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[157,0],"end":[178,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:256:2643"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13209:35558":{"id":"2:13209:35558","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13149:28586":{"id":"2:13149:28586","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:4797"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2602-0:398:2139":{"id":"b:2:2602-0:398:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2604:2259"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:124:2321":{"id":"0:124:2321","crate_id":0,"name":"builder","span":{"filename":"src/logger.rs","begin":[956,0],"end":[958,1]},"visibility":"public","docs":"Create a new builder with the default environment variables.\n\nThe builder can be configured before being initialized.\nThis is a convenient way of calling [`Builder::from_default_env`].\n\n[`Builder::from_default_env`]: struct.Builder.html#method.from_default_env","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:398:2139":{"id":"0:398:2139","crate_id":0,"name":"TimestampPrecision","span":{"filename":"src/fmt/mod.rs","begin":[92,0],"end":[101,1]},"visibility":"public","docs":"Formatting precision of timestamps.\n\nSeconds give precision of full seconds, milliseconds give thousands of a\nsecond (3 decimal digits), microseconds are millionth of a second (6 decimal\ndigits) and nanoseconds are billionth of a second (9 decimal digits).","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:399:2388","0:401:2391","0:403:2394","0:405:2397"],"impls":["a:2:41633:3117-0:398:2139","a:2:31974:236-0:398:2139","a:2:41632:3118-0:398:2139","a:2:32031:3181-0:398:2139","a:2:3133:3512-0:398:2139","a:2:3098:246-0:398:2139","b:2:2885-0:398:2139","b:2:2879-0:398:2139","b:2:2890-0:398:2139","b:2:2605-0:398:2139","b:2:2875-0:398:2139","b:2:2602-0:398:2139","b:2:3714-0:398:2139","b:5:727-0:398:2139","0:410","0:408","0:245","0:407"]}}},"0:322-0:365:2140":{"id":"0:322-0:365:2140","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[274,48],"end":[274,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::WriteStyle","name":"WriteStyle","id":"0:365:2140","glob":false}}},"2:13166:2707":{"id":"2:13166:2707","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12804:4797","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::split_whitespace":"2:13144:33383","str::rsplit":"2:13172:28578"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43420:3072","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2888:136":{"id":"2:2888:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:411:787":{"id":"0:411:787","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[91,22],"end":[91,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41633:3117-0:336:2320":{"id":"a:2:41633:3117-0:336:2320","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:3117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2890-0:324:2289":{"id":"b:2:2890-0:324:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:32:2345":{"id":"0:32:2345","crate_id":0,"name":"from_default_env","span":{"filename":"src/logger.rs","begin":[184,4],"end":[186,5]},"visibility":"public","docs":"Initializes the log builder from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger using the default environment variables:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41632:3118-0:336:2320":{"id":"a:2:41632:3118-0:336:2320","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:3118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[190,0],"end":[198,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:261:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:155:2698":{"id":"0:155:2698","crate_id":0,"name":"timestamp_nanos","span":{"filename":"src/fmt/humantime.rs","begin":[64,4],"end":[69,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nnanosecond precision.","links":{"`Timestamp`":"0:156:2619"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[712,9],"end":[712,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:342:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:116:2455":{"id":"0:116:2455","crate_id":0,"name":"try_init","span":{"filename":"src/logger.rs","begin":[865,0],"end":[867,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"log::SetLoggerError","id":"20:358:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[180,0],"end":[188,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_vectored","write_all_vectored","write_all","by_ref","is_write_vectored","write_fmt"],"trait":{"name":"Write","id":"1:3590:2657","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:258:2374","0:259:2514"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2602-0:324:2289":{"id":"b:2:2602-0:324:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2604:2259"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2605-0:336:2320":{"id":"b:2:2605-0:336:2320","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2607:2639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:358:2803":{"id":"0:358:2803","crate_id":0,"name":"Pipe","span":{"filename":"src/fmt/writer/target.rs","begin":[11,4],"end":[11,50]},"visibility":"default","docs":"Logs will be sent to a custom pipe.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:360:1950"]},"discriminant":null}}},"a:2:32031:3181-0:324:2289":{"id":"a:2:32031:3181-0:324:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:3181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,16],"end":[12,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3093:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13113":{"id":"2:13113","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13114:981","2:13115:3559","2:13116:35544","2:13117:35545","2:13119:35546","2:13122:2717","2:13123:35547","2:13124:334","2:13125:28546","2:13126:2531","2:13128:28543","2:13130:28544","2:13132:28545","2:13134:35548","2:13135:35549","2:13136:28569","2:13137:28570","2:13138:28573","2:13139:28574","2:13141:6968","2:13142:7118","2:13143:3928","2:13144:33383","2:13145:33384","2:13146:3920","2:13147:35550","2:13148:33385","2:13149:28586","2:13152:28587","2:13155:28588","2:13158:3597","2:13162:3558","2:13166:2707","2:13169:28576","2:13172:28578","2:13175:35551","2:13178:35552","2:13181:28580","2:13184:28582","2:13187:28584","2:13190:28585","2:13193:2502","2:13196:35553","2:13199:35554","2:13202:35555","2:13205:35556","2:13207:35557","2:13209:35558","2:13211:35559","2:13212:35560","2:13213:35561","2:13216:35562","2:13219:27802","2:13222:28589","2:13225:35563","2:13228:35564","2:13231:35565","2:13234:2430","2:13236:29784","2:13237:29785","2:13238:29787","2:13239:29788","2:13240:29789","2:13241:29791","2:13242:29792","2:13243:29793","2:13244:35566","2:13246:10164","2:13247:27251"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41632:3118-0:355:248":{"id":"a:2:41632:3118-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:3118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:69:2290":{"id":"0:69:2290","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[613,4],"end":[615,5]},"visibility":"public","docs":"Returns the maximum `LevelFilter` that this env logger instance is\nconfigured to output.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LevelFilter","id":"20:223:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13181:28580":{"id":"2:13181:28580","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:4797","str::rsplitn":"2:13184:28582"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43524:5112","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13242:29792":{"id":"2:13242:29792","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:41549"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:727-0:398:2139":{"id":"b:5:727-0:398:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:2970","5:730:2539","5:731:3617"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:22:2271":{"id":"0:22:2271","crate_id":0,"name":"DEFAULT_FILTER_ENV","span":{"filename":"src/logger.rs","begin":[10,0],"end":[10,48]},"visibility":"public","docs":"The default name for the environment variable to read filters from.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"expr":"\"RUST_LOG\"","value":null,"is_literal":true}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,33],"end":[12,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10455:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:378:857"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2605-0:60:2469":{"id":"b:2:2605-0:60:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2875-0:324:2289":{"id":"b:2:2875-0:324:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2878:2334"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2890-0:355:248":{"id":"b:2:2890-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13126:2531":{"id":"2:13126:2531","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32031:3181-0:156:2619":{"id":"a:2:32031:3181-0:156:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:3181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13190:28585":{"id":"2:13190:28585","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:15529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31974:236-0:336:2320":{"id":"a:2:31974:236-0:336:2320","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:43:2390":{"id":"0:43:2390","crate_id":0,"name":"format_timestamp_millis","span":{"filename":"src/logger.rs","begin":[296,4],"end":[298,5]},"visibility":"public","docs":"Configures the timestamp to use millisecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13241:29791":{"id":"2:13241:29791","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:41549"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:382:685":{"id":"0:382:685","crate_id":0,"name":"eq","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:36260":{"id":"5:5604:36260","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2368","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:295:2368","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:371:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3716:1797":{"id":"2:3716:1797","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39273:7021","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41633:3117-0:156:2619":{"id":"a:2:41633:3117-0:156:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:3117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13132:28545":{"id":"2:13132:28545","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13246:10164":{"id":"2:13246:10164","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4894:10164"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43728:6902","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3098:246-0:336:2320":{"id":"a:2:3098:246-0:336:2320","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5856:1757":{"id":"5:5856:1757","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:2373":{"id":"0:37:2373","crate_id":0,"name":"format_level","span":{"filename":"src/logger.rs","begin":[260,4],"end":[263,5]},"visibility":"public","docs":"Whether or not to write the level in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3133:3512-0:60:2469":{"id":"a:2:3133:3512-0:60:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:3512","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32031:3181-0:365:2140":{"id":"a:2:32031:3181-0:365:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:3181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:240-0:355:248":{"id":"0:240-0:355:248","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[81,0],"end":[81,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::writer::Target","name":"Target","id":"0:355:248","glob":false}}},"2:13155:28588":{"id":"2:13155:28588","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:4797"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:15529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2455":{"id":"0:55:2455","crate_id":0,"name":"try_init","span":{"filename":"src/logger.rs","begin":[475,4],"end":[486,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"SetLoggerError","id":"20:358:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13146:3920":{"id":"2:13146:3920","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43674:3068","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13216:35562":{"id":"2:13216:35562","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:4797"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2879-0:324:2289":{"id":"b:2:2879-0:324:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2605-0:365:2140":{"id":"b:2:2605-0:365:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13172:28578":{"id":"2:13172:28578","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12804:4797","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::split":"2:13166:2707"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43438:6952","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:15529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41632:3118-0:156:2619":{"id":"a:2:41632:3118-0:156:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:3118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13212:35560":{"id":"2:13212:35560","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32031:3181-0:336:2320":{"id":"a:2:32031:3181-0:336:2320","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:3181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2885-0:355:248":{"id":"b:2:2885-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3714-0:398:2139":{"id":"b:2:3714-0:398:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13142:7118":{"id":"2:13142:7118","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43396:7100","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5605:2663":{"id":"5:5605:2663","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:787":{"id":"0:169:787","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/humantime.rs","begin":[101,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41633:3117-0:398:2139":{"id":"a:2:41633:3117-0:398:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:3117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:153:2696":{"id":"0:153:2696","crate_id":0,"name":"timestamp_millis","span":{"filename":"src/fmt/humantime.rs","begin":[46,4],"end":[51,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmillisecond precision.","links":{"`Timestamp`":"0:156:2619"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5619:36263":{"id":"5:5619:36263","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:2697":{"id":"0:154:2697","crate_id":0,"name":"timestamp_micros","span":{"filename":"src/fmt/humantime.rs","begin":[55,4],"end":[60,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmicrosecond precision.","links":{"`Timestamp`":"0:156:2619"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5608:36261":{"id":"5:5608:36261","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1161":{"id":"0:25:1161","crate_id":0,"name":"new","span":{"filename":"src/logger.rs","begin":[72,4],"end":[74,5]},"visibility":"public","docs":"Initializes the log builder with defaults.\n\n**NOTE:** This method won't read from any environment variables.\nUse the [`filter`] and [`write_style`] methods to configure the builder\nor use [`from_env`] or [`from_default_env`] instead.\n\n# Examples\n\nCreate a new builder and configure filters and style:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder\n    .filter(None, LevelFilter::Info)\n    .write_style(WriteStyle::Always)\n    .init();\n```\n\n[`filter`]: #method.filter\n[`write_style`]: #method.write_style\n[`from_env`]: #method.from_env\n[`from_default_env`]: #method.from_default_env","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:368:2645":{"id":"0:368:2645","crate_id":0,"name":"Never","span":{"filename":"src/fmt/writer/mod.rs","begin":[20,4],"end":[20,9]},"visibility":"default","docs":"Never print styles.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2885-0:365:2140":{"id":"b:2:2885-0:365:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2885-0:247:142":{"id":"b:2:2885-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:29:2322":{"id":"0:29:2322","crate_id":0,"name":"parse_env","span":{"filename":"src/logger.rs","begin":[149,4],"end":[164,5]},"visibility":"public","docs":"Applies the configuration from the environment.\n\nThis function allows a builder to be configured with default parameters,\nto be then overridden by the environment.\n\n# Examples\n\nInitialise a logger with filter level `Off`, then override the log\nfilter from an environment variable called `MY_LOG`:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger with filter level `Off`, then use the `MY_LOG`\nvariable to override filtering and `MY_LOG_STYLE` to override  whether\nor not to write styles:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["env",{"generic":"E"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2602-0:336:2320":{"id":"b:2:2602-0:336:2320","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2604:2259"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2141":{"id":"0:0:2141","crate_id":0,"name":"env_logger","span":{"filename":"src/lib.rs","begin":[7,0],"end":[275,24]},"visibility":"public","docs":"A simple logger that can be configured via environment variables, for use\nwith the logging facade exposed by the [`log` crate][log-crate-url].\n\nDespite having \"env\" in its name, **`env_logger`** can also be configured by\nother means besides environment variables. See [the examples][gh-repo-examples]\nin the source repository for more approaches.\n\nBy default, `env_logger` writes logs to `stderr`, but can be configured to\ninstead write them to `stdout`.\n\n## Example\n\n```\nuse log::{debug, error, log_enabled, info, Level};\n\nenv_logger::init();\n\ndebug!(\"this is a debug {}\", \"message\");\nerror!(\"this is printed by default\");\n\nif log_enabled!(Level::Info) {\n    let x = 3 * 4; // expensive computation\n    info!(\"the answer was: {}\", x);\n}\n```\n\nAssumes the binary is `main`:\n\n```{.bash}\n$ RUST_LOG=error ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n```\n\n```{.bash}\n$ RUST_LOG=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\n```{.bash}\n$ RUST_LOG=debug ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nYou can also set the log level on a per module basis:\n\n```{.bash}\n$ RUST_LOG=main=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nAnd enable all logging:\n\n```{.bash}\n$ RUST_LOG=main ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nIf the binary name contains hyphens, you will need to replace\nthem with underscores:\n\n```{.bash}\n$ RUST_LOG=my_app ./my-app\n[2017-11-09T02:12:24Z DEBUG my_app] this is a debug message\n[2017-11-09T02:12:24Z ERROR my_app] this is printed by default\n[2017-11-09T02:12:24Z INFO my_app] the answer was: 12\n```\n\nThis is because Rust modules and crates cannot contain hyphens\nin their name, although `cargo` continues to accept them.\n\nSee the documentation for the [`log` crate][log-crate-url] for more\ninformation about its API.\n\n## Enabling logging\n\n**By default all logging is disabled except for the `error` level**\n\nThe **`RUST_LOG`** environment variable controls logging with the syntax:\n```text\nRUST_LOG=[target][=][level][,...]\n```\nOr in other words, its a comma-separated list of directives.\nDirectives can filter by **target**, by **level**, or both (using `=`).\n\nFor example,\n```text\nRUST_LOG=data=debug,hardware=debug\n```\n\n**target** is typically the path of the module the message\nin question originated from, though it can be overridden.\nThe path is rooted in the name of the crate it was compiled for, so if\nyour program is in a file called, for example, `hello.rs`, the path would\nsimply be `hello`.\n\nFurthermore, the log can be filtered using prefix-search based on the\nspecified log target.\n\nFor example, `RUST_LOG=example` would match the following targets:\n- `example`\n- `example::test`\n- `example::test::module::submodule`\n- `examples::and_more_examples`\n\nWhen providing the crate name or a module path, explicitly specifying the\nlog level is optional. If omitted, all logging for the item will be\nenabled.\n\n**level** is the maximum [`log::Level`][level-enum] to be shown and includes:\n- `error`\n- `warn`\n- `info`\n- `debug`\n- `trace`\n- `off` (pseudo level to disable all logging for the target)\n\nLogging level names are case-insensitive; e.g.,\n`debug`, `DEBUG`, and `dEbuG` all represent the same logging level. For\nconsistency, our convention is to use the lower case names. Where our docs\ndo use other forms, they do so in the context of specific examples, so you\nwon't be surprised if you see similar usage in the wild.\n\nSome examples of valid values of `RUST_LOG` are:\n\n- `RUST_LOG=hello` turns on all logging for the `hello` module\n- `RUST_LOG=trace` turns on all logging for the application, regardless of its name\n- `RUST_LOG=TRACE` turns on all logging for the application, regardless of its name (same as previous)\n- `RUST_LOG=info` turns on all info logging\n- `RUST_LOG=INFO` turns on all info logging (same as previous)\n- `RUST_LOG=hello=debug` turns on debug logging for `hello`\n- `RUST_LOG=hello=DEBUG` turns on debug logging for `hello` (same as previous)\n- `RUST_LOG=hello,std::option` turns on `hello`, and std's option logging\n- `RUST_LOG=error,hello=warn` turn on global error logging and also warn for `hello`\n- `RUST_LOG=error,hello=off`  turn on global error logging, but turn off logging for `hello`\n- `RUST_LOG=off` turns off all logging for the application\n- `RUST_LOG=OFF` turns off all logging for the application (same as previous)\n\n## Filtering results\n\nA `RUST_LOG` directive may include a regex filter. The syntax is to append `/`\nfollowed by a regex. Each message is checked against the regex, and is only\nlogged if it matches. Note that the matching is done after formatting the\nlog string but before adding any logging meta-data. There is a single filter\nfor all modules.\n\nSome examples:\n\n* `hello/foo` turns on all logging for the 'hello' module where the log\n  message includes 'foo'.\n* `info/f.o` turns on all info logging where the log message includes 'foo',\n  'f1o', 'fao', etc.\n* `hello=debug/foo*foo` turns on debug logging for 'hello' where the log\n  message includes 'foofoo' or 'fofoo' or 'fooooooofoo', etc.\n* `error,hello=warn/[0-9]scopes` turn on global error logging and also\n  warn for hello. In both cases the log message must include a single digit\n  number followed by 'scopes'.\n\n## Capturing logs in tests\n\nRecords logged during `cargo test` will not be captured by the test harness by default.\nThe [`Builder::is_test`] method can be used in unit tests to ensure logs will be captured:\n\n```\n#[cfg(test)]\nmod tests {\n    use log::info;\n\n    fn init() {\n        let _ = env_logger::builder().is_test(true).try_init();\n    }\n\n    #[test]\n    fn it_works() {\n        init();\n\n        info!(\"This record will be captured by `cargo test`\");\n\n        assert_eq!(2, 1 + 1);\n    }\n}\n```\n\nEnabling test capturing comes at the expense of color and other style support\nand may have performance implications.\n\n## Disabling colors\n\nColors and other styles can be configured with the `RUST_LOG_STYLE`\nenvironment variable. It accepts the following values:\n\n* `auto` (default) will attempt to print style characters, but don't force the issue.\nIf the console isn't available on Windows, or if TERM=dumb, for example, then don't print colors.\n* `always` will always print style characters even if they aren't supported by the terminal.\nThis includes emitting ANSI colors on Windows if the console API is unavailable.\n* `never` will never print style characters.\n\n## Tweaking the default format\n\nParts of the default format can be excluded from the log output using the [`Builder`].\nThe following example excludes the timestamp from the log output:\n\n```\nenv_logger::builder()\n    .format_timestamp(None)\n    .init();\n```\n\n### Stability of the default format\n\nThe default format won't optimise for long-term stability, and explicitly makes no\nguarantees about the stability of its output across major, minor or patch version\nbumps during `0.x`.\n\nIf you want to capture or interpret the output of `env_logger` programmatically\nthen you should use a custom format.\n\n### Using a custom format\n\nCustom formats can be provided as closures to the [`Builder`].\nThese closures take a [`Formatter`][crate::fmt::Formatter] and `log::Record` as arguments:\n\n```\nuse std::io::Write;\n\nenv_logger::builder()\n    .format(|buf, record| {\n        writeln!(buf, \"{}: {}\", record.level(), record.args())\n    })\n    .init();\n```\n\nSee the [`fmt`] module for more details about custom formats.\n\n## Specifying defaults for environment variables\n\n`env_logger` can read configuration from environment variables.\nIf these variables aren't present, the default value to use can be tweaked with the [`Env`] type.\nThe following example defaults to log `warn` and above if the `RUST_LOG` environment variable\nisn't set:\n\n```\nuse env_logger::Env;\n\nenv_logger::Builder::from_env(Env::default().default_filter_or(\"warn\")).init();\n```\n\n[gh-repo-examples]: https://github.com/rust-cli/env_logger/tree/main/examples\n[level-enum]: https://docs.rs/log/latest/log/enum.Level.html\n[log-crate-url]: https://docs.rs/log","links":{"`Builder`":"0:324:2289","`Env`":"0:336:2320","`Builder::is_test`":"0:54:2448","`fmt`":"0:128:787","crate::fmt::Formatter":"0:247:142"},"attrs":["#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/static/images/favicon.ico\")]","#![deny(missing_debug_implementations, missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:128:787","0:320-0:355:248","0:321-0:398:2139","0:322-0:365:2140","0:323-0:3:2138"],"is_stripped":false}}},"2:13125:28546":{"id":"2:13125:28546","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3098:246-0:247:142":{"id":"a:2:3098:246-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:378:857":{"id":"0:378:857","crate_id":0,"name":"hash","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,33],"end":[12,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10463:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,22],"end":[12,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13114:981":{"id":"2:13114:981","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12325:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2879-0:336:2320":{"id":"b:2:2879-0:336:2320","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:105:60":{"id":"0:105:60","crate_id":0,"name":"default","span":{"filename":"src/logger.rs","begin":[813,4],"end":[818,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13184:28582":{"id":"2:13184:28582","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12325:458","str::splitn":"2:13181:28580","self::pattern":"2:12804:4797"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43542:6954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:15529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2317":{"id":"0:26:2317","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[104,4],"end":[111,5]},"visibility":"public","docs":"Initializes the log builder from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nInitialise a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::from_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261:787":{"id":"0:261:787","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[191,4],"end":[197,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13115:3559":{"id":"2:13115:3559","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13199:35554":{"id":"2:13199:35554","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12804:4797","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::rmatch_indices":"2:13202:35555"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43570:7104","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:2416":{"id":"0:47:2416","crate_id":0,"name":"filter_module","span":{"filename":"src/logger.rs","begin":[349,4],"end":[352,5]},"visibility":"public","docs":"Adds a directive to the filter for a specific module.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_module(\"path::to::module\", LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["module",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:223:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:258:2374":{"id":"0:258:2374","crate_id":0,"name":"write","span":{"filename":"src/fmt/mod.rs","begin":[181,4],"end":[183,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3022:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:60:2469":{"id":"b:2:2890-0:60:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:57:2456":{"id":"0:57:2456","crate_id":0,"name":"build","span":{"filename":"src/logger.rs","begin":[506,4],"end":[515,5]},"visibility":"public","docs":"Build an env logger.\n\nThe returned logger implements the `Log` trait and can be installed manually\nor nested within another logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:731:3617":{"id":"5:731:3617","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:60":{"id":"0:246:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/mod.rs","begin":[105,4],"end":[107,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13234:2430":{"id":"2:13234:2430","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12765:135","`FromStr`":"2:12764:3018"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12764:3018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12764:3018","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2881:817":{"id":"2:2881:817","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360:1950":{"id":"0:360:1950","crate_id":0,"name":"0","span":{"filename":"src/fmt/writer/target.rs","begin":[11,9],"end":[11,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Box","id":"5:295:2368","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"std::io::Write","id":"1:3590:2657","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}}}},"0:409:462":{"id":"0:409:462","crate_id":0,"name":"clone","span":{"filename":"src/fmt/mod.rs","begin":[91,15],"end":[91,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31974:236-0:60:2469":{"id":"a:2:31974:236-0:60:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:73:2145":{"id":"0:73:2145","crate_id":0,"name":"log","span":{"filename":"src/logger.rs","begin":[628,4],"end":[689,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["record",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:287:2265","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41633:3117-0:60:2469":{"id":"a:2:41633:3117-0:60:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:3117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13147:35550":{"id":"2:13147:35550","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43684:7107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2652:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:382:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3714-0:156:2619":{"id":"b:2:3714-0:156:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[83,0],"end":[98,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:223:817":{"id":"0:223:817","crate_id":0,"name":"from","span":{"filename":"src/fmt/writer/mod.rs","begin":[37,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["choice",{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13123:35547":{"id":"2:13123:35547","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:405:2397":{"id":"0:405:2397","crate_id":0,"name":"Nanos","span":{"filename":"src/fmt/mod.rs","begin":[100,4],"end":[100,9]},"visibility":"default","docs":"Nanosecond precision (9 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:117:2464":{"id":"0:117:2464","crate_id":0,"name":"init","span":{"filename":"src/logger.rs","begin":[878,0],"end":[880,1]},"visibility":"public","docs":"Initializes the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3098:246-0:365:2140":{"id":"a:2:3098:246-0:365:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:48:2421":{"id":"0:48:2421","crate_id":0,"name":"filter_level","span":{"filename":"src/logger.rs","begin":[368,4],"end":[371,5]},"visibility":"public","docs":"Adds a directive to the filter for all modules.\n\n# Examples\n\nOnly include messages for info and above for logs globally:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:223:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2504":{"id":"0:72:2504","crate_id":0,"name":"enabled","span":{"filename":"src/logger.rs","begin":[624,4],"end":[626,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:306:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2875-0:156:2619":{"id":"b:2:2875-0:156:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2878:2334"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:152:2695":{"id":"0:152:2695","crate_id":0,"name":"timestamp_seconds","span":{"filename":"src/fmt/humantime.rs","begin":[37,4],"end":[42,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with full\nsecond precision.","links":{"`Timestamp`":"0:156:2619"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3133:3512-0:156:2619":{"id":"a:2:3133:3512-0:156:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:3512","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13116:35544":{"id":"2:13116:35544","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:362:60":{"id":"0:362:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/writer/target.rs","begin":[3,9],"end":[3,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13211:35559":{"id":"2:13211:35559","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[24,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ColorChoice","id":"31:21:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:221:817"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3714-0:60:2469":{"id":"b:2:3714-0:60:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:342:787":{"id":"0:342:787","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[712,9],"end":[712,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:241-0:365:2140":{"id":"0:241-0:365:2140","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[82,0],"end":[82,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::writer::WriteStyle","name":"WriteStyle","id":"0:365:2140","glob":false}}},"2:13213:35561":{"id":"2:13213:35561","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:4797"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12830:15528","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3133:3512-0:336:2320":{"id":"a:2:3133:3512-0:336:2320","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:3512","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13239:29788":{"id":"2:13239:29788","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324:2289":{"id":"0:324:2289","crate_id":0,"name":"Builder","span":{"filename":"src/logger.rs","begin":[38,0],"end":[43,1]},"visibility":"public","docs":"`Builder` acts as builder for initializing a `Logger`.\n\nIt can be used to customize the log format, change the environment variable used\nto provide the logging directives and also set the default log level filter.\n\n# Examples\n\n```\n# use std::io::Write;\nuse env_logger::Builder;\nuse log::{LevelFilter, error, info};\n\nlet mut builder = Builder::from_default_env();\n\nbuilder\n    .format(|buf, record| writeln!(buf, \"{} - {}\", record.level(), record.args()))\n    .filter(None, LevelFilter::Info)\n    .init();\n\nerror!(\"error message\");\ninfo!(\"info message\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:24","a:2:41633:3117-0:324:2289","a:2:31974:236-0:324:2289","a:2:41632:3118-0:324:2289","a:2:32031:3181-0:324:2289","a:2:3133:3512-0:324:2289","a:2:3098:246-0:324:2289","b:2:2885-0:324:2289","b:2:2879-0:324:2289","b:2:2890-0:324:2289","b:2:2605-0:324:2289","b:2:2875-0:324:2289","b:2:2602-0:324:2289","b:2:3714-0:324:2289","0:329","0:58"]}}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[91,15],"end":[91,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2618:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:409:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13236:29784":{"id":"2:13236:29784","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13243:29793":{"id":"2:13243:29793","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:41549"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23:2274":{"id":"0:23:2274","crate_id":0,"name":"DEFAULT_WRITE_STYLE_ENV","span":{"filename":"src/logger.rs","begin":[13,0],"end":[13,59]},"visibility":"public","docs":"The default name for the environment variable to read style preferences from.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"expr":"\"RUST_LOG_STYLE\"","value":null,"is_literal":true}}},"b:2:2875-0:336:2320":{"id":"b:2:2875-0:336:2320","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2878:2334"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3133:3512-0:324:2289":{"id":"a:2:3133:3512-0:324:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:3512","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:330:60":{"id":"0:330:60","crate_id":0,"name":"default","span":{"filename":"src/logger.rs","begin":[37,9],"end":[37,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:2351":{"id":"0:33:2351","crate_id":0,"name":"parse_default_env","span":{"filename":"src/logger.rs","begin":[210,4],"end":[212,5]},"visibility":"public","docs":"Applies the configuration from the environment using default variable names.\n\nThis method is a convenient way to call `parse_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger with filter level `Off`, then configure it using the\ndefault environment variables:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:2526":{"id":"0:85:2526","crate_id":0,"name":"filter_or","span":{"filename":"src/logger.rs","begin":[737,4],"end":[745,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["filter_env",{"generic":"E"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238-22:0:2143":{"id":"0:238-22:0:2143","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[75,0],"end":[75,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"import":{"source":"anstyle","name":"style","id":"22:0:2143","glob":false}}},"a:2:32031:3181-0:247:142":{"id":"a:2:32031:3181-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:3181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:320-0:355:248":{"id":"0:320-0:355:248","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[274,20],"end":[274,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::Target","name":"Target","id":"0:355:248","glob":false}}},"b:2:2879-0:355:248":{"id":"b:2:2879-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31974:236-0:247:142":{"id":"a:2:31974:236-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2890-0:365:2140":{"id":"b:2:2890-0:365:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[556,0],"end":[621,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:2317","0:68:2345","0:69:2290","0:70:2502"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13228:35564":{"id":"2:13228:35564","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:4797"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2443":{"id":"0:52:2443","crate_id":0,"name":"write_style","span":{"filename":"src/logger.rs","begin":[443,4],"end":[446,5]},"visibility":"public","docs":"Sets whether or not styles will be written.\n\nThis can be useful in environments that don't support control characters\nfor setting colors.\n\n# Examples\n\nNever attempt to write styles:\n\n```\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder.write_style(WriteStyle::Never);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write_style",{"resolved_path":{"name":"fmt::WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13219:27802":{"id":"2:13219:27802","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:4797"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:36262":{"id":"5:5611:36262","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2889:1784":{"id":"2:2889:1784","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3714-0:324:2289":{"id":"b:2:3714-0:324:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:374:787":{"id":"0:374:787","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,22],"end":[12,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/target.rs","begin":[3,9],"end":[3,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:362:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13158:3597":{"id":"2:13158:3597","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41540:190","prim@char":"1:12325:458","self::pattern":"2:12804:4797"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1724":{"id":"0:51:1724","crate_id":0,"name":"target","span":{"filename":"src/logger.rs","begin":[422,4],"end":[425,5]},"visibility":"public","docs":"Sets the target for the log output.\n\nEnv logger can log to either stdout, stderr or a custom pipe. The default is stderr.\n\nThe custom pipe can be used to send the log messages to a custom sink (for example a file).\nDo note that direct writes to a file can become a bottleneck due to IO operation times.\n\n# Examples\n\nWrite log message to `stdout`:\n\n```\nuse env_logger::{Builder, Target};\n\nlet mut builder = Builder::new();\n\nbuilder.target(Target::Stdout);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"resolved_path":{"name":"fmt::Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,29],"end":[12,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2657:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13244:35566":{"id":"2:13244:35566","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4893:35566"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43719:7031","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41632:3118-0:398:2139":{"id":"a:2:41632:3118-0:398:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:3118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13169:28576":{"id":"2:13169:28576","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:4797"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12620:6949","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2602-0:247:142":{"id":"b:2:2602-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2604:2259"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13193:2502":{"id":"2:13193:2502","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12804:4797","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::rmatches":"2:13196:35553"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43624:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2543":{"id":"0:118:2543","crate_id":0,"name":"try_init_from_env","span":{"filename":"src/logger.rs","begin":[910,0],"end":[917,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger from the given\nenvironment variables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\n# fn run() -> Result<(), Box<dyn ::std::error::Error>> {\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::try_init_from_env(env)?;\n\nOk(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"log::SetLoggerError","id":"20:358:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:355:248":{"id":"0:355:248","crate_id":0,"name":"Target","span":{"filename":"src/fmt/writer/target.rs","begin":[4,0],"end":[12,1]},"visibility":"public","docs":"Log target, either `stdout`, `stderr` or a custom pipe.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:356:2798","0:363:2801","0:358:2803"],"impls":["a:2:41633:3117-0:355:248","a:2:31974:236-0:355:248","a:2:41632:3118-0:355:248","a:2:32031:3181-0:355:248","a:2:3133:3512-0:355:248","a:2:3098:246-0:355:248","b:2:2885-0:355:248","b:2:2879-0:355:248","b:2:2890-0:355:248","b:2:2605-0:355:248","b:2:2875-0:355:248","b:2:2602-0:355:248","b:2:3714-0:355:248","0:361","0:211"]}}},"b:2:2875-0:398:2139":{"id":"b:2:2875-0:398:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2878:2334"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41632:3118-0:247:142":{"id":"a:2:41632:3118-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:3118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13144:33383":{"id":"2:13144:33383","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13145:33384"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43694:7108","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:247:142":{"id":"b:2:2605-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13247:27251":{"id":"2:13247:27251","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4891:27251"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43737:7030","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356:2798":{"id":"0:356:2798","crate_id":0,"name":"Stdout","span":{"filename":"src/fmt/writer/target.rs","begin":[6,4],"end":[6,10]},"visibility":"default","docs":"Logs will be sent to standard output.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:363:2801":{"id":"0:363:2801","crate_id":0,"name":"Stderr","span":{"filename":"src/fmt/writer/target.rs","begin":[9,4],"end":[9,10]},"visibility":"default","docs":"Logs will be sent to standard error.","links":{},"attrs":["#[default]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:59:787":{"id":"0:59:787","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[519,4],"end":[528,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41632:3118-0:324:2289":{"id":"a:2:41632:3118-0:324:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41632:3118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:31974:236-0:365:2140":{"id":"a:2:31974:236-0:365:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:83:2290":{"id":"0:83:2290","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[725,4],"end":[732,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["filter_env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:2534":{"id":"0:93:2534","crate_id":0,"name":"write_style_or","span":{"filename":"src/logger.rs","begin":[776,4],"end":[784,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["write_style_env",{"generic":"E"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,50],"end":[12,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:384:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5603":{"id":"5:5603","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5604:36260","5:5605:2663","5:5608:36261","5:5611:36262","5:5619:36263","5:5620:36264","5:5621:3092","5:5622:29839","5:5623:29840"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2879-0:156:2619":{"id":"b:2:2879-0:156:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:56:2464":{"id":"0:56:2464","crate_id":0,"name":"init","span":{"filename":"src/logger.rs","begin":[497,4],"end":[500,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[518,0],"end":[529,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:219-0:355:248":{"id":"0:219-0:355:248","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[9,0],"end":[9,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"target::Target","name":"Target","id":"0:355:248","glob":false}}},"0:385:2777":{"id":"0:385:2777","crate_id":0,"name":"Auto","span":{"filename":"src/fmt/writer/mod.rs","begin":[16,4],"end":[16,8]},"visibility":"default","docs":"Try to print styles, but don't force the issue.","links":{},"attrs":["#[default]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:88:2530":{"id":"0:88:2530","crate_id":0,"name":"default_filter_or","span":{"filename":"src/logger.rs","begin":[750,4],"end":[757,5]},"visibility":"public","docs":"Use the default environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3133:3512-0:355:248":{"id":"a:2:3133:3512-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:3512","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2875-0:247:142":{"id":"b:2:2875-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2878:2334"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3098:246-0:355:248":{"id":"a:2:3098:246-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:3:2138":{"id":"0:3:2138","crate_id":0,"name":"logger","span":{"filename":"src/logger.rs","begin":[1,0],"end":[1036,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:2271","0:23:2274","0:324:2289","0:60:2469","0:336:2320","0:116:2455","0:117:2464","0:118:2543","0:121:2558","0:124:2321","0:125:2317"],"is_stripped":true}}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[100,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:169:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13237:29785":{"id":"2:13237:29785","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39459:3508","Self::is_ascii":"2:13236:29784"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39459:3508","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2885-0:324:2289":{"id":"b:2:2885-0:324:2289","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2855:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2888:136","2:2889:1784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5854-0:156:2619":{"id":"b:5:5854-0:156:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10244:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5856:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32031:3181-0:60:2469":{"id":"a:2:32031:3181-0:60:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:3181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:239-0:156:2619":{"id":"0:239-0:156:2619","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[78,0],"end":[78,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"humantime\")]"],"deprecation":null,"inner":{"import":{"source":"self::humantime::Timestamp","name":"Timestamp","id":"0:156:2619","glob":false}}},"0:42:2387":{"id":"0:42:2387","crate_id":0,"name":"format_timestamp_secs","span":{"filename":"src/logger.rs","begin":[291,4],"end":[293,5]},"visibility":"public","docs":"Configures the timestamp to use second precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3714-0:355:248":{"id":"b:2:3714-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:125:2317":{"id":"0:125:2317","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[967,0],"end":[972,1]},"visibility":"public","docs":"Create a builder from the given environment variables.\n\nThe builder can be configured before being initialized.","links":{},"attrs":["#[deprecated(since = \"0.8.0\", note =\n\"Prefer `env_logger::Builder::from_env()` instead.\")]"],"deprecation":{"since":"0.8.0","note":"Prefer `env_logger::Builder::from_env()` instead."},"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:2619":{"id":"0:156:2619","crate_id":0,"name":"Timestamp","span":{"filename":"src/fmt/humantime.rs","begin":[78,0],"end":[81,1]},"visibility":"public","docs":"An [RFC3339] formatted timestamp.\n\nThe timestamp implements [`Display`] and can be written to a [`Formatter`].\n\n[RFC3339]: https://www.ietf.org/rfc/rfc3339.txt\n[`Display`]: std::fmt::Display","links":{"`Formatter`":"0:247:142","std::fmt::Display":"2:10244:128"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:41633:3117-0:156:2619","a:2:31974:236-0:156:2619","a:2:41632:3118-0:156:2619","a:2:32031:3181-0:156:2619","a:2:3133:3512-0:156:2619","a:2:3098:246-0:156:2619","b:2:2885-0:156:2619","b:2:2879-0:156:2619","b:2:2890-0:156:2619","b:2:2605-0:156:2619","b:2:2875-0:156:2619","b:2:2602-0:156:2619","b:2:3714-0:156:2619","b:5:5854-0:156:2619","0:168","0:159"]}}},"b:2:2879-0:365:2140":{"id":"b:2:2879-0:365:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31974:236-0:355:248":{"id":"a:2:31974:236-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2602-0:365:2140":{"id":"b:2:2602-0:365:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2596:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2604:2259"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:221:817":{"id":"0:221:817","crate_id":0,"name":"from","span":{"filename":"src/fmt/writer/mod.rs","begin":[25,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["choice",{"resolved_path":{"name":"anstream::ColorChoice","id":"31:21:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13139:28574":{"id":"2:13139:28574","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13138:28573"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13143:3928":{"id":"2:13143:3928","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43406:3071","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3714-0:336:2320":{"id":"b:2:3714-0:336:2320","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13175:35551":{"id":"2:13175:35551","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12804:4797","str::split":"2:13166:2707","prim@char":"1:12325:458","`DoubleEndedIterator`":"2:8196:129","str::rsplit_terminator":"2:13178:35552"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43470:7102","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[718,0],"end":[801,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:82:1161","0:83:2290","0:85:2526","0:88:2530","0:91:2443","0:93:2534","0:96:2536"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13178:35552":{"id":"2:13178:35552","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12804:4797","str::split":"2:13166:2707","prim@char":"1:12325:458","str::split_terminator":"2:13175:35551"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43488:7103","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:15529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2879-0:398:2139":{"id":"b:2:2879-0:398:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13196:35553":{"id":"2:13196:35553","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12804:4797","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::matches":"2:13193:2502"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43642:7106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:15529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2875-0:60:2469":{"id":"b:2:2875-0:60:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2878:2334"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13205:35556":{"id":"2:13205:35556","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13231:35565":{"id":"2:13231:35565","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:4797"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:15529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3133:3512-0:365:2140":{"id":"a:2:3133:3512-0:365:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3133:3512","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:36:2371":{"id":"0:36:2371","crate_id":0,"name":"default_format","span":{"filename":"src/logger.rs","begin":[254,4],"end":[257,5]},"visibility":"public","docs":"Use the default format.\n\nThis method will clear any custom format set on the builder.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2393":{"id":"0:44:2393","crate_id":0,"name":"format_timestamp_micros","span":{"filename":"src/logger.rs","begin":[301,4],"end":[303,5]},"visibility":"public","docs":"Configures the timestamp to use microsecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2448":{"id":"0:54:2448","crate_id":0,"name":"is_test","span":{"filename":"src/logger.rs","begin":[461,4],"end":[464,5]},"visibility":"public","docs":"Sets whether or not the logger will be used in unit tests.\n\nIf `is_test` is `true` then the logger will allow the testing framework to\ncapture log records rather than printing them to the terminal directly.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["is_test",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3714-0:365:2140":{"id":"b:2:3714-0:365:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2890-0:336:2320":{"id":"b:2:2890-0:336:2320","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:366:2779":{"id":"0:366:2779","crate_id":0,"name":"Always","span":{"filename":"src/fmt/writer/mod.rs","begin":[18,4],"end":[18,10]},"visibility":"default","docs":"Try very hard to print styles.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13124:334":{"id":"2:13124:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13125:28546","`u8`":"1:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2536":{"id":"0:96:2536","crate_id":0,"name":"default_write_style_or","span":{"filename":"src/logger.rs","begin":[789,4],"end":[796,5]},"visibility":"public","docs":"Use the default environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:787":{"id":"0:212:787","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/writer/target.rs","begin":[15,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10213:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10194:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[37,9],"end":[37,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2927:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:330:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70:2502":{"id":"0:70:2502","crate_id":0,"name":"matches","span":{"filename":"src/logger.rs","begin":[618,4],"end":[620,5]},"visibility":"public","docs":"Checks if this record matches the configured filter.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["record",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:287:2265","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:156:2619":{"id":"b:2:2890-0:156:2619","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2619","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:384:60":{"id":"0:384:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,50],"end":[12,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:256:2643":{"id":"0:256:2643","crate_id":0,"name":"default_level_style","span":{"filename":"src/fmt/mod.rs","begin":[163,4],"end":[177,5]},"visibility":"public","docs":"Get the default [`style::Style`] for the given level.\n\nThe style can be used to print other values besides the level.\n\nSee [`style`] for how to adapt it to the styling crate of your choice","links":{"`style`":"22:0:2143","`style::Style`":"22:405:2644"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"Level","id":"20:194:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"style::Style","id":"22:405:2644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13119:35546":{"id":"2:13119:35546","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13117:35545"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41633:3117-0:365:2140":{"id":"a:2:41633:3117-0:365:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41633:3117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13128:28543":{"id":"2:13128:28543","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13222:28589":{"id":"2:13222:28589","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:4797"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:15529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:2514":{"id":"0:77:2514","crate_id":0,"name":"flush","span":{"filename":"src/logger.rs","begin":[691,4],"end":[691,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2469":{"id":"0:60:2469","crate_id":0,"name":"Logger","span":{"filename":"src/logger.rs","begin":[550,0],"end":[554,1]},"visibility":"public","docs":"The env logger.\n\nThis struct implements the `Log` trait from the [`log` crate][log-crate-url],\nwhich allows it to act as a logger.\n\nThe [`init()`], [`try_init()`], [`Builder::init()`] and [`Builder::try_init()`]\nmethods will each construct a `Logger` and immediately initialize it as the\ndefault global logger.\n\nIf you'd instead need access to the constructed `Logger`, you can use\nthe associated [`Builder`] and install it with the\n[`log` crate][log-crate-url] directly.\n\n[log-crate-url]: https://docs.rs/log\n[`init()`]: fn.init.html\n[`try_init()`]: fn.try_init.html\n[`Builder::init()`]: struct.Builder.html#method.init\n[`Builder::try_init()`]: struct.Builder.html#method.try_init\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:64","a:2:41633:3117-0:60:2469","a:2:31974:236-0:60:2469","a:2:41632:3118-0:60:2469","a:2:32031:3181-0:60:2469","a:2:3133:3512-0:60:2469","a:2:3098:246-0:60:2469","b:2:2885-0:60:2469","b:2:2879-0:60:2469","b:2:2890-0:60:2469","b:2:2605-0:60:2469","b:2:2875-0:60:2469","b:2:2602-0:60:2469","b:2:3714-0:60:2469","0:71","0:78"]}}},"0:121:2558":{"id":"0:121:2558","crate_id":0,"name":"init_from_env","span":{"filename":"src/logger.rs","begin":[942,0],"end":[948,1]},"visibility":"public","docs":"Initializes the global logger with an env logger from the given environment\nvariables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::init_from_env(env);\n```\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222":{"id":"0:222","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[36,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"WriteStyle","id":"0:365:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"anstream::ColorChoice","id":"31:21:2781","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:223:817"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32031:3181-0:398:2139":{"id":"a:2:32031:3181-0:398:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32031:3181","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13138:28573":{"id":"2:13138:28573","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13139:28574"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[91,22],"end":[91,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10239:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:411:787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:34:800":{"id":"0:34:800","crate_id":0,"name":"format","span":{"filename":"src/logger.rs","begin":[243,4],"end":[249,5]},"visibility":"public","docs":"Sets the format function for formatting the log output.\n\nThis function is called on each record logged and should format the\nlog record and output it to the given [`Formatter`].\n\nThe format function is expected to output the string directly to the\n`Formatter` so that implementations can use the [`std::fmt`] macros\nto format and output without intermediate heap allocations. The default\n`env_logger` formatter takes advantage of this.\n\nWhen the `color` feature is enabled, styling via ANSI escape codes is supported and the\noutput will automatically respect [`Builder::write_style`].\n\n# Examples\n\nUse a custom format to write only the log message:\n\n```\nuse std::io::Write;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}\", record.args()));\n```\n\n[`Formatter`]: fmt/struct.Formatter.html\n[`String`]: https://doc.rust-lang.org/stable/std/string/struct.String.html\n[`std::fmt`]: https://doc.rust-lang.org/std/fmt/index.html","links":{"`Builder::write_style`":"0:52:2443"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["format",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3339:139","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:287:2265","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:3022:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:31974:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[45,0],"end":[516,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:324:2289","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:25:1161","0:26:2317","0:29:2322","0:32:2345","0:33:2351","0:34:800","0:36:2371","0:37:2373","0:38:2376","0:39:2378","0:40:2381","0:41:2384","0:42:2387","0:43:2390","0:44:2393","0:45:2396","0:46:2399","0:47:2416","0:48:2421","0:49:2290","0:50:2336","0:51:1724","0:52:2443","0:53:2338","0:54:2448","0:55:2455","0:56:2464","0:57:2456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13145:33384":{"id":"2:13145:33384","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13144:33383"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43703:7109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2443":{"id":"0:91:2443","crate_id":0,"name":"write_style","span":{"filename":"src/logger.rs","begin":[764,4],"end":[771,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["write_style_env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2879-0:247:142":{"id":"b:2:2879-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2852:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2881:817"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2605-0:355:248":{"id":"b:2:2605-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2599:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2639"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:128:787":{"id":"0:128:787","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[1,0],"end":[809,1]},"visibility":"public","docs":"Formatting for log records.\n\nThis module contains a [`Formatter`] that can be used to format log records\ninto without needing temporary allocations. Usually you won't need to worry\nabout the contents of this module and can use the `Formatter` like an ordinary\n[`Write`].\n\n# Formatting log records\n\nThe format used to print log records can be customised using the [`Builder::format`]\nmethod.\n\nTerminal styling is done through ANSI escape codes and will be adapted to the capabilities of\nthe target stream.\nFor example, you could use one of:\n- [anstyle](https://docs.rs/anstyle) is a minimal, runtime string styling API and is re-exported as [`style`]\n- [owo-colors](https://docs.rs/owo-colors) is a feature rich runtime string styling API\n- [color-print](https://docs.rs/color-print) for feature-rich compile-time styling API\nSee also [`Formatter::default_level_style`]\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    writeln!(buf, \"{}: {}\",\n        record.level(),\n        record.args())\n});\n```\n\n# Key Value arguments\n\nIf the `unstable-kv` feature is enabled, then the default format will include key values from\nthe log by default, but this can be disabled by calling [`Builder::format_key_values`]\nwith [`hidden_kv_format`] as the format function.\n\nThe way these keys and values are formatted can also be customized with a separate format\nfunction that is called by the default format with [`Builder::format_key_values`].\n\n```\n# #[cfg(feature= \"unstable-kv\")]\n# {\nuse log::info;\nenv_logger::init();\ninfo!(x=\"45\"; \"Some message\");\ninfo!(x=\"12\"; \"Another message {x}\", x=\"12\");\n# }\n```\n\nSee <https://docs.rs/log/latest/log/#structured-logging>.\n\n[`Builder::format`]: crate::Builder::format\n[`Write`]: std::io::Write\n[`Builder::format_key_values`]: crate::Builder::format_key_values","links":{"`Formatter`":"0:247:142","crate::Builder::format":"0:34:800","std::io::Write":"1:3590:2657","`style`":"22:0:2143","`Formatter::default_level_style`":"0:256:2643"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:238-22:0:2143","0:239-0:156:2619","0:240-0:355:248","0:241-0:365:2140","0:398:2139","0:247:142"],"is_stripped":false}}},"2:13187:28584":{"id":"2:13187:28584","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13202:35555":{"id":"2:13202:35555","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12804:4797","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::match_indices":"2:13199:35554"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43588:7105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:4691","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:15529","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13240:29789":{"id":"2:13240:29789","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5622:29839":{"id":"5:5622:29839","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13239:29788"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3714-0:247:142":{"id":"b:2:3714-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31975:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3712:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3716:1797"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3098:246-0:60:2469":{"id":"a:2:3098:246-0:60:2469","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3098:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2469","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2894:1782":{"id":"2:2894:1782","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:247:142":{"id":"b:2:2890-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2849:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2859:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1782"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"6:4985:8902":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:9737:22985":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:6738:9355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"6:1692:8770":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:4:1239":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:6620:6429":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"26:1210:4684":{"crate_id":26,"path":["aho_corasick","nfa","NFA"],"kind":"struct"},"16:6066:6362":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:5902:3160":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:12318:5160":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:2859:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:11075:4188":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:43406:3071":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12342:5422":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"25:2505:4973":{"crate_id":25,"path":["regex_syntax","unicode","UnicodeWordError"],"kind":"struct"},"2:45919:7207":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8502:3070":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:6649:6912":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:15281:5982":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:21988:34608":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:40152:7044":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:4149:3657":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:39887:7024":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"25:1166:4833":{"crate_id":25,"path":["regex_syntax","ast","parse","NestLimiter"],"kind":"struct"},"27:797:4669":{"crate_id":27,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:5344:9023":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:40392:6922":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:10828:36661":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:1043:6511":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:6317:6397":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:6311:28486":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"15:327:4324":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:13832:5629":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:12326:1849":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:46529:7259":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"25:1602:27230":{"crate_id":25,"path":["regex_syntax","ast","ClassUnicodeOpKind"],"kind":"enum"},"16:6412:22938":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:1547:8677":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5296:9010":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12969:5466":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:22598:6981":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:6460:9224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:22419:10239":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:43838:7116":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"30:53:4733":{"crate_id":30,"path":["utf8parse","types","State"],"kind":"enum"},"16:3778:6294":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:4641:6308":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13473:5544":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13855:5632":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:11497:28465":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:14968:5920":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11524:5324":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"26:1404:4691":{"crate_id":26,"path":["aho_corasick","packed","pattern","Pattern"],"kind":"struct"},"5:7527:6881":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"28:420:4636":{"crate_id":28,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"1:5227:7324":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:15078:5936":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:1568:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:6278:4278":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:4821:5165":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"29:0:3743":{"crate_id":29,"path":["anstyle_parse"],"kind":"module"},"22:211:2646":{"crate_id":22,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"11:2352:6766":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:40172:3098":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:3571:33967":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:9105:4547":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:4876:8851":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"26:1642:4786":{"crate_id":26,"path":["aho_corasick","prefilter","RareBytesOne"],"kind":"struct"},"5:1546:4364":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"24:2473:5111":{"crate_id":24,"path":["regex","re_trait","CaptureMatches"],"kind":"struct"},"17:12278:5415":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10622:36660":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:14260:5710":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:4438:35429":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"27:0:2846":{"crate_id":27,"path":["memchr"],"kind":"module"},"1:3206:1318":{"crate_id":1,"path":["std","io","prelude"],"kind":"module"},"17:16223:6242":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"16:4614:6307":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:2526:9610":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:4389:15576":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:1593:8706":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:21570:4129":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:14325:5718":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"11:2383:3656":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:31974:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:45550:7165":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:22847:10265":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:15624:6092":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:4487:2997":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:40343:7054":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"22:350:4167":{"crate_id":22,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"5:1064:35419":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:931:10183":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:1311:6511":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:6219:28472":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:44154:9761":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:2666:3081":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:3669:5174":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:11537:5325":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"23:19:2289":{"crate_id":23,"path":["env_filter","filter","Builder"],"kind":"struct"},"11:1603:6774":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11256:5303":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:2049:6895":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:7553:3296":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:8539:10248":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:6079:4252":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"26:1023:4705":{"crate_id":26,"path":["aho_corasick","ahocorasick","StreamChunkIter"],"kind":"struct"},"5:7632:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3531:15663":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:5423:9060":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"27:638:27193":{"crate_id":27,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:40142:7038":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:12276:7470":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:15992:6192":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:4531:6304":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:16259:5528":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:46363:7251":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:14284:5713":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:32823:15651":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:4771:6311":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:2878:6282":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"27:698:3528":{"crate_id":27,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:7609:6887":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:15342:5998":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:6060:15964":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:46450:7254":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:14246:5708":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:5788:7331":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"24:2430:5123":{"crate_id":24,"path":["regex","re_set","bytes","SetMatchesIntoIter"],"kind":"struct"},"2:2483:659":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:4074:6772":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:7686:6605":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"11:102:9744":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"26:1386:4752":{"crate_id":26,"path":["aho_corasick","packed","pattern","Patterns"],"kind":"struct"},"11:1923:4798":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:8328:9602":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"11:1566:22003":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"25:1081:27239":{"crate_id":25,"path":["regex_syntax","ast","parse","Primitive"],"kind":"enum"},"2:22816:9752":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"3:0:492":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:5409:35419":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:42113:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:5064:3047":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:12336:6959":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:2203:5153":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"29:298:4088":{"crate_id":29,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"1:2460:10236":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"0:0:2141":{"crate_id":0,"path":["env_logger"],"kind":"module"},"9:502:6832":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:8351:9608":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5483:9097":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"16:5415:6325":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:9527:3685":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:4108:10271":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:11354:5315":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"11:700:3562":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:7933:2974":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:45690:7180":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:43642:7106":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:5415:9055":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:7132:6510":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:12819:4672":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:15039:5935":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:8236:3084":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:2040:9617":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"24:1656:5055":{"crate_id":24,"path":["regex","exec","ExecReadOnly"],"kind":"struct"},"17:14449:5745":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:11899:32942":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"16:7813:6608":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:671:6847":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:12516:5442":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:31944:6568":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"24:2503:5003":{"crate_id":24,"path":["regex","re_unicode","Regex"],"kind":"struct"},"26:1126:4113":{"crate_id":26,"path":["aho_corasick","dfa","Standard"],"kind":"struct"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"22:330:2655":{"crate_id":22,"path":["anstyle","effect","Effects"],"kind":"struct"},"1:12340:888":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:16121:6218":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:6874:9393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:5716:10344":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"26:1270:2289":{"crate_id":26,"path":["aho_corasick","nfa","Builder"],"kind":"struct"},"26:1420:2289":{"crate_id":26,"path":["aho_corasick","packed","teddy","compile","Builder"],"kind":"struct"},"2:3179:15511":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"26:1156:4723":{"crate_id":26,"path":["aho_corasick","dfa","PremultipliedByteClass"],"kind":"struct"},"6:7584:9562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:12808:5461":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"11:2469:6854":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:10920:7456":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"16:5831:4271":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:39947:7030":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:11924:15524":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:12348:1888":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:640:7297":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"32:0:3746":{"crate_id":32,"path":["anstyle_query"],"kind":"module"},"6:7461:9489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:6629:9318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:875:6763":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:3287:3088":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:14051:5661":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:3174:15510":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:6505:9254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:906:6854":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:1581:3562":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:45842:7188":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:8184:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:6763:9364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"20:334:3016":{"crate_id":20,"path":["log","MetadataBuilder"],"kind":"struct"},"17:10170:4172":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:10969:28347":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:7348:9450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:2199:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:43712:6967":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12201:5409":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:2309:4370":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:3022:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"5:7392:6772":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"25:2544:27262":{"crate_id":25,"path":["regex_syntax","utf8","Utf8Sequence"],"kind":"enum"},"17:14503:5751":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:8601:7405":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:43217:7083":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"25:1618:4906":{"crate_id":25,"path":["regex_syntax","ast","ClassBracketed"],"kind":"struct"},"17:11865:5362":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"24:1831:37106":{"crate_id":24,"path":["regex","literal","imp","Matcher"],"kind":"enum"},"17:12851:4209":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:1890:3686":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"24:1850:37124":{"crate_id":24,"path":["regex","literal","imp","LiteralIter"],"kind":"enum"},"2:729:10252":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:43802:15541":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"11:299:9745":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:12671:5450":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:3429:3077":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:7590:4311":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"29:85:27276":{"crate_id":29,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"2:6838:6919":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:43694:7108":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:43624:5110":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:12543:6964":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"24:2241:5117":{"crate_id":24,"path":["regex","re_bytes","SubCaptureMatches"],"kind":"struct"},"1:11593:28326":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"22:384:3945":{"crate_id":22,"path":["anstyle","reset","Reset"],"kind":"struct"},"16:6927:6484":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:11244:6952":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:6446:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:42074:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:7873:3094":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:1671:8760":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"24:1878:5084":{"crate_id":24,"path":["regex","literal","imp","Memmem"],"kind":"struct"},"2:8304:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"20:120:2263":{"crate_id":20,"path":["log","Log"],"kind":"trait"},"25:2491:136":{"crate_id":25,"path":["regex_syntax","unicode","Error"],"kind":"enum"},"2:40102:7037":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:30841:3528":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11016:5286":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:3335:3177":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:44212:3133":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:13797:5625":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:21450:34595":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"26:1060:27265":{"crate_id":26,"path":["aho_corasick","ahocorasick","MatchKind"],"kind":"enum"},"17:15176:5959":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:1599:4912":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:8294:9595":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5219:8972":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:11887:4566":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:5922:6772":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12422:5430":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:10573:36655":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:6524:9256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:4501:7316":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:12189:5408":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:7841:5149":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5064:8943":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:22982:7007":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:41591:3230":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:5489:9099":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:1605:4913":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:2572:6268":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"24:1531:5042":{"crate_id":24,"path":["regex","dfa","Fsm"],"kind":"struct"},"26:1194:136":{"crate_id":26,"path":["aho_corasick","error","Error"],"kind":"struct"},"2:12878:15535":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"25:1470:4872":{"crate_id":25,"path":["regex_syntax","ast","Class"],"kind":"enum"},"2:46613:7271":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:43166:7082":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"24:1289:27209":{"crate_id":24,"path":["regex","re_unicode","Replacer"],"kind":"trait"},"5:2757:9614":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:46666:7274":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:7569:6882":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:11269:23037":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:14079:5665":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:6609:9310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:1639:8742":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:11351:6955":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:15222:5969":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:2694:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"22:303:4164":{"crate_id":22,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"17:14587:5762":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:10887:36657":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:11674:5339":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:4712:10314":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:11637:7344":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:42760:4534":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:8200:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"26:1136:4721":{"crate_id":26,"path":["aho_corasick","dfa","ByteClass"],"kind":"struct"},"16:5400:4172":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:12810:4691":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"14:31:6753":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:3329:6291":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:15168:5956":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:5895:3159":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:22682:4399":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:6948:4306":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:5352:9024":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"6:5244:8983":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:15426:6022":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:5560:7327":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:643:7299":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:2680:28479":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:43588:7105":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:22836:6997":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:4992:8905":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:3024:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:1726:35419":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"11:1582:6773":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"15:394:22038":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"24:1702:37103":{"crate_id":24,"path":["regex","exec","MatchNfaType"],"kind":"enum"},"22:372:3944":{"crate_id":22,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"17:10759:4176":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"27:823:4672":{"crate_id":27,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:10258:3038":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:46471:7255":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"25:1518:4890":{"crate_id":25,"path":["regex_syntax","ast","ClassAscii"],"kind":"struct"},"1:5038:10316":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:4156:10274":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:723:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"26:1696:4713":{"crate_id":26,"path":["aho_corasick","Match"],"kind":"struct"},"16:8136:6660":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:10661:5273":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"27:648:4645":{"crate_id":27,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:8317:9601":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:912:6771":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:4530:2975":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:9313:7439":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:11743:5345":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:10254:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"24:2518:3072":{"crate_id":24,"path":["regex","re_unicode","Split"],"kind":"struct"},"2:46081:7213":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:41736:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:11621:4185":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"10:36:8564":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:5376:9036":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"9:424:21926":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:41500:6939":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:1723:8782":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5630:9156":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:3473:5158":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:44146:9759":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:7799:4320":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:39955:6902":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:11209:28345":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:6664:9332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:23015:7010":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"0:403:2394":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Micros"],"kind":"variant"},"2:22545:6980":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"11:2498:21998":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:43823:7111":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:8306:9597":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:9305:4561":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"28:326:4634":{"crate_id":28,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"2:3345:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"26:1042:37871":{"crate_id":26,"path":["aho_corasick","ahocorasick","StreamChunk"],"kind":"enum"},"16:3842:6296":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2374:6259":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"26:1236:4736":{"crate_id":26,"path":["aho_corasick","nfa","Dense"],"kind":"struct"},"2:22705:6982":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:3238:3656":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:41838:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:40737:6927":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"11:1007:6511":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:862:3562":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:13292:4213":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:1496:8649":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:2282:7308":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:22916:7001":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"9:392:21925":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:14723:5771":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:33430:15655":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:12343:1809":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:14311:5715":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"23:90:3550":{"crate_id":23,"path":["env_filter","filtered_log","FilteredLog"],"kind":"struct"},"2:40551:6925":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:8575:7313":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:5407:1226":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:7528:6597":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:706:4672":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:14414:5733":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13412:5533":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"24:2234:5116":{"crate_id":24,"path":["regex","re_bytes","CaptureLocations"],"kind":"struct"},"1:12292:4567":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:1356:6770":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:1098:5150":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:6047:6355":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:40378:4659":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:40744:6928":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:5769:6336":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:9118:7432":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:10218:4193":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"11:2326:6765":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"28:61:27278":{"crate_id":28,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"1:3247:9799":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:16050:5523":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:12332:1787":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:11198:7432":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"9:53:4335":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:6417:9206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:11115:5293":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:9391:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:8040:10170":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"24:2536:5116":{"crate_id":24,"path":["regex","re_unicode","CaptureLocations"],"kind":"struct"},"5:3741:35419":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:8006:9572":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:2450:10231":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"5:40:7801":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:43318:7092":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:40300:6911":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"25:2148:3085":{"crate_id":25,"path":["regex_syntax","hir","ErrorKind"],"kind":"enum"},"17:11042:5287":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:14994:5926":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:9807:22991":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:8685:10326":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:7473:4260":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:536:3289":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:4835:787":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:1926:658":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:3844:7310":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:4164:10276":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:2285:3921":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:9781:23001":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:4587:6306":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:10042:3029":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"28:490:37887":{"crate_id":28,"path":["anstream","auto","StreamInner"],"kind":"enum"},"14:165:22009":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:1896:6854":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"5:7436:3562":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:8259:6568":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:4823:10318":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"20:358:2266":{"crate_id":20,"path":["log","SetLoggerError"],"kind":"struct"},"5:870:10184":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:14012:5656":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:7650:33582":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:10885:10239":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"27:665:152":{"crate_id":27,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:15655:6099":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"22:261:3941":{"crate_id":22,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"18:689:4671":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:46119:7215":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:218:6846":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:42271:3040":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"24:1473:4154":{"crate_id":24,"path":["regex","compile","SuffixCacheEntry"],"kind":"struct"},"24:1405:37104":{"crate_id":24,"path":["regex","backtrack","Job"],"kind":"enum"},"2:39970:15591":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:4346:7314":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:3380:2801":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:12251:5413":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:40785:6930":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"28:0:2142":{"crate_id":28,"path":["anstream"],"kind":"module"},"24:2527:5112":{"crate_id":24,"path":["regex","re_unicode","SplitN"],"kind":"struct"},"26:1106:4699":{"crate_id":26,"path":["aho_corasick","dfa","DFA"],"kind":"enum"},"16:7559:6601":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:6619:3165":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:3397:6854":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:497:8586":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:12300:23130":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"18:113:27183":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"26:1397:4757":{"crate_id":26,"path":["aho_corasick","packed","pattern","PatternIter"],"kind":"struct"},"2:11209:6951":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:43488:7103":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:0:1691":{"crate_id":1,"path":["std"],"kind":"module"},"16:0:2844":{"crate_id":16,"path":["gimli"],"kind":"module"},"22:360:3943":{"crate_id":22,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"2:9715:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"28:341:4092":{"crate_id":28,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"6:6706:9348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:15473:6035":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:15616:6091":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:21467:34607":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"27:725:4655":{"crate_id":27,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:0:2836":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:12339:882":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:1610:4798":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"25:2049:4807":{"crate_id":25,"path":["regex_syntax","hir","literal","Literal"],"kind":"struct"},"17:9671:22986":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"24:0:1964":{"crate_id":24,"path":["regex"],"kind":"module"},"24:931:5004":{"crate_id":24,"path":["regex","re_bytes","Captures"],"kind":"struct"},"11:2403:3657":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:12508:5440":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:7480:3562":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:41663:3119":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"23:97:3548":{"crate_id":23,"path":["env_filter","op","FilterOp"],"kind":"struct"},"17:10137:22984":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:295:2368":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:2323:22073":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:39963:7031":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:45608:7176":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:9984:23006":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:46575:7263":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:2927:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:11293:23038":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:11242:5301":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:3614:6293":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:11647:5337":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:40775:7059":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"24:1231:5007":{"crate_id":24,"path":["regex","re_unicode","CapturesDebug"],"kind":"struct"},"2:23026:7011":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:41300:6936":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:14402:5731":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"26:1314:27265":{"crate_id":26,"path":["aho_corasick","packed","api","MatchKind"],"kind":"enum"},"26:1146:4722":{"crate_id":26,"path":["aho_corasick","dfa","Premultiplied"],"kind":"struct"},"17:15822:6141":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:6915:9419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:10997:5284":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:12337:894":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:43524:5112":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:9147:7434":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"7:0:1878":{"crate_id":7,"path":["unwind"],"kind":"module"},"24:2418:5120":{"crate_id":24,"path":["regex","re_set","bytes","RegexSet"],"kind":"struct"},"27:882:27192":{"crate_id":27,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:7306:36649":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:7412:6880":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:896:6772":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:7366:9459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13606:5580":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"26:1666:4793":{"crate_id":26,"path":["aho_corasick","prefilter","StartBytesBuilder"],"kind":"struct"},"16:7755:4319":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:13959:5649":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:10902:9768":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:4865:10284":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:485:8581":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"24:1422:10185":{"crate_id":24,"path":["regex","compile","Hole"],"kind":"enum"},"25:1905:4932":{"crate_id":25,"path":["regex_syntax","ast","FlagsItem"],"kind":"struct"},"1:11676:9769":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"26:1688:4796":{"crate_id":26,"path":["aho_corasick","prefilter","StartBytesThree"],"kind":"struct"},"20:306:2264":{"crate_id":20,"path":["log","Metadata"],"kind":"struct"},"6:5306:9013":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"9:357:21939":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12353:5426":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:15931:5495":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:8613:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:4964:15585":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"24:2423:5121":{"crate_id":24,"path":["regex","re_set","bytes","SetMatches"],"kind":"struct"},"2:5853:3047":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"25:2068:2268":{"crate_id":25,"path":["regex_syntax","hir","print","Writer"],"kind":"struct"},"16:872:5144":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:1565:8687":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"9:482:21923":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:5052:8934":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:22905:7000":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:22335:15672":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"25:1983:136":{"crate_id":25,"path":["regex_syntax","error","Error"],"kind":"enum"},"17:10915:36656":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:5643:9162":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13064:5476":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:3289:3089":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"28:451:4733":{"crate_id":28,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"2:40330:6918":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:10213:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:43379:7099":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:4239:3047":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:22730:6983":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:5671:9172":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:7014:22942":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:11405:5318":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:6136:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"23:85:3547":{"crate_id":23,"path":["env_filter","directive","Directive"],"kind":"struct"},"1:4152:10273":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:7769:6607":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:5037:6320":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:3288:15512":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:359:3303":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:2458:6263":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:13387:5528":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"25:2300:4964":{"crate_id":25,"path":["regex_syntax","hir","ClassBytesIter"],"kind":"struct"},"16:6962:4307":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"24:1822:5079":{"crate_id":24,"path":["regex","literal","imp","LiteralSearcher"],"kind":"struct"},"25:268:37160":{"crate_id":25,"path":["regex_syntax","ast","visitor","ClassInduct"],"kind":"enum"},"25:1771:4873":{"crate_id":25,"path":["regex_syntax","ast","Repetition"],"kind":"struct"},"28:406:4095":{"crate_id":28,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"17:12494:5437":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:2702:3073":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:40076:7036":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5112:8946":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:15418:6020":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"26:1187:2289":{"crate_id":26,"path":["aho_corasick","dfa","Builder"],"kind":"struct"},"15:306:22029":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:624:7296":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:4811:8805":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:5020:8921":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12707:5453":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:1963:1338":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:1191:36586":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:559:8626":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:44334:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:5238:961":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:44029:7131":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:8073:6656":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:2438:6262":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:43674:3068":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"27:730:36670":{"crate_id":27,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:4718:6309":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:6853:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:14599:5769":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"26:1566:37868":{"crate_id":26,"path":["aho_corasick","prefilter","Candidate"],"kind":"enum"},"16:7085:6503":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:3037:35538":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"25:2122:4141":{"crate_id":25,"path":["regex_syntax","hir","translate","Flags"],"kind":"struct"},"2:45483:7161":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:2432:2505":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"30:0:3744":{"crate_id":30,"path":["utf8parse"],"kind":"module"},"6:1663:8759":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:3029:5169":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:5742:6327":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:21433:34601":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:13308:4217":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:23478:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:1559:8685":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:42250:3031":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:12150:5403":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:15463:6030":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"27:556:5142":{"crate_id":27,"path":["memchr","cow","Imp"],"kind":"enum"},"16:4802:6312":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:41518:6941":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:3033:35541":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:45859:7189":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"11:856:6761":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"14:202:15543":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"26:1505:4763":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask128"],"kind":"struct"},"1:9369:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"28:501:3749":{"crate_id":28,"path":["anstream","strip","StripStream"],"kind":"struct"},"1:1971:10208":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:5370:9034":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:10472:28505":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:2026:15682":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:11185:4547":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:41654:3641":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:15376:6011":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:12572:4176":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:11595:4199":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:42152:3158":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:5:1904":{"crate_id":5,"path":["alloc","vec"],"kind":"macro"},"2:41622:3231":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:30439:3885":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:8150:7356":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"11:2569:6881":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:5046:8932":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"27:760:4644":{"crate_id":27,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"5:1557:4365":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:2289:3056":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:2528:6266":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"24:1885:5042":{"crate_id":24,"path":["regex","pikevm","Fsm"],"kind":"struct"},"17:15635:6096":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:12371:5464":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:9272:27797":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"18:507:4644":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:22774:33413":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"24:1623:136":{"crate_id":24,"path":["regex","error","Error"],"kind":"enum"},"6:5665:9170":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:5686:4267":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:698:4105":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:0:2845":{"crate_id":17,"path":["object"],"kind":"module"},"2:22109:10378":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:9688:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:3103:2991":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"24:987:27209":{"crate_id":24,"path":["regex","re_bytes","Replacer"],"kind":"trait"},"1:7891:28477":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:5477:9096":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:10666:3088":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:40259:2486":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:7910:22947":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7570:6289":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:9326:28162":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:9755:22983":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:15778:6134":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:11171:6950":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:8314:3085":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:7656:22945":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:41582:3562":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:13568:5572":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:12320:15722":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:15760:6128":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:8259:9587":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:7379:36645":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"11:844:10183":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"20:287:2265":{"crate_id":20,"path":["log","Record"],"kind":"struct"},"2:10463:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:7359:9455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"11:787:4363":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:9886:23003":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"25:1881:4931":{"crate_id":25,"path":["regex_syntax","ast","SetFlags"],"kind":"struct"},"2:11132:6949":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:8660:4164":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"10:0:2839":{"crate_id":10,"path":["adler"],"kind":"module"},"1:10455:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:12557:4188":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:45986:7210":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"25:1868:4929":{"crate_id":25,"path":["regex_syntax","ast","CaptureName"],"kind":"struct"},"6:7485:9500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6991:36644":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:3279:4911":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:37811:15660":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:39898:33407":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:14475:5747":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:1827:3670":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:8522:3068":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:7355:6548":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:22461:10459":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:10503:3759":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:7561:9550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:7655:6889":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:9155:3562":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:30407:3115":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:10239:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:6655:3174":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:3324:3116":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:13785:5623":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"13:110:36631":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:42752:3761":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:7446:9484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:597:5149":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"24:2188:5110":{"crate_id":24,"path":["regex","re_bytes","Matches"],"kind":"struct"},"2:45521:7163":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:5817:4268":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:10960:3066":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:11345:7462":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"26:1657:4791":{"crate_id":26,"path":["aho_corasick","prefilter","RareBytesThree"],"kind":"struct"},"1:883:4363":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:5557:9122":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:4965:8892":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"11:811:6854":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"26:961:4698":{"crate_id":26,"path":["aho_corasick","ahocorasick","AhoCorasick"],"kind":"struct"},"1:9445:3128":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:16:2946":{"crate_id":2,"path":["core","writeln"],"kind":"macro"},"1:1593:4911":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:10818:5275":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"22:0:2143":{"crate_id":22,"path":["anstyle"],"kind":"module"},"26:1427:4692":{"crate_id":26,"path":["aho_corasick","packed","teddy","compile","Compiler"],"kind":"struct"},"6:473:8575":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:5196:7324":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:22789:33423":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:45728:7182":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:8211:4545":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"15:0:2843":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:4940:6317":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"25:1392:4807":{"crate_id":25,"path":["regex_syntax","ast","Literal"],"kind":"struct"},"0:405:2397":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Nanos"],"kind":"variant"},"17:13344:4226":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:6385:6406":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:15582:6079":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:6456:22939":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:4837:8825":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:44158:9762":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:6615:3164":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:33057:2968":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:46098:7214":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:45711:7181":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:4423:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:8167:3179":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:13494:6974":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:25:682":{"crate_id":2,"path":["core","env"],"kind":"macro"},"16:4830:6313":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:7111:6508":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"26:1594:2289":{"crate_id":26,"path":["aho_corasick","prefilter","Builder"],"kind":"struct"},"2:40221:4381":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"27:852:27191":{"crate_id":27,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11367:4188":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"29:252:4043":{"crate_id":29,"path":["anstyle_parse","Parser"],"kind":"struct"},"11:2423:3562":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:12043:5396":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:12543:5445":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:12621:5447":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:4609:2977":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:45874:7190":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:46564:7262":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"28:99:27272":{"crate_id":28,"path":["anstream","stream","RawStream"],"kind":"trait"},"16:6976:4308":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"18:651:4644":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:7602:9565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:15058:4227":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"24:2583:5119":{"crate_id":24,"path":["regex","re_unicode","NoExpand"],"kind":"struct"},"17:14788:5822":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:517:8603":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:14855:5877":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:9396:3171":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"26:1542:4768":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddyFat3Mask256"],"kind":"struct"},"6:4942:8884":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:13442:33259":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:39060:15513":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:11853:5361":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"25:0:3541":{"crate_id":25,"path":["regex_syntax"],"kind":"module"},"1:3599:32719":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"26:1512:4764":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask256"],"kind":"struct"},"28:144:27273":{"crate_id":28,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"28:436:4097":{"crate_id":28,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"2:46060:7212":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:5645:7329":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:13187:5495":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:11604:4556":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:6665:22940":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:2854:6281":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:46628:7272":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:6398:4296":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:16187:6235":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:3140:3514":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:1752:2616":{"crate_id":2,"path":["core","mem"],"kind":"module"},"17:13089:5477":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"11:1066:22002":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:42257:3032":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:2236:6898":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:3925:6298":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:826:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"24:1994:5102":{"crate_id":24,"path":["regex","prog","InstEmptyLook"],"kind":"struct"},"2:22949:7004":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:1075:6770":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:4787:8788":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:9401:3172":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"24:2445:5125":{"crate_id":24,"path":["regex","re_trait","Locations"],"kind":"struct"},"1:5526:7325":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:860:6251":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:5052:10317":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:7857:6616":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:16069:6206":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:22754:33422":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:6947:15560":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"11:1887:3562":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:1025:6765":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:4273:10292":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7539:6288":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:9938:23005":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"28:114:3077":{"crate_id":28,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"5:3872:6854":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"24:1491:4156":{"crate_id":24,"path":["regex","compile","SuffixCacheKey"],"kind":"struct"},"6:7412:9478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:12352:2716":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:0:550":{"crate_id":2,"path":["core"],"kind":"module"},"24:949:5007":{"crate_id":24,"path":["regex","re_bytes","CapturesDebug"],"kind":"struct"},"16:5927:6340":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:1942:7304":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11392:5317":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:2304:6511":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:39121:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:4309:3656":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"25:254:37161":{"crate_id":25,"path":["regex_syntax","ast","visitor","ClassFrame"],"kind":"enum"},"27:806:4671":{"crate_id":27,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7580:6602":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"24:2157:5109":{"crate_id":24,"path":["regex","re_builder","set_unicode","RegexSetBuilder"],"kind":"struct"},"17:11089:5291":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"11:2151:6766":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5897:4272":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:9695:7356":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:5385:4171":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:41478:7313":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"24:2035:5106":{"crate_id":24,"path":["regex","prog","InstRanges"],"kind":"struct"},"6:7314:9431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:44006:7123":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:3284:36604":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:7472:3562":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"11:430:36624":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"24:2462:5110":{"crate_id":24,"path":["regex","re_trait","Matches"],"kind":"struct"},"17:11898:5363":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:30445:3886":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4891:8858":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:7094:35460":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:6560:4302":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:12323:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:926:10185":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:7119:35427":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"11:434:36625":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:13046:5473":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:403:5145":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:3196:6256":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:11755:5348":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:8587:10295":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:4050:10266":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:7823:22946":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12584:5275":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:13748:3124":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:5107:6322":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:1490:8646":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:6657:9331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"28:363:4094":{"crate_id":28,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"1:3250:9800":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:7061:6502":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:3590:2657":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:8061:3690":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:648:10166":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:15313:5990":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"25:2012:4945":{"crate_id":25,"path":["regex_syntax","hir","interval","IntervalSet"],"kind":"struct"},"1:8155:7357":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:11337:6954":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5329:9021":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:11341:5314":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:4728:2986":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"25:1816:27222":{"crate_id":25,"path":["regex_syntax","ast","RepetitionRange"],"kind":"enum"},"16:7497:6588":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"26:1620:4696":{"crate_id":26,"path":["aho_corasick","prefilter","ByteSet"],"kind":"struct"},"17:11510:5323":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:1628:8734":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:44223:15767":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:42529:4934":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:39104:10197":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:553:8623":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:8154:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:8528:7405":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:7695:6606":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7052:6499":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:598:36668":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5225:8975":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:40071:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12993:23011":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"23:41:2486":{"crate_id":23,"path":["env_filter","filter","Filter"],"kind":"struct"},"1:4427:7315":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:32061:3515":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:3144:2967":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:10524:5271":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:1933:3882":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:40043:7033":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:12900:4212":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:6648:6430":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:11906:7348":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:13693:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:8271:9589":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"24:1642:5053":{"crate_id":24,"path":["regex","exec","ExecNoSync"],"kind":"struct"},"2:40124:10211":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:44435:7141":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10092:23008":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:2592:6269":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"27:815:4105":{"crate_id":27,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:41877:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:11682:9770":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:8197:9584":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"24:1468:5034":{"crate_id":24,"path":["regex","compile","SuffixCache"],"kind":"struct"},"17:11443:5319":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:15126:5942":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:6689:9339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"16:2728:6275":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"26:1579:4775":{"crate_id":26,"path":["aho_corasick","prefilter","PrefilterObj"],"kind":"struct"},"25:1502:27227":{"crate_id":25,"path":["regex_syntax","ast","ClassPerlKind"],"kind":"enum"},"5:3661:3657":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"9:0:2838":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:5006:6319":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"0:247:142":{"crate_id":0,"path":["env_logger","fmt","Formatter"],"kind":"struct"},"2:732:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:11747:27851":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:22466:10457":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:9293:4802":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:4757:9470":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"16:7098:6505":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:11217:4396":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"25:2238:4872":{"crate_id":25,"path":["regex_syntax","hir","Class"],"kind":"enum"},"17:13999:5654":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11063:5290":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"25:2422:27222":{"crate_id":25,"path":["regex_syntax","hir","RepetitionRange"],"kind":"enum"},"16:6872:6479":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13766:5618":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"11:364:36618":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"31:40:4034":{"crate_id":31,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"17:16151:6226":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:7888:6620":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"26:0:3542":{"crate_id":26,"path":["aho_corasick"],"kind":"module"},"17:11583:5332":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:5974:3173":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:7516:9526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13986:5653":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:4612:10296":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"25:2064:4834":{"crate_id":25,"path":["regex_syntax","hir","print","Printer"],"kind":"struct"},"17:10155:4171":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:1327:6766":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:5102:8945":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"24:1746:2985":{"crate_id":24,"path":["regex","expand","Ref"],"kind":"enum"},"17:13363:5524":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"25:2265:4963":{"crate_id":25,"path":["regex_syntax","hir","ClassUnicodeIter"],"kind":"struct"},"26:1291:4741":{"crate_id":26,"path":["aho_corasick","nfa","fill_failure_transitions_leftmost","QueuedState"],"kind":"struct"},"2:2846:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"5:5217:3107":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"16:7168:7439":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"18:589:4648":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:46538:7260":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"28:181:10239":{"crate_id":28,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"2:10248:3031":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"25:1582:27229":{"crate_id":25,"path":["regex_syntax","ast","ClassUnicodeKind"],"kind":"enum"},"17:14876:5885":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:12647:5448":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:9374:3163":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:15799:6137":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:16235:6245":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:10194:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:6478:9234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:41332:10249":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:10419:4198":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:12582:6966":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"26:1649:4788":{"crate_id":26,"path":["aho_corasick","prefilter","RareBytesTwo"],"kind":"struct"},"25:1316:4870":{"crate_id":25,"path":["regex_syntax","ast","Comment"],"kind":"struct"},"24:1637:5050":{"crate_id":24,"path":["regex","exec","Exec"],"kind":"struct"},"2:22374:10468":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:3807:6856":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"27:632:4642":{"crate_id":27,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:8265:9588":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"26:1675:4794":{"crate_id":26,"path":["aho_corasick","prefilter","StartBytesOne"],"kind":"struct"},"6:523:8606":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:40230:4384":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:40321:6917":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:11764:5349":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:13437:5535":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:3792:3084":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:3558:15573":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:46643:7273":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"25:1281:4532":{"crate_id":25,"path":["regex_syntax","ast","Span"],"kind":"struct"},"24:2337:5121":{"crate_id":24,"path":["regex","re_set","unicode","SetMatches"],"kind":"struct"},"2:40249:4385":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:7306:9426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:5863:22935":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:8288:9594":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:21421:34601":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:10534:36654":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:12804:4797":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:2115:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:46273:7249":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"24:1688:37100":{"crate_id":24,"path":["regex","exec","MatchLiteralType"],"kind":"enum"},"2:21558:10379":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:6442:6409":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"21:227:3147":{"crate_id":21,"path":["humantime","date","Rfc3339Timestamp"],"kind":"struct"},"2:10246:3032":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:7546:9543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:15214:5967":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"26:1602:4780":{"crate_id":26,"path":["aho_corasick","prefilter","Packed"],"kind":"struct"},"24:1398:4567":{"crate_id":24,"path":["regex","backtrack","Cache"],"kind":"struct"},"16:3475:6292":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:2788:6278":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"13:229:4328":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:1676:36622":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"27:624:4644":{"crate_id":27,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:14847:5874":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:10710:5274":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5382:9039":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"27:97:27182":{"crate_id":27,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"7:78:21917":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:15410:6019":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:280:35419":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:40268:6909":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:4882:6315":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:42500:3028":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:11089:3072":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:43684:7107":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:5653:9163":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:12792:5233":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:46590:7264":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:8145:2264":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:5266:8994":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13844:5631":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:3551:3057":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11051:5288":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:11688:5340":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:9382:3047":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:13469:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:42517:33623":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"24:1780:5077":{"crate_id":24,"path":["regex","input","CharInput"],"kind":"struct"},"2:40208:3069":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:6335:4263":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:21479:34598":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"25:1749:27224":{"crate_id":25,"path":["regex_syntax","ast","AssertionKind"],"kind":"enum"},"17:11730:5344":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:40537:6924":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"28:470:2620":{"crate_id":28,"path":["anstream","buffer","Buffer"],"kind":"struct"},"5:3026:2970":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:45416:7153":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"25:2403:27221":{"crate_id":25,"path":["regex_syntax","hir","RepetitionKind"],"kind":"enum"},"1:7689:4070":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:7585:15594":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"25:1405:27223":{"crate_id":25,"path":["regex_syntax","ast","LiteralKind"],"kind":"enum"},"2:44458:7142":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:5636:9159":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:954:6764":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"24:1804:4987":{"crate_id":24,"path":["regex","input","Char"],"kind":"struct"},"6:5134:8948":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"26:1331:4121":{"crate_id":26,"path":["aho_corasick","packed","api","Config"],"kind":"struct"},"17:11715:5342":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:39108:7016":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:1536:6771":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:30190:10251":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"14:40:5510":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:10769:36653":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:8855:7430":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"22:429:4168":{"crate_id":22,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"11:351:36613":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"26:1609:4781":{"crate_id":26,"path":["aho_corasick","prefilter","RareBytesBuilder"],"kind":"struct"},"5:3029:9613":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:42571:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:5929:3161":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"26:1085:4683":{"crate_id":26,"path":["aho_corasick","classes","ByteClasses"],"kind":"struct"},"1:9427:2751":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:4913:6316":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:3810:6295":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:21949:10239":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:44419:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:13173:5494":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:16249:6246":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:21550:10239":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:22283:10464":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:21465:34603":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"25:2360:4828":{"crate_id":25,"path":["regex_syntax","hir","Group"],"kind":"struct"},"1:365:3304":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:5002:8912":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12443:5432":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:6120:7330":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:39273:7021":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13674:5582":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:10564:7431":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"24:2543:5117":{"crate_id":24,"path":["regex","re_unicode","SubCaptureMatches"],"kind":"struct"},"17:15333:5997":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:2838:6280":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:12768:22988":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"18:0:2846":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:21676:10377":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:12683:5451":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:10350:4197":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:22666:4376":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:16032:5513":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:6504:6416":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"27:871:4682":{"crate_id":27,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:10439:4173":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:7984:9571":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:2936:22075":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:39286:7022":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"24:1792:5078":{"crate_id":24,"path":["regex","input","ByteInput"],"kind":"struct"},"17:15569:6073":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:5236:8979":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:14038:5659":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:37866:15661":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"26:1052:4109":{"crate_id":26,"path":["aho_corasick","ahocorasick","AhoCorasickBuilder"],"kind":"struct"},"29:198:21961":{"crate_id":29,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"1:5029:10315":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:4269:3047":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"5:3648:3656":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:15289:5983":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:2207:6858":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:10185:4192":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:4102:10270":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:13814:5628":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12863:5463":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:22738:6984":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:40402:7055":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"18:754:4682":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"26:1584:4645":{"crate_id":26,"path":["aho_corasick","prefilter","PrefilterState"],"kind":"struct"},"17:11227:5299":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:5802:22934":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:542:4250":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:14356:5724":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:6026:4246":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"25:1706:4910":{"crate_id":25,"path":["regex_syntax","ast","ClassSetBinaryOp"],"kind":"struct"},"24:2508:5115":{"crate_id":24,"path":["regex","re_unicode","CaptureNames"],"kind":"struct"},"2:4604:2976":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:39236:10176":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"22:281:3942":{"crate_id":22,"path":["anstyle","color","RgbColor"],"kind":"struct"},"2:22321:10467":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:1894:799":{"crate_id":2,"path":["core","mem","forget"],"kind":"function"},"6:6650:9330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:14091:5666":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:6730:3169":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:6574:4303":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"26:1166:4724":{"crate_id":26,"path":["aho_corasick","dfa","Repr"],"kind":"struct"},"17:14372:5725":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:10187:7069":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:40179:7045":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:8492:3069":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:942:6761":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"25:1681:4907":{"crate_id":25,"path":["regex_syntax","ast","ClassSetRange"],"kind":"struct"},"2:39216:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:39459:3508":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"26:1224:4733":{"crate_id":26,"path":["aho_corasick","nfa","State"],"kind":"struct"},"1:10950:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:5700:6283":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:14066:5664":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:6532:6418":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"24:2556:5111":{"crate_id":24,"path":["regex","re_unicode","CaptureMatches"],"kind":"struct"},"16:5756:6331":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:3819:6772":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:2542:8558":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:3149:3129":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:5212:8971":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"25:2135:136":{"crate_id":25,"path":["regex_syntax","hir","Error"],"kind":"struct"},"5:6957:15561":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:9700:28485":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"26:1079:2620":{"crate_id":26,"path":["aho_corasick","buffer","Buffer"],"kind":"struct"},"17:11102:5292":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:10018:22987":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:7295:9847":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:8228:3082":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:12350:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"21:100:2753":{"crate_id":21,"path":["humantime","date","format_rfc3339_millis"],"kind":"function"},"17:15368:6008":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4959:8890":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:43570:7104":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:22307:10239":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:6714:9351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"24:1719:5072":{"crate_id":24,"path":["regex","exec","ProgramCacheInner"],"kind":"struct"},"1:7910:28468":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:12308:28297":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:12213:5410":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:4634:10297":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:39913:7027":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"26:1357:4672":{"crate_id":26,"path":["aho_corasick","packed","api","Searcher"],"kind":"struct"},"22:184:3940":{"crate_id":22,"path":["anstyle","color","Color"],"kind":"enum"},"5:830:6848":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:7144:22943":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:12347:950":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:6782:22941":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:40353:4388":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"26:1558:4773":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","Mask256"],"kind":"struct"},"2:46421:7253":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"25:2109:4951":{"crate_id":25,"path":["regex_syntax","hir","translate","TranslatorI"],"kind":"struct"},"1:8220:7360":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:4952:8887":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:6398:7330":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:37701:15658":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:1517:8657":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:8188:6667":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:7538:10182":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:14147:5675":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:30460:3028":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"28:313:4091":{"crate_id":28,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"5:1155:36588":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:1207:5151":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"25:1785:4921":{"crate_id":25,"path":["regex_syntax","ast","RepetitionOp"],"kind":"struct"},"11:2443:6772":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"18:581:3528":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"31:0:3745":{"crate_id":31,"path":["colorchoice"],"kind":"module"},"1:8304:7361":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:732:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:12949:5160":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:4600:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:40309:7053":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:13116:5482":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"24:1543:225":{"crate_id":24,"path":["regex","dfa","Result"],"kind":"enum"},"24:178:4981":{"crate_id":24,"path":["regex","compile","ByteClassSet"],"kind":"struct"},"6:6621:9317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:5336:9022":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:11419:4176":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:742:4365":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:3546:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"24:1579:4158":{"crate_id":24,"path":["regex","dfa","EmptyFlags"],"kind":"struct"},"20:223:2262":{"crate_id":20,"path":["log","LevelFilter"],"kind":"enum"},"1:8582:9765":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"11:710:4364":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:6098:22936":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:437:5147":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:41727:3562":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:11012:28296":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"25:1143:27240":{"crate_id":25,"path":["regex_syntax","ast","parse","GroupState"],"kind":"enum"},"6:5598:9136":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:8046:3689":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"9:447:21924":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:14463:5746":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"26:1519:4765":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddyFat2Mask256"],"kind":"struct"},"17:13526:5557":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:10895:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:2236:4367":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:3027:35543":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"29:137:4733":{"crate_id":29,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"17:16105:6213":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:870:4362":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:14271:5711":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:12127:5402":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5320:9018":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:5624:9153":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:5200:8964":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:11773:5350":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13553:5566":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:10714:3294":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:3608:3058":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"24:1726:5075":{"crate_id":24,"path":["regex","expand","CaptureRef"],"kind":"struct"},"2:43728:6902":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:6295:6978":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:14977:5924":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"27:835:4676":{"crate_id":27,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"0:398:2139":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision"],"kind":"enum"},"11:800:6772":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"25:1489:4886":{"crate_id":25,"path":["regex_syntax","ast","ClassPerl"],"kind":"struct"},"1:5385:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:12764:3018":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"24:1601:4163":{"crate_id":24,"path":["regex","dfa","StateFlags"],"kind":"struct"},"25:2186:27244":{"crate_id":25,"path":["regex_syntax","hir","HirKind"],"kind":"enum"},"2:12830:15528":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:31975:3180":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:1480:3657":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:15116:5941":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"23:0:2144":{"crate_id":23,"path":["env_filter"],"kind":"module"},"17:15944:5509":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"5:1465:3656":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:14868:5884":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:16198:6236":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:3305:4798":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:40009:7032":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:45469:7160":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:13594:5577":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:1577:3656":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:11770:7310":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:44138:9757":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:6784:3175":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:22651:4398":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12030:5395":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10720:36658":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"11:883:6764":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:11064:3657":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:22971:7006":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"6:586:8640":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:9265:3288":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:5540:7326":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"26:1487:4760":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask128"],"kind":"struct"},"17:15266:5980":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:31965:2411":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"25:1292:4802":{"crate_id":25,"path":["regex_syntax","ast","Position"],"kind":"struct"},"6:532:8612":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:12338:876":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:5502:9103":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"5:2289:36581":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:15197:5964":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:4870:8849":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:44356:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"24:1571:4962":{"crate_id":24,"path":["regex","dfa","Byte"],"kind":"struct"},"2:43327:7093":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11915:23106":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:6542:9268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:22245:10463":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:2037:5152":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"26:998:4701":{"crate_id":26,"path":["aho_corasick","ahocorasick","FindOverlappingIter"],"kind":"struct"},"1:1812:682":{"crate_id":1,"path":["std","env"],"kind":"module"},"26:1526:4766":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask128"],"kind":"struct"},"27:787:4668":{"crate_id":27,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:8515:3072":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:7397:36647":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:32032:3516":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:11914:7348":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:8630:9459":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:7428:22944":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:4976:6318":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:11270:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"25:2324:4961":{"crate_id":25,"path":["regex_syntax","hir","Anchor"],"kind":"enum"},"6:6880:9394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:3171:15509":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"25:1647:27219":{"crate_id":25,"path":["regex_syntax","ast","ClassSetItem"],"kind":"enum"},"2:40793:6932":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:10195:2657":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:5576:7328":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:43438:6952":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:13738:5611":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"27:690:4644":{"crate_id":27,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:4759:9472":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:8253:9586":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:8448:3096":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"18:726:4107":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"25:1177:4136":{"crate_id":25,"path":["regex_syntax","ast","print","PrinterBuilder"],"kind":"struct"},"6:7452:9486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"24:1213:5004":{"crate_id":24,"path":["regex","re_unicode","Captures"],"kind":"struct"},"25:2307:4147":{"crate_id":25,"path":["regex_syntax","hir","ClassBytesRange"],"kind":"struct"},"2:43337:7094":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:10498:3758":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:40362:6920":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"24:1433:37099":{"crate_id":24,"path":["regex","compile","MaybeInst"],"kind":"enum"},"1:8172:7358":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:15390:6013":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:21954:10382":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"24:2224:5115":{"crate_id":24,"path":["regex","re_bytes","CaptureNames"],"kind":"struct"},"24:2215:5112":{"crate_id":24,"path":["regex","re_bytes","SplitN"],"kind":"struct"},"14:214:6756":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:10692:28479":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:43852:7119":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:43266:7089":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:3899:6297":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:11661:5338":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:10907:7357":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:12399:5429":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:5436:9070":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"9:238:4733":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:7081:10374":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:7429:9479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6775:9366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:8155:6663":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"11:328:9748":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:9139:3656":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"24:1936:4991":{"crate_id":24,"path":["regex","prog","Program"],"kind":"struct"},"2:12825:15529":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:12289:5416":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:43007:9755":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:3098:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"18:481:4643":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:8093:6657":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:5536:9110":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6543:6419":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:10878:7451":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:42264:3039":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:726:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:4743:6310":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:43305:7091":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:44142:9758":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"25:2289:4949":{"crate_id":25,"path":["regex_syntax","hir","ClassBytes"],"kind":"struct"},"17:13399:5531":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12362:5427":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:4323:6903":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:10905:5277":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"26:1246:4982":{"crate_id":26,"path":["aho_corasick","nfa","Transitions"],"kind":"enum"},"2:12620:6949":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"30:23:21961":{"crate_id":30,"path":["utf8parse","types","Action"],"kind":"enum"},"24:2028:5105":{"crate_id":24,"path":["regex","prog","InstChar"],"kind":"struct"},"2:40114:3071":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"5:6164:3047":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:9386:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:9178:7435":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:7586:15595":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:45504:7162":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11166:5295":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:5846:6337":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:2612:6270":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:4747:10271":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:9259:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:46392:7252":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:42789:4733":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:42033:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:14545:5755":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:14436:5744":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:15608:6088":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:40277:7050":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:5307:6323":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:6924:15559":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:7266:28484":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:3533:3055":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:8196:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:12225:5411":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:6120:22937":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:2234:5156":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"26:1309:4745":{"crate_id":26,"path":["aho_corasick","nfa","AllBytesIter"],"kind":"struct"},"26:1435:4129":{"crate_id":26,"path":["aho_corasick","packed","teddy","compile","Mask"],"kind":"struct"},"20:253:3014":{"crate_id":20,"path":["log","MaybeStaticStr"],"kind":"enum"},"6:8247:9585":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"25:1720:27226":{"crate_id":25,"path":["regex_syntax","ast","ClassSetBinaryOpKind"],"kind":"enum"},"24:2344:5123":{"crate_id":24,"path":["regex","re_set","unicode","SetMatchesIntoIter"],"kind":"struct"},"2:45760:7184":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13015:4206":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:21497:10239":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:46549:7261":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:5591:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:4826:10296":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:8460:3066":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"11:2369:6777":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:6343:4553":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"25:2475:4132":{"crate_id":25,"path":["regex_syntax","parser","ParserBuilder"],"kind":"struct"},"11:2231:4333":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"24:1417:5022":{"crate_id":24,"path":["regex","compile","Patch"],"kind":"struct"},"26:1260:4738":{"crate_id":26,"path":["aho_corasick","nfa","IterTransitionsMut"],"kind":"struct"},"1:852:3657":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"24:1980:5097":{"crate_id":24,"path":["regex","prog","InstSave"],"kind":"struct"},"6:4885:8856":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:80:27181":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:16269:5533":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:41671:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:6788:9373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:2849:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:14298:5714":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11128:5255":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:22868:10239":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"6:5122:8947":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:4094:10269":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:21552:10376":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"8:0:2837":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13899:5640":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:45454:7159":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"11:774:4362":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10317:4196":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:2497:15672":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"24:2482:4713":{"crate_id":24,"path":["regex","re_unicode","Match"],"kind":"struct"},"1:2448:10230":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:12342:1827":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:31976:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:11702:5341":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:42777:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:1171:35537":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:3374:10198":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6849:6478":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:5960:6347":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:6007:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:7380:6878":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:15678:6112":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:9897:34454":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:6940:4264":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:1577:6853":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:6756:9363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"16:7741:4318":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"25:1631:27233":{"crate_id":25,"path":["regex_syntax","ast","ClassSet"],"kind":"enum"},"6:5290:9007":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"21:192:136":{"crate_id":21,"path":["humantime","date","Error"],"kind":"enum"},"18:643:4644":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"11:837:6758":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:21499:10380":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:4456:2996":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:2902:22074":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"11:1917:4913":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11841:5360":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:3250:36605":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13723:5607":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:15646:6097":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"11:1051:6766":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6447:9223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:14986:5925":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:5949:3047":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:12324:1157":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:11883:6958":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:16093:6211":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:43737:7030":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:39871:6902":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:39158:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"11:1891:6772":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:6300:6394":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"24:213:37153":{"crate_id":24,"path":["regex","dfa","InstPtrs"],"kind":"struct"},"2:3159:6525":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:3618:3061":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:10256:3037":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:43396:7100":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"26:971:5142":{"crate_id":26,"path":["aho_corasick","ahocorasick","Imp"],"kind":"enum"},"16:2660:6272":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:15836:6144":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:44134:9756":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:45646:7178":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:8652:7317":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"11:1107:6768":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:2338:6257":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:2768:6277":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:10931:4559":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:4856:6314":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:10954:23018":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"25:2442:4967":{"crate_id":25,"path":["regex_syntax","hir","HirInfo"],"kind":"struct"},"2:44047:6971":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:13424:5534":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11788:5353":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:41538:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"26:1534:4767":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask256"],"kind":"struct"},"18:718:4676":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:4867:10285":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:1518:4362":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:14025:5657":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:15748:6126":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:42768:3760":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:1580:8699":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:4370:15508":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"20:124:3007":{"crate_id":20,"path":["log","NopLogger"],"kind":"struct"},"22:405:2644":{"crate_id":22,"path":["anstyle","style","Style"],"kind":"struct"},"5:1527:4363":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:7973:2289":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:4243:32555":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:5781:6284":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"9:178:4350":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:41466:7072":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"25:1380:4874":{"crate_id":25,"path":["regex_syntax","ast","Concat"],"kind":"struct"},"17:15814:6138":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:735:27191":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:2979:6899":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:7604:4312":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:8202:4322":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"25:2390:4873":{"crate_id":25,"path":["regex_syntax","hir","Repetition"],"kind":"struct"},"17:14575:4206":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"25:1454:27232":{"crate_id":25,"path":["regex_syntax","ast","HexLiteralKind"],"kind":"enum"},"2:23004:7009":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"26:1303:4744":{"crate_id":26,"path":["aho_corasick","nfa","QueuedSet"],"kind":"struct"},"2:45948:7208":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:33949:6530":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:9858:23002":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:513:5148":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"24:2042:5107":{"crate_id":24,"path":["regex","prog","InstBytes"],"kind":"struct"},"2:22333:33989":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:5191:8959":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:10671:36659":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:5181:8952":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:8773:7424":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:21411:3528":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:44348:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:43542:6954":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:45629:7177":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:11075:3945":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:43703:7109":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:33234:15652":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:15273:5981":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:4294:10294":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:4502:35429":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:39266:7020":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:12345:1821":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:10252:3040":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:10877:5276":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:531:4645":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:623:36667":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:10612:5272":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"20:300:3015":{"crate_id":20,"path":["log","RecordBuilder"],"kind":"struct"},"25:1797:27221":{"crate_id":25,"path":["regex_syntax","ast","RepetitionKind"],"kind":"enum"},"16:6231:6389":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"18:96:27182":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:3306:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:15023:5932":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6160:22046":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:44397:7137":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:3264:5157":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12076:5399":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:8702:7421":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"25:1328:27218":{"crate_id":25,"path":["regex_syntax","ast","Ast"],"kind":"enum"},"17:12433:4206":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"20:363:3017":{"crate_id":20,"path":["log","ParseLevelError"],"kind":"struct"},"17:13235:5510":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:2748:6276":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:14235:5706":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:45337:7146":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:45536:7164":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"26:985:4662":{"crate_id":26,"path":["aho_corasick","ahocorasick","FindIter"],"kind":"struct"},"11:687:3657":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:13636:6978":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:3597:5159":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:12341:869":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:22938:7003":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"2:32637:6521":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"25:1155:27241":{"crate_id":25,"path":["regex_syntax","ast","parse","ClassState"],"kind":"enum"},"11:2554:36621":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:8593:7411":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:11407:6829":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:45792:7186":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:8206:4546":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"24:307:4984":{"crate_id":24,"path":["regex","dfa","TransitionsRow"],"kind":"struct"},"2:44338:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:45775:7185":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:13538:5560":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:9300:4552":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:12566:6965":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:44188:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12485:23132":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:560:3291":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:22201:10462":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:14752:5791":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:6409:9204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12464:23131":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"26:1013:4704":{"crate_id":26,"path":["aho_corasick","ahocorasick","StreamFindIter"],"kind":"struct"},"6:6491:9243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:3586:2993":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:43995:15542":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:3952:3562":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:11142:4176":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"27:843:4107":{"crate_id":27,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:6554:6772":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:3244:31053":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:1585:8701":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:1699:8773":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:8844:7429":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:42592:3030":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"25:2081:4947":{"crate_id":25,"path":["regex_syntax","hir","translate","Translator"],"kind":"struct"},"24:1895:4567":{"crate_id":24,"path":["regex","pikevm","Cache"],"kind":"struct"},"2:41360:4532":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:1621:8730":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:2822:10239":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:14341:5720":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"26:1101:4720":{"crate_id":26,"path":["aho_corasick","classes","ByteClassBuilder"],"kind":"struct"},"1:8788:10339":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:3339:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4916:8874":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"25:1130:4826":{"crate_id":25,"path":["regex_syntax","ast","parse","ParserI"],"kind":"struct"},"2:1850:3047":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"16:7648:6604":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:44170:4396":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12659:5449":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:5196:3097":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"25:2272:4146":{"crate_id":25,"path":["regex_syntax","hir","ClassUnicodeRange"],"kind":"struct"},"6:1707:8777":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:9254:4549":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"24:1869:5087":{"crate_id":24,"path":["regex","literal","imp","SingleByteSet"],"kind":"struct"},"22:315:4165":{"crate_id":22,"path":["anstyle","color","NullFormatter"],"kind":"struct"},"17:15720:6117":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:3271:4913":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:6746:9356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:7330:9443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:5774:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:4673:2984":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"18:491:5142":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5277:9002":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:5722:6285":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:9094:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:6634:4304":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"24:1559:4733":{"crate_id":24,"path":["regex","dfa","State"],"kind":"struct"},"16:2998:6290":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"24:1526:4982":{"crate_id":24,"path":["regex","dfa","Transitions"],"kind":"struct"},"1:11252:9692":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:39926:7028":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:30471:33420":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:42490:9683":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:10897:9766":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"18:563:4102":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:506:3284":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:8750:4733":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:39877:7023":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:578:8636":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"14:0:2842":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:32451:6524":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:42807:4536":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:31951:7014":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:4281:10293":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:31940:7013":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:25878:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6532:9261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6636:9319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:1924:2663":{"crate_id":2,"path":["core","mem","replace"],"kind":"function"},"18:608:4655":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:43917:7121":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:11323:5112":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:2478:6264":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:8158:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:3468:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10068:22990":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:256:5143":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:613:36670":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:4352:6300":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:12056:5398":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"31:21:2781":{"crate_id":31,"path":["colorchoice","ColorChoice"],"kind":"enum"},"1:1588:6854":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:5466:9091":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:11313:5309":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:21976:4397":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:8118:6659":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:10669:2798":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"11:0:2840":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:8226:22948":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"27:740:36667":{"crate_id":27,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:40199:7047":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40766:3095":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:14489:5748":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:417:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:591:10163":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:5617:9150":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:39176:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:15734:6119":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:45661:7179":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:12349:1397":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"15:288:22028":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"25:1893:4141":{"crate_id":25,"path":["regex_syntax","ast","Flags"],"kind":"struct"},"17:15301:5989":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:10675:33514":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:33603:15656":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"24:1380:4927":{"crate_id":24,"path":["regex","backtrack","Bounded"],"kind":"struct"},"2:3712:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:3133:3512":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:3245:4912":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:12336:740":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:4080:10268":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:6519:9255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:9190:10349":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:2599:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:9205:10348":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:30814:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:4104:35419":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4800:8797":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:11571:3306":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"17:11574:4333":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:4246:3047":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:22716:33421":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:8162:4559":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"21:207:36685":{"crate_id":21,"path":["humantime","date","Precision"],"kind":"enum"},"17:14212:5705":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"12:0:2841":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"29:109:4045":{"crate_id":29,"path":["anstyle_parse","params","Params"],"kind":"struct"},"14:7:6753":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:13485:5547":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"26:1447:4746":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","Teddy"],"kind":"struct"},"26:1455:5050":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","Exec"],"kind":"enum"},"17:2175:23065":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:8828:7321":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:14933:5919":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:5014:8918":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:7582:15713":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5445:9076":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:6140:4386":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:5781:7330":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:43011:6947":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"24:2349:5124":{"crate_id":24,"path":["regex","re_set","unicode","SetMatchesIter"],"kind":"struct"},"2:8249:3178":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:12695:5452":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:11665:7347":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:921:4365":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"26:1635:4128":{"crate_id":26,"path":["aho_corasick","prefilter","RareByteOffset"],"kind":"struct"},"27:114:27183":{"crate_id":27,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"24:1510:4567":{"crate_id":24,"path":["regex","dfa","Cache"],"kind":"struct"},"1:10294:3679":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"25:2578:4813":{"crate_id":25,"path":["regex_syntax","utf8","Utf8Range"],"kind":"struct"},"30:88:4043":{"crate_id":30,"path":["utf8parse","Parser"],"kind":"struct"},"18:635:4661":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:15383:6012":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:12325:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:22960:7005":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"6:8029:9583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:1342:6765":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:3382:3087":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13753:5616":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"11:2536:4828":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:11189:5296":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:2041:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"21:99:2755":{"crate_id":21,"path":["humantime","date","format_rfc3339_seconds"],"kind":"function"},"29:26:27280":{"crate_id":29,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"2:2688:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:6681:3562":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"11:1160:6770":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"24:2206:3072":{"crate_id":24,"path":["regex","re_bytes","Split"],"kind":"struct"},"9:330:8565":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:948:6763":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"0:128:787":{"crate_id":0,"path":["env_logger","fmt"],"kind":"module"},"25:1917:27225":{"crate_id":25,"path":["regex_syntax","ast","FlagsItemKind"],"kind":"enum"},"5:6763:35419":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:5914:4277":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:11365:6956":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:45437:7158":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"24:2254:5118":{"crate_id":24,"path":["regex","re_bytes","ReplacerRef"],"kind":"struct"},"16:7618:4313":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12238:5412":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"25:2254:4901":{"crate_id":25,"path":["regex_syntax","hir","ClassUnicode"],"kind":"struct"},"2:45352:7147":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:7701:15639":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:2114:6857":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:6433:4300":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"26:923:10239":{"crate_id":26,"path":["aho_corasick","state_id","private","Sealed"],"kind":"trait"},"17:14189:5696":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:15521:6072":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:13656:6979":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:2103:6856":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:40239:7048":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:5457:9085":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:5453:4874":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:1888:3685":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:4142:10272":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12597:5446":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"11:123:4329":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"26:1349:2289":{"crate_id":26,"path":["aho_corasick","packed","api","Builder"],"kind":"struct"},"16:8301:6675":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:7645:6888":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"25:2524:37159":{"crate_id":25,"path":["regex_syntax","unicode","CanonicalClassQuery"],"kind":"enum"},"24:1452:37101":{"crate_id":24,"path":["regex","compile","InstHole"],"kind":"enum"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:2708:6274":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:12344:1815":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:11467:5320":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:11282:6953":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:3319:2994":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:41760:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:44016:7127":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"25:1106:4132":{"crate_id":25,"path":["regex_syntax","ast","parse","ParserBuilder"],"kind":"struct"},"25:1206:3085":{"crate_id":25,"path":["regex_syntax","ast","ErrorKind"],"kind":"enum"},"18:659:4662":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4924:8876":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"27:768:4644":{"crate_id":27,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:12929:5464":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:570:8631":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:6727:3168":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"25:1836:4828":{"crate_id":25,"path":["regex_syntax","ast","Group"],"kind":"struct"},"2:44410:7140":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:15151:5951":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:15010:5927":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"27:655:4100":{"crate_id":27,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:4864:8848":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:8012:9574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:22107:10239":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:5158:33617":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"21:157:3142":{"crate_id":21,"path":["humantime","duration","FormattedDuration"],"kind":"struct"},"17:10284:4195":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:7444:32557":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"11:1910:4912":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:150:4244":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:10244:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"24:1649:5054":{"crate_id":24,"path":["regex","exec","ExecNoSyncStr"],"kind":"struct"},"6:6721:9352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:10609:15734":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:261:5144":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"25:2089:27258":{"crate_id":25,"path":["regex_syntax","hir","translate","HirFrame"],"kind":"enum"},"6:1526:8662":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:4784:2989":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:3502:3047":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"24:2574:5118":{"crate_id":24,"path":["regex","re_unicode","ReplacerRef"],"kind":"struct"},"5:7402:6879":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:39196:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:5361:9028":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:12887:4210":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:21678:4129":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:45743:7183":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:11567:5328":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"24:2452:5126":{"crate_id":24,"path":["regex","re_trait","SubCapturesPosIter"],"kind":"struct"},"24:2183:5003":{"crate_id":24,"path":["regex","re_bytes","Regex"],"kind":"struct"},"2:9902:4390":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:5137:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:1535:8668":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:4468:3047":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:15769:6132":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"0:401:2391":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Millis"],"kind":"variant"},"5:7621:3113":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:6263:6392":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:8607:7412":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:43366:7096":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:7851:7467":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:40291:4387":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:41566:3656":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"18:538:4100":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:6342:36648":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:2548:6267":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:2044:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"25:1057:4814":{"crate_id":25,"path":["regex_syntax","utf8","ScalarRange"],"kind":"struct"},"6:1686:8769":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5515:9104":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:6678:9337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"24:1516:5037":{"crate_id":24,"path":["regex","dfa","CacheInner"],"kind":"struct"},"2:41799:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:22388:15672":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"2:9394:4691":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"25:1955:27242":{"crate_id":25,"path":["regex_syntax","either","Either"],"kind":"enum"},"5:6600:35419":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"18:670:4668":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:12329:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:12264:5414":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"26:1366:37869":{"crate_id":26,"path":["aho_corasick","packed","api","SearchKind"],"kind":"enum"},"16:6494:6415":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:6441:9222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:40058:7035":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"21:180:2619":{"crate_id":21,"path":["humantime","wrapper","Timestamp"],"kind":"struct"},"2:3552:15574":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:32031:3181":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:3229:6526":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:1584:6772":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:43226:7084":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"29:92:27278":{"crate_id":29,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"1:12111:28464":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"25:2510:27259":{"crate_id":25,"path":["regex_syntax","unicode","ClassQuery"],"kind":"enum"},"24:1954:5018":{"crate_id":24,"path":["regex","prog","Inst"],"kind":"enum"},"25:2484:4043":{"crate_id":25,"path":["regex_syntax","parser","Parser"],"kind":"struct"},"10:44:4334":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"25:1368:4830":{"crate_id":25,"path":["regex_syntax","ast","Alternation"],"kind":"struct"},"24:2050:4150":{"crate_id":24,"path":["regex","re_builder","RegexOptions"],"kind":"struct"},"6:4971:8895":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11324:5311":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:3635:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"24:713:4988":{"crate_id":24,"path":["regex","pool","Pool"],"kind":"struct"},"2:46031:7211":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:9161:7332":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:3014:22076":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:6435:9219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:5852:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:45369:7150":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"24:2001:5031":{"crate_id":24,"path":["regex","prog","EmptyLook"],"kind":"enum"},"5:7714:6854":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:41444:33410":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:12175:5404":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:10672:2801":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:1449:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:13497:5548":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:2418:6261":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:43470:7102":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13455:5543":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"5:6421:10470":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:4424:6301":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:515:4642":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:7006:6488":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:40087:15713":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12107:4176":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"11:673:3656":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:46705:7290":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"24:1666:37102":{"crate_id":24,"path":["regex","exec","MatchType"],"kind":"enum"},"16:867:5143":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:13211:5509":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:5677:9175":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"11:396:36616":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7321:3230":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:6562:9284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"21:0:1963":{"crate_id":21,"path":["humantime"],"kind":"module"},"24:1617:5049":{"crate_id":24,"path":["regex","dfa","StateMap"],"kind":"struct"},"1:4761:9474":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"24:2565:5110":{"crate_id":24,"path":["regex","re_unicode","Matches"],"kind":"struct"},"1:10941:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:11214:5298":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"24:2084:5108":{"crate_id":24,"path":["regex","re_builder","bytes","RegexBuilder"],"kind":"struct"},"24:1927:5096":{"crate_id":24,"path":["regex","pool","PoolGuard"],"kind":"struct"},"21:134:136":{"crate_id":21,"path":["humantime","duration","Error"],"kind":"enum"},"6:6729:9353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:16138:6220":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"14:220:6757":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"25:1932:4934":{"crate_id":25,"path":["regex_syntax","ast","Flag"],"kind":"enum"},"13:0:2835":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:6402:10469":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:6466:6412":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:13774:5620":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:16079:6207":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:5250:8985":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:6821:9382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4932:8878":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"25:2174:4960":{"crate_id":25,"path":["regex_syntax","hir","Hir"],"kind":"struct"},"16:4560:6305":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:3342:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:16212:6240":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"24:1770:5076":{"crate_id":24,"path":["regex","input","InputAt"],"kind":"struct"},"17:10251:4194":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:10315:7442":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:6895:6480":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:5347:6324":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:5528:9105":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:11040:3656":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:38445:15662":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:41711:3656":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:43347:7095":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:3949:7312":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13375:5527":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:42992:7081":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:15138:5945":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"28:244:32719":{"crate_id":28,"path":["anstream","fmt","Adapter"],"kind":"struct"},"2:8616:3658":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:10399:3071":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:11092:28483":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:4683:2985":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:10250:3039":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:11812:5356":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11153:5275":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:12330:1665":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:41574:3657":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"26:1499:4762":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddyFat1Mask256"],"kind":"struct"},"2:11850:6957":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:44166:9764":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:12824:23010":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:33776:15657":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:1428:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"14:160:6753":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:43420:3072":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:2089:3084":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:2508:6265":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:8282:9593":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:8472:3067":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13024:23012":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:11651:7345":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:12328:1295":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"18:765:27192":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"25:1304:4869":{"crate_id":25,"path":["regex_syntax","ast","WithComments"],"kind":"struct"},"25:2500:4972":{"crate_id":25,"path":["regex_syntax","unicode","CaseFoldError"],"kind":"struct"},"6:479:8578":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:6480:4301":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"11:1903:4911":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:11497:5322":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:5565:9124":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:5457:15516":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:11086:28469":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:2394:6260":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:5472:9094":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:14177:5694":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:6749:6452":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:7048:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:4502:6303":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"18:521:27193":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:2741:3083":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:12297:10171":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:2548:8559":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"11:832:6771":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:8121:15644":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:7509:6589":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:4986:5166":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"5:7452:4375":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:925:6758":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11799:5354":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:2808:6279":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:11300:9693":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:42554:3028":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"24:2263:5119":{"crate_id":24,"path":["regex","re_bytes","NoExpand"],"kind":"struct"},"6:491:8583":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:7978:3295":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:8309:4558":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:5108:10322":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:43981:7122":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:22993:7008":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:7998:3294":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:7955:3305":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:839:3656":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:1503:8652":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12478:5435":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:46518:7258":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:41719:3657":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:5283:9005":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:13618:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:9220:10350":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:5260:8991":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:1496:3562":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"29:285:4087":{"crate_id":29,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"2:13038:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:3623:2995":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:9346:4563":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:13581:5576":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4824:8815":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:6353:4293":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:7422:36579":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:1510:8654":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:9241:3162":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:15456:6028":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"11:2140:6765":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"11:2562:8562":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"24:2197:5111":{"crate_id":24,"path":["regex","re_bytes","CaptureMatches"],"kind":"struct"},"2:43292:7045":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:14529:5753":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:32063:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"5:7730:6891":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:6900:9408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:10997:7329":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:1865:3679":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:2823:15597":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:6844:9751":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:15445:6027":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"26:1200:3085":{"crate_id":26,"path":["aho_corasick","error","ErrorKind"],"kind":"enum"},"17:11877:4202":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:4335:6904":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:13509:5549":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:40751:3164":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:14516:5752":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"19:0:1274":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:5588:9131":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:13877:5639":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:2657:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:21666:10239":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"25:2001:142":{"crate_id":25,"path":["regex_syntax","error","Formatter"],"kind":"struct"},"28:484:2799":{"crate_id":28,"path":["anstream","auto","AutoStream"],"kind":"struct"},"28:393:4088":{"crate_id":28,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"6:5314:9017":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"25:1183:4834":{"crate_id":25,"path":["regex_syntax","ast","print","Printer"],"kind":"struct"},"17:14912:5914":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:46509:7257":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11547:5214":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:12346:1803":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:6802:6465":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:8439:3094":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"26:1340:37870":{"crate_id":26,"path":["aho_corasick","packed","api","ForceAlgorithm"],"kind":"enum"},"2:43245:7087":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:15102:5940":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:12388:5428":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:9283:3232":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:15324:5994":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:45401:7152":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"26:1493:4761":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask256"],"kind":"struct"},"2:2499:15673":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"18:680:4669":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"21:102:2754":{"crate_id":21,"path":["humantime","date","format_rfc3339_nanos"],"kind":"function"},"1:12331:1699":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:13325:4219":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:14131:5670":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5146:8949":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:4979:8900":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:4265:10291":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:2652:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:2618:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:1829:3671":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"7:31:21910":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:3472:3095":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:5453:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:11810:7311":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:37756:15659":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:45384:7151":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:4909:8870":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:2989:4724":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:5717:15559":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:22433:10458":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:43390:6961":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:12530:5444":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:13972:5368":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"25:1187:2268":{"crate_id":25,"path":["regex_syntax","ast","print","Writer"],"kind":"struct"},"2:43944:6970":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:46492:7256":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:2355:4236":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:14111:5669":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:1485:8644":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"25:2074:4138":{"crate_id":25,"path":["regex_syntax","hir","translate","TranslatorBuilder"],"kind":"struct"},"6:5031:8926":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:39136:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:12506:6962":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:3337:2798":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:42799:4535":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"24:1987:5099":{"crate_id":24,"path":["regex","prog","InstSplit"],"kind":"struct"},"25:1694:4908":{"crate_id":25,"path":["regex_syntax","ast","ClassSetUnion"],"kind":"struct"},"2:8622:15643":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:2598:3080":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"24:2435:5124":{"crate_id":24,"path":["regex","re_set","bytes","SetMatchesIter"],"kind":"struct"},"2:45969:7209":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:9088:7431":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:15:2374":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:45821:7187":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"24:1903:5092":{"crate_id":24,"path":["regex","pikevm","Threads"],"kind":"struct"},"2:4737:2987":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"27:546:4643":{"crate_id":27,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:7954:10239":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:16165:6229":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:8216:6668":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:1057:6765":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"24:2332:5120":{"crate_id":24,"path":["regex","re_set","unicode","RegexSet"],"kind":"struct"},"2:44446:3123":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:45322:7143":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:33116:3130":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"27:752:4661":{"crate_id":27,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:1066:6766":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"25:2058:4136":{"crate_id":25,"path":["regex_syntax","hir","print","PrinterBuilder"],"kind":"struct"},"2:43235:7086":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:6471:9232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"25:2222:4807":{"crate_id":25,"path":["regex_syntax","hir","Literal"],"kind":"enum"},"17:15206:5965":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:6379:9179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"0:399:2388":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Seconds"],"kind":"variant"},"6:6768:9365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:12724:23009":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:5075:6321":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:10044:23007":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"24:2593:5009":{"crate_id":24,"path":["regex","sparse","SparseSet"],"kind":"struct"},"16:8175:6664":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"25:1114:4043":{"crate_id":25,"path":["regex_syntax","ast","parse","Parser"],"kind":"struct"},"6:6698:9345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:2596:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:7389:9477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:2852:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"24:2132:5109":{"crate_id":24,"path":["regex","re_builder","set_bytes","RegexSetBuilder"],"kind":"struct"},"25:1569:4901":{"crate_id":25,"path":["regex_syntax","ast","ClassUnicode"],"kind":"struct"},"16:5367:22933":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"27:706:4648":{"crate_id":27,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:3091:2992":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:5995:6349":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:7575:9559":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:46318:7250":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"27:680:4102":{"crate_id":27,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6588:6420":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"26:1411:4747":{"crate_id":26,"path":["aho_corasick","packed","rabinkarp","RabinKarp"],"kind":"struct"},"24:2162:4713":{"crate_id":24,"path":["regex","re_bytes","Match"],"kind":"struct"},"18:573:4644":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:7727:4316":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:7467:9490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"21:164:130":{"crate_id":21,"path":["humantime","wrapper","Duration"],"kind":"struct"},"25:1737:4815":{"crate_id":25,"path":["regex_syntax","ast","Assertion"],"kind":"struct"},"1:4044:10267":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"26:1376:4662":{"crate_id":26,"path":["aho_corasick","packed","api","FindIter"],"kind":"struct"},"26:1628:4697":{"crate_id":26,"path":["aho_corasick","prefilter","RareByteOffsets"],"kind":"struct"},"2:46196:7248":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:8509:3071":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:6427:4298":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:42545:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:3093:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"26:1681:4795":{"crate_id":26,"path":["aho_corasick","prefilter","StartBytesTwo"],"kind":"struct"},"17:15400:6016":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:11235:2751":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:2280:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:31902:8561":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"24:2107:5108":{"crate_id":24,"path":["regex","re_builder","unicode","RegexBuilder"],"kind":"struct"},"17:14386:5727":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"11:1142:6769":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5160:8950":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"25:2029:4946":{"crate_id":25,"path":["regex_syntax","hir","interval","IntervalSetIter"],"kind":"struct"},"5:110:307":{"crate_id":5,"path":["alloc","alloc","alloc"],"kind":"function"},"17:11634:5336":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:44162:9763":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:22927:7002":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:10313:2320":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:2636:6271":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:4921:7320":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:943:3656":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"25:2038:4803":{"crate_id":25,"path":["regex_syntax","hir","literal","Literals"],"kind":"struct"},"2:44389:7135":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:0:986":{"crate_id":6,"path":["libc"],"kind":"module"},"2:33175:15653":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:6039:3107":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:11029:4548":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"5:7372:3562":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:35825:6531":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:6811:9379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:11610:7464":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:8026:10169":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:7363:3125":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:9409:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"25:2372:27220":{"crate_id":25,"path":["regex_syntax","hir","GroupKind"],"kind":"enum"},"2:43869:7120":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:1830:6854":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:8117:15645":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:564:8628":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:2506:2261":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:5400:9050":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:14560:5759":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:41994:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:545:8618":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:3782:10250":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:10607:28481":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:12335:724":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:9710:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"27:81:27181":{"crate_id":27,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"25:1193:136":{"crate_id":25,"path":["regex_syntax","ast","Error"],"kind":"struct"},"16:4468:6302":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:538:8615":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:8838:3656":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:31958:2985":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"5:4925:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:12454:5433":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:1922:2804":{"crate_id":2,"path":["core","mem","take"],"kind":"function"},"2:43255:7088":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:6606:6427":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:4347:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:15356:6005":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:1978:770":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:41316:6938":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:15092:5939":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:4944:10281":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:5546:9116":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:12089:5400":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:44150:9760":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:5390:9044":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:465:4829":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:22823:6996":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:6509:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:2303:22047":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"11:2124:6511":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:6670:9335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:142:2933":{"crate_id":5,"path":["alloc","boxed"],"kind":"module"},"11:1087:36629":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13146:5486":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:41633:3117":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"14:187:22016":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:41955:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:917:4364":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11026:23020":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:4062:6299":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"24:1911:37105":{"crate_id":24,"path":["regex","pikevm","FollowEpsilon"],"kind":"enum"},"26:929:27266":{"crate_id":26,"path":["aho_corasick","state_id","StateID"],"kind":"trait"},"17:15596:6085":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"27:715:36668":{"crate_id":27,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5083:8944":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:6026:6910":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:10381:8199":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"17:15701:6113":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:15957:6162":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:22:802":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:5581:9129":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:3847:7311":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:8341:9606":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"26:1093:4716":{"crate_id":26,"path":["aho_corasick","classes","ByteClassRepresentatives"],"kind":"struct"},"17:13946:5646":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"28:292:4089":{"crate_id":28,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"6:4897:8861":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:4863:10282":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:8626:7414":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:7480:3570":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:8534:7407":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:3209:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6813:6466":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:7339:9449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:44331:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:5273:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:8300:9596":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:3541:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:7338:28015":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:6798:3176":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:4757:2988":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:40527:3070":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:7549:6600":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:10982:23019":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:11557:5327":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:11831:7312":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"26:1550:4772":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","Mask128"],"kind":"struct"},"17:15434:6023":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:43719:7031":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:39936:7029":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"28:377:4635":{"crate_id":28,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"17:13272:5523":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"25:2342:4918":{"crate_id":25,"path":["regex_syntax","hir","WordBoundary"],"kind":"enum"},"27:776:4662":{"crate_id":27,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:6849:2620":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:2938:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:6597:9305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:2684:6273":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:2855:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:41278:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:16176:6234":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"11:1883:3656":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:45565:7166":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:7537:9540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2843:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:10707:33522":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:3339:3090":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11825:5358":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"20:194:2617":{"crate_id":20,"path":["log","Level"],"kind":"enum"},"17:13922:5645":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:5039:8930":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:9131:4548":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"25:1849:27220":{"crate_id":25,"path":["regex_syntax","ast","GroupKind"],"kind":"enum"},"2:33293:15654":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:41916:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:40050:7034":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:45579:7167":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:41557:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:10989:3690":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"25:1430:27231":{"crate_id":25,"path":["regex_syntax","ast","SpecialLiteralKind"],"kind":"enum"},"6:1680:8766":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:5174:8951":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:6758:6453":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:5713:9380":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:15249:5973":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:13252:5513":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:41632:3118":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:21448:34606":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:39024:3659":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"25:2593:4979":{"crate_id":25,"path":["regex_syntax","utf8","Utf8Sequences"],"kind":"struct"},"17:11605:4200":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:1653:8753":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:7633:36642":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:10978:28343":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:2434:10226":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:7444:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"21:101:2752":{"crate_id":21,"path":["humantime","date","format_rfc3339_micros"],"kind":"function"},"1:484:28475":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:40760:6929":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:2197:3284":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:10455:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"20:0:2145":{"crate_id":20,"path":["log"],"kind":"module"},"17:12328:5418":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"26:1280:4692":{"crate_id":26,"path":["aho_corasick","nfa","Compiler"],"kind":"struct"},"17:11493:5321":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:7597:6885":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"25:1531:27228":{"crate_id":25,"path":["regex_syntax","ast","ClassAsciiKind"],"kind":"enum"},"17:12408:4205":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:15190:5962":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:9916:23004":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"}},"external_crates":{"31":{"name":"colorchoice","html_root_url":null},"28":{"name":"anstream","html_root_url":null},"25":{"name":"regex_syntax","html_root_url":null},"22":{"name":"anstyle","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"anstyle_query","html_root_url":null},"29":{"name":"anstyle_parse","html_root_url":null},"26":{"name":"aho_corasick","html_root_url":null},"23":{"name":"env_filter","html_root_url":null},"20":{"name":"log","html_root_url":"https://docs.rs/log/0.4.21/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"utf8parse","html_root_url":null},"27":{"name":"memchr","html_root_url":null},"24":{"name":"regex","html_root_url":null},"21":{"name":"humantime","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}