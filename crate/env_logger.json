{"root":"0:0:2113","crate_version":"0.11.3","includes_private":false,"index":{"b:2:2895-0:355:248":{"id":"b:2:2895-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32040:3151-0:365:2112":{"id":"a:2:32040:3151-0:365:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13134:28717":{"id":"2:13134:28717","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12312:1800"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31983:236-0:156:2591":{"id":"a:2:31983:236-0:156:2591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:407":{"id":"0:407","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[91,9],"end":[91,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3098:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13245:28531":{"id":"2:13245:28531","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2262":{"id":"0:69:2262","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[613,4],"end":[615,5]},"visibility":"public","docs":"Returns the maximum `LevelFilter` that this env logger instance is\nconfigured to output.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LevelFilter","id":"20:223:2234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3138:3482-0:336:2292":{"id":"a:2:3138:3482-0:336:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:3482","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:380":{"id":"0:380","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31985:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13128:35202":{"id":"2:13128:35202","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13126:35201"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2899:1756":{"id":"2:2899:1756","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31983:236-0:336:2292":{"id":"a:2:31983:236-0:336:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:256:2615":{"id":"0:256:2615","crate_id":0,"name":"default_level_style","span":{"filename":"src/fmt/mod.rs","begin":[163,4],"end":[177,5]},"visibility":"public","docs":"Get the default [`style::Style`] for the given level.\n\nThe style can be used to print other values besides the level.\n\nSee [`style`] for how to adapt it to the styling crate of your choice","links":{"`style`":"22:0:2115","`style::Style`":"22:405:2616"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"Level","id":"20:194:2589","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"style::Style","id":"22:405:2616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3103:246-0:60:2441":{"id":"a:2:3103:246-0:60:2441","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:31983:236-0:60:2441":{"id":"a:2:31983:236-0:60:2441","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[812,0],"end":[819,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:105:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:223:811":{"id":"0:223:811","crate_id":0,"name":"from","span":{"filename":"src/fmt/writer/mod.rs","begin":[37,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["choice",{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:794":{"id":"0:34:794","crate_id":0,"name":"format","span":{"filename":"src/logger.rs","begin":[243,4],"end":[249,5]},"visibility":"public","docs":"Sets the format function for formatting the log output.\n\nThis function is called on each record logged and should format the\nlog record and output it to the given [`Formatter`].\n\nThe format function is expected to output the string directly to the\n`Formatter` so that implementations can use the [`std::fmt`] macros\nto format and output without intermediate heap allocations. The default\n`env_logger` formatter takes advantage of this.\n\nWhen the `color` feature is enabled, styling via ANSI escape codes is supported and the\noutput will automatically respect [`Builder::write_style`].\n\n# Examples\n\nUse a custom format to write only the log message:\n\n```\nuse std::io::Write;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}\", record.args()));\n```\n\n[`Formatter`]: fmt/struct.Formatter.html\n[`String`]: https://doc.rust-lang.org/stable/std/string/struct.String.html\n[`std::fmt`]: https://doc.rust-lang.org/std/fmt/index.html","links":{"`Builder::write_style`":"0:52:2415"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["format",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3339:139","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:287:2237","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:3020:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32040:3151-0:60:2441":{"id":"a:2:32040:3151-0:60:2441","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3138:3482-0:324:2261":{"id":"a:2:3138:3482-0:324:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:3482","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:385:2749":{"id":"0:385:2749","crate_id":0,"name":"Auto","span":{"filename":"src/fmt/writer/mod.rs","begin":[16,4],"end":[16,8]},"visibility":"default","docs":"Try to print styles, but don't force the issue.","links":{},"attrs":["#[default]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"5:727:2941":{"id":"5:727:2941","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:258:2346":{"id":"0:258:2346","crate_id":0,"name":"write","span":{"filename":"src/fmt/mod.rs","begin":[181,4],"end":[183,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3020:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2893:136":{"id":"2:2893:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:13248:28528":{"id":"2:13248:28528","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23:2246":{"id":"0:23:2246","crate_id":0,"name":"DEFAULT_WRITE_STYLE_ENV","span":{"filename":"src/logger.rs","begin":[13,0],"end":[13,59]},"visibility":"public","docs":"The default name for the environment variable to read style preferences from.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"expr":"\"RUST_LOG_STYLE\"","value":null,"is_literal":true}}},"0:121:2530":{"id":"0:121:2530","crate_id":0,"name":"init_from_env","span":{"filename":"src/logger.rs","begin":[942,0],"end":[948,1]},"visibility":"public","docs":"Initializes the global logger with an env logger from the given environment\nvariables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::init_from_env(env);\n```\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:398:2111":{"id":"0:398:2111","crate_id":0,"name":"TimestampPrecision","span":{"filename":"src/fmt/mod.rs","begin":[92,0],"end":[101,1]},"visibility":"public","docs":"Formatting precision of timestamps.\n\nSeconds give precision of full seconds, milliseconds give thousands of a\nsecond (3 decimal digits), microseconds are millionth of a second (6 decimal\ndigits) and nanoseconds are billionth of a second (9 decimal digits).","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:399:2360","0:401:2363","0:403:2366","0:405:2369"],"impls":["a:2:3103:246-0:398:2111","a:2:31983:236-0:398:2111","a:2:3138:3482-0:398:2111","a:2:32040:3151-0:398:2111","a:2:41599:3087-0:398:2111","a:2:41598:3088-0:398:2111","b:2:2605-0:398:2111","b:2:2895-0:398:2111","b:2:2608-0:398:2111","b:2:2890-0:398:2111","b:2:3713-0:398:2111","b:2:2884-0:398:2111","b:2:2880-0:398:2111","b:5:725-0:398:2111","0:410","0:407","0:245","0:408"]}}},"2:13131:2689":{"id":"2:13131:2689","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12361:2688"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2427":{"id":"0:55:2427","crate_id":0,"name":"try_init","span":{"filename":"src/logger.rs","begin":[475,4],"end":[486,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"SetLoggerError","id":"20:358:2238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2608-0:398:2111":{"id":"b:2:2608-0:398:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2610:2611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:155:2670":{"id":"0:155:2670","crate_id":0,"name":"timestamp_nanos","span":{"filename":"src/fmt/humantime.rs","begin":[64,4],"end":[69,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nnanosecond precision.","links":{"`Timestamp`":"0:156:2591"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:342:781":{"id":"0:342:781","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[712,9],"end":[712,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41599:3087-0:156:2591":{"id":"a:2:41599:3087-0:156:2591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2880-0:398:2111":{"id":"b:2:2880-0:398:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2883:2306"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:102:811":{"id":"0:102:811","crate_id":0,"name":"from","span":{"filename":"src/logger.rs","begin":[807,4],"end":[809,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["filter_env",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13155:3894":{"id":"2:13155:3894","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43620:3039","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13178:28747":{"id":"2:13178:28747","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:4771"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12629:6924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3715:1771":{"id":"2:3715:1771","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39282:6996","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324:2261":{"id":"0:324:2261","crate_id":0,"name":"Builder","span":{"filename":"src/logger.rs","begin":[38,0],"end":[43,1]},"visibility":"public","docs":"`Builder` acts as builder for initializing a `Logger`.\n\nIt can be used to customize the log format, change the environment variable used\nto provide the logging directives and also set the default log level filter.\n\n# Examples\n\n```\n# use std::io::Write;\nuse env_logger::Builder;\nuse log::{LevelFilter, error, info};\n\nlet mut builder = Builder::from_default_env();\n\nbuilder\n    .format(|buf, record| writeln!(buf, \"{} - {}\", record.level(), record.args()))\n    .filter(None, LevelFilter::Info)\n    .init();\n\nerror!(\"error message\");\ninfo!(\"info message\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:24","a:2:3103:246-0:324:2261","a:2:31983:236-0:324:2261","a:2:3138:3482-0:324:2261","a:2:32040:3151-0:324:2261","a:2:41599:3087-0:324:2261","a:2:41598:3088-0:324:2261","b:2:2605-0:324:2261","b:2:2895-0:324:2261","b:2:2608-0:324:2261","b:2:2890-0:324:2261","b:2:3713-0:324:2261","b:2:2884-0:324:2261","b:2:2880-0:324:2261","0:329","0:58"]}}},"0:245":{"id":"0:245","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[104,0],"end":[108,1]},"visibility":"default","docs":"The default timestamp precision is seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:246:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5606:35918":{"id":"5:5606:35918","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31983:236-0:355:248":{"id":"a:2:31983:236-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/target.rs","begin":[14,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:212:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59:781":{"id":"0:59:781","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[519,4],"end":[528,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[803,0],"end":[810,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::borrow::Cow","id":"5:730:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:102:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3103:246-0:365:2112":{"id":"a:2:3103:246-0:365:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13253:35222":{"id":"2:13253:35222","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4896:35222"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43665:7006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32040:3151-0:324:2261":{"id":"a:2:32040:3151-0:324:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:41:2356":{"id":"0:41:2356","crate_id":0,"name":"format_timestamp","span":{"filename":"src/logger.rs","begin":[285,4],"end":[288,5]},"visibility":"public","docs":"Configures if timestamp should be included and in what precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["timestamp",{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"fmt::TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:247:142":{"id":"0:247:142","crate_id":0,"name":"Formatter","span":{"filename":"src/fmt/mod.rs","begin":[130,0],"end":[133,1]},"visibility":"public","docs":"A formatter to write logs into.\n\n`Formatter` implements the standard [`Write`] trait for writing log records.\nIt also supports terminal styling using ANSI escape codes.\n\n# Examples\n\nUse the [`writeln`] macro to format a log record.\nAn instance of a `Formatter` is passed to an `env_logger` format as `buf`:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}: {}\", record.level(), record.args()));\n```\n\n[`Write`]: std::io::Write\n[`writeln`]: std::writeln","links":{"std::io::Write":"1:3588:2629","std::writeln":"2:16:2918"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:150","0:255","a:2:3103:246-0:247:142","a:2:31983:236-0:247:142","a:2:3138:3482-0:247:142","a:2:32040:3151-0:247:142","a:2:41599:3087-0:247:142","a:2:41598:3088-0:247:142","b:2:2605-0:247:142","b:2:2895-0:247:142","b:2:2608-0:247:142","b:2:2890-0:247:142","b:2:3713-0:247:142","b:2:2884-0:247:142","b:2:2880-0:247:142","0:260","0:257"]}}},"0:366:2751":{"id":"0:366:2751","crate_id":0,"name":"Always","span":{"filename":"src/fmt/writer/mod.rs","begin":[18,4],"end":[18,10]},"visibility":"default","docs":"Try very hard to print styles.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13199:28756":{"id":"2:13199:28756","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41598:3088-0:247:142":{"id":"a:2:41598:3088-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:3088","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13175:2679":{"id":"2:13175:2679","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12813:4771","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::split_whitespace":"2:13153:33322","str::rsplit":"2:13181:28749"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43366:3043","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[623,0],"end":[692,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Log","id":"20:120:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:72:2476","0:73:2117","0:77:2486"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[694,0],"end":[700,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5850:1731":{"id":"5:5850:1731","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2113":{"id":"0:0:2113","crate_id":0,"name":"env_logger","span":{"filename":"src/lib.rs","begin":[7,0],"end":[275,24]},"visibility":"public","docs":"A simple logger that can be configured via environment variables, for use\nwith the logging facade exposed by the [`log` crate][log-crate-url].\n\nDespite having \"env\" in its name, **`env_logger`** can also be configured by\nother means besides environment variables. See [the examples][gh-repo-examples]\nin the source repository for more approaches.\n\nBy default, `env_logger` writes logs to `stderr`, but can be configured to\ninstead write them to `stdout`.\n\n## Example\n\n```\nuse log::{debug, error, log_enabled, info, Level};\n\nenv_logger::init();\n\ndebug!(\"this is a debug {}\", \"message\");\nerror!(\"this is printed by default\");\n\nif log_enabled!(Level::Info) {\n    let x = 3 * 4; // expensive computation\n    info!(\"the answer was: {}\", x);\n}\n```\n\nAssumes the binary is `main`:\n\n```{.bash}\n$ RUST_LOG=error ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n```\n\n```{.bash}\n$ RUST_LOG=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\n```{.bash}\n$ RUST_LOG=debug ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nYou can also set the log level on a per module basis:\n\n```{.bash}\n$ RUST_LOG=main=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nAnd enable all logging:\n\n```{.bash}\n$ RUST_LOG=main ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nIf the binary name contains hyphens, you will need to replace\nthem with underscores:\n\n```{.bash}\n$ RUST_LOG=my_app ./my-app\n[2017-11-09T02:12:24Z DEBUG my_app] this is a debug message\n[2017-11-09T02:12:24Z ERROR my_app] this is printed by default\n[2017-11-09T02:12:24Z INFO my_app] the answer was: 12\n```\n\nThis is because Rust modules and crates cannot contain hyphens\nin their name, although `cargo` continues to accept them.\n\nSee the documentation for the [`log` crate][log-crate-url] for more\ninformation about its API.\n\n## Enabling logging\n\n**By default all logging is disabled except for the `error` level**\n\nThe **`RUST_LOG`** environment variable controls logging with the syntax:\n```text\nRUST_LOG=[target][=][level][,...]\n```\nOr in other words, its a comma-separated list of directives.\nDirectives can filter by **target**, by **level**, or both (using `=`).\n\nFor example,\n```text\nRUST_LOG=data=debug,hardware=debug\n```\n\n**target** is typically the path of the module the message\nin question originated from, though it can be overridden.\nThe path is rooted in the name of the crate it was compiled for, so if\nyour program is in a file called, for example, `hello.rs`, the path would\nsimply be `hello`.\n\nFurthermore, the log can be filtered using prefix-search based on the\nspecified log target.\n\nFor example, `RUST_LOG=example` would match the following targets:\n- `example`\n- `example::test`\n- `example::test::module::submodule`\n- `examples::and_more_examples`\n\nWhen providing the crate name or a module path, explicitly specifying the\nlog level is optional. If omitted, all logging for the item will be\nenabled.\n\n**level** is the maximum [`log::Level`][level-enum] to be shown and includes:\n- `error`\n- `warn`\n- `info`\n- `debug`\n- `trace`\n- `off` (pseudo level to disable all logging for the target)\n\nLogging level names are case-insensitive; e.g.,\n`debug`, `DEBUG`, and `dEbuG` all represent the same logging level. For\nconsistency, our convention is to use the lower case names. Where our docs\ndo use other forms, they do so in the context of specific examples, so you\nwon't be surprised if you see similar usage in the wild.\n\nSome examples of valid values of `RUST_LOG` are:\n\n- `RUST_LOG=hello` turns on all logging for the `hello` module\n- `RUST_LOG=trace` turns on all logging for the application, regardless of its name\n- `RUST_LOG=TRACE` turns on all logging for the application, regardless of its name (same as previous)\n- `RUST_LOG=info` turns on all info logging\n- `RUST_LOG=INFO` turns on all info logging (same as previous)\n- `RUST_LOG=hello=debug` turns on debug logging for `hello`\n- `RUST_LOG=hello=DEBUG` turns on debug logging for `hello` (same as previous)\n- `RUST_LOG=hello,std::option` turns on `hello`, and std's option logging\n- `RUST_LOG=error,hello=warn` turn on global error logging and also warn for `hello`\n- `RUST_LOG=error,hello=off`  turn on global error logging, but turn off logging for `hello`\n- `RUST_LOG=off` turns off all logging for the application\n- `RUST_LOG=OFF` turns off all logging for the application (same as previous)\n\n## Filtering results\n\nA `RUST_LOG` directive may include a regex filter. The syntax is to append `/`\nfollowed by a regex. Each message is checked against the regex, and is only\nlogged if it matches. Note that the matching is done after formatting the\nlog string but before adding any logging meta-data. There is a single filter\nfor all modules.\n\nSome examples:\n\n* `hello/foo` turns on all logging for the 'hello' module where the log\n  message includes 'foo'.\n* `info/f.o` turns on all info logging where the log message includes 'foo',\n  'f1o', 'fao', etc.\n* `hello=debug/foo*foo` turns on debug logging for 'hello' where the log\n  message includes 'foofoo' or 'fofoo' or 'fooooooofoo', etc.\n* `error,hello=warn/[0-9]scopes` turn on global error logging and also\n  warn for hello. In both cases the log message must include a single digit\n  number followed by 'scopes'.\n\n## Capturing logs in tests\n\nRecords logged during `cargo test` will not be captured by the test harness by default.\nThe [`Builder::is_test`] method can be used in unit tests to ensure logs will be captured:\n\n```\n#[cfg(test)]\nmod tests {\n    use log::info;\n\n    fn init() {\n        let _ = env_logger::builder().is_test(true).try_init();\n    }\n\n    #[test]\n    fn it_works() {\n        init();\n\n        info!(\"This record will be captured by `cargo test`\");\n\n        assert_eq!(2, 1 + 1);\n    }\n}\n```\n\nEnabling test capturing comes at the expense of color and other style support\nand may have performance implications.\n\n## Disabling colors\n\nColors and other styles can be configured with the `RUST_LOG_STYLE`\nenvironment variable. It accepts the following values:\n\n* `auto` (default) will attempt to print style characters, but don't force the issue.\nIf the console isn't available on Windows, or if TERM=dumb, for example, then don't print colors.\n* `always` will always print style characters even if they aren't supported by the terminal.\nThis includes emitting ANSI colors on Windows if the console API is unavailable.\n* `never` will never print style characters.\n\n## Tweaking the default format\n\nParts of the default format can be excluded from the log output using the [`Builder`].\nThe following example excludes the timestamp from the log output:\n\n```\nenv_logger::builder()\n    .format_timestamp(None)\n    .init();\n```\n\n### Stability of the default format\n\nThe default format won't optimise for long-term stability, and explicitly makes no\nguarantees about the stability of its output across major, minor or patch version\nbumps during `0.x`.\n\nIf you want to capture or interpret the output of `env_logger` programmatically\nthen you should use a custom format.\n\n### Using a custom format\n\nCustom formats can be provided as closures to the [`Builder`].\nThese closures take a [`Formatter`][crate::fmt::Formatter] and `log::Record` as arguments:\n\n```\nuse std::io::Write;\n\nenv_logger::builder()\n    .format(|buf, record| {\n        writeln!(buf, \"{}: {}\", record.level(), record.args())\n    })\n    .init();\n```\n\nSee the [`fmt`] module for more details about custom formats.\n\n## Specifying defaults for environment variables\n\n`env_logger` can read configuration from environment variables.\nIf these variables aren't present, the default value to use can be tweaked with the [`Env`] type.\nThe following example defaults to log `warn` and above if the `RUST_LOG` environment variable\nisn't set:\n\n```\nuse env_logger::Env;\n\nenv_logger::Builder::from_env(Env::default().default_filter_or(\"warn\")).init();\n```\n\n[gh-repo-examples]: https://github.com/rust-cli/env_logger/tree/main/examples\n[level-enum]: https://docs.rs/log/latest/log/enum.Level.html\n[log-crate-url]: https://docs.rs/log","links":{"`Builder`":"0:324:2261","`Env`":"0:336:2292","`Builder::is_test`":"0:54:2420","`fmt`":"0:128:781","crate::fmt::Formatter":"0:247:142"},"attrs":["#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/static/images/favicon.ico\")]","#![deny(missing_debug_implementations, missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:128:781","0:320-0:355:248","0:321-0:398:2111","0:322-0:365:2112","0:323-0:3:2110"],"is_stripped":false}}},"b:2:3713-0:336:2292":{"id":"b:2:3713-0:336:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2605-0:324:2261":{"id":"b:2:2605-0:324:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2231"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32040:3151-0:156:2591":{"id":"a:2:32040:3151-0:156:2591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:57:2428":{"id":"0:57:2428","crate_id":0,"name":"build","span":{"filename":"src/logger.rs","begin":[506,4],"end":[515,5]},"visibility":"public","docs":"Build an env logger.\n\nThe returned logger implements the `Log` trait and can be installed manually\nor nested within another logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2895-0:60:2441":{"id":"b:2:2895-0:60:2441","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:83:2262":{"id":"0:83:2262","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[725,4],"end":[732,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["filter_env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:728:2511":{"id":"5:728:2511","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3713-0:247:142":{"id":"b:2:3713-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13243:2402":{"id":"2:13243:2402","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12774:135","`FromStr`":"2:12773:2989"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12773:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12773:2989","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374:781":{"id":"0:374:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,22],"end":[12,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[10,0],"end":[70,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::fmt::Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:2357","0:152:2667","0:153:2668","0:154:2669","0:155:2670"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13225:35218":{"id":"2:13225:35218","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:4771"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:2502":{"id":"0:88:2502","crate_id":0,"name":"default_filter_or","span":{"filename":"src/logger.rs","begin":[750,4],"end":[757,5]},"visibility":"public","docs":"Use the default environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3103:246-0:336:2292":{"id":"a:2:3103:246-0:336:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3138:3482-0:156:2591":{"id":"a:2:3138:3482-0:156:2591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:3482","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:241-0:365:2112":{"id":"0:241-0:365:2112","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[82,0],"end":[82,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::writer::WriteStyle","name":"WriteStyle","id":"0:365:2112","glob":false}}},"b:2:2884-0:398:2111":{"id":"b:2:2884-0:398:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3:2110":{"id":"0:3:2110","crate_id":0,"name":"logger","span":{"filename":"src/logger.rs","begin":[1,0],"end":[1036,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:2243","0:23:2246","0:324:2261","0:60:2441","0:336:2292","0:116:2427","0:117:2436","0:118:2515","0:121:2530","0:124:2293","0:125:2289"],"is_stripped":true}}},"2:13141:28716":{"id":"2:13141:28716","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13255:10132":{"id":"2:13255:10132","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4897:10132"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43674:6877","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:2436":{"id":"0:117:2436","crate_id":0,"name":"init","span":{"filename":"src/logger.rs","begin":[878,0],"end":[880,1]},"visibility":"public","docs":"Initializes the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:259:2486":{"id":"0:259:2486","crate_id":0,"name":"flush","span":{"filename":"src/fmt/mod.rs","begin":[185,4],"end":[187,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3020:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:2359":{"id":"0:42:2359","crate_id":0,"name":"format_timestamp_secs","span":{"filename":"src/logger.rs","begin":[291,4],"end":[293,5]},"visibility":"public","docs":"Configures the timestamp to use second precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3103:246-0:355:248":{"id":"a:2:3103:246-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:31983:236-0:365:2112":{"id":"a:2:31983:236-0:365:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41598:3088-0:398:2111":{"id":"a:2:41598:3088-0:398:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:3088","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:729:3587":{"id":"5:729:3587","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2884-0:365:2112":{"id":"b:2:2884-0:365:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:152:2667":{"id":"0:152:2667","crate_id":0,"name":"timestamp_seconds","span":{"filename":"src/fmt/humantime.rs","begin":[37,4],"end":[42,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with full\nsecond precision.","links":{"`Timestamp`":"0:156:2591"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[157,0],"end":[178,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:256:2615"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3103:246-0:156:2591":{"id":"a:2:3103:246-0:156:2591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2890-0:324:2261":{"id":"b:2:2890-0:324:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3713-0:365:2112":{"id":"b:2:3713-0:365:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13139:28715":{"id":"2:13139:28715","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2880-0:365:2112":{"id":"b:2:2880-0:365:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2883:2306"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:382:679":{"id":"0:382:679","crate_id":0,"name":"eq","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[190,0],"end":[198,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:261:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:321-0:398:2111":{"id":"0:321-0:398:2111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[274,28],"end":[274,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::TimestampPrecision","name":"TimestampPrecision","id":"0:398:2111","glob":false}}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[712,9],"end":[712,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:342:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:371:464":{"id":"0:371:464","crate_id":0,"name":"clone","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[180,0],"end":[188,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_all_vectored","write_fmt","is_write_vectored","by_ref","write_vectored","write_all"],"trait":{"name":"Write","id":"1:3588:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:258:2346","0:259:2486"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,16],"end":[12,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3098:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13146:28741":{"id":"2:13146:28741","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13145:28740","str::split_at_mut_checked":"2:13148:28745"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:2474":{"id":"0:70:2474","crate_id":0,"name":"matches","span":{"filename":"src/logger.rs","begin":[618,4],"end":[620,5]},"visibility":"public","docs":"Checks if this record matches the configured filter.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["record",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:287:2237","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3103:246-0:247:142":{"id":"a:2:3103:246-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13190:28751":{"id":"2:13190:28751","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:4771","str::rsplitn":"2:13193:28753"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43470:5086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13249:28527":{"id":"2:13249:28527","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13125:35200":{"id":"2:13125:35200","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:2323":{"id":"0:33:2323","crate_id":0,"name":"parse_default_env","span":{"filename":"src/logger.rs","begin":[210,4],"end":[212,5]},"visibility":"public","docs":"Applies the configuration from the environment using default variable names.\n\nThis method is a convenient way to call `parse_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger with filter level `Off`, then configure it using the\ndefault environment variables:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:355:248":{"id":"b:2:2890-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,33],"end":[12,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10461:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:378:851"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13137:28714":{"id":"2:13137:28714","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41506:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:2436":{"id":"0:56:2436","crate_id":0,"name":"init","span":{"filename":"src/logger.rs","begin":[497,4],"end":[500,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:398:2111":{"id":"b:2:2890-0:398:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:221:811":{"id":"0:221:811","crate_id":0,"name":"from","span":{"filename":"src/fmt/writer/mod.rs","begin":[25,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["choice",{"resolved_path":{"name":"anstream::ColorChoice","id":"31:21:2753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:371:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31983:236-0:324:2261":{"id":"a:2:31983:236-0:324:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5618:28529":{"id":"5:5618:28529","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13249:28527"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2476":{"id":"0:72:2476","crate_id":0,"name":"enabled","span":{"filename":"src/logger.rs","begin":[624,4],"end":[626,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:306:2236","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13147:28744":{"id":"2:13147:28744","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13148:28745"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3713-0:398:2111":{"id":"b:2:3713-0:398:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3138:3482-0:355:248":{"id":"a:2:3138:3482-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:3482","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2890-0:365:2112":{"id":"b:2:2890-0:365:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:32:2317":{"id":"0:32:2317","crate_id":0,"name":"from_default_env","span":{"filename":"src/logger.rs","begin":[184,4],"end":[186,5]},"visibility":"public","docs":"Initializes the log builder from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger using the default environment variables:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240-0:355:248":{"id":"0:240-0:355:248","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[81,0],"end":[81,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::writer::Target","name":"Target","id":"0:355:248","glob":false}}},"a:2:31983:236-0:247:142":{"id":"a:2:31983:236-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13196:28755":{"id":"2:13196:28755","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31983:236-0:398:2111":{"id":"a:2:31983:236-0:398:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:45:2368":{"id":"0:45:2368","crate_id":0,"name":"format_timestamp_nanos","span":{"filename":"src/logger.rs","begin":[306,4],"end":[308,5]},"visibility":"public","docs":"Configures the timestamp to use nanosecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:365:2112":{"id":"b:2:2605-0:365:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2231"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41598:3088-0:156:2591":{"id":"a:2:41598:3088-0:156:2591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:3088","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:261:781":{"id":"0:261:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[191,4],"end":[197,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2310":{"id":"0:53:2310","crate_id":0,"name":"parse_write_style","span":{"filename":"src/logger.rs","begin":[452,4],"end":[455,5]},"visibility":"public","docs":"Parses whether or not to write styles in the same form as the `RUST_LOG_STYLE`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write_style",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:60:2441":{"id":"b:2:2605-0:60:2441","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2231"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:151:2357":{"id":"0:151:2357","crate_id":0,"name":"timestamp","span":{"filename":"src/fmt/humantime.rs","begin":[28,4],"end":[33,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC.\n\n# Examples\n\nInclude the current timestamp with the log record:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    let ts = buf.timestamp();\n\n    writeln!(buf, \"{}: {}: {}\", ts, record.level(), record.args())\n});\n```","links":{"`Timestamp`":"0:156:2591"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:365:2112":{"id":"b:5:725-0:365:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:2941","5:728:2511","5:729:3587"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2884-0:247:142":{"id":"b:2:2884-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2883:2306":{"id":"2:2883:2306","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2857:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356:2770":{"id":"0:356:2770","crate_id":0,"name":"Stdout","span":{"filename":"src/fmt/writer/target.rs","begin":[6,4],"end":[6,10]},"visibility":"default","docs":"Logs will be sent to standard output.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2880-0:355:248":{"id":"b:2:2880-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2883:2306"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13123:975":{"id":"2:13123:975","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12295:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:398:2111":{"id":"b:5:725-0:398:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:2941","5:728:2511","5:729:3587"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2608-0:336:2292":{"id":"b:2:2608-0:336:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2610:2611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2884-0:324:2261":{"id":"b:2:2884-0:324:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13252:29932":{"id":"2:13252:29932","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:979:41475"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2894:1758":{"id":"2:2894:1758","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2365":{"id":"0:44:2365","crate_id":0,"name":"format_timestamp_micros","span":{"filename":"src/logger.rs","begin":[301,4],"end":[303,5]},"visibility":"public","docs":"Configures the timestamp to use microsecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:409:464":{"id":"0:409:464","crate_id":0,"name":"clone","span":{"filename":"src/fmt/mod.rs","begin":[91,15],"end":[91,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:35920":{"id":"5:5615:35920","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:296:2340","`String`":"5:7617:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2340","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616:3063":{"id":"5:5616:3063","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13144:35205":{"id":"2:13144:35205","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12301:1673","crate::ops::IndexMut":"2:3374:10166","str::slice_unchecked":"2:13143:35204"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13156:35206":{"id":"2:13156:35206","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43630:7081","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2608-0:324:2261":{"id":"b:2:2608-0:324:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2610:2611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:68:2317":{"id":"0:68:2317","crate_id":0,"name":"from_default_env","span":{"filename":"src/logger.rs","begin":[607,4],"end":[609,5]},"visibility":"public","docs":"Creates the logger from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The logger will use the\n[default environment variables].\n\n# Examples\n\nCreates a logger using the default environment variables:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_default_env();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:781":{"id":"0:160:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/humantime.rs","begin":[84,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:1154":{"id":"0:82:1154","crate_id":0,"name":"new","span":{"filename":"src/logger.rs","begin":[720,4],"end":[722,5]},"visibility":"public","docs":"Get a default set of environment variables.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,22],"end":[12,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:39:2350":{"id":"0:39:2350","crate_id":0,"name":"format_target","span":{"filename":"src/logger.rs","begin":[272,4],"end":[275,5]},"visibility":"public","docs":"Whether or not to write the target in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:368:2617":{"id":"0:368:2617","crate_id":0,"name":"Never","span":{"filename":"src/fmt/writer/mod.rs","begin":[20,4],"end":[20,9]},"visibility":"default","docs":"Never print styles.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:105:60":{"id":"0:105:60","crate_id":0,"name":"default","span":{"filename":"src/logger.rs","begin":[813,4],"end":[818,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238-22:0:2115":{"id":"0:238-22:0:2115","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[75,0],"end":[75,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"import":{"source":"anstyle","name":"style","id":"22:0:2115","glob":false}}},"0:43:2362":{"id":"0:43:2362","crate_id":0,"name":"format_timestamp_millis","span":{"filename":"src/logger.rs","begin":[296,4],"end":[298,5]},"visibility":"public","docs":"Configures the timestamp to use millisecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:2486":{"id":"0:77:2486","crate_id":0,"name":"flush","span":{"filename":"src/logger.rs","begin":[691,4],"end":[691,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1154":{"id":"0:25:1154","crate_id":0,"name":"new","span":{"filename":"src/logger.rs","begin":[72,4],"end":[74,5]},"visibility":"public","docs":"Initializes the log builder with defaults.\n\n**NOTE:** This method won't read from any environment variables.\nUse the [`filter`] and [`write_style`] methods to configure the builder\nor use [`from_env`] or [`from_default_env`] instead.\n\n# Examples\n\nCreate a new builder and configure filters and style:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder\n    .filter(None, LevelFilter::Info)\n    .write_style(WriteStyle::Always)\n    .init();\n```\n\n[`filter`]: #method.filter\n[`write_style`]: #method.write_style\n[`from_env`]: #method.from_env\n[`from_default_env`]: #method.from_default_env","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:2353":{"id":"0:40:2353","crate_id":0,"name":"format_indent","span":{"filename":"src/logger.rs","begin":[279,4],"end":[282,5]},"visibility":"public","docs":"Configures the amount of spaces to use to indent multiline log records.\nA value of `None` disables any kind of indentation.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["indent",{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:781":{"id":"0:79:781","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[695,4],"end":[699,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32040:3151-0:247:142":{"id":"a:2:32040:3151-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:128:781":{"id":"0:128:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[1,0],"end":[809,1]},"visibility":"public","docs":"Formatting for log records.\n\nThis module contains a [`Formatter`] that can be used to format log records\ninto without needing temporary allocations. Usually you won't need to worry\nabout the contents of this module and can use the `Formatter` like an ordinary\n[`Write`].\n\n# Formatting log records\n\nThe format used to print log records can be customised using the [`Builder::format`]\nmethod.\n\nTerminal styling is done through ANSI escape codes and will be adapted to the capabilities of\nthe target stream.\nFor example, you could use one of:\n- [anstyle](https://docs.rs/anstyle) is a minimal, runtime string styling API and is re-exported as [`style`]\n- [owo-colors](https://docs.rs/owo-colors) is a feature rich runtime string styling API\n- [color-print](https://docs.rs/color-print) for feature-rich compile-time styling API\nSee also [`Formatter::default_level_style`]\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    writeln!(buf, \"{}: {}\",\n        record.level(),\n        record.args())\n});\n```\n\n# Key Value arguments\n\nIf the `unstable-kv` feature is enabled, then the default format will include key values from\nthe log by default, but this can be disabled by calling [`Builder::format_key_values`]\nwith [`hidden_kv_format`] as the format function.\n\nThe way these keys and values are formatted can also be customized with a separate format\nfunction that is called by the default format with [`Builder::format_key_values`].\n\n```\n# #[cfg(feature= \"unstable-kv\")]\n# {\nuse log::info;\nenv_logger::init();\ninfo!(x=\"45\"; \"Some message\");\ninfo!(x=\"12\"; \"Another message {x}\", x=\"12\");\n# }\n```\n\nSee <https://docs.rs/log/latest/log/#structured-logging>.\n\n[`Builder::format`]: crate::Builder::format\n[`Write`]: std::io::Write\n[`Builder::format_key_values`]: crate::Builder::format_key_values","links":{"`Formatter`":"0:247:142","crate::Builder::format":"0:34:794","std::io::Write":"1:3588:2629","`style`":"22:0:2115","`Formatter::default_level_style`":"0:256:2615"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:238-22:0:2115","0:239-0:156:2591","0:240-0:355:248","0:241-0:365:2112","0:398:2111","0:247:142"],"is_stripped":false}}},"2:13132:35203":{"id":"2:13132:35203","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13205:35209":{"id":"2:13205:35209","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12813:4771","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::matches":"2:13202:2474"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43588:7080","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2895-0:247:142":{"id":"b:2:2895-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:2591":{"id":"0:156:2591","crate_id":0,"name":"Timestamp","span":{"filename":"src/fmt/humantime.rs","begin":[78,0],"end":[81,1]},"visibility":"public","docs":"An [RFC3339] formatted timestamp.\n\nThe timestamp implements [`Display`] and can be written to a [`Formatter`].\n\n[RFC3339]: https://www.ietf.org/rfc/rfc3339.txt\n[`Display`]: std::fmt::Display","links":{"`Formatter`":"0:247:142","std::fmt::Display":"2:10250:128"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3103:246-0:156:2591","a:2:31983:236-0:156:2591","a:2:3138:3482-0:156:2591","a:2:32040:3151-0:156:2591","a:2:41599:3087-0:156:2591","a:2:41598:3088-0:156:2591","b:2:2605-0:156:2591","b:2:2895-0:156:2591","b:2:2608-0:156:2591","b:2:2890-0:156:2591","b:2:3713-0:156:2591","b:2:2884-0:156:2591","b:2:2880-0:156:2591","b:5:5848-0:156:2591","0:159","0:168"]}}},"2:2898:136":{"id":"2:2898:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31911:8529","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13237:35220":{"id":"2:13237:35220","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:4771"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3713-0:355:248":{"id":"b:2:3713-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13122":{"id":"2:13122","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13123:975","2:13124:3529","2:13125:35200","2:13126:35201","2:13128:35202","2:13131:2689","2:13132:35203","2:13133:334","2:13134:28717","2:13135:2503","2:13137:28714","2:13139:28715","2:13141:28716","2:13143:35204","2:13144:35205","2:13145:28740","2:13146:28741","2:13147:28744","2:13148:28745","2:13150:6943","2:13151:7092","2:13152:3902","2:13153:33322","2:13154:33323","2:13155:3894","2:13156:35206","2:13157:33320","2:13158:28757","2:13161:28758","2:13164:28759","2:13167:3567","2:13171:3528","2:13175:2679","2:13178:28747","2:13181:28749","2:13184:35207","2:13187:35208","2:13190:28751","2:13193:28753","2:13196:28755","2:13199:28756","2:13202:2474","2:13205:35209","2:13208:35210","2:13211:35211","2:13214:35212","2:13216:35213","2:13218:35214","2:13220:35215","2:13221:35216","2:13222:35217","2:13225:35218","2:13228:27946","2:13231:28760","2:13234:35219","2:13237:35220","2:13240:35221","2:13243:2402","2:13245:28531","2:13246:29927","2:13247:28532","2:13248:28528","2:13249:28527","2:13250:29930","2:13251:29931","2:13252:29932","2:13253:35222","2:13255:10132","2:13256:27218"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5598":{"id":"5:5598","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5599:35916","5:5600:2635","5:5603:35917","5:5606:35918","5:5614:35919","5:5615:35920","5:5616:3063","5:5617:28530","5:5618:28529"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:246:60":{"id":"0:246:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/mod.rs","begin":[105,4],"end":[107,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2441":{"id":"0:60:2441","crate_id":0,"name":"Logger","span":{"filename":"src/logger.rs","begin":[550,0],"end":[554,1]},"visibility":"public","docs":"The env logger.\n\nThis struct implements the `Log` trait from the [`log` crate][log-crate-url],\nwhich allows it to act as a logger.\n\nThe [`init()`], [`try_init()`], [`Builder::init()`] and [`Builder::try_init()`]\nmethods will each construct a `Logger` and immediately initialize it as the\ndefault global logger.\n\nIf you'd instead need access to the constructed `Logger`, you can use\nthe associated [`Builder`] and install it with the\n[`log` crate][log-crate-url] directly.\n\n[log-crate-url]: https://docs.rs/log\n[`init()`]: fn.init.html\n[`try_init()`]: fn.try_init.html\n[`Builder::init()`]: struct.Builder.html#method.init\n[`Builder::try_init()`]: struct.Builder.html#method.try_init\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:64","a:2:3103:246-0:60:2441","a:2:31983:236-0:60:2441","a:2:3138:3482-0:60:2441","a:2:32040:3151-0:60:2441","a:2:41599:3087-0:60:2441","a:2:41598:3088-0:60:2441","b:2:2605-0:60:2441","b:2:2895-0:60:2441","b:2:2608-0:60:2441","b:2:2890-0:60:2441","b:2:3713-0:60:2441","b:2:2884-0:60:2441","b:2:2880-0:60:2441","0:71","0:78"]}}},"b:2:2895-0:365:2112":{"id":"b:2:2895-0:365:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:365:2112":{"id":"0:365:2112","crate_id":0,"name":"WriteStyle","span":{"filename":"src/fmt/writer/mod.rs","begin":[13,0],"end":[21,1]},"visibility":"public","docs":"Whether or not to print styles to the target.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:385:2749","0:366:2751","0:368:2617"],"impls":["a:2:3103:246-0:365:2112","a:2:31983:236-0:365:2112","a:2:3138:3482-0:365:2112","a:2:32040:3151-0:365:2112","a:2:41599:3087-0:365:2112","a:2:41598:3088-0:365:2112","b:2:2605-0:365:2112","b:2:2895-0:365:2112","b:2:2608-0:365:2112","b:2:2890-0:365:2112","b:2:3713-0:365:2112","b:2:2884-0:365:2112","b:2:2880-0:365:2112","b:5:725-0:365:2112","0:222","0:372","0:377","0:375","0:380","0:383","0:220","0:370","0:381","0:373"]}}},"a:2:3138:3482-0:398:2111":{"id":"a:2:3138:3482-0:398:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:3482","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13133:334":{"id":"2:13133:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13134:28717","`u8`":"1:12312:1800"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13171:3528":{"id":"2:13171:3528","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41506:190","prim@char":"1:12295:458","self::pattern":"2:12813:4771"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2289":{"id":"0:26:2289","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[104,4],"end":[111,5]},"visibility":"public","docs":"Initializes the log builder from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nInitialise a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::from_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13202:2474":{"id":"2:13202:2474","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12813:4771","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::rmatches":"2:13205:35209"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43570:5084","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2895-0:336:2292":{"id":"b:2:2895-0:336:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2655:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:382:679"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[83,0],"end":[98,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:38:2348":{"id":"0:38:2348","crate_id":0,"name":"format_module_path","span":{"filename":"src/logger.rs","begin":[266,4],"end":[269,5]},"visibility":"public","docs":"Whether or not to write the module path in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41599:3087-0:398:2111":{"id":"a:2:41599:3087-0:398:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13150:6943":{"id":"2:13150:6943","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12295:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43336:6936","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:2669":{"id":"0:154:2669","crate_id":0,"name":"timestamp_micros","span":{"filename":"src/fmt/humantime.rs","begin":[55,4],"end":[60,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmicrosecond precision.","links":{"`Timestamp`":"0:156:2591"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3103:246-0:398:2111":{"id":"a:2:3103:246-0:398:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13211:35211":{"id":"2:13211:35211","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12813:4771","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::match_indices":"2:13208:35210"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43534:7079","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13151:7092":{"id":"2:13151:7092","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12295:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43342:7074","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:2262":{"id":"0:49:2262","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[390,4],"end":[393,5]},"visibility":"public","docs":"Adds filters to the logger.\n\nThe given module (if any) will log at most the specified level provided.\nIf no module is provided then the filter will apply to all log messages.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter(Some(\"path::to::module\"), LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["module",{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:223:2234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2393":{"id":"0:48:2393","crate_id":0,"name":"filter_level","span":{"filename":"src/logger.rs","begin":[368,4],"end":[371,5]},"visibility":"public","docs":"Adds a directive to the filter for all modules.\n\n# Examples\n\nOnly include messages for info and above for logs globally:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:223:2234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41598:3088-0:336:2292":{"id":"a:2:41598:3088-0:336:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:3088","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:322-0:365:2112":{"id":"0:322-0:365:2112","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[274,48],"end":[274,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::WriteStyle","name":"WriteStyle","id":"0:365:2112","glob":false}}},"2:13164:28759":{"id":"2:13164:28759","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:4771"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41599:3087-0:355:248":{"id":"a:2:41599:3087-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:362:60":{"id":"0:362:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/writer/target.rs","begin":[3,9],"end":[3,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[24,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ColorChoice","id":"31:21:2753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:221:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:96:2508":{"id":"0:96:2508","crate_id":0,"name":"default_write_style_or","span":{"filename":"src/logger.rs","begin":[789,4],"end":[796,5]},"visibility":"public","docs":"Use the default environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41599:3087-0:365:2112":{"id":"a:2:41599:3087-0:365:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41598:3088-0:324:2261":{"id":"a:2:41598:3088-0:324:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:3088","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2884-0:60:2441":{"id":"b:2:2884-0:60:2441","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:399:2360":{"id":"0:399:2360","crate_id":0,"name":"Seconds","span":{"filename":"src/fmt/mod.rs","begin":[94,4],"end":[94,11]},"visibility":"default","docs":"Full second precision (0 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41599:3087-0:247:142":{"id":"a:2:41599:3087-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2890-0:336:2292":{"id":"b:2:2890-0:336:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2608-0:365:2112":{"id":"b:2:2608-0:365:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2610:2611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[91,15],"end":[91,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2621:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:409:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2608-0:60:2441":{"id":"b:2:2608-0:60:2441","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2610:2611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:153:2668":{"id":"0:153:2668","crate_id":0,"name":"timestamp_millis","span":{"filename":"src/fmt/humantime.rs","begin":[46,4],"end":[51,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmillisecond precision.","links":{"`Timestamp`":"0:156:2591"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13124:3529":{"id":"2:13124:3529","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13153:33322":{"id":"2:13153:33322","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13154:33323"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43640:7082","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13157:33320":{"id":"2:13157:33320","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43658:6942","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41599:3087-0:336:2292":{"id":"a:2:41599:3087-0:336:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13158:28757":{"id":"2:13158:28757","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:4771"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13152:3902":{"id":"2:13152:3902","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43352:3042","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360:1922":{"id":"0:360:1922","crate_id":0,"name":"0","span":{"filename":"src/fmt/writer/target.rs","begin":[11,9],"end":[11,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Box","id":"5:296:2340","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"std::io::Write","id":"1:3588:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:31983:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}}}},"2:13161:28758":{"id":"2:13161:28758","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:4771"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13216:35213":{"id":"2:13216:35213","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2895-0:398:2111":{"id":"b:2:2895-0:398:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13221:35216":{"id":"2:13221:35216","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32040:3151-0:336:2292":{"id":"a:2:32040:3151-0:336:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:37:2345":{"id":"0:37:2345","crate_id":0,"name":"format_level","span":{"filename":"src/logger.rs","begin":[260,4],"end":[263,5]},"visibility":"public","docs":"Whether or not to write the level in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330:60":{"id":"0:330:60","crate_id":0,"name":"default","span":{"filename":"src/logger.rs","begin":[37,9],"end":[37,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13222:35217":{"id":"2:13222:35217","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:4771"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12839:15496","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13240:35221":{"id":"2:13240:35221","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:4771"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13251:29931":{"id":"2:13251:29931","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:979:41475"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13256:27218":{"id":"2:13256:27218","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4894:27218"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43683:7005","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5599:35916":{"id":"5:5599:35916","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:296:2340","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:296:2340","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13193:28753":{"id":"2:13193:28753","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12295:458","str::splitn":"2:13190:28751","self::pattern":"2:12813:4771"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43488:6929","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:2635":{"id":"5:5600:2635","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320-0:355:248":{"id":"0:320-0:355:248","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[274,20],"end":[274,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::Target","name":"Target","id":"0:355:248","glob":false}}},"2:13167:3567":{"id":"2:13167:3567","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41506:190","prim@char":"1:12295:458","self::pattern":"2:12813:4771"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41599:3087-0:324:2261":{"id":"a:2:41599:3087-0:324:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13231:28760":{"id":"2:13231:28760","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:4771"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[556,0],"end":[621,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:2289","0:68:2317","0:69:2262","0:70:2474"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:125:2289":{"id":"0:125:2289","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[967,0],"end":[972,1]},"visibility":"public","docs":"Create a builder from the given environment variables.\n\nThe builder can be configured before being initialized.","links":{},"attrs":["#[deprecated(since = \"0.8.0\", note =\n\"Prefer `env_logger::Builder::from_env()` instead.\")]"],"deprecation":{"since":"0.8.0","note":"Prefer `env_logger::Builder::from_env()` instead."},"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5848-0:156:2591":{"id":"b:5:5848-0:156:2591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5846:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5850:1731"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:323-0:3:2110":{"id":"0:323-0:3:2110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[275,0],"end":[275,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::logger","name":"logger","id":"0:3:2110","glob":true}}},"2:13184:35207":{"id":"2:13184:35207","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12813:4771","str::split":"2:13175:2679","prim@char":"1:12295:458","`DoubleEndedIterator`":"2:8197:129","str::rsplit_terminator":"2:13187:35208"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43416:7076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:60:2441":{"id":"b:2:2890-0:60:2441","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/target.rs","begin":[3,9],"end":[3,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:362:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2890-0:156:2591":{"id":"b:2:2890-0:156:2591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:363:2773":{"id":"0:363:2773","crate_id":0,"name":"Stderr","span":{"filename":"src/fmt/writer/target.rs","begin":[9,4],"end":[9,10]},"visibility":"default","docs":"Logs will be sent to standard error.","links":{},"attrs":["#[default]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,29],"end":[12,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2660:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2895-0:156:2591":{"id":"b:2:2895-0:156:2591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:239-0:156:2591":{"id":"0:239-0:156:2591","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[78,0],"end":[78,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"humantime\")]"],"deprecation":null,"inner":{"import":{"source":"self::humantime::Timestamp","name":"Timestamp","id":"0:156:2591","glob":false}}},"0:22:2243":{"id":"0:22:2243","crate_id":0,"name":"DEFAULT_FILTER_ENV","span":{"filename":"src/logger.rs","begin":[10,0],"end":[10,48]},"visibility":"public","docs":"The default name for the environment variable to read filters from.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"expr":"\"RUST_LOG\"","value":null,"is_literal":true}}},"a:2:3138:3482-0:247:142":{"id":"a:2:3138:3482-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:3482","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2610:2611":{"id":"2:2610:2611","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2880-0:60:2441":{"id":"b:2:2880-0:60:2441","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2883:2306"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13208:35210":{"id":"2:13208:35210","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12813:4771","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::rmatch_indices":"2:13211:35211"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43516:7078","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:355:248":{"id":"0:355:248","crate_id":0,"name":"Target","span":{"filename":"src/fmt/writer/target.rs","begin":[4,0],"end":[12,1]},"visibility":"public","docs":"Log target, either `stdout`, `stderr` or a custom pipe.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:356:2770","0:363:2773","0:358:2775"],"impls":["a:2:3103:246-0:355:248","a:2:31983:236-0:355:248","a:2:3138:3482-0:355:248","a:2:32040:3151-0:355:248","a:2:41599:3087-0:355:248","a:2:41598:3088-0:355:248","b:2:2605-0:355:248","b:2:2895-0:355:248","b:2:2608-0:355:248","b:2:2890-0:355:248","b:2:3713-0:355:248","b:2:2884-0:355:248","b:2:2880-0:355:248","0:361","0:211"]}}},"a:2:41599:3087-0:60:2441":{"id":"a:2:41599:3087-0:60:2441","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41599:3087","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:32040:3151-0:355:248":{"id":"a:2:32040:3151-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2605-0:156:2591":{"id":"b:2:2605-0:156:2591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2231"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2605-0:247:142":{"id":"b:2:2605-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2231"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2608-0:247:142":{"id":"b:2:2608-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2610:2611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41598:3088-0:60:2441":{"id":"a:2:41598:3088-0:60:2441","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:3088","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,50],"end":[12,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:384:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:403:2366":{"id":"0:403:2366","crate_id":0,"name":"Micros","span":{"filename":"src/fmt/mod.rs","begin":[98,4],"end":[98,10]},"visibility":"default","docs":"Microsecond precision (6 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13228:27946":{"id":"2:13228:27946","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:4771"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:411:781":{"id":"0:411:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[91,22],"end":[91,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2884-0:156:2591":{"id":"b:2:2884-0:156:2591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:2515":{"id":"0:118:2515","crate_id":0,"name":"try_init_from_env","span":{"filename":"src/logger.rs","begin":[910,0],"end":[917,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger from the given\nenvironment variables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\n# fn run() -> Result<(), Box<dyn ::std::error::Error>> {\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::try_init_from_env(env)?;\n\nOk(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"log::SetLoggerError","id":"20:358:2238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3713-0:156:2591":{"id":"b:2:3713-0:156:2591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13246:29927":{"id":"2:13246:29927","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39468:3478","Self::is_ascii":"2:13245:28531"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39468:3478","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[518,0],"end":[529,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3138:3482-0:60:2441":{"id":"a:2:3138:3482-0:60:2441","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:3482","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:219-0:355:248":{"id":"0:219-0:355:248","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[9,0],"end":[9,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"target::Target","name":"Target","id":"0:355:248","glob":false}}},"2:13154:33323":{"id":"2:13154:33323","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13153:33322"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43649:7083","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13148:28745":{"id":"2:13148:28745","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13147:28744"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13214:35212":{"id":"2:13214:35212","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2880-0:247:142":{"id":"b:2:2880-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2883:2306"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32040:3151-0:398:2111":{"id":"a:2:32040:3151-0:398:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32040:3151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:91:2415":{"id":"0:91:2415","crate_id":0,"name":"write_style","span":{"filename":"src/logger.rs","begin":[764,4],"end":[771,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["write_style_env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2608-0:355:248":{"id":"b:2:2608-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2610:2611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:378:851":{"id":"0:378:851","crate_id":0,"name":"hash","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,33],"end":[12,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10469:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[100,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10250:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:169:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3103:246-0:324:2261":{"id":"a:2:3103:246-0:324:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3103:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:29:2294":{"id":"0:29:2294","crate_id":0,"name":"parse_env","span":{"filename":"src/logger.rs","begin":[149,4],"end":[164,5]},"visibility":"public","docs":"Applies the configuration from the environment.\n\nThis function allows a builder to be configured with default parameters,\nto be then overridden by the environment.\n\n# Examples\n\nInitialise a logger with filter level `Off`, then override the log\nfilter from an environment variable called `MY_LOG`:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger with filter level `Off`, then use the `MY_LOG`\nvariable to override filtering and `MY_LOG_STYLE` to override  whether\nor not to write styles:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["env",{"generic":"E"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:405:2369":{"id":"0:405:2369","crate_id":0,"name":"Nanos","span":{"filename":"src/fmt/mod.rs","begin":[100,4],"end":[100,9]},"visibility":"default","docs":"Nanosecond precision (9 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:336:2292":{"id":"0:336:2292","crate_id":0,"name":"Env","span":{"filename":"src/logger.rs","begin":[713,0],"end":[716,1]},"visibility":"public","docs":"Set of environment variables to configure from.\n\n# Default environment variables\n\nBy default, the `Env` will read the following environment variables:\n\n- `RUST_LOG`: the level filter\n- `RUST_LOG_STYLE`: whether or not to print styles with records.\n\nThese sources can be configured using the builder methods on `Env`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:80","a:2:3103:246-0:336:2292","a:2:31983:236-0:336:2292","a:2:3138:3482-0:336:2292","a:2:32040:3151-0:336:2292","a:2:41599:3087-0:336:2292","a:2:41598:3088-0:336:2292","b:2:2605-0:336:2292","b:2:2895-0:336:2292","b:2:2608-0:336:2292","b:2:2890-0:336:2292","b:2:3713-0:336:2292","b:2:2884-0:336:2292","b:2:2880-0:336:2292","0:99","0:103","0:340"]}}},"b:2:2895-0:324:2261":{"id":"b:2:2895-0:324:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2898:136","2:2899:1756"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3713-0:324:2261":{"id":"b:2:3713-0:324:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:51:1698":{"id":"0:51:1698","crate_id":0,"name":"target","span":{"filename":"src/logger.rs","begin":[422,4],"end":[425,5]},"visibility":"public","docs":"Sets the target for the log output.\n\nEnv logger can log to either stdout, stderr or a custom pipe. The default is stderr.\n\nThe custom pipe can be used to send the log messages to a custom sink (for example a file).\nDo note that direct writes to a file can become a bottleneck due to IO operation times.\n\n# Examples\n\nWrite log message to `stdout`:\n\n```\nuse env_logger::{Builder, Target};\n\nlet mut builder = Builder::new();\n\nbuilder.target(Target::Stdout);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"resolved_path":{"name":"fmt::Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2308":{"id":"0:50:2308","crate_id":0,"name":"parse_filters","span":{"filename":"src/logger.rs","begin":[399,4],"end":[402,5]},"visibility":"public","docs":"Parses the directives string in the same form as the `RUST_LOG`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["filters",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:358:2775":{"id":"0:358:2775","crate_id":0,"name":"Pipe","span":{"filename":"src/fmt/writer/target.rs","begin":[11,4],"end":[11,50]},"visibility":"default","docs":"Logs will be sent to a custom pipe.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:360:1922"]},"discriminant":null}}},"0:85:2498":{"id":"0:85:2498","crate_id":0,"name":"filter_or","span":{"filename":"src/logger.rs","begin":[737,4],"end":[745,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["filter_env",{"generic":"E"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:401:2363":{"id":"0:401:2363","crate_id":0,"name":"Millis","span":{"filename":"src/fmt/mod.rs","begin":[96,4],"end":[96,10]},"visibility":"default","docs":"Millisecond precision (3 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:124:2293":{"id":"0:124:2293","crate_id":0,"name":"builder","span":{"filename":"src/logger.rs","begin":[956,0],"end":[958,1]},"visibility":"public","docs":"Create a new builder with the default environment variables.\n\nThe builder can be configured before being initialized.\nThis is a convenient way of calling [`Builder::from_default_env`].\n\n[`Builder::from_default_env`]: struct.Builder.html#method.from_default_env","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[718,0],"end":[801,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:82:1154","0:83:2262","0:85:2498","0:88:2502","0:91:2415","0:93:2506","0:96:2508"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3713-0:60:2441":{"id":"b:2:3713-0:60:2441","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3711:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2441","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3715:1771"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2608-0:156:2591":{"id":"b:2:2608-0:156:2591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2602:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2610:2611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:47:2388":{"id":"0:47:2388","crate_id":0,"name":"filter_module","span":{"filename":"src/logger.rs","begin":[349,4],"end":[352,5]},"visibility":"public","docs":"Adds a directive to the filter for a specific module.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_module(\"path::to::module\", LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["module",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:223:2234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13220:35215":{"id":"2:13220:35215","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13250:29930":{"id":"2:13250:29930","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:979:41475"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:2506":{"id":"0:93:2506","crate_id":0,"name":"write_style_or","span":{"filename":"src/logger.rs","begin":[776,4],"end":[784,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["write_style_env",{"generic":"E"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2884-0:355:248":{"id":"b:2:2884-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2884-0:336:2292":{"id":"b:2:2884-0:336:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2886:811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2607:2231":{"id":"2:2607:2231","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2880-0:324:2261":{"id":"b:2:2880-0:324:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2883:2306"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116:2427":{"id":"0:116:2427","crate_id":0,"name":"try_init","span":{"filename":"src/logger.rs","begin":[865,0],"end":[867,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41617:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"log::SetLoggerError","id":"20:358:2238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:384:60":{"id":"0:384:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,50],"end":[12,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13247:28532":{"id":"2:13247:28532","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[37,9],"end":[37,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2932:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:330:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:36:2343":{"id":"0:36:2343","crate_id":0,"name":"default_format","span":{"filename":"src/logger.rs","begin":[254,4],"end":[257,5]},"visibility":"public","docs":"Use the default format.\n\nThis method will clear any custom format set on the builder.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2289":{"id":"0:65:2289","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[583,4],"end":[588,5]},"visibility":"public","docs":"Creates the logger from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nCreate a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_env(\"MY_LOG\");\n```\n\nCreate a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Logger, Env};\n\nlet env = Env::new().filter_or(\"MY_LOG\", \"info\").write_style_or(\"MY_LOG_STYLE\", \"always\");\n\nlet logger = Logger::from_env(env);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41598:3088-0:365:2112":{"id":"a:2:41598:3088-0:365:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:3088","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13135:2503":{"id":"2:13135:2503","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41506:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41504:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10901:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13181:28749":{"id":"2:13181:28749","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12813:4771","`DoubleEndedIterator`":"2:8197:129","prim@char":"1:12295:458","str::split":"2:13175:2679"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43384:6927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:169:781":{"id":"0:169:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/humantime.rs","begin":[101,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13187:35208":{"id":"2:13187:35208","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12813:4771","str::split":"2:13175:2679","prim@char":"1:12295:458","str::split_terminator":"2:13184:35207"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43434:7077","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:2371":{"id":"0:46:2371","crate_id":0,"name":"format_suffix","span":{"filename":"src/logger.rs","begin":[311,4],"end":[314,5]},"visibility":"public","docs":"Configures the end of line suffix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["suffix",{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13234:35219":{"id":"2:13234:35219","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12295:458","self::pattern":"2:12813:4771"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12834:15497","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2886:811":{"id":"2:2886:811","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2880-0:336:2292":{"id":"b:2:2880-0:336:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2883:2306"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:73:2117":{"id":"0:73:2117","crate_id":0,"name":"log","span":{"filename":"src/logger.rs","begin":[628,4],"end":[689,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["record",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:287:2237","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41598:3088-0:355:248":{"id":"a:2:41598:3088-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41598:3088","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2605-0:398:2111":{"id":"b:2:2605-0:398:2111","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2231"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3138:3482-0:365:2112":{"id":"a:2:3138:3482-0:365:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3138:3482","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:222":{"id":"0:222","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[36,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"anstream::ColorChoice","id":"31:21:2753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:223:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5614:35919":{"id":"5:5614:35919","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[91,22],"end":[91,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10245:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2111","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:411:781"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[45,0],"end":[516,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:324:2261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:25:1154","0:26:2289","0:29:2294","0:32:2317","0:33:2323","0:34:794","0:36:2343","0:37:2345","0:38:2348","0:39:2350","0:40:2353","0:41:2356","0:42:2359","0:43:2362","0:44:2365","0:45:2368","0:46:2371","0:47:2388","0:48:2393","0:49:2262","0:50:2308","0:51:1698","0:52:2415","0:53:2310","0:54:2420","0:55:2427","0:56:2436","0:57:2428"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2880-0:156:2591":{"id":"b:2:2880-0:156:2591","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2857:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2854:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2883:2306"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:212:781":{"id":"0:212:781","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/writer/target.rs","begin":[15,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10219:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10200:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:336:2292":{"id":"b:2:2605-0:336:2292","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2292","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2607:2231"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:52:2415":{"id":"0:52:2415","crate_id":0,"name":"write_style","span":{"filename":"src/logger.rs","begin":[443,4],"end":[446,5]},"visibility":"public","docs":"Sets whether or not styles will be written.\n\nThis can be useful in environments that don't support control characters\nfor setting colors.\n\n# Examples\n\nNever attempt to write styles:\n\n```\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder.write_style(WriteStyle::Never);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write_style",{"resolved_path":{"name":"fmt::WriteStyle","id":"0:365:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2605-0:355:248":{"id":"b:2:2605-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31984:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2599:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2607:2231"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13126:35201":{"id":"2:13126:35201","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:28530":{"id":"5:5617:28530","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13248:28528"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:35917":{"id":"5:5603:35917","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7617:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7617:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12819:4665","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13218:35214":{"id":"2:13218:35214","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13143:35204":{"id":"2:13143:35204","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12301:1673","str::slice_mut_unchecked":"2:13144:35205","crate::ops::Index":"2:39113:10165"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13145:28740":{"id":"2:13145:28740","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13147:28744","str::split_at_mut":"2:13146:28741"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2890-0:247:142":{"id":"b:2:2890-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2864:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2860:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2893:136","2:2894:1758"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:54:2420":{"id":"0:54:2420","crate_id":0,"name":"is_test","span":{"filename":"src/logger.rs","begin":[461,4],"end":[464,5]},"visibility":"public","docs":"Sets whether or not the logger will be used in unit tests.\n\nIf `is_test` is `true` then the logger will allow the testing framework to\ncapture log records rather than printing them to the terminal directly.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["is_test",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:6738:9323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:8030:10138":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12225:5386":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:10828:36605":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:16223:6217":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"27:81:27148":{"crate_id":27,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:4942:8852":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:497:8554":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:46417:7229":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:32040:3151":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:8168:3149":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"24:1903:5066":{"crate_id":24,"path":["regex","pikevm","Threads"],"kind":"struct"},"17:11102:5267":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:7429:9447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"0:398:2111":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision"],"kind":"enum"},"16:7618:4287":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6300:6369":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:1828:6829":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:43769:7085":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"7:78:21884":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:4730:2957":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:363:3274":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:11621:7319":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:1639:8710":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:3249:36472":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"22:184:3914":{"crate_id":22,"path":["anstyle","color","Color"],"kind":"enum"},"17:15596:6060":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"21:100:2725":{"crate_id":21,"path":["humantime","date","format_rfc3339_millis"],"kind":"function"},"16:5722:6260":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:8518:7379":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:5665:9138":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:22456:10427":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"5:5916:6747":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"25:2342:4892":{"crate_id":25,"path":["regex_syntax","hir","WordBoundary"],"kind":"enum"},"6:5083:8912":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:2058:9585":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:22831:6972":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:40037:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8818:7295":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:6811:9347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:10048:3000":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:5136:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:13344:4200":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:7910:22914":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:22944:6979":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"25:1206:3056":{"crate_id":25,"path":["regex_syntax","ast","ErrorKind"],"kind":"enum"},"2:43683:7005":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"11:1891:6747":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"25:1166:4807":{"crate_id":25,"path":["regex_syntax","ast","parse","NestLimiter"],"kind":"struct"},"2:40174:3040":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"24:2583:5093":{"crate_id":24,"path":["regex","re_unicode","NoExpand"],"kind":"struct"},"1:3242:28517":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13855:5607":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"23:19:2261":{"crate_id":23,"path":["env_filter","filter","Builder"],"kind":"struct"},"17:10317:4170":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"24:178:4955":{"crate_id":24,"path":["regex","compile","ByteClassSet"],"kind":"struct"},"5:4073:6747":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:1496:8617":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"11:742:4339":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:597:5123":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:39117:6991":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:42491:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:2418:6236":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"16:8136:6635":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11227:5274":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:6053:15931":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:7944:10207":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"11:1903:4885":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"24:1649:5028":{"crate_id":24,"path":["regex","exec","ExecNoSyncStr"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:8152:4533":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:3285:3059":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:8118:6634":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:5283:8973":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:14847:5849":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:517:8571":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"26:1314:27232":{"crate_id":26,"path":["aho_corasick","packed","api","MatchKind"],"kind":"enum"},"23:41:2458":{"crate_id":23,"path":["env_filter","filter","Filter"],"kind":"struct"},"28:292:4063":{"crate_id":28,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"1:12314:1788":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"26:1420:2261":{"crate_id":26,"path":["aho_corasick","packed","teddy","compile","Builder"],"kind":"struct"},"26:1579:4749":{"crate_id":26,"path":["aho_corasick","prefilter","PrefilterObj"],"kind":"struct"},"17:403:5119":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:42217:3011":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:6726:3139":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:4675:2955":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:13146:5461":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:37710:15627":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:3597:32876":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:9665:7330":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:5415:6300":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:7098:6480":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:9671:22953":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:8565:7287":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:12318:1860":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"27:638:27160":{"crate_id":27,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:4861:10252":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"12:0:2813":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11621:4159":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:43212:7063":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:523:8574":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:6915:9387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13538:5535":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:14986:5900":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:5588:9099":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:6895:6455":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:8616:7388":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:41532:3625":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:586:8608":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"18:698:4079":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:12081:30091":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:7640:6864":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"11:2383:3625":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"26:1447:4720":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","Teddy"],"kind":"struct"},"24:1895:4541":{"crate_id":24,"path":["regex","pikevm","Cache"],"kind":"struct"},"1:1055:6740":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:2756:9582":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:12310:882":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:45788:7162":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:860:3532":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"30:53:4707":{"crate_id":30,"path":["utf8parse","types","State"],"kind":"enum"},"14:7:6728":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11042:5261":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:3954:3532":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:4042:10235":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:7457:3532":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"24:2188:5084":{"crate_id":24,"path":["regex","re_bytes","Matches"],"kind":"struct"},"2:44404:7116":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:3820:6747":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"0:128:781":{"crate_id":0,"path":["env_logger","fmt"],"kind":"module"},"2:22711:33333":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:5048:10285":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:2932:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:21560:10207":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12808:5436":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"26:1042:37812":{"crate_id":26,"path":["aho_corasick","ahocorasick","StreamChunk"],"kind":"enum"},"5:2307:4344":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:1575:6828":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:45525:7141":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:15176:5934":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:37765:15628":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:12584:5249":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:10867:9734":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:8201:4519":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:10524:5245":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:5020:8889":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:5400:9018":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:15400:5991":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:14091:5641":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:2854:6256":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:6648:6887":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"20:120:2235":{"crate_id":20,"path":["log","Log"],"kind":"trait"},"17:9781:22968":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:15126:5917":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:4940:10249":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:924:10153":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11443:5294":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:15445:6002":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:4279:10261":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"26:1101:4694":{"crate_id":26,"path":["aho_corasick","classes","ByteClassBuilder"],"kind":"struct"},"6:8341:9574":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:42500:2999":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:3549:3028":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:1746:2956":{"crate_id":24,"path":["regex","expand","Ref"],"kind":"enum"},"17:10710:5248":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:219:6821":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:6491:9211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:12300:23097":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:9129:3625":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:1663:8727":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:10911:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:14463:5721":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"27:632:4616":{"crate_id":27,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:3616:3032":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:3660:3626":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:669:6822":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"21:102:2726":{"crate_id":21,"path":["humantime","date","format_rfc3339_nanos"],"kind":"function"},"17:16249:6221":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"6:7984:9539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:42714:3729":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:7421:3532":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10954:22985":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:37875:15630":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:12317:944":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"11:364:36571":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4897:8829":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:281:36022":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:2432:10194":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:10461:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:30197:10219":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:15313:5965":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"11:1566:21970":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:9303:7413":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:14868:5859":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:5641:7303":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:3154:3099":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:30850:3498":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:8301:6650":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:4882:6290":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:12251:5388":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"11:856:6736":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"18:538:4074":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:5277:8970":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:6574:4277":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"24:2206:3043":{"crate_id":24,"path":["regex","re_bytes","Split"],"kind":"struct"},"2:16:2918":{"crate_id":2,"path":["core","writeln"],"kind":"macro"},"24:1380:4901":{"crate_id":24,"path":["regex","backtrack","Bounded"],"kind":"struct"},"25:1618:4880":{"crate_id":25,"path":["regex_syntax","ast","ClassBracketed"],"kind":"struct"},"1:8051:3659":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12530:5419":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"27:871:4656":{"crate_id":27,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:8218:3053":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6342:36604":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:14111:5644":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:5598:9104":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:4531:6279":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:8012:9542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12659:5424":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:4771:6286":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:11493:5296":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:40732:3066":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"25:2148:3056":{"crate_id":25,"path":["regex_syntax","hir","ErrorKind"],"kind":"enum"},"2:2848:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:22933:6978":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:5630:9124":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:12353:5401":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:2864:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:12464:23098":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:13497:5523":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"9:0:2810":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:4739:2958":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:11324:5286":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"11:1582:6748":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"25:2265:4937":{"crate_id":25,"path":["regex_syntax","hir","ClassUnicodeIter"],"kind":"struct"},"26:1635:4102":{"crate_id":26,"path":["aho_corasick","prefilter","RareByteOffset"],"kind":"struct"},"25:2491:136":{"crate_id":25,"path":["regex_syntax","unicode","Error"],"kind":"enum"},"1:7331:27783":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:40703:6902":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:45383:7132":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"11:2352:6741":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:39113:10165":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:15582:6054":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"22:372:3918":{"crate_id":22,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"5:828:6823":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:3025:2941":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"24:1510:4541":{"crate_id":24,"path":["regex","dfa","Cache"],"kind":"struct"},"22:429:4142":{"crate_id":22,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"6:4959:8858":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:2548:6242":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:4913:6291":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"26:923:10207":{"crate_id":26,"path":["aho_corasick","state_id","private","Sealed"],"kind":"trait"},"16:6648:6405":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:2878:6257":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:7841:7441":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"26:971:5116":{"crate_id":26,"path":["aho_corasick","ahocorasick","Imp"],"kind":"enum"},"5:1555:4339":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:44112:9732":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5445:9044":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"25:2510:27226":{"crate_id":25,"path":["regex_syntax","unicode","ClassQuery"],"kind":"enum"},"18:651:4618":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"26:1194:136":{"crate_id":26,"path":["aho_corasick","error","Error"],"kind":"struct"},"26:1166:4698":{"crate_id":26,"path":["aho_corasick","dfa","Repr"],"kind":"struct"},"11:2554:36576":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"24:2462:5084":{"crate_id":24,"path":["regex","re_trait","Matches"],"kind":"struct"},"2:11329:5086":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:15701:6088":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"24:2197:5085":{"crate_id":24,"path":["regex","re_bytes","CaptureMatches"],"kind":"struct"},"27:823:4646":{"crate_id":27,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:10509:3728":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4891:8826":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11419:4150":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:5914:4251":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:6615:3135":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:8524:7381":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"21:227:3117":{"crate_id":21,"path":["humantime","date","Rfc3339Timestamp"],"kind":"struct"},"28:436:4071":{"crate_id":28,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"2:41940:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"25:1106:4106":{"crate_id":25,"path":["regex_syntax","ast","parse","ParserBuilder"],"kind":"struct"},"2:31960:6989":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:3096:2963":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:1976:764":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:3287:3060":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:824:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:46455:7231":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"28:181:10207":{"crate_id":28,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"2:43283:7068":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:733:10220":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:1503:8620":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"28:393:4062":{"crate_id":28,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"27:624:4618":{"crate_id":27,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:42723:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:12312:1800":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:42059:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6634:4278":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:3103:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:7006:6463":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"26:1435:4103":{"crate_id":26,"path":["aho_corasick","packed","teddy","compile","Mask"],"kind":"struct"},"6:5472:9062":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:5385:4145":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:22818:6971":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"25:1647:27186":{"crate_id":25,"path":["regex_syntax","ast","ClassSetItem"],"kind":"enum"},"17:14977:5899":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:837:6733":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:1903:793":{"crate_id":2,"path":["core","mem","forget"],"kind":"function"},"24:2574:5092":{"crate_id":24,"path":["regex","re_unicode","ReplacerRef"],"kind":"struct"},"17:14436:5719":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12433:4180":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:5556:7301":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"9:178:4324":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:43630:7081":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:39033:3628":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:4103:36022":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"26:1260:4712":{"crate_id":26,"path":["aho_corasick","nfa","IterTransitionsMut"],"kind":"struct"},"2:45482:7138":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:581:3498":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:16050:5498":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:13738:5586":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"11:811:6829":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:11537:5300":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"28:490:37830":{"crate_id":28,"path":["anstream","auto","StreamInner"],"kind":"enum"},"5:1544:4338":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:39282:6996":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:837:3625":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:4162:10244":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:42957:6922":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:2599:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"11:2569:6856":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:256:5117":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:6723:3138":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"28:451:4707":{"crate_id":28,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"1:952:6739":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"23:0:2116":{"crate_id":23,"path":["env_filter"],"kind":"module"},"1:2664:3052":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:7512:6856":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12443:5407":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:42938:7055":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:46006:7186":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:10283:2292":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:6098:22903":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:43941:15510":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"18:765:27159":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"27:787:4642":{"crate_id":27,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:14271:5686":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"27:882:27159":{"crate_id":27,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12278:5390":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:40344:4633":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:22725:6958":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:11128:5229":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:15456:6003":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:46044:7188":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:15569:6048":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:15273:5956":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:1593:8674":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:1463:3625":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"11:1160:6745":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:638:7271":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:11168:7406":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:12246:7444":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:357:3273":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"26:1246:4956":{"crate_id":26,"path":["aho_corasick","nfa","Transitions"],"kind":"enum"},"2:39896:6999":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:7715:6866":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:12307:888":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"25:1368:4804":{"crate_id":25,"path":["regex_syntax","ast","Alternation"],"kind":"struct"},"5:5712:15527":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:7407:36474":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:3345:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:6837:6894":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"11:700:3532":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"24:2435:5098":{"crate_id":24,"path":["regex","re_set","bytes","SetMatchesIter"],"kind":"struct"},"2:22196:10430":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:1494:3532":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:6665:22907":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:6417:9174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:41326:4506":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"25:1836:4802":{"crate_id":25,"path":["regex_syntax","ast","Group"],"kind":"struct"},"17:16259:5503":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"5:1478:3626":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:42463:33256":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:2508:6240":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:8662:4138":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:15383:5987":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:3248:9768":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:10959:3659":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"5:6914:15527":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"24:1516:5011":{"crate_id":24,"path":["regex","dfa","CacheInner"],"kind":"struct"},"24:2543:5091":{"crate_id":24,"path":["regex","re_unicode","SubCaptureMatches"],"kind":"struct"},"17:10982:22986":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"14:160:6728":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:10872:9736":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"25:1155:27208":{"crate_id":25,"path":["regex_syntax","ast","parse","ClassState"],"kind":"enum"},"2:40005:15560":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:1189:36118":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:43665:7006":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:12454:5408":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:40358:6897":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:5344:8991":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"24:0:1936":{"crate_id":24,"path":["regex"],"kind":"module"},"2:3293:15480":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"18:521:27160":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:14284:5688":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:12828:4646":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:6927:6459":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:41657:3625":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:7509:6564":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:9984:22973":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:42203:3003":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:13503:6949":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:11497:5297":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:15646:6072":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:15039:5910":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:4587:6281":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"24:2084:5082":{"crate_id":24,"path":["regex","re_builder","bytes","RegexBuilder"],"kind":"struct"},"2:45636:7154":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"26:1052:4083":{"crate_id":26,"path":["aho_corasick","ahocorasick","AhoCorasickBuilder"],"kind":"struct"},"25:1454:27199":{"crate_id":25,"path":["regex_syntax","ast","HexLiteralKind"],"kind":"enum"},"6:6788:9341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:11242:5276":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:10890:7430":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:10264:3648":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"5:1354:6745":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"26:1519:4739":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddyFat2Mask256"],"kind":"struct"},"6:5390:9012":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"29:298:4062":{"crate_id":29,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"17:13774:5595":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:6657:9299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"24:1433:37073":{"crate_id":24,"path":["regex","compile","MaybeInst"],"kind":"enum"},"1:2700:3044":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:45298:7121":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:8624:15610":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:5192:7298":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:3588:2629":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:3237:3625":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:3871:6829":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:3473:5132":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:589:10131":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:1724:36022":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:1098:5124":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:43588:7080":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:22966:6981":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"6:6478:9202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10534:36609":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:4606:2947":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"14:0:2814":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:7288:9815":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"18:113:27150":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:8482:3040":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:22784:33266":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"20:358:2238":{"crate_id":20,"path":["log","SetLoggerError"],"kind":"struct"},"24:1405:37074":{"crate_id":24,"path":["regex","backtrack","Job"],"kind":"enum"},"24:1770:5050":{"crate_id":24,"path":["regex","input","InputAt"],"kind":"struct"},"1:7682:4044":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:22302:10207":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"11:800:6747":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:881:4337":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:40493:3041":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:42538:3001":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"27:665:152":{"crate_id":27,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:14311:5690":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10887:36608":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:23473:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:23021:6986":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:30448:3859":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:6802:6440":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:15434:5998":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:1064:6741":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:44365:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:12262:4541":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"29:137:4707":{"crate_id":29,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"2:3145:3484":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"22:315:4139":{"crate_id":22,"path":["anstyle","color","NullFormatter"],"kind":"struct"},"1:5712:10312":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:3234:6501":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:5677:9143":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"25:2109:4925":{"crate_id":25,"path":["regex_syntax","hir","translate","TranslatorI"],"kind":"struct"},"2:46338:7226":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:9078:7405":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:15023:5907":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"18:670:4642":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:40717:3134":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:6756:9331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:6609:9278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:4391:15544":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:11371:6931":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:14079:5640":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:4976:6293":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:15266:5955":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:4837:8793":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:11187:4370":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"25:1631:27200":{"crate_id":25,"path":["regex_syntax","ast","ClassSet"],"kind":"enum"},"16:5863:22902":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:44277:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"25:1849:27187":{"crate_id":25,"path":["regex_syntax","ast","GroupKind"],"kind":"enum"},"17:12851:4183":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:9283:4776":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:485:8549":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:40024:7009":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"24:1491:4130":{"crate_id":24,"path":["regex","compile","SuffixCacheKey"],"kind":"struct"},"17:15769:6107":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:6611:3134":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:15324:5969":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:3184:15479":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"31:21:2753":{"crate_id":31,"path":["colorchoice","ColorChoice"],"kind":"enum"},"26:985:4636":{"crate_id":26,"path":["aho_corasick","ahocorasick","FindIter"],"kind":"struct"},"17:12887:4184":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:2660:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"24:1579:4132":{"crate_id":24,"path":["regex","dfa","EmptyFlags"],"kind":"struct"},"27:690:4618":{"crate_id":27,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:6398:4270":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:13375:5502":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10622:36606":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:7485:9468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"11:299:9713":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:14212:5680":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:5756:6306":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"26:1526:4740":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask128"],"kind":"struct"},"17:12768:22955":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:7561:9518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:15410:5994":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:8216:6643":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:6116:7304":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"25:2049:4781":{"crate_id":25,"path":["regex_syntax","hir","literal","Literal"],"kind":"struct"},"25:1304:4843":{"crate_id":25,"path":["regex_syntax","ast","WithComments"],"kind":"struct"},"2:32646:6496":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:15281:5957":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:11016:5260":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"26:1681:4769":{"crate_id":26,"path":["aho_corasick","prefilter","StartBytesTwo"],"kind":"struct"},"5:4422:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:41523:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:6543:6394":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"23:85:3517":{"crate_id":23,"path":["env_filter","directive","Directive"],"kind":"struct"},"16:4502:6278":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:46027:7187":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"26:1349:2261":{"crate_id":26,"path":["aho_corasick","packed","api","Builder"],"kind":"struct"},"1:6794:3146":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:3780:10218":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:40309:7028":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:1591:4885":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:534:3259":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:6753:36022":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"24:2183:4977":{"crate_id":24,"path":["regex","re_bytes","Regex"],"kind":"struct"},"1:910:6746":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:6066:6337":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:5995:6324":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10399:3042":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:150:4218":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:43416:7076":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:8306:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:0:1665":{"crate_id":1,"path":["std"],"kind":"module"},"1:5223:7298":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:641:7273":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:44104:9730":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"25:1983:136":{"crate_id":25,"path":["regex_syntax","error","Error"],"kind":"enum"},"1:7963:2261":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:3208:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:12127:5377":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"11:1025:6740":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:14298:5689":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:21443:34207":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:10848:7425":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:8271:9557":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:44381:7115":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:5581:9097":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:8202:4296":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"25:1177:4110":{"crate_id":25,"path":["regex_syntax","ast","print","PrinterBuilder"],"kind":"struct"},"2:43516:7078":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:43863:7095":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:5181:8920":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:21999:34214":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:6843:9719":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:7314:9399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:7633:36594":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:11780:7285":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:8351:9576":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:3623:2966":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"25:254:37113":{"crate_id":25,"path":["regex_syntax","ast","visitor","ClassFrame"],"kind":"enum"},"1:4822:10264":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:4757:9442":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"25:1292:4776":{"crate_id":25,"path":["regex_syntax","ast","Position"],"kind":"struct"},"17:12969:5441":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:6590:36022":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:11313:5284":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:1608:4772":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"24:1231:4981":{"crate_id":24,"path":["regex","re_unicode","CapturesDebug"],"kind":"struct"},"2:43273:7067":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:4916:8842":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:3026:35994":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:43112:7056":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:40205:7022":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:41823:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:45315:7124":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:7379:36601":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"25:2544:27229":{"crate_id":25,"path":["regex_syntax","utf8","Utf8Sequence"],"kind":"enum"},"2:45283:7120":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:9180:10317":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:12621:5422":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:8253:9554":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"26:929:27233":{"crate_id":26,"path":["aho_corasick","state_id","StateID"],"kind":"trait"},"25:2222:4781":{"crate_id":25,"path":["regex_syntax","hir","Literal"],"kind":"enum"},"6:5296:8978":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13986:5628":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:5407:1219":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:4349:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:40:7775":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"25:1771:4847":{"crate_id":25,"path":["regex_syntax","ast","Repetition"],"kind":"struct"},"24:1422:10153":{"crate_id":24,"path":["regex","compile","Hole"],"kind":"enum"},"2:41784:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:5948:3018":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:45400:7133":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:43238:7019":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:1447:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:9670:30438":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"16:2355:4210":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:6606:6402":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:4489:2968":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:4786:2960":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:5489:9067":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:14356:5699":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:12301:1673":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:40517:6900":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"11:832:6746":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:44158:3103":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:10264:3009":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:12591:6941":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:43488:6929":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:542:4224":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"22:330:2627":{"crate_id":22,"path":["anstyle","effect","Effects"],"kind":"struct"},"1:3245:9767":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:5376:9004":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:10636:3059":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:40090:10179":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:6848:2592":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:4092:10237":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:4532:2946":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:10285:7416":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:4062:6274":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:9399:4665":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"24:1623:136":{"crate_id":24,"path":["regex","error","Error"],"kind":"enum"},"2:40080:3042":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:8247:9553":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"21:0:1935":{"crate_id":21,"path":["humantime"],"kind":"module"},"17:15058:4201":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11405:5293":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"20:194:2589":{"crate_id":20,"path":["log","Level"],"kind":"enum"},"5:2205:6833":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:8174:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"10:44:4308":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:5034:10284":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:10999:4522":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:14855:5852":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:21431:34207":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:43649:7083":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:6962:4281":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:7259:30503":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:5852:3018":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:6698:9313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:12695:5427":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:7132:6485":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:6494:6390":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:9391:3142":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:13235:5485":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13387:5503":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:16269:5508":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:11063:5264":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:1580:8667":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"25:2074:4112":{"crate_id":25,"path":["regex_syntax","hir","translate","TranslatorBuilder"],"kind":"struct"},"28:484:2771":{"crate_id":28,"path":["anstream","auto","AutoStream"],"kind":"struct"},"6:1485:8612":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:15822:6116":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:14503:5726":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:13509:5524":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12516:5417":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:15197:5939":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"20:363:2988":{"crate_id":20,"path":["log","ParseLevelError"],"kind":"struct"},"2:38454:15631":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:11288:6928":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:44280:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"24:1994:5076":{"crate_id":24,"path":["regex","prog","InstEmptyLook"],"kind":"struct"},"17:10155:4145":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:2655:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:12302:1761":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:6629:9286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"8:0:2809":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13766:5593":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:41444:7287":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"5:4268:3018":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:5653:9131":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:12388:5403":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:6813:6441":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:6427:4272":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"18:598:36619":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:45738:7160":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:15836:6119":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:0:2816":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:10905:5251":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:589:4622":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:12315:1794":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"18:507:4618":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:7473:4234":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"24:1473:4128":{"crate_id":24,"path":["regex","compile","SuffixCacheEntry"],"kind":"struct"},"16:5075:6296":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"26:1303:4718":{"crate_id":26,"path":["aho_corasick","nfa","QueuedSet"],"kind":"struct"},"25:1081:27206":{"crate_id":25,"path":["regex_syntax","ast","parse","Primitive"],"kind":"enum"},"6:7461:9457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11026:22987":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:4308:3625":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:10250:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"26:1455:5024":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","Exec"],"kind":"enum"},"16:5897:4246":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:8197:9552":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:31974:2383":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:11293:23005":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"16:6588:6395":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:4755:9440":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:22811:9720":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:8299:4532":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:2039:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:15521:6047":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12707:5428":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:4965:8860":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:8226:22915":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:5709:9348":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:45706:7158":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:5104:10290":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:4560:6280":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:1692:8738":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:44335:7109":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:13211:5484":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"18:735:27158":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"26:1013:4678":{"crate_id":26,"path":["aho_corasick","ahocorasick","StreamFindIter"],"kind":"struct"},"1:4917:7294":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:4802:6287":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:11607:7318":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:31949:6988":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"16:6385:6381":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:7630:6863":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:7741:4292":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:13478:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:5352:8992":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:9755:22950":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:12572:4150":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:11788:5328":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"25:2442:4941":{"crate_id":25,"path":["regex_syntax","hir","HirInfo"],"kind":"struct"},"26:1210:4658":{"crate_id":26,"path":["aho_corasick","nfa","NFA"],"kind":"struct"},"3:0:487":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:1535:8636":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:31967:2956":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"24:1526:4956":{"crate_id":24,"path":["regex","dfa","Transitions"],"kind":"struct"},"5:5846:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:9295:4535":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:46536:7238":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:9249:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"24:2430:5097":{"crate_id":24,"path":["regex","re_set","bytes","SetMatchesIntoIter"],"kind":"struct"},"17:15390:5988":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:5370:9002":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"11:0:2812":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"19:0:1249":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:8499:3042":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:14341:5695":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"25:2484:4017":{"crate_id":25,"path":["regex_syntax","parser","Parser"],"kind":"struct"},"11:875:6738":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"26:1376:4636":{"crate_id":26,"path":["aho_corasick","packed","api","FindIter"],"kind":"struct"},"5:296:2340":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:5624:9121":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:7584:9530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:6729:9321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"24:1850:37072":{"crate_id":24,"path":["regex","literal","imp","LiteralIter"],"kind":"enum"},"6:5643:9130":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:10201:2629":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:35834:6506":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:12305:718":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:21477:34217":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:6782:22908":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:42475:4908":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:3586:2964":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:3647:3625":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:12298:1270":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:10901:4533":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:15418:5995":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"28:420:4610":{"crate_id":28,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"1:5891:3129":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"11:2369:6752":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"24:1656:5029":{"crate_id":24,"path":["regex","exec","ExecReadOnly"],"kind":"struct"},"25:1917:27192":{"crate_id":25,"path":["regex_syntax","ast","FlagsItemKind"],"kind":"enum"},"5:7377:6747":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:6620:6404":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:42706:4508":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:4344:7288":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"24:2224:5089":{"crate_id":24,"path":["regex","re_bytes","CaptureNames"],"kind":"struct"},"17:11730:5319":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:2943:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:30469:2999":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"24:2423:5095":{"crate_id":24,"path":["regex","re_set","bytes","SetMatches"],"kind":"struct"},"2:40108:7012":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:6991:36595":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:16235:6220":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"24:1468:5008":{"crate_id":24,"path":["regex","compile","SuffixCache"],"kind":"struct"},"2:45268:7117":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:1723:8750":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:21987:4371":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"27:680:4076":{"crate_id":27,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:10439:4147":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:9108:7406":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:40145:7019":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:5898:3130":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:558:3261":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:12311:863":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:4425:7289":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:21507:10207":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:39880:6877":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:39295:6997":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:39225:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:39167:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"18:491:5116":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"24:213:37110":{"crate_id":24,"path":["regex","dfa","InstPtrs"],"kind":"struct"},"16:6317:6372":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:15635:6071":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:7084:36031":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:15:2346":{"crate_id":2,"path":["core","write"],"kind":"macro"},"18:635:4635":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:9336:4537":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"25:2174:4934":{"crate_id":25,"path":["regex_syntax","hir","Hir"],"kind":"struct"},"2:6139:4360":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:12316:1776":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:12408:4179":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:4708:10282":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:7348:3095":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:9244:4523":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:2112:6832":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"24:2042:5081":{"crate_id":24,"path":["regex","prog","InstBytes"],"kind":"struct"},"2:12813:4771":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:40726:6904":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:491:8551":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:7945:3275":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"14:220:6732":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:40068:7011":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:41598:3088":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:33439:15624":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:11046:3625":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:5237:955":{"crate_id":2,"path":["core","iter"],"kind":"module"},"24:2503:4977":{"crate_id":24,"path":["regex","re_unicode","Regex"],"kind":"struct"},"2:46475:7233":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:46464:7232":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:15092:5914":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"26:1331:4095":{"crate_id":26,"path":["aho_corasick","packed","api","Config"],"kind":"struct"},"2:22111:10346":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"26:1642:4760":{"crate_id":26,"path":["aho_corasick","prefilter","RareBytesOne"],"kind":"struct"},"5:3283:36473":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"11:434:36578":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:15734:6094":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:8140:7330":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:2602:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:7306:36602":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:14723:5746":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:10818:5249":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:14752:5766":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11051:5262":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:2660:6247":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:1597:4886":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:15222:5944":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:12629:6924":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:6433:4274":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"25:2360:4802":{"crate_id":25,"path":["regex_syntax","hir","Group"],"kind":"struct"},"1:3204:1293":{"crate_id":1,"path":["std","io","prelude"],"kind":"module"},"1:915:4338":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"25:1187:2240":{"crate_id":25,"path":["regex_syntax","ast","print","Writer"],"kind":"struct"},"1:7881:30491":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:7429:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:46219:7223":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:14933:5894":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11510:5298":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5329:8989":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:2860:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:41673:3532":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:4106:10239":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:0:2817":{"crate_id":17,"path":["object"],"kind":"module"},"24:2028:5079":{"crate_id":24,"path":["regex","prog","InstChar"],"kind":"struct"},"17:11764:5324":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:2133:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:4963:15553":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:12575:6940":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:4885:8824":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"29:252:4017":{"crate_id":29,"path":["anstyle_parse","Parser"],"kind":"struct"},"17:13723:5582":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:1490:8614":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:564:8596":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7590:4285":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:44096:9728":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"9:447:21891":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"26:1200:3056":{"crate_id":26,"path":["aho_corasick","error","ErrorKind"],"kind":"enum"},"11:2423:3532":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"25:1130:4800":{"crate_id":25,"path":["regex_syntax","ast","parse","ParserI"],"kind":"struct"},"25:2068:2240":{"crate_id":25,"path":["regex_syntax","hir","print","Writer"],"kind":"struct"},"25:2505:4947":{"crate_id":25,"path":["regex_syntax","unicode","UnicodeWordError"],"kind":"struct"},"22:211:2618":{"crate_id":22,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"16:6976:4282":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:5502:9071":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:6636:9287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:9364:3133":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"11:1603:6749":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12993:22978":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:7695:6581":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:5781:6259":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:10877:7331":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:33958:6505":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:10262:3008":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"27:706:4622":{"crate_id":27,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:4424:6276":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:14066:5639":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:4630:10265":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"21:101:2724":{"crate_id":21,"path":["humantime","date","format_rfc3339_micros"],"kind":"function"},"5:1426:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:13047:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:15616:6066":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:10967:7303":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"16:5347:6299":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:10997:5258":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:42098:3128":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:25:676":{"crate_id":2,"path":["core","env"],"kind":"macro"},"16:4830:6288":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"26:1550:4746":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","Mask128"],"kind":"struct"},"17:13308:4191":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:8618:3627":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"14:40:5485":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"27:740:36616":{"crate_id":27,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:14545:5730":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"21:180:2591":{"crate_id":21,"path":["humantime","wrapper","Timestamp"],"kind":"struct"},"2:22955:6980":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:32070:3485":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:11857:4540":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:9497:3654":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"28:99:27239":{"crate_id":28,"path":["anstream","stream","RawStream"],"kind":"trait"},"17:11825:5333":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:4048:10234":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:45689:7157":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:946:6738":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:5700:6258":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"28:501:3718":{"crate_id":28,"path":["anstream","strip","StripStream"],"kind":"struct"},"2:4325:6878":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"11:787:4337":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:12278:27940":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6120:22904":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:9658:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:7387:6854":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:7900:30499":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:8492:3041":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:5367:22900":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:9168:7409":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:4292:10262":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:3606:3029":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"24:2593:4983":{"crate_id":24,"path":["regex","sparse","SparseSet"],"kind":"struct"},"2:22:796":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:10577:30497":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:4863:10253":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11557:5302":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"26:1499:4736":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddyFat1Mask256"],"kind":"struct"},"17:14038:5634":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:9737:22952":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:13753:5591":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"13:109:36583":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:6278:4252":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:10901:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"0:247:142":{"crate_id":0,"path":["env_logger","fmt","Formatter"],"kind":"struct"},"1:10684:3264":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:2175:23032":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:3270:4887":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:8591:7379":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"11:2469:6829":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:14475:5722":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:11869:32502":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"20:334:2987":{"crate_id":20,"path":["log","MetadataBuilder"],"kind":"struct"},"1:11222:9660":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:12056:5373":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"0:0:2113":{"crate_id":0,"path":["env_logger"],"kind":"module"},"17:13187:5470":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"24:1869:5061":{"crate_id":24,"path":["regex","literal","imp","SingleByteSet"],"kind":"struct"},"18:643:4618":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"26:1280:4666":{"crate_id":26,"path":["aho_corasick","nfa","Compiler"],"kind":"struct"},"1:9262:27941":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:6678:9305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:2446:10198":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:9886:22970":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"27:760:4618":{"crate_id":27,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"1:2287:3027":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:39145:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:4753:9438":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"5:2525:9578":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"24:2508:5089":{"crate_id":24,"path":["regex","re_unicode","CaptureNames"],"kind":"struct"},"6:570:8599":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"25:1328:27185":{"crate_id":25,"path":["regex_syntax","ast","Ast"],"kind":"enum"},"6:5236:8947":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:12485:23099":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:11812:5331":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:21562:10344":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:40319:4362":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11574:4307":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:5002:8880":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:13553:5541":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:2902:22041":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:22749:33249":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13399:5506":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:868:4336":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:12318:5134":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:5477:9064":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:31911:8529":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:736:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"25:1893:4115":{"crate_id":25,"path":["regex_syntax","ast","Flags"],"kind":"struct"},"27:752:4635":{"crate_id":27,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:21568:10347":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:2458:10204":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:13814:5603":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:15814:6113":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:3014:22043":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:6621:9285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:2203:5127":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"15:306:21996":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:6714:9319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:8462:3038":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"24:2556:5085":{"crate_id":24,"path":["regex","re_unicode","CaptureMatches"],"kind":"struct"},"25:2238:4846":{"crate_id":25,"path":["regex_syntax","hir","Class"],"kind":"enum"},"17:15992:6167":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:15368:5983":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:7546:9511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:9084:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:6442:6384":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:22383:15641":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"16:5927:6315":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:11877:4176":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:261:5118":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:11674:5314":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"26:998:4675":{"crate_id":26,"path":["aho_corasick","ahocorasick","FindOverlappingIter"],"kind":"struct"},"6:6597:9273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:894:6747":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"28:244:32876":{"crate_id":28,"path":["anstream","fmt","Adapter"],"kind":"struct"},"27:843:4081":{"crate_id":27,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11647:5312":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:8583:7385":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:3244:4886":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:6937:15528":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:10713:33200":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:23010:6985":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:41588:3201":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:45894:7182":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:13252:5488":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:1628:8702":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"24:1831:37070":{"crate_id":24,"path":["regex","literal","imp","Matcher"],"kind":"enum"},"25:2578:4787":{"crate_id":25,"path":["regex_syntax","utf8","Utf8Range"],"kind":"struct"},"18:726:4081":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10170:4146":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:12929:5439":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"26:1079:2592":{"crate_id":26,"path":["aho_corasick","buffer","Buffer"],"kind":"struct"},"16:2936:22042":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:8615:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:2691:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:16105:6188":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"28:363:4068":{"crate_id":28,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"11:2151:6741":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:9903:33501":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:9435:3098":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:6480:4275":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"24:2107:5082":{"crate_id":24,"path":["regex","re_builder","unicode","RegexBuilder"],"kind":"struct"},"2:8122:15611":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:15624:6067":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"25:1316:4844":{"crate_id":25,"path":["regex_syntax","ast","Comment"],"kind":"struct"},"6:8328:9570":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:46367:7227":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:13665:6954":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"24:1719:5046":{"crate_id":24,"path":["regex","exec","ProgramCacheInner"],"kind":"struct"},"6:1707:8745":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:2572:6243":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:45575:7151":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"11:774:4336":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"24:2445:5099":{"crate_id":24,"path":["regex","re_trait","Locations"],"kind":"struct"},"6:4992:8873":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"15:394:22005":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"24:2254:5092":{"crate_id":24,"path":["regex","re_bytes","ReplacerRef"],"kind":"struct"},"26:1493:4735":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask256"],"kind":"struct"},"24:1688:37079":{"crate_id":24,"path":["regex","exec","MatchLiteralType"],"kind":"enum"},"1:8740:4707":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:40296:6893":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:5157:33220":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:3810:6270":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:3098:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"18:515:4616":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:6706:9316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:4248:3018":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:1565:8655":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:15678:6087":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:15342:5973":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"24:1954:4992":{"crate_id":24,"path":["regex","prog","Inst"],"kind":"enum"},"1:8597:7386":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:12371:5439":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:16032:5488":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:41557:3200":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:7968:3265":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:7446:9452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:31985:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:11062:30500":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:6504:6391":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:4608:10264":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"24:2527:5086":{"crate_id":24,"path":["regex","re_unicode","SplitN"],"kind":"struct"},"6:5336:8990":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:3558:15541":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:3571:33631":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:43163:7057":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:5515:9072":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"2:46574:7246":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:1517:8625":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:16165:6204":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:39205:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:45592:7152":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:1680:8734":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:12319:1372":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:39979:15559":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:1827:3640":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"24:1559:4707":{"crate_id":24,"path":["regex","dfa","State"],"kind":"struct"},"1:6780:3145":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:6763:9332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"22:384:3919":{"crate_id":22,"path":["anstyle","reset","Reset"],"kind":"struct"},"27:797:4643":{"crate_id":27,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13581:5551":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:15778:6109":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"24:1726:5049":{"crate_id":24,"path":["regex","expand","CaptureRef"],"kind":"struct"},"6:5457:9053":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:14260:5685":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:15301:5964":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:9376:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:0:545":{"crate_id":2,"path":["core"],"kind":"module"},"2:39991:7007":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:45767:7161":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"0:403:2366":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Micros"],"kind":"variant"},"9:357:21906":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12213:5385":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"9:424:21893":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:1534:6746":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:5212:8939":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:4611:2948":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:3842:6271":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2374:6234":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"28:61:27245":{"crate_id":28,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"2:46495:7235":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:482:30493":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:12834:15497":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:7428:22911":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:6532:6393":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:40042:7010":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"32:0:3715":{"crate_id":32,"path":["anstyle_query"],"kind":"module"},"1:8429:3065":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:5522:7299":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:3500:3018":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:6562:9252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"25:1057:4788":{"crate_id":25,"path":["regex_syntax","utf8","ScalarRange"],"kind":"struct"},"2:41901:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:12289:5391":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:45415:7134":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:43191:7061":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"24:2518:3043":{"crate_id":24,"path":["regex","re_unicode","Split"],"kind":"struct"},"5:3032:35996":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:14235:5681":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:1586:6829":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:11889:6933":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:45820:7164":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:45330:7125":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"0:401:2363":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Millis"],"kind":"variant"},"16:7528:6572":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:12308:870":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:5436:9038":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:40053:15681":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:4468:6277":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:11177:6925":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:7523:10150":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:45429:7135":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"5:7365:6853":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:1309:6486":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:6157:3018":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10185:4166":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:473:8543":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"11:2562:8530":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:6047:6330":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:46065:7189":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:8828:3625":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:9289:3202":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5244:8951":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:2708:6249":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:5769:6311":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:5381:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"27:0:2818":{"crate_id":27,"path":["memchr"],"kind":"module"},"25:1681:4881":{"crate_id":25,"path":["regex_syntax","ast","ClassSetRange"],"kind":"struct"},"24:2215:5086":{"crate_id":24,"path":["regex","re_bytes","SplitN"],"kind":"struct"},"2:10891:10207":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:1653:8721":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:40759:6907":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:4952:8855":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:43620:3039":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:13173:5469":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:2280:7282":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:11377:6804":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:5112:8914":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:2124:6486":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"11:687:3626":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:45496:7139":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"11:673:3625":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"25:2135:136":{"crate_id":25,"path":["regex_syntax","hir","Error"],"kind":"struct"},"1:10930:3037":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:12863:5438":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:44108:9731":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"27:835:4650":{"crate_id":27,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:724:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"22:405:2616":{"crate_id":22,"path":["anstyle","style","Style"],"kind":"struct"},"17:10661:5247":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"26:1566:37811":{"crate_id":26,"path":["aho_corasick","prefilter","Candidate"],"kind":"enum"},"6:5306:8981":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11743:5320":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:15214:5942":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"14:187:21983":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:46612:7248":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"28:377:4609":{"crate_id":28,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"5:1169:35995":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:6651:3144":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:1969:10176":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"24:1804:4961":{"crate_id":24,"path":["regex","input","Char"],"kind":"struct"},"24:1617:5023":{"crate_id":24,"path":["regex","dfa","StateMap"],"kind":"struct"},"1:11155:4521":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:5831:4245":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"27:698:3498":{"crate_id":27,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:42745:4509":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:39275:6995":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8505:3043":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:12557:4162":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:7539:6263":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6263:6367":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:1603:4887":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12422:5405":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:8259:6543":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:4614:6282":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"29:92:27245":{"crate_id":29,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"2:39922:7002":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:13568:5547":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:4759:2959":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:3740:36022":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"28:341:4066":{"crate_id":28,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"2:3149:2938":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"27:97:27149":{"crate_id":27,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:40275:7027":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"24:2234:5090":{"crate_id":24,"path":["regex","re_bytes","CaptureLocations"],"kind":"struct"},"24:1543:225":{"crate_id":24,"path":["regex","dfa","Result"],"kind":"enum"},"16:7549:6575":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:3546:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:2697:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:10254:3002":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:8450:3037":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:8778:10307":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:479:8546":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:22769:33267":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7014:22909":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:3845:7285":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:13959:5624":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:6650:9298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:22677:4373":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"30:0:3713":{"crate_id":30,"path":["utf8parse"],"kind":"module"},"2:33125:3100":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:33612:15625":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"31:40:4008":{"crate_id":31,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"2:37820:15629":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"24:1927:5070":{"crate_id":24,"path":["regex","pool","PoolGuard"],"kind":"struct"},"16:2684:6248":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:11075:4162":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"11:351:36568":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:9195:10316":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12076:5374":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:15138:5920":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4932:8846":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"26:1397:4731":{"crate_id":26,"path":["aho_corasick","packed","pattern","PatternIter"],"kind":"struct"},"17:15748:6101":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:10769:36612":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:10252:3003":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"24:2482:4687":{"crate_id":24,"path":["regex","re_unicode","Match"],"kind":"struct"},"17:13797:5600":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:4437:36028":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"24:2536:5090":{"crate_id":24,"path":["regex","re_unicode","CaptureLocations"],"kind":"struct"},"1:4743:10239":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:12107:4150":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:43264:7066":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10218:4167":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:22428:10426":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:10698:30489":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:41244:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:1207:5125":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:6435:9187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8135:2236":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:11467:5295":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:44343:7111":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:6671:3532":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:12342:5397":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:13412:5508":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"25:1602:27197":{"crate_id":25,"path":["regex_syntax","ast","ClassUnicodeOpKind"],"kind":"enum"},"17:11341:5289":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:41282:6913":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:6000:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11115:5268":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:11467:30486":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:8259:9555":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:7465:3532":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:44284:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:42698:3730":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8512:3039":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:43798:7093":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"11:102:9712":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12089:5375":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:40257:4361":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:3108:2962":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:41540:3626":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:16138:6195":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"24:2263:5093":{"crate_id":24,"path":["regex","re_bytes","NoExpand"],"kind":"struct"},"2:31953:6543":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"11:1007:6486":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:2542:8526":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:14587:5737":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13526:5532":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:0:2808":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:12597:5421":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:14560:5734":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:15720:6092":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:513:5122":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:7582:6860":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:12949:5134":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:45932:7184":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:10615:15701":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:5802:22901":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13024:22979":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"24:1911:37068":{"crate_id":24,"path":["regex","pikevm","FollowEpsilon"],"kind":"enum"},"25:1489:4860":{"crate_id":25,"path":["regex_syntax","ast","ClassPerl"],"kind":"struct"},"2:45977:7185":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:40710:6903":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"11:2548:8527":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:904:6829":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:12264:5389":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"29:109:4019":{"crate_id":29,"path":["anstyle_parse","params","Params"],"kind":"struct"},"2:22240:10431":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:14012:5631":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:12299:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:10258:3011":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:10044:22974":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:6025:6885":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:40196:4358":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"24:307:4958":{"crate_id":24,"path":["regex","dfa","TransitionsRow"],"kind":"struct"},"2:40287:6892":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:11354:5290":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:3531:3026":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:929:10151":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:6335:4237":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:15010:5902":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:3176:15477":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:46142:7222":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:5400:4146":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:6749:6427":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:7606:3084":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"9:482:21890":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:5770:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:6519:9223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:8093:6632":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:7617:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:21685:10345":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11367:4162":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"9:330:8533":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"28:144:27240":{"crate_id":28,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"17:11605:4174":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:2234:4341":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6441:9190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:1810:676":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:437:5121":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:45915:7183":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:43434:7077":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:11256:5278":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"26:1106:4673":{"crate_id":26,"path":["aho_corasick","dfa","DFA"],"kind":"enum"},"2:11095:3043":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:4924:8844":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:2501:653":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"24:2001:5005":{"crate_id":24,"path":["regex","prog","EmptyLook"],"kind":"enum"},"2:42196:3002":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:42436:9651":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"26:1411:4721":{"crate_id":26,"path":["aho_corasick","packed","rabinkarp","RabinKarp"],"kind":"struct"},"2:46484:7234":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:10425:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:15655:6074":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:2037:5126":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:6215:30501":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:2739:3054":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13116:5457":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:1585:8669":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:8073:6631":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:5219:8940":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:14516:5727":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"26:1628:4671":{"crate_id":26,"path":["aho_corasick","prefilter","RareByteOffsets"],"kind":"struct"},"6:7306:9394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"0:399:2360":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Seconds"],"kind":"variant"},"1:4154:10242":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13272:5498":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:7437:31893":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:22733:6959":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:7650:33532":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:919:4339":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:3374:10166":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:5742:6302":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"25:2058:4110":{"crate_id":25,"path":["regex_syntax","hir","print","PrinterBuilder"],"kind":"struct"},"11:2443:6747":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:0:980":{"crate_id":6,"path":["libc"],"kind":"module"},"2:5195:3068":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:7799:4294":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:6160:22013":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:2504:2233":{"crate_id":1,"path":["std","io"],"kind":"module"},"25:268:37111":{"crate_id":25,"path":["regex_syntax","ast","visitor","ClassInduct"],"kind":"enum"},"2:41432:7046":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:5636:9127":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:45450:7136":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:1547:8645":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"11:2140:6740":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"20:253:2985":{"crate_id":20,"path":["log","MaybeStaticStr"],"kind":"enum"},"25:1905:4906":{"crate_id":25,"path":["regex_syntax","ast","FlagsItem"],"kind":"struct"},"5:6392:10437":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:4372:15476":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:13451:33943":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:11089:5266":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"27:546:4617":{"crate_id":27,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:11717:28313":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:2998:6265":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:43352:3042":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:3335:2770":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:8210:7334":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"26:1404:4665":{"crate_id":26,"path":["aho_corasick","packed","pattern","Pattern"],"kind":"struct"},"2:43674:6877":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:11343:6929":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:3396:6829":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:1940:7278":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:22922:6977":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:8572:9733":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"20:287:2237":{"crate_id":20,"path":["log","Record"],"kind":"struct"},"17:13999:5629":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:2528:6241":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:43366:3043":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:41599:3087":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:41410:33336":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:11915:23073":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:15151:5926":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:5014:8886":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:8118:15612":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:9938:22972":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:465:4803":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:5404:36022":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:6307:30485":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:22109:10207":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"14:214:6731":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"25:2300:4938":{"crate_id":25,"path":["regex_syntax","hir","ClassBytesIter"],"kind":"struct"},"13:226:4302":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:22369:10436":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:6442:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:4467:3018":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"25:1114:4017":{"crate_id":25,"path":["regex_syntax","ast","parse","Parser"],"kind":"struct"},"17:14529:5728":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12671:5425":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:9255:3258":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:11702:5316":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"16:7397:36603":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:7570:6264":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:3614:6268":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"26:1093:4690":{"crate_id":26,"path":["aho_corasick","classes","ByteClassRepresentatives"],"kind":"struct"},"1:2197:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:10939:27947":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"26:1146:4696":{"crate_id":26,"path":["aho_corasick","dfa","Premultiplied"],"kind":"struct"},"2:42020:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:1987:5073":{"crate_id":24,"path":["regex","prog","InstSplit"],"kind":"struct"},"16:7727:4290":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:1062:36022":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:44302:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:22700:6957":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:8159:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:46651:7264":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:11884:7322":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:7874:3065":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:10948:27935":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"25:2122:4115":{"crate_id":25,"path":["regex_syntax","hir","translate","Flags"],"kind":"struct"},"2:21580:4103":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:2517:15642":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:12887:15503":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:12773:2989":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:39972:7006":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:12320:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:39185:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11865:5337":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:6664:9300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:5025:10283":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:11205:2723":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:11563:32831":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"17:13972:5343":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:7823:22913":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:39956:7005":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:13877:5614":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:41706:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:850:3626":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:39945:7004":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:7888:6595":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"21:192:136":{"crate_id":21,"path":["humantime","date","Error"],"kind":"enum"},"17:14147:5650":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:44294:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:2854:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"25:1502:27194":{"crate_id":25,"path":["regex_syntax","ast","ClassPerlKind"],"kind":"enum"},"16:7355:6523":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:6524:9224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:8288:9562":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:4923:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:2515:15641":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"26:1386:4726":{"crate_id":26,"path":["aho_corasick","packed","pattern","Patterns"],"kind":"struct"},"17:12150:5378":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:8029:9551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:8692:7395":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:13325:4193":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:6560:4276":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:12494:5412":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:3029:5143":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:2234:5130":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"27:556:5116":{"crate_id":27,"path":["memchr","cow","Imp"],"kind":"enum"},"6:5557:9090":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:1686:8737":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:940:6736":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:33243:15621":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:8196:4520":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"16:8175:6639":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"26:1666:4767":{"crate_id":26,"path":["aho_corasick","prefilter","StartBytesBuilder"],"kind":"struct"},"17:14968:5895":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:11635:7321":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:22646:4372":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:4909:8838":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:30823:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"27:768:4618":{"crate_id":27,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:7437:4349":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"25:2422:27189":{"crate_id":25,"path":["regex_syntax","hir","RepetitionRange"],"kind":"enum"},"6:4811:8773":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"29:0:3712":{"crate_id":29,"path":["anstyle_parse"],"kind":"module"},"2:7586:15614":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:10245:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"25:1470:4846":{"crate_id":25,"path":["regex_syntax","ast","Class"],"kind":"enum"},"27:815:4079":{"crate_id":27,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:39069:15481":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:11652:9738":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:10642:2773":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:9359:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:5031:8894":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:12267:10139":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:710:4338":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:8155:6638":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:2984:6874":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:21460:34212":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:40741:7033":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:4499:7290":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:5686:4241":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:613:36617":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:5528:9073":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:415:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:16069:6181":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:12030:5370":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10251:4168":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:45467:7137":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:14876:5860":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:39245:10144":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"24:1642:5027":{"crate_id":24,"path":["regex","exec","ExecNoSync"],"kind":"struct"},"16:2636:6246":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"26:1512:4738":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask256"],"kind":"struct"},"2:22540:6955":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"28:313:4065":{"crate_id":28,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"2:11933:15492":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"24:1980:5071":{"crate_id":24,"path":["regex","prog","InstSave"],"kind":"struct"},"17:10720:36607":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"29:285:4061":{"crate_id":29,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"5:2087:3055":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:21687:4103":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"25:1582:27196":{"crate_id":25,"path":["regex_syntax","ast","ClassUnicodeKind"],"kind":"enum"},"2:32832:15620":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:41745:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"24:2452:5100":{"crate_id":24,"path":["regex","re_trait","SubCapturesPosIter"],"kind":"struct"},"2:22593:6956":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:15799:6112":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:22278:10432":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:11179:27951":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:15426:5997":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:1825:3639":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:8155:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:6880:9362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"26:0:3512":{"crate_id":26,"path":["aho_corasick"],"kind":"module"},"17:13064:5451":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:16212:6215":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:7480:3540":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"25:2390:4847":{"crate_id":25,"path":["regex_syntax","hir","Repetition"],"kind":"struct"},"6:5290:8975":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"27:776:4636":{"crate_id":27,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5052:8902":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:1153:36117":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"24:931:4978":{"crate_id":24,"path":["regex","re_bytes","Captures"],"kind":"struct"},"26:1505:4737":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask128"],"kind":"struct"},"2:39886:6998":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:42753:4510":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:3925:6273":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"21:207:36637":{"crate_id":21,"path":["humantime","date","Precision"],"kind":"enum"},"2:2067:6870":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:15249:5948":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"18:563:4076":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:10612:5246":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:4641:6283":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:5160:8918":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:45674:7156":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:22988:6983":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:10351:8173":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"26:1366:37815":{"crate_id":26,"path":["aho_corasick","packed","api","SearchKind"],"kind":"enum"},"1:12300:1639":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"25:1797:27188":{"crate_id":25,"path":["regex_syntax","ast","RepetitionKind"],"kind":"enum"},"6:5546:9084":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:5970:3143":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"24:2162:4687":{"crate_id":24,"path":["regex","re_bytes","Match"],"kind":"struct"},"2:43534:7079":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:40187:4355":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:11189:5271":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:1621:8698":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:7831:5123":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"18:80:27148":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11269:23004":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:14449:5720":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:7934:2945":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:2596:3051":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:7330:9411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:9807:22958":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"26:1023:4679":{"crate_id":26,"path":["aho_corasick","ahocorasick","StreamChunkIter"],"kind":"struct"},"17:10092:22975":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:43975:7105":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"25:1392:4781":{"crate_id":25,"path":["regex_syntax","ast","Literal"],"kind":"struct"},"17:15608:6063":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:5817:4242":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:7702:15606":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"25:1868:4903":{"crate_id":25,"path":["regex_syntax","ast","CaptureName"],"kind":"struct"},"1:5536:7300":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:7988:3264":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"22:281:3916":{"crate_id":22,"path":["anstyle","color","RgbColor"],"kind":"struct"},"6:6447:9191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"24:1213:4978":{"crate_id":24,"path":["regex","re_unicode","Captures"],"kind":"struct"},"16:4856:6289":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:2678:30489":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"26:1136:4695":{"crate_id":26,"path":["aho_corasick","dfa","ByteClass"],"kind":"struct"},"25:1430:27198":{"crate_id":25,"path":["regex_syntax","ast","SpecialLiteralKind"],"kind":"enum"},"25:1143:27207":{"crate_id":25,"path":["regex_syntax","ast","parse","GroupState"],"kind":"enum"},"11:2536:4802":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:33066:2939":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:40215:4359":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:39964:6877":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"24:1452:37069":{"crate_id":24,"path":["regex","compile","InstHole"],"kind":"enum"},"17:12824:22977":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"24:1637:5024":{"crate_id":24,"path":["regex","exec","Exec"],"kind":"struct"},"25:2372:27187":{"crate_id":25,"path":["regex_syntax","hir","GroupKind"],"kind":"enum"},"1:8675:10294":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:578:8604":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:41600:3610":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:13645:6953":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11166:5270":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:3339:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:10671:36613":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:14246:5683":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:15376:5986":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"24:2337:5095":{"crate_id":24,"path":["regex","re_set","unicode","SetMatches"],"kind":"struct"},"1:4859:10250":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:3196:6231":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:22328:33694":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"24:1936:4965":{"crate_id":24,"path":["regex","prog","Program"],"kind":"struct"},"2:11250:6927":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:10681:33185":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:22661:4350":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:13757:3094":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"26:1696:4687":{"crate_id":26,"path":["aho_corasick","Match"],"kind":"struct"},"1:5269:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:860:6226":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"18:718:4650":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:46521:7237":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:21489:34210":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"24:2344:5097":{"crate_id":24,"path":["regex","re_set","unicode","SetMatchesIntoIter"],"kind":"struct"},"15:288:21995":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:6379:9147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13015:4180":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:30454:3860":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:3264:5131":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4787:8756":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:8294:9563":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:1516:4336":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:44092:9727":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:2838:6255":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"25:2081:4921":{"crate_id":25,"path":["regex_syntax","hir","translate","Translator"],"kind":"struct"},"17:11634:5311":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:2827:15564":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:10915:36610":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:12296:1821":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:7686:6580":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"30:23:21928":{"crate_id":30,"path":["utf8parse","types","Action"],"kind":"enum"},"16:7497:6563":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"26:1620:4670":{"crate_id":26,"path":["aho_corasick","prefilter","ByteSet"],"kind":"struct"},"5:2287:36511":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:7038:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:4821:5139":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"26:1270:2261":{"crate_id":26,"path":["aho_corasick","nfa","Builder"],"kind":"struct"},"2:42517:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"6:7537:9508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:7516:9494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"25:2272:4120":{"crate_id":25,"path":["regex_syntax","hir","ClassUnicodeRange"],"kind":"struct"},"2:2044:15651":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:3597:5133":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12647:5423":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:13455:5518":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:7052:6474":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12362:5402":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:9137:7408":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:30416:3086":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:1566:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:3468:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5415:9023":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:11214:5273":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"26:1542:4742":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddyFat3Mask256"],"kind":"struct"},"5:112:307":{"crate_id":5,"path":["alloc","alloc","alloc"],"kind":"function"},"2:21958:10207":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"15:0:2815":{"crate_id":15,"path":["addr2line"],"kind":"module"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:538:8583":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:6505:9222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:6670:9303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12175:5379":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:1671:8728":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:43312:7070":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"25:2403:27188":{"crate_id":25,"path":["regex_syntax","hir","RepetitionKind"],"kind":"enum"},"1:3020:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:43325:7073":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:2157:5083":{"crate_id":24,"path":["regex","re_builder","set_unicode","RegexSetBuilder"],"kind":"struct"},"28:326:4608":{"crate_id":28,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:7389:9445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:2592:6244":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"26:1187:2261":{"crate_id":26,"path":["aho_corasick","dfa","Builder"],"kind":"struct"},"2:43815:7094":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"16:7813:6583":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6758:6428":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:12361:2688":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:45805:7163":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:5062:3018":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:42735:4707":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:12238:5387":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4979:8868":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:10877:5250":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:10157:7043":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"24:1531:5016":{"crate_id":24,"path":["regex","dfa","Fsm"],"kind":"struct"},"1:4140:10240":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"18:608:4629":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:2728:6250":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:1886:3654":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:14177:5669":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"24:1878:5058":{"crate_id":24,"path":["regex","literal","imp","Memmem"],"kind":"struct"},"2:44080:9724":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:11070:3626":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"25:1749:27191":{"crate_id":25,"path":["regex_syntax","ast","AssertionKind"],"kind":"enum"},"2:40503:6899":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"11:1887:3532":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:12189:5383":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:9145:3532":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:9381:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:9121:4522":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:6872:6454":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:16176:6209":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:15944:5484":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:9316:27942":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:11142:4150":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"9:238:4707":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:923:6733":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:8006:9540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:11567:5303":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:46559:7245":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:13702:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13832:5604":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"25:2012:4919":{"crate_id":25,"path":["regex_syntax","hir","interval","IntervalSet"],"kind":"struct"},"1:8577:10263":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:46264:7224":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:6721:9320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:3337:3061":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13606:5555":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:44134:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:44392:3093":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:13785:5598":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:22900:6975":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:11799:5329":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:1073:6745":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"26:1675:4768":{"crate_id":26,"path":["aho_corasick","prefilter","StartBytesOne"],"kind":"struct"},"16:7648:6579":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:12309:876":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:5174:8919":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:8300:9564":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"24:2565:5084":{"crate_id":24,"path":["regex","re_unicode","Matches"],"kind":"struct"},"2:44356:7114":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"27:114:27150":{"crate_id":27,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:2303:22014":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:12329:15690":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:13292:4187":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:11688:5315":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"25:1531:27195":{"crate_id":25,"path":["regex_syntax","ast","ClassAsciiKind"],"kind":"enum"},"17:10573:36611":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:6032:3078":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"11:1676:36573":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"28:406:4069":{"crate_id":28,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"11:2304:6486":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"5:3036:35997":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:7580:6577":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:43927:7096":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:4337:6879":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:14489:5723":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:941:3625":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:15078:5911":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:3778:6269":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:5382:9007":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:4824:8783":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11755:5323":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:13594:5552":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:9151:7306":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:6339:4527":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:9372:3018":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"16:7559:6576":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:33785:15626":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"18:531:4619":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:868:10152":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:11580:7438":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:43293:7069":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:4352:6275":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:1559:8653":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"26:961:4672":{"crate_id":26,"path":["aho_corasick","ahocorasick","AhoCorasick"],"kind":"struct"},"1:1582:6747":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:5200:8932":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:5320:8986":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:14788:5797":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:1863:3648":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:5777:7304":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:2788:6253":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:5565:9092":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4971:8863":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:7061:6477":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:14402:5706":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:44088:9726":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"15:327:4298":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:706:4646":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:6291:6953":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:5572:7302":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:14372:5700":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"25:2064:4808":{"crate_id":25,"path":["regex_syntax","hir","print","Printer"],"kind":"struct"},"1:9399:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:11773:5325":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:14025:5632":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"24:2132:5083":{"crate_id":24,"path":["regex","re_builder","set_bytes","RegexSetBuilder"],"kind":"struct"},"2:2851:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:8190:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11270:9661":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:40225:2458":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5102:8913":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:11574:4530":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"25:2254:4875":{"crate_id":25,"path":["regex_syntax","hir","ClassUnicode"],"kind":"struct"},"17:15463:6005":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"11:123:4303":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:46438:7230":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"25:1737:4789":{"crate_id":25,"path":["regex_syntax","ast","Assertion"],"kind":"struct"},"10:0:2811":{"crate_id":10,"path":["adler"],"kind":"module"},"17:12508:5415":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:1526:8630":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:8016:10137":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:14994:5901":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"31:0:3714":{"crate_id":31,"path":["colorchoice"],"kind":"module"},"2:10504:3727":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:11045:3919":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:7452:9454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:6132:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:1975:1313":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:8763:7398":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:1041:6486":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:5191:8927":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:9721:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:39907:33263":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:504:3254":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"24:1822:5053":{"crate_id":24,"path":["regex","literal","imp","LiteralSearcher"],"kind":"struct"},"2:44100:9729":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"11:430:36577":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"11:396:36566":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13046:5448":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"21:157:3112":{"crate_id":21,"path":["humantime","duration","FormattedDuration"],"kind":"struct"},"2:43172:7058":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:3842:7284":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:5039:8898":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:12515:6937":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"25:1281:4506":{"crate_id":25,"path":["regex_syntax","ast","Span"],"kind":"struct"},"2:43342:7074":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13844:5606":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"24:949:4981":{"crate_id":24,"path":["regex","re_bytes","CapturesDebug"],"kind":"struct"},"18:680:4643":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:41548:3532":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"24:2473:5085":{"crate_id":24,"path":["regex","re_trait","CaptureMatches"],"kind":"struct"},"2:3531:15632":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:2254:6873":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"24:1702:37077":{"crate_id":24,"path":["regex","exec","MatchNfaType"],"kind":"enum"},"1:10534:7405":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:43962:7101":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"26:1584:4619":{"crate_id":26,"path":["aho_corasick","prefilter","PrefilterState"],"kind":"struct"},"1:10920:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:41266:6911":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"26:1649:4762":{"crate_id":26,"path":["aho_corasick","prefilter","RareBytesTwo"],"kind":"struct"},"16:5037:6295":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:43784:7090":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:13627:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"24:2241:5091":{"crate_id":24,"path":["regex","re_bytes","SubCaptureMatches"],"kind":"struct"},"26:1126:4087":{"crate_id":26,"path":["aho_corasick","dfa","Standard"],"kind":"struct"},"16:6353:4267":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:8036:3658":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:4876:8819":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:4743:6285":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:4100:10238":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:41979:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11801:7286":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:14051:5636":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"26:1156:4697":{"crate_id":26,"path":["aho_corasick","dfa","PremultipliedByteClass"],"kind":"struct"},"2:44116:4370":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:5449:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:5448:4848":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:15473:6010":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4985:8870":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:2323:22040":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:5250:8953":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:21676:10207":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"9:53:4309":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:9386:3141":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:7085:6478":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"24:1398:4541":{"crate_id":24,"path":["regex","backtrack","Cache"],"kind":"struct"},"6:5314:8985":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:1910:4886":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:41617:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"28:470:2592":{"crate_id":28,"path":["anstream","buffer","Buffer"],"kind":"struct"},"25:1881:4905":{"crate_id":25,"path":["regex_syntax","ast","SetFlags"],"kind":"struct"},"2:45657:7155":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5671:9140":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:30480:33270":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2:22911:6976":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:1699:8741":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:39468:3478":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:11856:6932":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:6849:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"10:36:8532":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:13485:5522":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:11876:7322":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"11:1917:4887":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:11138:6924":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:40751:6905":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:8317:9569":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:1510:8622":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:4241:31903":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5064:8911":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:3669:5148":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:3335:3147":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:8438:3067":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:7109:36051":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"26:1291:4715":{"crate_id":26,"path":["aho_corasick","nfa","fill_failure_transitions_leftmost","QueuedState"],"kind":"struct"},"26:1236:4710":{"crate_id":26,"path":["aho_corasick","nfa","Dense"],"kind":"struct"},"24:1571:4936":{"crate_id":24,"path":["regex","dfa","Byte"],"kind":"struct"},"29:26:27247":{"crate_id":29,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"21:134:136":{"crate_id":21,"path":["humantime","duration","Error"],"kind":"enum"},"17:15289:5958":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6079:4226":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:44084:9725":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:45607:7153":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11841:5335":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:3022:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:13946:5621":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:10200:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:12900:4186":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:3278:4885":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"25:1720:27193":{"crate_id":25,"path":["regex_syntax","ast","ClassSetBinaryOpKind"],"kind":"enum"},"24:1780:5051":{"crate_id":24,"path":["regex","input","CharInput"],"kind":"struct"},"2:41665:3626":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:3342:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:6505:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:3475:6267":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:40328:6895":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:43658:6942":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"28:0:2114":{"crate_id":28,"path":["anstream"],"kind":"module"},"24:2418:5094":{"crate_id":24,"path":["regex","re_set","bytes","RegexSet"],"kind":"struct"},"25:1706:4884":{"crate_id":25,"path":["regex_syntax","ast","ClassSetBinaryOp"],"kind":"struct"},"2:11215:6926":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:7467:9458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:41682:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:12313:1782":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:5122:8915":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6532:9229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:6746:9324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:3552:15542":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:6948:4280":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:13424:5509":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:622:7270":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"9:392:21892":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:2195:3254":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:11240:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:10639:2770":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:3378:2773":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:1859:3018":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"24:1289:27176":{"crate_id":24,"path":["regex","re_unicode","Replacer"],"kind":"trait"},"17:13674:5557":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"22:350:4141":{"crate_id":22,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"16:7857:6591":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:45347:7126":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:8642:7291":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:2808:6254":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:11583:5307":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:3380:3058":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"25:1518:4864":{"crate_id":25,"path":["regex_syntax","ast","ClassAscii"],"kind":"struct"},"6:7348:9418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:7602:9533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:41298:10217":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:12295:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"25:1405:27190":{"crate_id":25,"path":["regex_syntax","ast","LiteralKind"],"kind":"enum"},"6:5046:8900":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:2448:10199":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:10759:4150":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:8188:6642":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:5617:9118":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"26:1602:4754":{"crate_id":26,"path":["aho_corasick","prefilter","Packed"],"kind":"struct"},"2:41466:6914":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:4819:10286":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:32460:6499":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:4263:10259":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:15931:5470":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:10469:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:5361:8996":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5423:9028":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:6874:9361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11392:5292":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"22:360:3917":{"crate_id":22,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"17:12201:5384":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:9210:10318":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:43470:5086":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"24:1792:5052":{"crate_id":24,"path":["regex","input","ByteInput"],"kind":"struct"},"1:5587:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:15333:5972":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:22414:10207":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:4458:2967":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:4800:8765":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:1579:3532":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"11:1896:6829":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:6471:9200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:5225:8943":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:14912:5889":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:4271:10260":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"25:2500:4946":{"crate_id":25,"path":["regex_syntax","unicode","CaseFoldError"],"kind":"struct"},"2:43181:7060":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:6026:4220":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:10256:3010":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"25:1785:4895":{"crate_id":25,"path":["regex_syntax","ast","RepetitionOp"],"kind":"struct"},"1:3427:3048":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:8834:7403":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:3329:6266":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:6900:9376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8162:7332":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"20:306:2236":{"crate_id":20,"path":["log","Metadata"],"kind":"struct"},"5:7357:3532":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:40243:7024":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:7585:15613":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:13473:5519":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:15168:5931":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:7339:9417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:44169:15734":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:22842:10233":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:16121:6193":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"11:1051:6741":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:5212:3078":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:9417:2723":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:3138:3482":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:43201:7062":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"20:223:2234":{"crate_id":20,"path":["log","LevelFilter"],"kind":"enum"},"1:7077:10342":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:6466:6387":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"26:1609:4755":{"crate_id":26,"path":["aho_corasick","prefilter","RareBytesBuilder"],"kind":"struct"},"26:1085:4657":{"crate_id":26,"path":["aho_corasick","classes","ByteClasses"],"kind":"struct"},"2:3164:6500":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:9858:22969":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"11:883:6739":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:16093:6186":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:15102:5915":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"24:1885:5016":{"crate_id":24,"path":["regex","pikevm","Fsm"],"kind":"struct"},"1:11740:7284":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:8145:7331":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:45511:7140":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"25:2001:142":{"crate_id":25,"path":["regex_syntax","error","Formatter"],"kind":"struct"},"5:1525:4337":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11898:5338":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"11:2403:3626":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:559:8594":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:31984:3150":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:7366:9427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:328:9716":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"27:715:36619":{"crate_id":27,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"26:1657:4765":{"crate_id":26,"path":["aho_corasick","prefilter","RareBytesThree"],"kind":"struct"},"17:16079:6182":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:4685:2956":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:7359:9423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:14414:5708":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13922:5620":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"18:573:4618":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:4986:5140":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:40266:6886":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:40138:3069":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"16:5006:6294":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"24:2035:5080":{"crate_id":24,"path":["regex","prog","InstRanges"],"kind":"struct"},"25:2593:4953":{"crate_id":25,"path":["regex_syntax","utf8","Utf8Sequences"],"kind":"struct"},"16:872:5118":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"11:1087:36565":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:2987:4698":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:43251:7065":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12328:5393":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:9916:22971":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"26:1427:4666":{"crate_id":26,"path":["aho_corasick","packed","teddy","compile","Compiler"],"kind":"struct"},"28:114:3048":{"crate_id":28,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"16:7656:22912":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5483:9065":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"5:3791:3055":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12724:22976":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:13089:5452":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:40234:6884":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:11153:5249":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"14:31:6728":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:11541:3276":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"23:97:3518":{"crate_id":23,"path":["env_filter","op","FilterOp"],"kind":"struct"},"2:10260:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:8529:10216":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"25:1183:4808":{"crate_id":25,"path":["regex_syntax","ast","print","Printer"],"kind":"struct"},"16:7769:6582":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:31983:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:6940:4238":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:481:4617":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:1142:6744":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:15190:5937":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:43336:6936":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:7412:9446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:22863:10207":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:14325:5693":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:11646:9737":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"25:2524:37112":{"crate_id":25,"path":["regex_syntax","unicode","CanonicalClassQuery"],"kind":"enum"},"5:7567:15681":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:1888:3655":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"14:202:15511":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:10982:27950":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:4150:10241":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"24:2050:4124":{"crate_id":24,"path":["regex","re_builder","RegexOptions"],"kind":"struct"},"26:1688:4770":{"crate_id":26,"path":["aho_corasick","prefilter","StartBytesThree"],"kind":"struct"},"2:40368:7029":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:43640:7082":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:7397:6855":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:10350:4171":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"14:165:21976":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:2326:6740":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:40165:7021":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"27:852:27158":{"crate_id":27,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:33184:15622":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"27:725:4629":{"crate_id":27,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:22977:6982":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"26:1224:4707":{"crate_id":26,"path":["aho_corasick","nfa","State"],"kind":"struct"},"2:4602:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:532:8580":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:46589:7247":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:3634:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:3899:6272":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:15760:6103":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:43570:5084":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:45362:7127":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:4718:6284":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:5925:3131":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:9290:4526":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"21:99:2727":{"crate_id":21,"path":["humantime","date","format_rfc3339_seconds"],"kind":"function"},"2:12345:6934":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"18:96:27149":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11853:5336":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"13:0:2807":{"crate_id":13,"path":["std_detect"],"kind":"module"},"26:1309:4719":{"crate_id":26,"path":["aho_corasick","nfa","AllBytesIter"],"kind":"struct"},"5:4834:781":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"16:2394:6235":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:545:8586":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:8845:7404":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7604:4286":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:754:4656":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:12306:734":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:45721:7159":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:8304:3056":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:9716:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:867:5117":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:11315:7436":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:8197:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"26:1357:4646":{"crate_id":26,"path":["aho_corasick","packed","api","Searcher"],"kind":"struct"},"6:6542:9236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:41504:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:2042:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13363:5499":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"26:1558:4747":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","Mask256"],"kind":"struct"},"6:6460:9192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:4238:3018":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"29:198:21928":{"crate_id":29,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"30:88:4017":{"crate_id":30,"path":["utf8parse","Parser"],"kind":"struct"},"17:15116:5916":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:5846:6312":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"24:713:4962":{"crate_id":24,"path":["regex","pool","Pool"],"kind":"struct"},"6:4870:8817":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:40118:7018":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:5146:8917":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"21:164:130":{"crate_id":21,"path":["humantime","wrapper","Duration"],"kind":"struct"},"6:6775:9334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"11:844:10151":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"25:2324:4935":{"crate_id":25,"path":["regex_syntax","hir","Anchor"],"kind":"enum"},"2:21475:34203":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:33302:15623":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:8265:9556":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:32041:3486":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:12478:5410":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"27:806:4645":{"crate_id":27,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:15356:5980":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:1761:2588":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:45865:7181":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"11:2498:21965":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"16:5107:6297":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"11:1066:21969":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"25:2186:27211":{"crate_id":25,"path":["regex_syntax","hir","HirKind"],"kind":"enum"},"25:2307:4121":{"crate_id":25,"path":["regex_syntax","hir","ClassBytesRange"],"kind":"struct"},"6:8282:9561":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:43993:6946":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:7755:4293":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:3947:7286":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:8294:7335":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"25:1569:4875":{"crate_id":25,"path":["regex_syntax","ast","ClassUnicode"],"kind":"struct"},"2:42210:3010":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:43890:6945":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:2621:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:15957:6137":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"18:659:4636":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:11357:6930":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"18:0:2818":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:6849:6453":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7144:22910":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:2478:6239":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:5960:6322":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"25:1816:27189":{"crate_id":25,"path":["regex_syntax","ast","RepetitionRange"],"kind":"enum"},"26:1060:27232":{"crate_id":26,"path":["aho_corasick","ahocorasick","MatchKind"],"kind":"enum"},"17:10018:22954":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"7:0:1850":{"crate_id":7,"path":["unwind"],"kind":"module"},"25:0:3511":{"crate_id":25,"path":["regex_syntax"],"kind":"module"},"25:1955:27209":{"crate_id":25,"path":["regex_syntax","either","Either"],"kind":"enum"},"17:14575:4180":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"25:2029:4920":{"crate_id":25,"path":["regex_syntax","hir","interval","IntervalSetIter"],"kind":"struct"},"17:10284:4169":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"25:1193:136":{"crate_id":25,"path":["regex_syntax","ast","Error"],"kind":"struct"},"17:12543:5420":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:43384:6927":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:12819:4665":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"22:0:2115":{"crate_id":22,"path":["anstyle"],"kind":"module"},"2:46396:7228":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:32072:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:14131:5645":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:7321:3200":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:8226:3055":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:22330:15641":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"5:3028:9581":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:42446:2999":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:21458:34218":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:7554:6857":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:7594:6862":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"25:1694:4882":{"crate_id":25,"path":["regex_syntax","ast","ClassSetUnion"],"kind":"struct"},"2:2857:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:4864:8816":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:6411:10438":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:12043:5371":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:4078:10236":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:9095:4521":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:1945:3856":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:22999:6984":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:11661:5313":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:2101:6831":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:5784:7305":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"25:2089:27225":{"crate_id":25,"path":["regex_syntax","hir","translate","HirFrame"],"kind":"enum"},"5:7538:3266":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:16187:6210":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"5:6947:15529":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:12293:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:10219:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:6412:22905":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:7168:7413":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"26:1340:37813":{"crate_id":26,"path":["aho_corasick","packed","api","ForceAlgorithm"],"kind":"enum"},"6:6689:9307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:12294:1150":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:16151:6201":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"11:1107:6743":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"24:987:27176":{"crate_id":24,"path":["regex","re_bytes","Replacer"],"kind":"trait"},"16:2338:6232":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:2768:6252":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"26:1487:4734":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask128"],"kind":"struct"},"22:303:4138":{"crate_id":22,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"25:2038:4777":{"crate_id":25,"path":["regex_syntax","hir","literal","Literals"],"kind":"struct"},"17:11595:4173":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:2231:4307":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:5266:8962":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:6394:7304":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"25:2475:4106":{"crate_id":25,"path":["regex_syntax","parser","ParserBuilder"],"kind":"struct"},"1:2278:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:11715:5317":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:1938:652":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:2826:10207":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"26:1594:2261":{"crate_id":26,"path":["aho_corasick","prefilter","Builder"],"kind":"struct"},"26:1534:4741":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask256"],"kind":"struct"},"2:41484:6916":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:39998:7008":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:22316:10435":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"5:3806:6831":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:8250:3148":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:1936:2635":{"crate_id":2,"path":["core","mem","replace"],"kind":"function"},"17:15206:5940":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:21509:10348":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:4940:6292":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:3541:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:39935:7003":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:12792:5207":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:6456:22906":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:16198:6211":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:2458:6238":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:12839:15496":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:730:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:43952:7097":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:4501:36028":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5536:9078":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:9908:4364":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"24:1601:4137":{"crate_id":24,"path":["regex","dfa","StateFlags"],"kind":"struct"},"27:648:4619":{"crate_id":27,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:10442:30436":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"24:1666:37071":{"crate_id":24,"path":["regex","exec","MatchType"],"kind":"enum"},"6:6821:9350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:689:4645":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7111:6483":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:1575:3625":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:11056:30496":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:8306:9565":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:22461:10425":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:11524:5299":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:5260:8959":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:10419:4172":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:5134:8916":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:2612:6245":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:3179:15478":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:39130:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:1325:6741":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:144:2905":{"crate_id":5,"path":["alloc","boxed"],"kind":"module"},"16:2438:6237":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"23:90:3520":{"crate_id":23,"path":["env_filter","filtered_log","FilteredLog"],"kind":"struct"},"1:646:10134":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"27:730:36617":{"crate_id":27,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:5452:15484":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:6768:9333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"16:5307:6298":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:7575:9527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:10137:22951":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"29:85:27243":{"crate_id":29,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"17:11547:5188":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:2283:3895":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:6231:6364":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"20:0:2117":{"crate_id":20,"path":["log"],"kind":"module"},"7:31:21877":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12683:5426":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"20:124:2978":{"crate_id":20,"path":["log","NopLogger"],"kind":"struct"},"6:5466:9059":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"0:405:2369":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Nanos"],"kind":"variant"},"2:1934:2776":{"crate_id":2,"path":["core","mem","take"],"kind":"function"},"17:12399:5404":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:14386:5702":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:46510:7236":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"25:2289:4923":{"crate_id":25,"path":["regex_syntax","hir","ClassBytes"],"kind":"struct"},"22:261:3915":{"crate_id":22,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"5:6544:6747":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:14189:5671":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:9231:3132":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"20:300:2986":{"crate_id":20,"path":["log","RecordBuilder"],"kind":"struct"},"2:3324:2965":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:2748:6251":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:4148:3626":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:12552:6939":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:4:1232":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:21421:3498":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:553:8591":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:43748:15509":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:5:1876":{"crate_id":5,"path":["alloc","vec"],"kind":"macro"},"2:41609:3089":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:46309:7225":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:1340:6740":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"11:1923:4772":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"24:1417:4996":{"crate_id":24,"path":["regex","compile","Patch"],"kind":"struct"},"24:2349:5098":{"crate_id":24,"path":["regex","re_set","unicode","SetMatchesIter"],"kind":"struct"},"11:1883:3625":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:41862:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:21963:10350":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:3470:3066":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:13437:5510":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:8620:9427":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:7699:6829":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"18:623:36616":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"27:655:4074":{"crate_id":27,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"24:2332:5094":{"crate_id":24,"path":["regex","re_set","unicode","RegexSet"],"kind":"struct"},"2:3711:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"25:1380:4848":{"crate_id":25,"path":["regex_syntax","ast","Concat"],"kind":"struct"},"5:3304:4772":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"25:1932:4908":{"crate_id":25,"path":["regex_syntax","ast","Flag"],"kind":"enum"},"2:25873:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:13899:5615":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:42953:9723":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:10068:22957":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:3311:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"9:502:6807":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:14599:5744":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:6409:9172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:2430:2477":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:45554:7150":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"}},"external_crates":{"31":{"name":"colorchoice","html_root_url":null},"28":{"name":"anstream","html_root_url":null},"25":{"name":"regex_syntax","html_root_url":null},"22":{"name":"anstyle","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"anstyle_query","html_root_url":null},"29":{"name":"anstyle_parse","html_root_url":null},"26":{"name":"aho_corasick","html_root_url":null},"23":{"name":"env_filter","html_root_url":null},"20":{"name":"log","html_root_url":"https://docs.rs/log/0.4.21/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"utf8parse","html_root_url":null},"27":{"name":"memchr","html_root_url":null},"24":{"name":"regex","html_root_url":null},"21":{"name":"humantime","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}