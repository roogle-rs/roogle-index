{"root":"0:0:2054","crate_version":"0.9.0","includes_private":false,"index":{"2:2866:2780":{"id":"2:2866:2780","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:2393"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13513:61908":{"id":"2:13513:61908","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:244:2426":{"id":"0:244:2426","crate_id":0,"name":"default_styled_level","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[67,4],"end":[69,5]},"visibility":"public","docs":"Get a printable [`Style`] for the given level.\n\nThe style can only be used to print the level.","links":{"`Style`":"0:592:2552"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["level",{"kind":"resolved_path","inner":{"name":"Level","id":"24:195:2190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"StyledValue","id":"0:266:2403","args":{"angle_bracketed":{"args":[{"lifetime":"'static"},{"type":{"kind":"resolved_path","inner":{"name":"Level","id":"24:195:2190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:649:2561":{"id":"0:649:2561","crate_id":0,"name":"Red","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[486,4],"end":[486,7]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13503:61904":{"id":"2:13503:61904","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13054:4159","str::match_indices":"1:16010:2683","prim@char":"1:16004:2678","`DoubleEndedIterator`":"2:8448:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49630:4567","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:85:1828":{"id":"0:85:1828","crate_id":0,"name":"from_env","span":{"filename":"src/filter/mod.rs","begin":[182,4],"end":[190,5]},"visibility":"public","docs":"Initializes the filter builder from an environment.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["env",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3269:211-0:391:134":{"id":"a:2:3269:211-0:391:134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:3505:2800":{"id":"2:3505:2800","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3506:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3492:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3213-0:71:1755":{"id":"b:2:3213-0:71:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Filter","id":"0:71:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3216:127","2:3217:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3648:4631":{"id":"2:3648:4631","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3650:60592","2:3651:60593","2:3652:56041"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6557:3900":{"id":"1:6557:3900","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6558:58473","1:6559:58474"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:2054":{"id":"0:0:2054","crate_id":0,"name":"env_logger","span":{"filename":"src/lib.rs","begin":[11,0],"end":[1315,1]},"visibility":"public","docs":"A simple logger that can be configured via environment variables, for use\nwith the logging facade exposed by the [`log` crate][log-crate-url].\n\nDespite having \"env\" in its name, **`env_logger`** can also be configured by\nother means besides environment variables. See [the examples][gh-repo-examples]\nin the source repository for more approaches.\n\nBy default, `env_logger` writes logs to `stderr`, but can be configured to\ninstead write them to `stdout`.\n\n## Example\n\n```\nuse log::{debug, error, log_enabled, info, Level};\n\nenv_logger::init();\n\ndebug!(\"this is a debug {}\", \"message\");\nerror!(\"this is printed by default\");\n\nif log_enabled!(Level::Info) {\n    let x = 3 * 4; // expensive computation\n    info!(\"the answer was: {}\", x);\n}\n```\n\nAssumes the binary is `main`:\n\n```{.bash}\n$ RUST_LOG=error ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n```\n\n```{.bash}\n$ RUST_LOG=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\n```{.bash}\n$ RUST_LOG=debug ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nYou can also set the log level on a per module basis:\n\n```{.bash}\n$ RUST_LOG=main=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nAnd enable all logging:\n\n```{.bash}\n$ RUST_LOG=main ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nIf the binary name contains hyphens, you will need to replace\nthem with underscores:\n\n```{.bash}\n$ RUST_LOG=my_app ./my-app\n[2017-11-09T02:12:24Z DEBUG my_app] this is a debug message\n[2017-11-09T02:12:24Z ERROR my_app] this is printed by default\n[2017-11-09T02:12:24Z INFO my_app] the answer was: 12\n```\n\nThis is because Rust modules and crates cannot contain hyphens\nin their name, although `cargo` continues to accept them.\n\nSee the documentation for the [`log` crate][log-crate-url] for more\ninformation about its API.\n\n## Enabling logging\n\nLog levels are controlled on a per-module basis, and **by default all\nlogging is disabled except for the `error` level**.\n\nLogging is controlled via the **`RUST_LOG`** environment variable. The\nvalue of this environment variable is a comma-separated list of *logging\ndirectives*. A logging directive is of the form:\n\n```text\nexample::log::target=level\n```\n\nThe log target is typically equal to the path of the module the message\nin question originated from, though it can be overriden.\n\nThe path is rooted in the name of the crate it was compiled for, so if\nyour program is in a file called, for example, `hello.rs`, the path would\nsimply be be `hello`.\n\nFurthermore, the the log can be filtered using prefix-search based on the\nspecified log target. A value of, for example, `RUST_LOG=example`, would\nmatch all of the messages with targets:\n\n* `example`\n* `example::test`\n* `example::test::module::submodule`\n* `examples::and_more_examples`\n\nWhen providing the crate name or a module path, explicitly specifying the\nlog level is optional. If omitted, all logging for the item will be\nenabled.\n\nThe names of the log levels that may be specified correspond to the\nvariations of the [`log::Level`][level-enum] enum from the `log`\ncrate. They are:\n\n* `error`\n* `warn`\n* `info`\n* `debug`\n* `trace`\n\nThere is also a pseudo logging level, `off`, which may be specified to\ndisable all logging for a given module or for the entire application. As\nwith the logging levels, the letter case is not significant[^fn-off].\n\n[^fn-off]: Similar to the universe of log level names, the `off` pseudo\n   log level feature is also provided by the underlying `log` crate.\n\nThe letter case is not significant for the logging level names; e.g.,\n`debug`, `DEBUG`, and `dEbuG` all represent the same logging level. For\nconsistency, our convention is to use the lower case names. Where our docs\ndo use other forms, they do so in the context of specific examples, so you\nwon't be surprised if you see similar usage in the wild.\n\nAs the log level for a module is optional, the module to enable logging for\nis also optional. **If only a level is provided, then the global log\nlevel for all modules is set to this value.**\n\nSome examples of valid values of `RUST_LOG` are:\n\n* `hello` turns on all logging for the 'hello' module\n* `trace` turns on all logging for the application, regardless of its name\n* `TRACE` turns on all logging for the application, regardless of its name (same as previous)\n* `info` turns on all info logging\n* `INFO` turns on all info logging (same as previous)\n* `hello=debug` turns on debug logging for 'hello'\n* `hello=DEBUG` turns on debug logging for 'hello' (same as previous)\n* `hello,std::option` turns on hello, and std's option logging\n* `error,hello=warn` turn on global error logging and also warn for hello\n* `error,hello=off`  turn on global error logging, but turn off logging for hello\n* `off` turns off all logging for the application\n* `OFF` turns off all logging for the application (same as previous)\n\n## Filtering results\n\nA `RUST_LOG` directive may include a regex filter. The syntax is to append `/`\nfollowed by a regex. Each message is checked against the regex, and is only\nlogged if it matches. Note that the matching is done after formatting the\nlog string but before adding any logging meta-data. There is a single filter\nfor all modules.\n\nSome examples:\n\n* `hello/foo` turns on all logging for the 'hello' module where the log\n  message includes 'foo'.\n* `info/f.o` turns on all info logging where the log message includes 'foo',\n  'f1o', 'fao', etc.\n* `hello=debug/foo*foo` turns on debug logging for 'hello' where the log\n  message includes 'foofoo' or 'fofoo' or 'fooooooofoo', etc.\n* `error,hello=warn/[0-9]scopes` turn on global error logging and also\n  warn for hello. In both cases the log message must include a single digit\n  number followed by 'scopes'.\n\n## Capturing logs in tests\n\nRecords logged during `cargo test` will not be captured by the test harness by default.\nThe [`Builder::is_test`] method can be used in unit tests to ensure logs will be captured:\n\n```\n# #[macro_use] extern crate log;\n#[cfg(test)]\nmod tests {\n    fn init() {\n        let _ = env_logger::builder().is_test(true).try_init();\n    }\n\n    #[test]\n    fn it_works() {\n        init();\n\n        info!(\"This record will be captured by `cargo test`\");\n\n        assert_eq!(2, 1 + 1);\n    }\n}\n```\n\nEnabling test capturing comes at the expense of color and other style support\nand may have performance implications.\n\n## Disabling colors\n\nColors and other styles can be configured with the `RUST_LOG_STYLE`\nenvironment variable. It accepts the following values:\n\n* `auto` (default) will attempt to print style characters, but don't force the issue.\nIf the console isn't available on Windows, or if TERM=dumb, for example, then don't print colors.\n* `always` will always print style characters even if they aren't supported by the terminal.\nThis includes emitting ANSI colors on Windows if the console API is unavailable.\n* `never` will never print style characters.\n\n## Tweaking the default format\n\nParts of the default format can be excluded from the log output using the [`Builder`].\nThe following example excludes the timestamp from the log output:\n\n```\nenv_logger::builder()\n    .format_timestamp(None)\n    .init();\n```\n\n### Stability of the default format\n\nThe default format won't optimise for long-term stability, and explicitly makes no\nguarantees about the stability of its output across major, minor or patch version\nbumps during `0.x`.\n\nIf you want to capture or interpret the output of `env_logger` programmatically\nthen you should use a custom format.\n\n### Using a custom format\n\nCustom formats can be provided as closures to the [`Builder`].\nThese closures take a [`Formatter`] and `log::Record` as arguments:\n\n```\nuse std::io::Write;\n\nenv_logger::builder()\n    .format(|buf, record| {\n        writeln!(buf, \"{}: {}\", record.level(), record.args())\n    })\n    .init();\n```\n\nSee the [`fmt`] module for more details about custom formats.\n\n## Specifying defaults for environment variables\n\n`env_logger` can read configuration from environment variables.\nIf these variables aren't present, the default value to use can be tweaked with the [`Env`] type.\nThe following example defaults to log `warn` and above if the `RUST_LOG` environment variable\nisn't set:\n\n```\nuse env_logger::Env;\n\nenv_logger::Builder::from_env(Env::default().default_filter_or(\"warn\")).init();\n```\n\n[gh-repo-examples]: https://github.com/env-logger-rs/env_logger/tree/main/examples\n[level-enum]: https://docs.rs/log/latest/log/enum.Level.html\n[log-crate-url]: https://docs.rs/log/\n[`Builder`]: struct.Builder.html\n[`Builder::is_test`]: struct.Builder.html#method.is_test\n[`Env`]: struct.Env.html\n[`fmt`]: fmt/index.html","links":{"`Formatter`":"0:391:134"},"attrs":["#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/static/images/favicon.ico\")]","#![deny(missing_debug_implementations, missing_docs)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:32:1753","0:108:660","0:472:1760","0:473:1763","0:720:1771","0:474:1788","0:734:1802","0:571:1950","0:572:1960","0:573:2017","0:576:2032","0:579:1830","0:580:1828","0:454"],"is_stripped":false}},"2:10309:189":{"id":"2:10309:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10310:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:496:1895":{"id":"0:496:1895","crate_id":0,"name":"format_timestamp_secs","span":{"filename":"src/lib.rs","begin":[631,4],"end":[633,5]},"visibility":"public","docs":"Configures the timestamp to use second precision.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6863:3859":{"id":"1:6863:3859","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6864:60033"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2872-0:474:1788":{"id":"b:2:2872-0:474:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2866:2780","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2874:2393"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:739":{"id":"0:739","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[380,9],"end":[380,16]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3247:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:740:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3204:681":{"id":"2:3204:681","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3559:4243":{"id":"2:3559:4243","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3561:237","2:3562:206","2:3563:60878"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7795:4020":{"id":"1:7795:4020","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7796:58645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13434:56003":{"id":"2:13434:56003","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:220-0:71:1755":{"id":"a:2:3281:220-0:71:1755","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Filter","id":"0:71:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10540:146":{"id":"2:10540:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10541:652","2:10542:1881","2:10543:60227","2:10544:60228","2:10545:60229","2:10546:60230","2:10547:60231","2:10548:60232","2:10549:60233","2:10550:60234","2:10551:60235","2:10552:60236","2:10553:60237","2:10554:60238","2:10555:60239","2:10556:1533"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:571:1950":{"id":"0:571:1950","crate_id":0,"name":"try_init","span":{"filename":"src/lib.rs","begin":[1144,0],"end":[1146,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"SetLoggerError","id":"24:352:1752","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:133:2477":{"id":"0:133:2477","crate_id":0,"name":"imp","span":{"filename":"src/fmt/humantime/extern_impl.rs","begin":[1,0],"end":[118,1]},"visibility":{"restricted":{"parent":"0:132:1553","path":"::fmt::humantime"}},"docs":null,"links":{},"attrs":["#[path = \"extern_impl.rs\"]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:168:2489"],"is_stripped":true}},"0:720:1771":{"id":"0:720:1771","crate_id":0,"name":"Env","span":{"filename":"src/lib.rs","begin":[321,0],"end":[324,1]},"visibility":"public","docs":"Set of environment variables to configure from.\n\n# Default environment variables\n\nBy default, the `Env` will read the following environment variables:\n\n- `RUST_LOG`: the level filter\n- `RUST_LOG_STYLE`: whether or not to print styles with records.\n\nThese sources can be configured using the builder methods on `Env`.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:526","a:2:3310:2983-0:720:1771","a:2:3281:220-0:720:1771","a:2:9259:2987-0:720:1771","a:2:9260:2986-0:720:1771","a:2:3269:211-0:720:1771","b:2:3202-0:720:1771","b:2:3213-0:720:1771","b:2:4002-0:720:1771","b:2:2869-0:720:1771","b:2:2872-0:720:1771","b:2:3208-0:720:1771","b:2:3198-0:720:1771","0:724","0:555","0:559"]}},"2:10299:119":{"id":"2:10299:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10300:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:681:2522":{"id":"0:681:2522","crate_id":0,"name":"Always","span":{"filename":"src/fmt/writer/mod.rs","begin":[93,4],"end":[93,10]},"visibility":"default","docs":"Try very hard to print styles.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"a:2:9259:2987-0:720:1771":{"id":"a:2:9259:2987-0:720:1771","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9259:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2874:2393":{"id":"2:2874:2393","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:220-0:734:1802":{"id":"a:2:3281:220-0:734:1802","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13429:56005":{"id":"2:13429:56005","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16021:2692"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:165:2430":{"id":"0:165:2430","crate_id":0,"name":"timestamp_millis","span":{"filename":"src/fmt/humantime/extern_impl.rs","begin":[52,4],"end":[57,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmillisecond precision.","links":{"`Timestamp`":"0:168:2489"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Timestamp","id":"0:168:2489","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:184:1552":{"id":"0:184:1552","crate_id":0,"name":"atty","span":{"filename":"src/fmt/writer/atty.rs","begin":[10,0],"end":[32,36]},"visibility":{"restricted":{"parent":"0:183:1756","path":"::fmt::writer"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"0:661:1542":{"id":"0:661:1542","crate_id":0,"name":"0","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[491,12],"end":[491,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"b:2:3202-0:391:134":{"id":"b:2:3202-0:391:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3204:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:4666:2926":{"id":"1:4666:2926","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4667:3757","1:4668:3758","1:4670:3759","1:4671:3760","1:4672:2927","1:4673:3761","1:4674:3762","1:4676:3763","1:4677:3456","1:4678:2449","1:4679:3440","1:4681:2234"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:534:2002":{"id":"0:534:2002","crate_id":0,"name":"default_filter_or","span":{"filename":"src/lib.rs","begin":[1009,4],"end":[1016,5]},"visibility":"public","docs":"Use the default environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["default",{"kind":"generic","inner":"V"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84:920":{"id":"0:84:920","crate_id":0,"name":"new","span":{"filename":"src/filter/mod.rs","begin":[173,4],"end":[179,5]},"visibility":"public","docs":"Initializes the filter builder with defaults.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:163:1892":{"id":"0:163:1892","crate_id":0,"name":"timestamp","span":{"filename":"src/fmt/humantime/extern_impl.rs","begin":[34,4],"end":[39,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC.\n\n# Examples\n\nInclude the current timestamp with the log record:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    let ts = buf.timestamp();\n\n    writeln!(buf, \"{}: {}: {}\", ts, record.level(), record.args())\n});\n```\n\n[`Timestamp`]: struct.Timestamp.html","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Timestamp","id":"0:168:2489","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13506:2256":{"id":"2:13506:2256","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6105:2955":{"id":"5:6105:2955","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3352:4202":{"id":"2:3352:4202","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:181","2:3355:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5837:4742":{"id":"5:5837:4742","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:34208"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13432:56002":{"id":"2:13432:56002","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2869-0:74:1802":{"id":"b:2:2869-0:74:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2871:1743"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13456:56042":{"id":"2:13456:56042","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:16004:2678","self::pattern":"2:13054:4159"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:474:1788":{"id":"b:2:3213-0:474:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3216:127","2:3217:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2888:104":{"id":"2:2888:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2889:408","2:2890:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:4002-0:74:1802":{"id":"b:2:4002-0:74:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:4000:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:4004:1429"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/filter/mod.rs","begin":[262,0],"end":[266,1]},"visibility":{"restricted":{"parent":"0:32:1753","path":"::filter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3247:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:97:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:506:1774":{"id":"0:506:1774","crate_id":0,"name":"write_style","span":{"filename":"src/lib.rs","begin":[764,4],"end":[767,5]},"visibility":"public","docs":"Sets whether or not styles will be written.\n\nThis can be useful in environments that don't support control characters\nfor setting colors.\n\n# Examples\n\nNever attempt to write styles:\n\n```\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder.write_style(WriteStyle::Never);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["write_style",{"kind":"resolved_path","inner":{"name":"fmt::WriteStyle","id":"0:678:1938","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3310:2983-0:71:1755":{"id":"a:2:3310:2983-0:71:1755","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3310:2983","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Filter","id":"0:71:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:386":{"id":"0:386","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[49,48],"end":[49,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"super::WriteStyle","name":"WriteStyle","id":"0:678:1938","glob":false}},"2:4783:4281":{"id":"2:4783:4281","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4784:3433","2:4785:61305","2:4786:3436"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:539:2006":{"id":"0:539:2006","crate_id":0,"name":"write_style_or","span":{"filename":"src/lib.rs","begin":[1035,4],"end":[1043,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["write_style_env",{"kind":"generic","inner":"E"}],["default",{"kind":"generic","inner":"V"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3310:2983-0:391:134":{"id":"a:2:3310:2983-0:391:134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3310:2983","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6085:2241":{"id":"5:6085:2241","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12993:2827":{"id":"2:12993:2827","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12994:126","2:12995:57959"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:740:59":{"id":"0:740:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[380,9],"end":[380,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:645:2558":{"id":"0:645:2558","crate_id":0,"name":"Blue","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[484,4],"end":[484,8]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:8404:151":{"id":"2:8404:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8405:3433","2:8406:3434","2:8407:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13421:61893":{"id":"2:13421:61893","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13073:4161":{"id":"2:13073:4161","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13075:4181","2:13076:922","2:13077:61337","2:13078:61338"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3202-0:71:1755":{"id":"b:2:3202-0:71:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Filter","id":"0:71:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3204:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3198-0:74:1802":{"id":"b:2:3198-0:74:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3201:1843"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10934:214":{"id":"2:10934:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10936:181","2:10937:2003","2:10938:56002","2:10939:56003","2:10940:56004","2:10941:753","2:10942:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10925:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:403:660":{"id":"0:403:660","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[134,4],"end":[136,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10252:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10241:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7928:4265":{"id":"2:7928:4265","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7929:60719","2:7930:60720","2:7931:60717","2:7932:60715","2:7933:60721","2:7934:60718","2:7935:60716"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13430:2003":{"id":"2:13430:2003","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3729:224":{"id":"2:3729:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3730:181","2:3731:4245","2:3732:686","2:3733:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3734:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:555":{"id":"0:555","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1091,0],"end":[1098,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:558:681"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/filter/mod.rs","begin":[277,0],"end":[288,1]},"visibility":{"restricted":{"parent":"0:32:1753","path":"::filter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:101:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2869-0:734:1802":{"id":"b:2:2869-0:734:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2871:1743"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:82:1983":{"id":"0:82:1983","crate_id":0,"name":"enabled","span":{"filename":"src/filter/mod.rs","begin":[163,4],"end":[168,5]},"visibility":"public","docs":"Determines if a log message with the specified metadata would be logged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["metadata",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Metadata","id":"24:294:1750","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:479:920":{"id":"0:479:920","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[415,4],"end":[417,5]},"visibility":"public","docs":"Initializes the log builder with defaults.\n\n**NOTE:** This method won't read from any environment variables.\nUse the [`filter`] and [`write_style`] methods to configure the builder\nor use [`from_env`] or [`from_default_env`] instead.\n\n# Examples\n\nCreate a new builder and configure filters and style:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder\n    .filter(None, LevelFilter::Info)\n    .write_style(WriteStyle::Always)\n    .init();\n```\n\n[`filter`]: #method.filter\n[`write_style`]: #method.write_style\n[`from_env`]: #method.from_env\n[`from_default_env`]: #method.from_default_env","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23137:4376":{"id":"2:23137:4376","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23774:4286","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23128:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:4002-0:720:1771":{"id":"b:2:4002-0:720:1771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:4000:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:4004:1429"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3431:4218":{"id":"2:3431:4218","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13420:61892":{"id":"2:13420:61892","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14242:2992":{"id":"2:14242:2992","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14243:57525","2:14244:57526","2:14245:57527","2:14246:57528","2:14247:57529","2:14248:57530","2:14249:3456"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13540:55950":{"id":"2:13540:55950","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3281:220":{"id":"2:3281:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/filter/mod.rs","begin":[171,0],"end":[260,1]},"visibility":{"restricted":{"parent":"0:32:1753","path":"::filter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:84:920","0:85:1828","0:86:1912","0:87:1916","0:88:1753","0:90:1925","0:91:1952"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:400:1881":{"id":"0:400:1881","crate_id":0,"name":"write","span":{"filename":"src/fmt/mod.rs","begin":[124,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:707:1896":{"id":"0:707:1896","crate_id":0,"name":"Seconds","span":{"filename":"src/fmt/mod.rs","begin":[60,4],"end":[60,11]},"visibility":"default","docs":"Full second precision (0 decimal digits)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:653:2646":{"id":"0:653:2646","crate_id":0,"name":"Magenta","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[488,4],"end":[488,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:3358:4205":{"id":"2:3358:4205","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3360:181","2:3361:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2957:177":{"id":"2:2957:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2958:415","2:2959:2218","2:2960:3390","2:2961:3422"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3440:4238":{"id":"2:3440:4238","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3442:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:561:59":{"id":"0:561:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1101,4],"end":[1106,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6103:62552":{"id":"5:6103:62552","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3169:74":{"id":"2:3169:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3171:3423"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:472:1760":{"id":"0:472:1760","crate_id":0,"name":"DEFAULT_FILTER_ENV","span":{"filename":"src/lib.rs","begin":[305,0],"end":[305,48]},"visibility":"public","docs":"The default name for the environment variable to read filters from.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"expr":"\"RUST_LOG\"","value":null,"is_literal":true}},"0:168:2489":{"id":"0:168:2489","crate_id":0,"name":"Timestamp","span":{"filename":"src/fmt/humantime/extern_impl.rs","begin":[85,0],"end":[88,1]},"visibility":"public","docs":"An [RFC3339] formatted timestamp.\n\nThe timestamp implements [`Display`] and can be written to a [`Formatter`].\n\n[RFC3339]: https://www.ietf.org/rfc/rfc3339.txt\n[`Display`]: https://doc.rust-lang.org/stable/std/fmt/trait.Display.html\n[`Formatter`]: struct.Formatter.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13438:3950":{"id":"2:13438:3950","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:16010:2683","`str`":"1:16010:2683","crate::ops::Index":"2:3577:3978"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3516:3080":{"id":"2:3516:3080","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3517:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8883:3812":{"id":"2:8883:3812","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23774:4286":{"id":"2:23774:4286","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23775:4285"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23770:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6107:57124":{"id":"5:6107:57124","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:16010:2683"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13418:793":{"id":"2:13418:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:16004:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13543:3905":{"id":"2:13543:3905","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:16004:2678"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49770:3906","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:2620","5:785:2011","5:786:3484"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:519":{"id":"0:519","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[906,0],"end":[975,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Log","id":"24:160:1749","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:520:1983","0:521:1747","0:525:1993"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:4000:68":{"id":"2:4000:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4001:1429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:2921:183":{"id":"2:2921:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2923:604","2:2924:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:2926:124":{"id":"2:2926:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13417":{"id":"2:13417","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12514:1340","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13418:793","2:13419:2231","2:13420:61892","2:13421:61893","2:13423:61894","2:13426:57770","2:13427:61895","2:13428:304","2:13429:56005","2:13430:2003","2:13432:56002","2:13434:56003","2:13436:56004","2:13438:3950","2:13439:61896","2:13440:56025","2:13441:56026","2:13442:4592","2:13443:4188","2:13444:2449","2:13445:33245","2:13446:33235","2:13447:3756","2:13448:61897","2:13449:33230","2:13450:56041","2:13453:2267","2:13456:56042","2:13459:3467","2:13463:3429","2:13467:2247","2:13470:33102","2:13473:56035","2:13476:61898","2:13479:61899","2:13482:56037","2:13485:56039","2:13488:61900","2:13491:61901","2:13494:1981","2:13497:61902","2:13500:61903","2:13503:61904","2:13506:2256","2:13508:61905","2:13510:61906","2:13512:61907","2:13513:61908","2:13514:61909","2:13517:61910","2:13520:16000","2:13523:56043","2:13526:61911","2:13529:61912","2:13532:61913","2:13535:1925","2:13537:4733","2:13538:2814","2:13539:55949","2:13540:55950","2:13541:61914","2:13543:3905","2:13544:54547"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3198-0:391:134":{"id":"b:2:3198-0:391:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3201:1843"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9259:2987-0:74:1802":{"id":"a:2:9259:2987-0:74:1802","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9259:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13423:61894":{"id":"2:13423:61894","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:16010:2683"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:662:2649":{"id":"0:662:2649","crate_id":0,"name":"Rgb","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[492,4],"end":[492,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"u8"},{"kind":"primitive","inner":"u8"},{"kind":"primitive","inner":"u8"}]}},"b:2:2869-0:391:134":{"id":"b:2:2869-0:391:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2871:1743"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13441:56026":{"id":"2:13441:56026","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:16010:2683"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:390:59":{"id":"0:390:59","crate_id":0,"name":"default","span":{"filename":"src/fmt/mod.rs","begin":[71,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2872-0:74:1802":{"id":"b:2:2872-0:74:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2866:2780","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2874:2393"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:570:660":{"id":"0:570:660","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1122,8],"end":[1131,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10252:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10241:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:242:2414":{"id":"0:242:2414","crate_id":0,"name":"style","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[42,4],"end":[47,5]},"visibility":"public","docs":"Begin a new [`Style`].\n\n# Examples\n\nCreate a bold, red colored style and use it to print the log level:\n\n```\nuse std::io::Write;\nuse env_logger::fmt::Color;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    let mut level_style = buf.style();\n\n    level_style.set_color(Color::Red).set_bold(true);\n\n    writeln!(buf, \"{}: {}\",\n        level_style.value(record.level()),\n        record.args())\n});\n```\n\n[`Style`]: struct.Style.html","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Style","id":"0:592:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:71:1755":{"id":"0:71:1755","crate_id":0,"name":"Filter","span":{"filename":"src/filter/mod.rs","begin":[82,0],"end":[85,1]},"visibility":"public","docs":"A log filter.\n\nThis struct can be used to determine whether or not a log record\nshould be written to the output.\nUse the [`Builder`] type to parse and construct a `Filter`.\n\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:78","a:2:3310:2983-0:71:1755","a:2:3281:220-0:71:1755","a:2:9259:2987-0:71:1755","a:2:9260:2986-0:71:1755","a:2:3269:211-0:71:1755","b:2:3202-0:71:1755","b:2:3213-0:71:1755","b:2:4002-0:71:1755","b:2:2869-0:71:1755","b:2:2872-0:71:1755","b:2:3208-0:71:1755","b:2:3198-0:71:1755","0:98"]}},"2:3310:2983":{"id":"2:3310:2983","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13443:4188":{"id":"2:13443:4188","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:16004:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49438:4558","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10292:109":{"id":"2:10292:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10293:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13426:57770":{"id":"2:13426:57770","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12525:2448"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:521:1747":{"id":"0:521:1747","crate_id":0,"name":"log","span":{"filename":"src/lib.rs","begin":[911,4],"end":[972,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["record",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Record","id":"24:275:1751","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22751:4284":{"id":"2:22751:4284","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22752:4285","2:22753:60995","2:22754:61157","2:22755:61158","2:22756:61159","2:22757:43556","2:22758:61160","2:22759:61161","2:22760:61162","2:22761:61163","2:22762:61164","2:22763:61165","2:22764:61166","2:22765:61167","2:22766:61168","2:22767:61169","2:22768:61062","2:22769:61170","2:22770:60628","2:22771:60627","2:22772:60629","2:22773:60996","2:22774:60997","2:22775:60998","2:22776:60999"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9260:2986-0:720:1771":{"id":"a:2:9260:2986-0:720:1771","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9260:2986","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8880:3811":{"id":"2:8880:3811","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3269:211-0:734:1802":{"id":"a:2:3269:211-0:734:1802","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3279:106":{"id":"2:3279:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime/extern_impl.rs","begin":[11,4],"end":[11,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"super","name":"super","id":"0:133:2477","glob":true}},"0:734:1802":{"id":"0:734:1802","crate_id":0,"name":"Builder","span":{"filename":"src/lib.rs","begin":[381,0],"end":[386,1]},"visibility":"public","docs":"`Builder` acts as builder for initializing a `Logger`.\n\nIt can be used to customize the log format, change the environment variable used\nto provide the logging directives and also set the default log level filter.\n\n# Examples\n\n```\n# #[macro_use] extern crate log;\n# use std::io::Write;\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::from_default_env();\n\nbuilder\n    .format(|buf, record| writeln!(buf, \"{} - {}\", record.level(), record.args()))\n    .filter(None, LevelFilter::Info)\n    .init();\n\nerror!(\"error message\");\ninfo!(\"info message\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:478","a:2:3310:2983-0:734:1802","a:2:3281:220-0:734:1802","a:2:9259:2987-0:734:1802","a:2:9260:2986-0:734:1802","a:2:3269:211-0:734:1802","b:2:3202-0:734:1802","b:2:3213-0:734:1802","b:2:4002-0:734:1802","b:2:2869-0:734:1802","b:2:2872-0:734:1802","b:2:3208-0:734:1802","b:2:3198-0:734:1802","0:739","0:569"]}},"b:2:3208-0:706:1893":{"id":"b:2:3208-0:706:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3178:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3211:127","2:3212:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3396:3915":{"id":"2:3396:3915","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3398:181","2:3399:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:474:1788":{"id":"0:474:1788","crate_id":0,"name":"Logger","span":{"filename":"src/lib.rs","begin":[351,0],"end":[355,1]},"visibility":"public","docs":"The env logger.\n\nThis struct implements the `Log` trait from the [`log` crate][log-crate-url],\nwhich allows it to act as a logger.\n\nThe [`init()`], [`try_init()`], [`Builder::init()`] and [`Builder::try_init()`]\nmethods will each construct a `Logger` and immediately initialize it as the\ndefault global logger.\n\nIf you'd instead need access to the constructed `Logger`, you can use\nthe associated [`Builder`] and install it with the\n[`log` crate][log-crate-url] directly.\n\n[log-crate-url]: https://docs.rs/log/\n[`init()`]: fn.init.html\n[`try_init()`]: fn.try_init.html\n[`Builder::init()`]: struct.Builder.html#method.init\n[`Builder::try_init()`]: struct.Builder.html#method.try_init\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:512","a:2:3310:2983-0:474:1788","a:2:3281:220-0:474:1788","a:2:9259:2987-0:474:1788","a:2:9260:2986-0:474:1788","a:2:3269:211-0:474:1788","b:2:3202-0:474:1788","b:2:3213-0:474:1788","b:2:4002-0:474:1788","b:2:2869-0:474:1788","b:2:2872-0:474:1788","b:2:3208-0:474:1788","b:2:3198-0:474:1788","0:519","0:567"]}},"0:32:1753":{"id":"0:32:1753","crate_id":0,"name":"filter","span":{"filename":"src/filter/mod.rs","begin":[1,0],"end":[868,1]},"visibility":"public","docs":"Filtering for log records.\n\nThis module contains the log filtering used by `env_logger` to match records.\nYou can use the `Filter` type in your own logger implementation to use the same\nfilter parsing and matching as `env_logger`. For more details about the format\nfor directive strings see [Enabling Logging].\n\n## Using `env_logger` in your own logger\n\nYou can use `env_logger`'s filtering functionality with your own logger.\nCall [`Builder::parse`] to parse directives from a string when constructing\nyour logger. Call [`Filter::matches`] to check whether a record should be\nlogged based on the parsed filters when log records are received.\n\n```\nextern crate log;\nextern crate env_logger;\nuse env_logger::filter::Filter;\nuse log::{Log, Metadata, Record};\n\nstruct MyLogger {\n    filter: Filter\n}\n\nimpl MyLogger {\n    fn new() -> MyLogger {\n        use env_logger::filter::Builder;\n        let mut builder = Builder::new();\n\n        // Parse a directives string from an environment variable\n        if let Ok(ref filter) = std::env::var(\"MY_LOG_LEVEL\") {\n           builder.parse(filter);\n        }\n\n        MyLogger {\n            filter: builder.build()\n        }\n    }\n}\n\nimpl Log for MyLogger {\n    fn enabled(&self, metadata: &Metadata) -> bool {\n        self.filter.enabled(metadata)\n    }\n\n    fn log(&self, record: &Record) {\n        // Check if the record is matched by the filter\n        if self.filter.matches(record) {\n            println!(\"{:?}\", record);\n        }\n    }\n\n    fn flush(&self) {}\n}\n```\n\n[Enabling Logging]: ../index.html#enabling-logging\n[`Builder::parse`]: struct.Builder.html#method.parse\n[`Filter::matches`]: struct.Filter.html#method.matches","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:71:1755","0:74:1802"],"is_stripped":false}},"2:3389:4219":{"id":"2:3389:4219","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:181","2:3391:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13485:56039":{"id":"2:13485:56039","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:16010:2683","self::pattern":"2:13054:4159","prim@char":"1:16004:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49584:4536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13446:33235":{"id":"2:13446:33235","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:16010:2683"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49745:4572","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:706:1893":{"id":"0:706:1893","crate_id":0,"name":"TimestampPrecision","span":{"filename":"src/fmt/mod.rs","begin":[58,0],"end":[67,1]},"visibility":"public","docs":"Formatting precision of timestamps.\n\nSeconds give precision of full seconds, milliseconds give thousands of a\nsecond (3 decimal digits), microseconds are millionth of a second (6 decimal\ndigits) and nanoseconds are billionth of a second (9 decimal digits).","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:707:1896","0:709:1899","0:711:1902","0:713:1905"],"impls":["a:2:3310:2983-0:706:1893","a:2:3281:220-0:706:1893","a:2:9259:2987-0:706:1893","a:2:9260:2986-0:706:1893","a:2:3269:211-0:706:1893","b:2:3202-0:706:1893","b:2:3213-0:706:1893","b:2:4002-0:706:1893","b:2:2869-0:706:1893","b:2:2872-0:706:1893","b:2:3208-0:706:1893","b:2:3198-0:706:1893","b:5:787-0:706:1893","0:715","0:716","0:718","0:389"]}},"2:3522:131":{"id":"2:3522:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3525:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9260:2986-0:391:134":{"id":"a:2:9260:2986-0:391:134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9260:2986","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:13444:2449":{"id":"2:13444:2449","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49448:2936","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6091:62551":{"id":"5:6091:62551","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:666:1544":{"id":"0:666:1544","crate_id":0,"name":"2","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[492,16],"end":[492,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"0:81:1981":{"id":"0:81:1981","crate_id":0,"name":"matches","span":{"filename":"src/filter/mod.rs","begin":[148,4],"end":[160,5]},"visibility":"public","docs":"Checks if this record matches the configured filter.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["record",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Record","id":"24:275:1751","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:659:2648":{"id":"0:659:2648","crate_id":0,"name":"Ansi256","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[491,4],"end":[491,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"primitive","inner":"u8"}]}},"1:5789:3873":{"id":"1:5789:3873","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5790:58416"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13512:61907":{"id":"2:13512:61907","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10305:2628":{"id":"2:10305:2628","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10306:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3734:137":{"id":"2:3734:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3736:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9259:2987-0:474:1788":{"id":"a:2:9259:2987-0:474:1788","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9259:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:90:1925":{"id":"0:90:1925","crate_id":0,"name":"parse","span":{"filename":"src/filter/mod.rs","begin":[216,4],"end":[225,5]},"visibility":"public","docs":"Parses the directives string.\n\nSee the [Enabling Logging] section for more details.\n\n[Enabling Logging]: ../index.html#enabling-logging","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["filters",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:716":{"id":"0:716","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[57,15],"end":[57,20]},"visibility":{"restricted":{"parent":"0:108:660","path":"::fmt"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:717:408"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5653:3898":{"id":"1:5653:3898","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5654:5491","1:5655:57770"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10242:2394":{"id":"2:10242:2394","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10243:1533","2:10244:57972","2:10246:2621"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3281:220-0:706:1893":{"id":"a:2:3281:220-0:706:1893","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1340","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:62549","5:6085:2241","5:6088:62550","5:6091:62551","5:6103:62552","5:6104:62553","5:6105:2955","5:6106:57123","5:6107:57124"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:516:1854":{"id":"0:516:1854","crate_id":0,"name":"from_default_env","span":{"filename":"src/lib.rs","begin":[890,4],"end":[892,5]},"visibility":"public","docs":"Creates the logger from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The logger will use the\n[default environment variables].\n\n# Examples\n\nCreates a logger using the default environment variables:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_default_env();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10311:2630":{"id":"2:10311:2630","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10312:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5008:3826":{"id":"1:5008:3826","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5009:3809","1:5010:58079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13539:55949":{"id":"2:13539:55949","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5785:3872":{"id":"1:5785:3872","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5786:55827"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2572:127":{"id":"1:2572:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2573:55809","1:2575:60168","1:2576:60169","1:2577:58629"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10299:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:642:2416":{"id":"0:642:2416","crate_id":0,"name":"Color","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[482,0],"end":[493,1]},"visibility":"public","docs":"The set of available colors for the terminal foreground/background.\n\nThe `Ansi256` and `Rgb` colors will only output the correct codes when\npaired with the `Ansi` `WriteColor` implementation.\n\nThe `Ansi256` and `Rgb` color types are not supported when writing colors\non Windows using the console. If they are used on Windows, then they are\nsilently ignored and no colors will be emitted.\n\nThis set may expand over time.\n\nThis type has a `FromStr` impl that can parse colors from their human\nreadable form. The format is as follows:\n\n1. Any of the explicitly listed colors in English. They are matched\n   case insensitively.\n2. A single 8-bit integer, in either decimal or hexadecimal format.\n3. A triple of 8-bit integers separated by a comma, where each integer is\n   in decimal or hexadecimal format.\n\nHexadecimal numbers are written with a `0x` prefix.","links":{},"attrs":["#[allow(missing_docs)]","#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:643:2417","0:645:2558","0:647:2559","0:649:2561","0:651:2557","0:653:2646","0:655:2560","0:657:2647","0:659:2648","0:662:2649"],"impls":[]}},"b:2:2869-0:474:1788":{"id":"b:2:2869-0:474:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2871:1743"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3577:3978":{"id":"2:3577:3978","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3579:181","2:3580:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:664:1542":{"id":"0:664:1542","crate_id":0,"name":"0","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[492,8],"end":[492,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"a:2:9260:2986-0:71:1755":{"id":"a:2:9260:2986-0:71:1755","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9260:2986","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Filter","id":"0:71:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8367:4293":{"id":"2:8367:4293","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8369:3476"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[49,28],"end":[49,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"super::TimestampPrecision","name":"TimestampPrecision","id":"0:706:1893","glob":false}},"2:3247:115":{"id":"2:3247:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[123,0],"end":[131,1]},"visibility":{"restricted":{"parent":"0:108:660","path":"::fmt"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_all_vectored","write_fmt","by_ref","is_write_vectored","write_vectored","write_all"],"trait":{"kind":"resolved_path","inner":{"name":"Write","id":"1:4723:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:400:1881","0:401:1993"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13084:4163":{"id":"2:13084:4163","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:651:2557":{"id":"0:651:2557","crate_id":0,"name":"Cyan","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[487,4],"end":[487,8]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:2872-0:734:1802":{"id":"b:2:2872-0:734:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2866:2780","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2874:2393"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:23089:17483":{"id":"2:23089:17483","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23090:9455","2:23091:60954","2:23092:60955"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23082:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:241":{"id":"0:241","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[17,0],"end":[70,1]},"visibility":{"restricted":{"parent":"0:190:2477","path":"::fmt::writer::termcolor::imp"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:242:2414","0:243:2555","0:244:2426"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:719:660":{"id":"0:719:660","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[57,22],"end":[57,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10252:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10241:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:99:660":{"id":"0:99:660","crate_id":0,"name":"fmt","span":{"filename":"src/filter/mod.rs","begin":[269,4],"end":[274,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10252:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10241:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8473:3081":{"id":"2:8473:3081","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8474:793","2:8475:2231"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:91:1952":{"id":"0:91:1952","crate_id":0,"name":"build","span":{"filename":"src/filter/mod.rs","begin":[228,4],"end":[259,5]},"visibility":"public","docs":"Build a log filter.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Filter","id":"0:71:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3269:211-0:74:1802":{"id":"a:2:3269:211-0:74:1802","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:9343:3844":{"id":"1:9343:3844","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9344:58610","1:9345:58611","1:9346:58612","1:9347:58613","1:9348:58614","1:9349:40158","1:9350:58609"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13482:56037":{"id":"2:13482:56037","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13054:4159","str::rsplitn":"1:16010:2683","prim@char":"1:16004:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49566:2883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:643:2417":{"id":"0:643:2417","crate_id":0,"name":"Black","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[483,4],"end":[483,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:10313:2629":{"id":"2:10313:2629","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10314:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:88:1753":{"id":"0:88:1753","crate_id":0,"name":"filter","span":{"filename":"src/filter/mod.rs","begin":[206,4],"end":[209,5]},"visibility":"public","docs":"Adds a directive to the filter.\n\nThe given module (if any) will log at most the specified level provided.\nIf no module is provided then the filter will apply to all log messages.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["module",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}],["level",{"kind":"resolved_path","inner":{"name":"LevelFilter","id":"24:216:1748","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:559":{"id":"0:559","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1100,0],"end":[1107,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3247:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:561:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3202-0:720:1771":{"id":"b:2:3202-0:720:1771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3204:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:580:1828":{"id":"0:580:1828","crate_id":0,"name":"from_env","span":{"filename":"src/lib.rs","begin":[1246,0],"end":[1251,1]},"visibility":"public","docs":"Create a builder from the given environment variables.\n\nThe builder can be configured before being initialized.","links":{},"attrs":["#[deprecated(since = \"0.8.0\", note =\n\"Prefer `env_logger::Builder::from_env()` instead.\")]"],"deprecation":{"since":"0.8.0","note":"Prefer `env_logger::Builder::from_env()` instead."},"kind":"function","inner":{"decl":{"inputs":[["env",{"kind":"generic","inner":"E"}]],"output":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"2:13440:56025":{"id":"2:13440:56025","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:16010:2683"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:1294:2880":{"id":"20:1294:2880","crate_id":20,"name":"Replacer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:1295:63199","20:1296:5582","20:1298:3456"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:713:1905":{"id":"0:713:1905","crate_id":0,"name":"Nanos","span":{"filename":"src/fmt/mod.rs","begin":[66,4],"end":[66,9]},"visibility":"default","docs":"Nanosecond precision (9 decimal digits)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:518:1981":{"id":"0:518:1981","crate_id":0,"name":"matches","span":{"filename":"src/lib.rs","begin":[901,4],"end":[903,5]},"visibility":"public","docs":"Checks if this record matches the configured filter.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["record",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Record","id":"24:275:1751","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3217:1416":{"id":"2:3217:1416","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3178:228":{"id":"2:3178:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3180:127","2:3181:1417"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8887:4264":{"id":"2:8887:4264","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7928:4265","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:567":{"id":"0:567","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1113,4],"end":[1119,5]},"visibility":{"restricted":{"parent":"0:562:2015","path":"::std_fmt_impls"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:568:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:327:2512":{"id":"0:327:2512","crate_id":0,"name":"Pipe","span":{"filename":"src/fmt/writer/mod.rs","begin":[23,4],"end":[23,45]},"visibility":"default","docs":"Logs will be sent to a custom pipe.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1875","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"kind":"resolved_path","inner":{"name":"io::Write","id":"1:4723:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[]},{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}},"param_names":[]}}]}},"2:3368:2779":{"id":"2:3368:2779","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3198-0:706:1893":{"id":"b:2:3198-0:706:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3201:1843"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:718":{"id":"0:718","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[57,22],"end":[57,27]},"visibility":{"restricted":{"parent":"0:108:660","path":"::fmt"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:719:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13442:4592":{"id":"2:13442:4592","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:16004:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49432:4557","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22840:4277":{"id":"2:22840:4277","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22841:60995","2:22842:1227","2:22843:1228","2:22844:60996","2:22845:60997","2:22846:60998","2:22847:60999","2:22848:61000","2:22849:61001","2:22850:61002"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:512":{"id":"0:512","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[839,0],"end":[904,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:513:1828","0:516:1854","0:517:1753","0:518:1981"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:529:1753":{"id":"0:529:1753","crate_id":0,"name":"filter","span":{"filename":"src/lib.rs","begin":[984,4],"end":[991,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["filter_env",{"kind":"generic","inner":"E"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:665:1543":{"id":"0:665:1543","crate_id":0,"name":"1","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[492,12],"end":[492,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"primitive","inner":"u8"}},"2:13514:61909":{"id":"2:13514:61909","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:16004:2678","self::pattern":"2:13054:4159"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13084:4163","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3201:1843":{"id":"2:3201:1843","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3175:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3310:2983-0:720:1771":{"id":"a:2:3310:2983-0:720:1771","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3310:2983","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:22940:3847":{"id":"2:22940:3847","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22930:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:789:2620":{"id":"5:789:2620","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"2:13470:33102":{"id":"2:13470:33102","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13054:4159","prim@char":"1:16004:2678"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12846:4530","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3401:3916":{"id":"2:3401:3916","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:4002-0:734:1802":{"id":"b:2:4002-0:734:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:4000:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:4004:1429"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3269:211-0:71:1755":{"id":"a:2:3269:211-0:71:1755","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Filter","id":"0:71:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:369":{"id":"0:369","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[43,0],"end":[43,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::humantime::glob","name":"glob","id":"0:160:1754","glob":true}},"0:711:1902":{"id":"0:711:1902","crate_id":0,"name":"Micros","span":{"filename":"src/fmt/mod.rs","begin":[64,4],"end":[64,10]},"visibility":"default","docs":"Microsecond precision (6 decimal digits)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:325:2510":{"id":"0:325:2510","crate_id":0,"name":"Stderr","span":{"filename":"src/fmt/writer/mod.rs","begin":[21,4],"end":[21,10]},"visibility":"default","docs":"Logs will be sent to standard error.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:4723:2394":{"id":"1:4723:2394","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4724:1881","1:4725:3614","1:4727:3615","1:4728:1993","1:4729:2443","1:4730:3616","1:4731:2621","1:4740:3456"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13064:4158":{"id":"2:13064:4158","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13066:4161","2:13067:61109","2:13068:61110","2:13069:61111","2:13070:61113","2:13071:61112","2:13072:61114"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:502:1916":{"id":"0:502:1916","crate_id":0,"name":"filter_level","span":{"filename":"src/lib.rs","begin":[689,4],"end":[692,5]},"visibility":"public","docs":"Adds a directive to the filter for all modules.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["level",{"kind":"resolved_path","inner":{"name":"LevelFilter","id":"24:216:1748","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:734:1802":{"id":"b:2:3213-0:734:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3216:127","2:3217:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3581:4253":{"id":"2:3581:4253","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3583:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3577:3978","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:1075:3903":{"id":"1:1075:3903","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:2620","1:1077:4733","1:1078:57123","1:1079:57124","1:1080:2814","1:1081:55949","1:1082:55950"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:380":{"id":"0:380","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[49,20],"end":[49,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"super::Target","name":"Target","id":"0:322:221","glob":false}},"2:3342:3001":{"id":"2:3342:3001","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3337:2778":{"id":"2:3337:2778","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:181","2:3340:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:579:1830":{"id":"0:579:1830","crate_id":0,"name":"builder","span":{"filename":"src/lib.rs","begin":[1235,0],"end":[1237,1]},"visibility":"public","docs":"Create a new builder with the default environment variables.\n\nThe builder can be configured before being initialized.\nThis is a convenient way of calling [`Builder::from_default_env`].\n\n[`Builder::from_default_env`]: struct.Builder.html#method.from_default_env","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[70,0],"end":[74,1]},"visibility":{"restricted":{"parent":"0:108:660","path":"::fmt"}},"docs":"The default timestamp precision is seconds.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3247:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:390:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/filter/mod.rs","begin":[122,0],"end":[169,1]},"visibility":{"restricted":{"parent":"0:32:1753","path":"::filter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Filter","id":"0:71:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:79:1753","0:81:1981","0:82:1983"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:378:1754":{"id":"0:378:1754","crate_id":0,"name":"glob","span":{"filename":"src/fmt/mod.rs","begin":[48,0],"end":[48,19]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:380","0:383","0:386"],"is_stripped":true}},"0:724":{"id":"0:724","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[320,9],"end":[320,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:726:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13767:138":{"id":"2:13767:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13768:181","2:13769:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3492:116":{"id":"2:3492:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:221","2:3494:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3278:217":{"id":"2:3278:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:160:1754":{"id":"0:160:1754","crate_id":0,"name":"glob","span":{"filename":"src/fmt/humantime/extern_impl.rs","begin":[10,0],"end":[10,27]},"visibility":{"restricted":{"parent":"0:108:660","path":"::fmt"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:161"],"is_stripped":true}},"5:6104:62553":{"id":"5:6104:62553","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:1875","`String`":"5:8368:216"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1875","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:2993","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6084:62549":{"id":"5:6084:62549","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1875","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:2993","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1875","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:2993","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2869-0:71:1755":{"id":"b:2:2869-0:71:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Filter","id":"0:71:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2871:1743"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3213-0:74:1802":{"id":"b:2:3213-0:74:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3216:127","2:3217:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:542:2008":{"id":"0:542:2008","crate_id":0,"name":"default_write_style_or","span":{"filename":"src/lib.rs","begin":[1048,4],"end":[1055,5]},"visibility":"public","docs":"Use the default environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["default",{"kind":"generic","inner":"V"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6959:3855":{"id":"1:6959:3855","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6960:58399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3281:220-0:474:1788":{"id":"a:2:3281:220-0:474:1788","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8602:157":{"id":"2:8602:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8603:3433","2:8604:922","2:8605:3435","2:8608:3436","2:8609:495","2:8611:2894","2:8614:3437","2:8615:3438","2:8616:3439","2:8617:3440","2:8619:3441","2:8621:3442","2:8622:3443","2:8624:841","2:8627:3444","2:8634:1753","2:8636:3445","2:8639:3446","2:8640:3447","2:8641:3448","2:8643:3449","2:8645:3450","2:8648:1308","2:8649:2234","2:8650:3451","2:8654:3452","2:8657:3453","2:8658:3454","2:8659:3455","2:8661:3456","2:8662:2235","2:8664:3457","2:8667:3458","2:8669:3459","2:8679:3460","2:8694:3461","2:8696:3462","2:8700:3463","2:8709:3464","2:8712:3465","2:8714:3466","2:8717:276","2:8724:294","2:8731:3467","2:8738:3468","2:8747:3469","2:8757:1014","2:8764:3470","2:8771:2218","2:8772:3390","2:8773:3394","2:8785:3393","2:8792:3392","2:8804:3391","2:8811:2266","2:8812:3471","2:8817:3472","2:8820:3473","2:8823:3474","2:8824:3475","2:8826:3476","2:8828:415","2:8831:3477","2:8834:997","2:8837:3478","2:8840:604","2:8843:3479","2:8846:907","2:8848:826","2:8850:792","2:8852:713","2:8854:696","2:8856:3480","2:8857:3481","2:8865:3482"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12501:4726":{"id":"2:12501:4726","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12502:3433","2:12503:2571"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:717:408":{"id":"0:717:408","crate_id":0,"name":"clone","span":{"filename":"src/fmt/mod.rs","begin":[57,15],"end":[57,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3212:1417":{"id":"2:3212:1417","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13537:4733":{"id":"2:13537:4733","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13467:2247":{"id":"2:13467:2247","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:8448:120","str::rsplit":"1:16010:2683","prim@char":"1:16004:2678","str::split_whitespace":"1:16010:2683","self::pattern":"2:13054:4159"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49462:2882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:220-0:74:1802":{"id":"a:2:3281:220-0:74:1802","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3202-0:706:1893":{"id":"b:2:3202-0:706:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3204:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:3310:2983-0:706:1893":{"id":"a:2:3310:2983-0:706:1893","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3310:2983","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:501:1912":{"id":"0:501:1912","crate_id":0,"name":"filter_module","span":{"filename":"src/lib.rs","begin":[670,4],"end":[673,5]},"visibility":"public","docs":"Adds a directive to the filter for a specific module.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_module(\"path::to::module\", LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["module",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["level",{"kind":"resolved_path","inner":{"name":"LevelFilter","id":"24:216:1748","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3364:4208":{"id":"2:3364:4208","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3365:181","2:3366:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:190:2477":{"id":"0:190:2477","crate_id":0,"name":"imp","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[1,0],"end":[510,1]},"visibility":{"restricted":{"parent":"0:189:1555","path":"::fmt::writer::termcolor"}},"docs":null,"links":{},"attrs":["#[path = \"extern_impl.rs\"]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:592:2552","0:266:2403","0:642:2416"],"is_stripped":true}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[44,0],"end":[44,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::writer::glob","name":"glob","id":"0:316:1754","glob":true}},"2:3211:127":{"id":"2:3211:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"0:108:660":{"id":"0:108:660","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[1,0],"end":[652,1]},"visibility":"public","docs":"Formatting for log records.\n\nThis module contains a [`Formatter`] that can be used to format log records\ninto without needing temporary allocations. Usually you won't need to worry\nabout the contents of this module and can use the `Formatter` like an ordinary\n[`Write`].\n\n# Formatting log records\n\nThe format used to print log records can be customised using the [`Builder::format`]\nmethod.\nCustom formats can apply different color and weight to printed values using\n[`Style`] builders.\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    writeln!(buf, \"{}: {}\",\n        record.level(),\n        record.args())\n});\n```\n\n[`Formatter`]: struct.Formatter.html\n[`Style`]: struct.Style.html\n[`Builder::format`]: ../struct.Builder.html#method.format\n[`Write`]: https://doc.rust-lang.org/stable/std/io/trait.Write.html","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:706:1893","0:391:134","0:369","0:370"],"is_stripped":false}},"a:2:9259:2987-0:71:1755":{"id":"a:2:9259:2987-0:71:1755","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9259:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Filter","id":"0:71:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:494:1888":{"id":"0:494:1888","crate_id":0,"name":"format_indent","span":{"filename":"src/lib.rs","begin":[619,4],"end":[622,5]},"visibility":"public","docs":"Configures the amount of spaces to use to indent multiline log records.\nA value of `None` disables any kind of indentation.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["indent",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6859:3856":{"id":"1:6859:3856","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6860:57667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3202-0:74:1802":{"id":"b:2:3202-0:74:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3204:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13448:61897":{"id":"2:13448:61897","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49726:4570","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:726:660":{"id":"0:726:660","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[320,9],"end":[320,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10252:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10241:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13449:33230":{"id":"2:13449:33230","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49754:4573","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3198-0:720:1771":{"id":"b:2:3198-0:720:1771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3201:1843"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:4051:3891":{"id":"2:4051:3891","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4052:58629"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"22:1184:5709":{"id":"22:1184:5709","crate_id":22,"name":"StateID","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["22:1185:689","22:1186:63850","22:1187:63851"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"22:1178:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10530:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2957:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6790:3850":{"id":"1:6790:3850","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6791:7890"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:86:1912":{"id":"0:86:1912","crate_id":0,"name":"filter_module","span":{"filename":"src/filter/mod.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"Adds a directive to the filter for a specific module.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["module",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["level",{"kind":"resolved_path","inner":{"name":"LevelFilter","id":"24:216:1748","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9259:2987-0:391:134":{"id":"a:2:9259:2987-0:391:134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9259:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:10301:2625":{"id":"2:10301:2625","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10302:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5775:3871":{"id":"1:5775:3871","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5776:57777","1:5777:57778","1:5778:57779","1:5779:57780"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13479:61899":{"id":"2:13479:61899","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:16004:2678","str::split":"1:16010:2683","self::pattern":"2:13054:4159","str::split_terminator":"1:16010:2683"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49530:4563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:510:1960":{"id":"0:510:1960","crate_id":0,"name":"init","span":{"filename":"src/lib.rs","begin":[818,4],"end":[821,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13523:56043":{"id":"2:13523:56043","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:16004:2678","self::pattern":"2:13054:4159"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164:2429":{"id":"0:164:2429","crate_id":0,"name":"timestamp_seconds","span":{"filename":"src/fmt/humantime/extern_impl.rs","begin":[43,4],"end":[48,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with full\nsecond precision.","links":{"`Timestamp`":"0:168:2489"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Timestamp","id":"0:168:2489","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:679:2520":{"id":"0:679:2520","crate_id":0,"name":"Auto","span":{"filename":"src/fmt/writer/mod.rs","begin":[91,4],"end":[91,8]},"visibility":"default","docs":"Try to print styles, but don't force the issue.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:572:1960":{"id":"0:572:1960","crate_id":0,"name":"init","span":{"filename":"src/lib.rs","begin":[1157,0],"end":[1159,1]},"visibility":"public","docs":"Initializes the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"0:239:1754":{"id":"0:239:1754","crate_id":0,"name":"glob","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[13,0],"end":[13,35]},"visibility":{"restricted":{"parent":"0:183:1756","path":"::fmt::writer"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:240"],"is_stripped":true}},"0:183:1756":{"id":"0:183:1756","crate_id":0,"name":"writer","span":{"filename":"src/fmt/writer/mod.rs","begin":[1,0],"end":[252,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:322:221","0:678:1938"],"is_stripped":true}},"2:13508:61905":{"id":"2:13508:61905","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22877:4287":{"id":"2:22877:4287","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22878:4285","2:22879:1247","2:22880:1272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:495:1891":{"id":"0:495:1891","crate_id":0,"name":"format_timestamp","span":{"filename":"src/lib.rs","begin":[625,4],"end":[628,5]},"visibility":"public","docs":"Configures if timestamp should be included and in what precision.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["timestamp",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"fmt::TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:478":{"id":"0:478","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[388,0],"end":[837,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:479:920","0:480:1828","0:483:1831","0:486:1854","0:487:1860","0:488:671","0:490:1878","0:491:1880","0:492:1883","0:493:1885","0:494:1888","0:495:1891","0:496:1895","0:497:1898","0:498:1901","0:499:1904","0:500:1907","0:501:1912","0:502:1916","0:503:1753","0:504:1845","0:505:1362","0:506:1774","0:507:1847","0:508:1943","0:509:1950","0:510:1960","0:511:1952"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:790:2011":{"id":"5:790:2011","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74:1802":{"id":"0:74:1802","crate_id":0,"name":"Builder","span":{"filename":"src/filter/mod.rs","begin":[110,0],"end":[114,1]},"visibility":"public","docs":"A builder for a log filter.\n\nIt can be used to parse a set of directives from a string before building\na [`Filter`] instance.\n\n## Example\n\n```\n# #[macro_use] extern crate log;\n# use std::env;\nuse env_logger::filter::Builder;\n\nlet mut builder = Builder::new();\n\n// Parse a logging filter from an environment variable.\nif let Ok(rust_log) = env::var(\"RUST_LOG\") {\n    builder.parse(&rust_log);\n}\n\nlet filter = builder.build();\n```\n\n[`Filter`]: struct.Filter.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:83","a:2:3310:2983-0:74:1802","a:2:3281:220-0:74:1802","a:2:9259:2987-0:74:1802","a:2:9260:2986-0:74:1802","a:2:3269:211-0:74:1802","b:2:3202-0:74:1802","b:2:3213-0:74:1802","b:2:4002-0:74:1802","b:2:2869-0:74:1802","b:2:2872-0:74:1802","b:2:3208-0:74:1802","b:2:3198-0:74:1802","0:96","0:100"]}},"1:4748:2933":{"id":"1:4748:2933","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4749:3752","1:4750:3753","1:4751:3754","1:4753:2932","1:4754:3755","1:4756:2247","1:4757:3756"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4666:2926","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:568:660":{"id":"0:568:660","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1114,8],"end":[1118,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10252:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10241:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13520:16000":{"id":"2:13520:16000","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13054:4159","prim@char":"1:16004:2678"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:498:1901":{"id":"0:498:1901","crate_id":0,"name":"format_timestamp_micros","span":{"filename":"src/lib.rs","begin":[641,4],"end":[643,5]},"visibility":"public","docs":"Configures the timestamp to use microsecond precision.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:220-0:720:1771":{"id":"a:2:3281:220-0:720:1771","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:508:1943":{"id":"0:508:1943","crate_id":0,"name":"is_test","span":{"filename":"src/lib.rs","begin":[782,4],"end":[785,5]},"visibility":"public","docs":"Sets whether or not the logger will be used in unit tests.\n\nIf `is_test` is `true` then the logger will allow the testing framework to\ncapture log records rather than printing them to the terminal directly.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["is_test",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3208-0:720:1771":{"id":"b:2:3208-0:720:1771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3178:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3211:127","2:3212:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:517:1753":{"id":"0:517:1753","crate_id":0,"name":"filter","span":{"filename":"src/lib.rs","begin":[896,4],"end":[898,5]},"visibility":"public","docs":"Returns the maximum `LevelFilter` that this env logger instance is\nconfigured to output.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LevelFilter","id":"24:216:1748","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:531:1998":{"id":"0:531:1998","crate_id":0,"name":"filter_or","span":{"filename":"src/lib.rs","begin":[996,4],"end":[1004,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["filter_env",{"kind":"generic","inner":"E"}],["default",{"kind":"generic","inner":"V"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:655:2560":{"id":"0:655:2560","crate_id":0,"name":"Yellow","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[489,4],"end":[489,10]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:2863:97":{"id":"2:2863:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2865:1743"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:5:787-0:706:1893":{"id":"b:5:787-0:706:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:2620","5:790:2011","5:791:3484"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:189:1555":{"id":"0:189:1555","crate_id":0,"name":"termcolor","span":{"filename":"src/fmt/writer/termcolor/mod.rs","begin":[8,0],"end":[12,36]},"visibility":{"restricted":{"parent":"0:183:1756","path":"::fmt::writer"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"2:13419:2231":{"id":"2:13419:2231","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:480:1828":{"id":"0:480:1828","crate_id":0,"name":"from_env","span":{"filename":"src/lib.rs","begin":[447,4],"end":[454,5]},"visibility":"public","docs":"Initializes the log builder from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nInitialise a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::from_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["env",{"kind":"generic","inner":"E"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5735:3869":{"id":"1:5735:3869","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5736:6594","1:5737:7895"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10307:2627":{"id":"2:10307:2627","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10308:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13436:56004":{"id":"2:13436:56004","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:167:2432":{"id":"0:167:2432","crate_id":0,"name":"timestamp_nanos","span":{"filename":"src/fmt/humantime/extern_impl.rs","begin":[70,4],"end":[75,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nnanosecond precision.","links":{"`Timestamp`":"0:168:2489"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Timestamp","id":"0:168:2489","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:1625:2880":{"id":"20:1625:2880","crate_id":20,"name":"Replacer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:1626:63199","20:1627:5582","20:1629:3456"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3216:127":{"id":"2:3216:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38808:3888","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"2:13526:61911":{"id":"2:13526:61911","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13054:4159","prim@char":"1:16004:2678"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9260:2986-0:474:1788":{"id":"a:2:9260:2986-0:474:1788","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9260:2986","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:3525:132":{"id":"2:3525:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3527:181","2:3528:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3202-0:474:1788":{"id":"b:2:3202-0:474:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3204:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2871:1743":{"id":"2:2871:1743","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2872-0:706:1893":{"id":"b:2:2872-0:706:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2866:2780","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2874:2393"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3198-0:474:1788":{"id":"b:2:3198-0:474:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3201:1843"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:79:1753":{"id":"0:79:1753","crate_id":0,"name":"filter","span":{"filename":"src/filter/mod.rs","begin":[139,4],"end":[145,5]},"visibility":"public","docs":"Returns the maximum `LevelFilter` that this filter instance is\nconfigured to output.\n\n# Example\n\n```rust\nuse log::LevelFilter;\nuse env_logger::filter::Builder;\n\nlet mut builder = Builder::new();\nbuilder.filter(Some(\"module1\"), LevelFilter::Info);\nbuilder.filter(Some(\"module2\"), LevelFilter::Error);\n\nlet filter = builder.build();\nassert_eq!(filter.filter(), LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LevelFilter","id":"24:216:1748","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6437:3850":{"id":"1:6437:3850","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6438:4103","1:6439:4104","1:6440:7889","1:6441:55706","1:6443:55709","1:6445:2857","1:6446:55707","1:6448:55708"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13453:2267":{"id":"2:13453:2267","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13054:4159","prim@char":"1:16004:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:504:1845":{"id":"0:504:1845","crate_id":0,"name":"parse_filters","span":{"filename":"src/lib.rs","begin":[720,4],"end":[723,5]},"visibility":"public","docs":"Parses the directives string in the same form as the `RUST_LOG`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["filters",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:709:1899":{"id":"0:709:1899","crate_id":0,"name":"Millis","span":{"filename":"src/fmt/mod.rs","begin":[62,4],"end":[62,10]},"visibility":"default","docs":"Millisecond precision (3 decimal digits)","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13535:1925":{"id":"2:13535:1925","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12993:2827","`FromStr`":"2:12993:2827"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12993:2827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12993:2827","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3208-0:734:1802":{"id":"b:2:3208-0:734:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3178:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3211:127","2:3212:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:2:9260:2986-0:706:1893":{"id":"a:2:9260:2986-0:706:1893","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9260:2986","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3269:211-0:720:1771":{"id":"a:2:3269:211-0:720:1771","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13445:33245":{"id":"2:13445:33245","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:16010:2683"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49736:4571","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3208-0:391:134":{"id":"b:2:3208-0:391:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3178:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3211:127","2:3212:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3380:4214":{"id":"2:3380:4214","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3202-0:734:1802":{"id":"b:2:3202-0:734:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3204:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:4002-0:706:1893":{"id":"b:2:4002-0:706:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:4000:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:4004:1429"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:97:59":{"id":"0:97:59","crate_id":0,"name":"default","span":{"filename":"src/filter/mod.rs","begin":[263,4],"end":[265,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3277:218":{"id":"2:3277:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:500:1907":{"id":"0:500:1907","crate_id":0,"name":"format_suffix","span":{"filename":"src/lib.rs","begin":[651,4],"end":[654,5]},"visibility":"public","docs":"Configures the end of line suffix.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13529:61912":{"id":"2:13529:61912","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:16004:2678","self::pattern":"2:13054:4159"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[14,4],"end":[14,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"super","name":"super","id":"0:190:2477","glob":true}},"0:266:2403":{"id":"0:266:2403","crate_id":0,"name":"StyledValue","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[257,0],"end":[260,1]},"visibility":"public","docs":"A value that can be printed using the given styles.\n\nIt is the result of calling [`Style::value`].\n\n[`Style::value`]: struct.Style.html#method.value","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:3519:130":{"id":"2:3519:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3521:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3522:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23465:4288":{"id":"2:23465:4288","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23466:1270","2:23467:1269","2:23468:1267","2:23469:1266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22877:4287","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3182:227":{"id":"2:3182:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3184:127","2:3185:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:454":{"id":"0:454","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[298,0],"end":[298,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::fmt::glob","name":"glob","id":"0:378:1754","glob":true}},"2:13079:4162":{"id":"2:13079:4162","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13081:3424","2:13082:60788","2:13083:60789"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13073:4161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3208-0:71:1755":{"id":"b:2:3208-0:71:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3178:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Filter","id":"0:71:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3211:127","2:3212:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5833:4740":{"id":"5:5833:4740","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8413:3082":{"id":"2:8413:3082","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8415:3430","2:8417:3431","2:8418:3432"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:497:1898":{"id":"0:497:1898","crate_id":0,"name":"format_timestamp_millis","span":{"filename":"src/lib.rs","begin":[636,4],"end":[638,5]},"visibility":"public","docs":"Configures the timestamp to use millisecond precision.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:573:2017":{"id":"0:573:2017","crate_id":0,"name":"try_init_from_env","span":{"filename":"src/lib.rs","begin":[1189,0],"end":[1196,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger from the given\nenvironment variables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\n# fn run() -> Result<(), Box<::std::error::Error>> {\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::try_init_from_env(env)?;\n\nOk(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["env",{"kind":"generic","inner":"E"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"SetLoggerError","id":"24:352:1752","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"1:6685:3870":{"id":"1:6685:3870","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6686:58424","1:6687:9274","1:6688:9275","1:6689:9277","1:6690:9276","1:6691:9278","1:6692:9279","1:6693:9281","1:6694:6636","1:6695:9284","1:6696:9285","1:6697:9286","1:6698:9287","1:6699:9288","1:6700:9289","1:6701:9282","1:6702:9283"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3775:2799":{"id":"2:3775:2799","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3717:4632":{"id":"2:3717:4632","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3648:4631","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4741:2930":{"id":"1:4741:2930","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4742:3764","1:4743:3765","1:4744:3766","1:4745:3767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3310:2983-0:474:1788":{"id":"a:2:3310:2983-0:474:1788","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3310:2983","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:493:1885":{"id":"0:493:1885","crate_id":0,"name":"format_target","span":{"filename":"src/lib.rs","begin":[612,4],"end":[615,5]},"visibility":"public","docs":"Whether or not to write the target in the default format.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["write",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:715":{"id":"0:715","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[57,9],"end":[57,13]},"visibility":{"restricted":{"parent":"0:108:660","path":"::fmt"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:3208-0:474:1788":{"id":"b:2:3208-0:474:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3178:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3211:127","2:3212:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:3213-0:720:1771":{"id":"b:2:3213-0:720:1771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3216:127","2:3217:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:402":{"id":"0:402","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[133,0],"end":[137,1]},"visibility":{"restricted":{"parent":"0:108:660","path":"::fmt"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:403:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:525:1993":{"id":"0:525:1993","crate_id":0,"name":"flush","span":{"filename":"src/lib.rs","begin":[974,4],"end":[974,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3411:4224":{"id":"2:3411:4224","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:181","2:3414:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:4002-0:474:1788":{"id":"b:2:4002-0:474:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:4000:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:4004:1429"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3417:4227":{"id":"2:3417:4227","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3419:181","2:3420:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:511:1952":{"id":"0:511:1952","crate_id":0,"name":"build","span":{"filename":"src/lib.rs","begin":[827,4],"end":[836,5]},"visibility":"public","docs":"Build an env logger.\n\nThe returned logger implements the `Log` trait and can be installed manually\nor nested within another logger.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4004:1429":{"id":"2:4004:1429","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46031:3892","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4002-0:71:1755":{"id":"b:2:4002-0:71:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:4000:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Filter","id":"0:71:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:4004:1429"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3423:4230":{"id":"2:3423:4230","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9260:2986":{"id":"2:9260:2986","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10575:3746":{"id":"2:10575:3746","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10576:146","2:10577:34410","2:10578:58005"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3372:3002":{"id":"2:3372:3002","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:1356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2869-0:720:1771":{"id":"b:2:2869-0:720:1771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2871:1743"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13473:56035":{"id":"2:13473:56035","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:16004:2678","`DoubleEndedIterator`":"2:8448:120","str::split":"1:16010:2683","self::pattern":"2:13054:4159"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49480:4533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:322:221":{"id":"0:322:221","crate_id":0,"name":"Target","span":{"filename":"src/fmt/writer/mod.rs","begin":[17,0],"end":[24,1]},"visibility":"public","docs":"Log target, either `stdout`, `stderr` or a custom pipe.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:323:2508","0:325:2510","0:327:2512"],"impls":[]}},"0:492:1883":{"id":"0:492:1883","crate_id":0,"name":"format_module_path","span":{"filename":"src/lib.rs","begin":[606,4],"end":[609,5]},"visibility":"public","docs":"Whether or not to write the module path in the default format.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["write",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13494:1981":{"id":"2:13494:1981","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13054:4159","`DoubleEndedIterator`":"2:8448:120","prim@char":"1:16004:2678","str::matches":"1:16010:2683"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49666:2878","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6106:57123":{"id":"5:6106:57123","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:16010:2683"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13532:61913":{"id":"2:13532:61913","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:16004:2678","self::pattern":"2:13054:4159"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:569":{"id":"0:569","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1121,4],"end":[1132,5]},"visibility":{"restricted":{"parent":"0:562:2015","path":"::std_fmt_impls"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:570:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10530:142":{"id":"2:10530:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10531:715","2:10533:3751"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:657:2647":{"id":"0:657:2647","crate_id":0,"name":"White","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[490,4],"end":[490,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:23470:17502":{"id":"2:23470:17502","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23471:60627","2:23472:60628","2:23473:60629"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23465:4288","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:317":{"id":"0:317","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[9,4],"end":[9,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"super::termcolor::glob","name":"glob","id":"0:239:1754","glob":true}},"0:490:1878":{"id":"0:490:1878","crate_id":0,"name":"default_format","span":{"filename":"src/lib.rs","begin":[594,4],"end":[597,5]},"visibility":"public","docs":"Use the default format.\n\nThis method will clear any custom format set on the builder.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:513:1828":{"id":"0:513:1828","crate_id":0,"name":"from_env","span":{"filename":"src/lib.rs","begin":[866,4],"end":[871,5]},"visibility":"public","docs":"Creates the logger from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nCreate a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_env(\"MY_LOG\");\n```\n\nCreate a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Logger, Env};\n\nlet env = Env::new().filter_or(\"MY_LOG\", \"info\").write_style_or(\"MY_LOG_STYLE\", \"always\");\n\nlet logger = Logger::from_env(env);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["env",{"kind":"generic","inner":"E"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6787:3883":{"id":"1:6787:3883","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6788:9486","1:6789:57795"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:526":{"id":"0:526","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[977,0],"end":[1060,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:528:920","0:529:1753","0:531:1998","0:534:2002","0:537:1774","0:539:2006","0:542:2008"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5719:3868":{"id":"1:5719:3868","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5720:55881","1:5721:55883","1:5722:55882","1:5723:55884"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/filter/mod.rs","begin":[268,0],"end":[275,1]},"visibility":{"restricted":{"parent":"0:32:1753","path":"::filter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Filter","id":"0:71:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:99:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:528:920":{"id":"0:528:920","crate_id":0,"name":"new","span":{"filename":"src/lib.rs","begin":[979,4],"end":[981,5]},"visibility":"public","docs":"Get a default set of environment variables.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2872-0:391:134":{"id":"b:2:2872-0:391:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2866:2780","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2874:2393"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2872-0:720:1771":{"id":"b:2:2872-0:720:1771","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2866:2780","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2874:2393"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:488:671":{"id":"0:488:671","crate_id":0,"name":"format","span":{"filename":"src/lib.rs","begin":[583,4],"end":[589,5]},"visibility":"public","docs":"Sets the format function for formatting the log output.\n\nThis function is called on each record logged and should format the\nlog record and output it to the given [`Formatter`].\n\nThe format function is expected to output the string directly to the\n`Formatter` so that implementations can use the [`std::fmt`] macros\nto format and output without intermediate heap allocations. The default\n`env_logger` formatter takes advantage of this.\n\n# Examples\n\nUse a custom format to write only the log message:\n\n```\nuse std::io::Write;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}\", record.args()));\n```\n\n[`Formatter`]: fmt/struct.Formatter.html\n[`String`]: https://doc.rust-lang.org/stable/std/string/struct.String.html\n[`std::fmt`]: https://doc.rust-lang.org/std/fmt/index.html","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["format",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Fn","id":"2:3519:130","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Record","id":"24:275:1751","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13428:304":{"id":"2:13428:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:16010:2683","`u8`":"1:16021:2692"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13538:2814":{"id":"2:13538:2814","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9260:2986-0:734:1802":{"id":"a:2:9260:2986-0:734:1802","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9260:2986","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:13476:61898":{"id":"2:13476:61898","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:16010:2683","self::pattern":"2:13054:4159","prim@char":"1:16004:2678","`DoubleEndedIterator`":"2:8448:120","str::rsplit_terminator":"1:16010:2683"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49512:4562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22804:4297":{"id":"2:22804:4297","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22805:4285","2:22806:60995","2:22807:1227","2:22808:1228","2:22809:43556","2:22810:61058","2:22811:61059","2:22812:61060","2:22813:61061","2:22814:61062","2:22815:60996","2:22816:60997","2:22817:60998","2:22818:60999","2:22819:61000","2:22820:61001","2:22821:61002"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime/extern_impl.rs","begin":[14,0],"end":[76,1]},"visibility":{"restricted":{"parent":"0:133:2477","path":"::fmt::humantime::imp"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:163:1892","0:164:2429","0:165:2430","0:166:2431","0:167:2432"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13782:150":{"id":"2:13782:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13783:181","2:13784:150","2:13785:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3406:3917":{"id":"2:3406:3917","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:181","2:3409:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2967:184":{"id":"2:2967:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2969:997","2:2970:826","2:2971:792","2:2972:713","2:2973:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13459:3467":{"id":"2:13459:3467","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:13054:4159","prim@char":"1:16004:2678","`None`":"2:47495:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:558:681":{"id":"0:558:681","crate_id":0,"name":"from","span":{"filename":"src/lib.rs","begin":[1095,4],"end":[1097,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["filter_env",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13517:61910":{"id":"2:13517:61910","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13054:4159","prim@char":"1:16004:2678"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9259:2987-0:734:1802":{"id":"a:2:9259:2987-0:734:1802","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9259:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:3812:2985":{"id":"2:3812:2985","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:487:1860":{"id":"0:487:1860","crate_id":0,"name":"parse_default_env","span":{"filename":"src/lib.rs","begin":[553,4],"end":[555,5]},"visibility":"public","docs":"Applies the configuration from the environment using default variable names.\n\nThis method is a convenient way to call `parse_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger with filter level `Off`, then configure it using the\ndefault environment variables:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13541:61914":{"id":"2:13541:61914","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:16004:2678"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49761:4574","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3310:2983-0:74:1802":{"id":"a:2:3310:2983-0:74:1802","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3310:2983","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:8448:120":{"id":"2:8448:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8449:3424","2:8450:3425","2:8451:3426","2:8452:3427","2:8456:3428","2:8459:3429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10303:2626":{"id":"2:10303:2626","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10304:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14166:141":{"id":"2:14166:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14167:277","2:14168:518","2:14169:280","2:14170:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:243:2555":{"id":"0:243:2555","crate_id":0,"name":"default_level_style","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[52,4],"end":[62,5]},"visibility":"public","docs":"Get the default [`Style`] for the given level.\n\nThe style can be used to print other values besides the level.","links":{"`Style`":"0:592:2552"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["level",{"kind":"resolved_path","inner":{"name":"Level","id":"24:195:2190","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Style","id":"0:592:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:499:1904":{"id":"0:499:1904","crate_id":0,"name":"format_timestamp_nanos","span":{"filename":"src/lib.rs","begin":[646,4],"end":[648,5]},"visibility":"public","docs":"Configures the timestamp to use nanosecond precision.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:166:2431":{"id":"0:166:2431","crate_id":0,"name":"timestamp_micros","span":{"filename":"src/fmt/humantime/extern_impl.rs","begin":[61,4],"end":[66,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmicrosecond precision.","links":{"`Timestamp`":"0:168:2489"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Timestamp","id":"0:168:2489","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13450:56041":{"id":"2:13450:56041","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13054:4159","prim@char":"1:16004:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3347:4200":{"id":"2:3347:4200","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3198-0:71:1755":{"id":"b:2:3198-0:71:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Filter","id":"0:71:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3201:1843"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:132:1553":{"id":"0:132:1553","crate_id":0,"name":"humantime","span":{"filename":"src/fmt/humantime/mod.rs","begin":[7,0],"end":[11,36]},"visibility":{"restricted":{"parent":"0:108:660","path":"::fmt"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"2:3427:4232":{"id":"2:3427:4232","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3429:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9260:2986-0:74:1802":{"id":"a:2:9260:2986-0:74:1802","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9260:2986","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:537:1774":{"id":"0:537:1774","crate_id":0,"name":"write_style","span":{"filename":"src/lib.rs","begin":[1023,4],"end":[1030,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["write_style_env",{"kind":"generic","inner":"E"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"5:792:108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:329:1542":{"id":"0:329:1542","crate_id":0,"name":"0","span":{"filename":"src/fmt/writer/mod.rs","begin":[23,9],"end":[23,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:1875","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"kind":"resolved_path","inner":{"name":"io::Write","id":"1:4723:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[]},{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}},"param_names":[]}}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3269:211":{"id":"2:3269:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2869-0:706:1893":{"id":"b:2:2869-0:706:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2871:1743"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:791:3484":{"id":"5:791:3484","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3166:75":{"id":"2:3166:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:678:1938":{"id":"0:678:1938","crate_id":0,"name":"WriteStyle","span":{"filename":"src/fmt/writer/mod.rs","begin":[89,0],"end":[96,1]},"visibility":"public","docs":"Whether or not to print styles to the target.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:679:2520","0:681:2522","0:683:2456"],"impls":[]}},"2:13491:61901":{"id":"2:13491:61901","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3274:3079":{"id":"2:3274:3079","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:683:2456":{"id":"0:683:2456","crate_id":0,"name":"Never","span":{"filename":"src/fmt/writer/mod.rs","begin":[95,4],"end":[95,9]},"visibility":"default","docs":"Never print styles.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:101:660":{"id":"0:101:660","crate_id":0,"name":"fmt","span":{"filename":"src/filter/mod.rs","begin":[278,4],"end":[287,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10252:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10241:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:592:2552":{"id":"0:592:2552","crate_id":0,"name":"Style","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[247,0],"end":[250,1]},"visibility":"public","docs":"A set of styles to apply to the terminal output.\n\nCall [`Formatter::style`] to get a `Style` and use the builder methods to\nset styling properties, like [color] and [weight].\nTo print a value using the style, wrap it in a call to [`value`] when the log\nrecord is formatted.\n\n# Examples\n\nCreate a bold, red colored style and use it to print the log level:\n\n```\nuse std::io::Write;\nuse env_logger::fmt::Color;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    let mut level_style = buf.style();\n\n    level_style.set_color(Color::Red).set_bold(true);\n\n    writeln!(buf, \"{}: {}\",\n        level_style.value(record.level()),\n        record.args())\n});\n```\n\nStyles can be re-used to output multiple values:\n\n```\nuse std::io::Write;\nuse env_logger::fmt::Color;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    let mut bold = buf.style();\n\n    bold.set_bold(true);\n\n    writeln!(buf, \"{}: {} {}\",\n        bold.value(record.level()),\n        bold.value(\"some bold text\"),\n        record.args())\n});\n```\n\n[`Formatter::style`]: struct.Formatter.html#method.style\n[color]: #method.set_color\n[weight]: #method.set_bold\n[`value`]: #method.value","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13463:3429":{"id":"2:13463:3429","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47495:176","self::pattern":"2:13054:4159","prim@char":"1:16004:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13488:61900":{"id":"2:13488:61900","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5727:3867":{"id":"1:5727:3867","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5728:6594","1:5729:58035","1:5730:58036"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"27:29:2545":{"id":"27:29:2545","crate_id":27,"name":"WriteColor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["27:30:3617","27:31:2415","27:32:2572","27:33:3618"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Write","id":"1:4723:2394","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:486:1854":{"id":"0:486:1854","crate_id":0,"name":"from_default_env","span":{"filename":"src/lib.rs","begin":[527,4],"end":[529,5]},"visibility":"public","docs":"Initializes the log builder from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger using the default environment variables:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:505:1362":{"id":"0:505:1362","crate_id":0,"name":"target","span":{"filename":"src/lib.rs","begin":[743,4],"end":[746,5]},"visibility":"public","docs":"Sets the target for the log output.\n\nEnv logger can log to either stdout, stderr or a custom pipe. The default is stderr.\n\nThe custom pipe can be used to send the log messages to a custom sink (for example a file).\nDo note that direct writes to a file can become a bottleneck due to IO operation times.\n\n# Examples\n\nWrite log message to `stdout`:\n\n```\nuse env_logger::{Builder, Target};\n\nlet mut builder = Builder::new();\n\nbuilder.target(Target::Stdout);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"resolved_path","inner":{"name":"fmt::Target","id":"0:322:221","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3104:4242":{"id":"2:3104:4242","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3103:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6088:62550":{"id":"5:6088:62550","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:520:1983":{"id":"0:520:1983","crate_id":0,"name":"enabled","span":{"filename":"src/lib.rs","begin":[907,4],"end":[909,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["metadata",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Metadata","id":"24:294:1750","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:391:134":{"id":"0:391:134","crate_id":0,"name":"Formatter","span":{"filename":"src/fmt/mod.rs","begin":[97,0],"end":[100,1]},"visibility":"public","docs":"A formatter to write logs into.\n\n`Formatter` implements the standard [`Write`] trait for writing log records.\nIt also supports terminal colors, through the [`style`] method.\n\n# Examples\n\nUse the [`writeln`] macro to format a log record.\nAn instance of a `Formatter` is passed to an `env_logger` format as `buf`:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}: {}\", record.level(), record.args()));\n```\n\n[`Write`]: https://doc.rust-lang.org/stable/std/io/trait.Write.html\n[`writeln`]: https://doc.rust-lang.org/stable/std/macro.writeln.html\n[`style`]: #method.style","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:162","0:241","a:2:3310:2983-0:391:134","a:2:3281:220-0:391:134","a:2:9259:2987-0:391:134","a:2:9260:2986-0:391:134","a:2:3269:211-0:391:134","b:2:3202-0:391:134","b:2:3213-0:391:134","b:2:4002-0:391:134","b:2:2869-0:391:134","b:2:2872-0:391:134","b:2:3208-0:391:134","b:2:3198-0:391:134","0:399","0:402"]}},"0:401:1993":{"id":"0:401:1993","crate_id":0,"name":"flush","span":{"filename":"src/fmt/mod.rs","begin":[128,4],"end":[130,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13447:3756":{"id":"2:13447:3756","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49716:2938","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6459:3853":{"id":"1:6459:3853","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6460:58376","1:6461:9349","1:6462:58377","1:6463:58378","1:6464:58379","1:6465:58380"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:318":{"id":"0:318","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[10,4],"end":[10,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"super","name":"super","id":"0:183:1756","glob":true}},"2:13497:61902":{"id":"2:13497:61902","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13054:4159","prim@char":"1:16004:2678","`DoubleEndedIterator`":"2:8448:120","str::matches":"1:16010:2683"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49684:4569","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:4162","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3281:220-0:391:134":{"id":"a:2:3281:220-0:391:134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"1:5647:3896":{"id":"1:5647:3896","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5648:57774","1:5649:4807"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:3848","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:483:1831":{"id":"0:483:1831","crate_id":0,"name":"parse_env","span":{"filename":"src/lib.rs","begin":[492,4],"end":[507,5]},"visibility":"public","docs":"Applies the configuration from the environment.\n\nThis function allows a builder to be configured with default parameters,\nto be then overridden by the environment.\n\n# Examples\n\nInitialise a logger with filter level `Off`, then override the log\nfilter from an environment variable called `MY_LOG`:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger with filter level `Off`, then use the `MY_LOG`\nvariable to override filtering and `MY_LOG_STYLE` to override  whether\nor not to write styles:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["env",{"kind":"generic","inner":"E"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:706:1893":{"id":"b:2:3213-0:706:1893","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3216:127","2:3217:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3175:135":{"id":"2:3175:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3177:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13510:61906":{"id":"2:13510:61906","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3376:4212":{"id":"2:3376:4212","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3378:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:503:1753":{"id":"0:503:1753","crate_id":0,"name":"filter","span":{"filename":"src/lib.rs","begin":[711,4],"end":[714,5]},"visibility":"public","docs":"Adds filters to the logger.\n\nThe given module (if any) will log at most the specified level provided.\nIf no module is provided then the filter will apply to all log messages.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter(Some(\"path::to::module\"), LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["module",{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}}],["level",{"kind":"resolved_path","inner":{"name":"LevelFilter","id":"24:216:1748","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8400:136":{"id":"2:8400:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8402:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5797:3875":{"id":"1:5797:3875","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5798:6594"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3269:211-0:474:1788":{"id":"a:2:3269:211-0:474:1788","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Logger","id":"0:474:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:647:2559":{"id":"0:647:2559","crate_id":0,"name":"Green","span":{"filename":"src/fmt/writer/termcolor/extern_impl.rs","begin":[485,4],"end":[485,9]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"b:2:3213-0:391:134":{"id":"b:2:3213-0:391:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3216:127","2:3217:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13500:61903":{"id":"2:13500:61903","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"1:16010:2683","prim@char":"1:16004:2678","self::pattern":"2:13054:4159","`DoubleEndedIterator`":"2:8448:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49612:4566","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:4158","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9259:2987-0:706:1893":{"id":"a:2:9259:2987-0:706:1893","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9259:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:2:3208-0:74:1802":{"id":"b:2:3208-0:74:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3178:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:74:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3211:127","2:3212:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:576:2032":{"id":"0:576:2032","crate_id":0,"name":"init_from_env","span":{"filename":"src/lib.rs","begin":[1221,0],"end":[1227,1]},"visibility":"public","docs":"Initializes the global logger with an env logger from the given environment\nvariables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::init_from_env(env);\n```\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["env",{"kind":"generic","inner":"E"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Env","id":"0:720:1771","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"}}},"b:2:2872-0:71:1755":{"id":"b:2:2872-0:71:1755","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2866:2780","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Filter","id":"0:71:1755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2874:2393"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:491:1880":{"id":"0:491:1880","crate_id":0,"name":"format_level","span":{"filename":"src/lib.rs","begin":[600,4],"end":[603,5]},"visibility":"public","docs":"Whether or not to write the level in the default format.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["write",{"kind":"primitive","inner":"bool"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3172:149":{"id":"2:3172:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3174:1843"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13439:61896":{"id":"2:13439:61896","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:16010:2683","`str`":"1:16010:2683","crate::ops::IndexMut":"2:3581:4253"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3740:4245":{"id":"2:3740:4245","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3742:59286"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:160:1749":{"id":"24:160:1749","crate_id":24,"name":"Log","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:161:1983","24:162:1747","24:163:1993"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:87:1916":{"id":"0:87:1916","crate_id":0,"name":"filter_level","span":{"filename":"src/filter/mod.rs","begin":[198,4],"end":[200,5]},"visibility":"public","docs":"Adds a directive to the filter for all modules.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["level",{"kind":"resolved_path","inner":{"name":"LevelFilter","id":"24:216:1748","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5741:3870":{"id":"1:5741:3870","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5742:8947","1:5743:55827","1:5744:6594","1:5745:59986","1:5746:4103","1:5747:4104","1:5748:59987","1:5749:1304","1:5750:59988","1:5751:59989","1:5752:59990","1:5753:59991","1:5754:59992","1:5755:59993","1:5756:59994","1:5757:59995"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3269:211-0:706:1893":{"id":"a:2:3269:211-0:706:1893","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"TimestampPrecision","id":"0:706:1893","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9259:2987":{"id":"2:9259:2987","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3198-0:734:1802":{"id":"b:2:3198-0:734:1802","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3201:1843"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:316:1754":{"id":"0:316:1754","crate_id":0,"name":"glob","span":{"filename":"src/fmt/writer/mod.rs","begin":[8,0],"end":[8,19]},"visibility":{"restricted":{"parent":"0:108:660","path":"::fmt"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:317","0:318"],"is_stripped":true}},"0:473:1763":{"id":"0:473:1763","crate_id":0,"name":"DEFAULT_WRITE_STYLE_ENV","span":{"filename":"src/lib.rs","begin":[308,0],"end":[308,59]},"visibility":"public","docs":"The default name for the environment variable to read style preferences from.","links":{},"attrs":[],"deprecation":null,"kind":"constant","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"expr":"\"RUST_LOG_STYLE\"","value":null,"is_literal":true}},"2:13544:54547":{"id":"2:13544:54547","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:16004:2678"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49779:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3384:4216":{"id":"2:3384:4216","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3386:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3435:4235":{"id":"2:3435:4235","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3437:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:4002-0:391:134":{"id":"b:2:4002-0:391:134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:3079","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:4000:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Formatter","id":"0:391:134","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:4004:1429"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:507:1847":{"id":"0:507:1847","crate_id":0,"name":"parse_write_style","span":{"filename":"src/lib.rs","begin":[773,4],"end":[776,5]},"visibility":"public","docs":"Parses whether or not to write styles in the same form as the `RUST_LOG_STYLE`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["write_style",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6861:3858":{"id":"1:6861:3858","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:58336"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3310:2983-0:734:1802":{"id":"a:2:3310:2983-0:734:1802","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3310:2983","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Builder","id":"0:734:1802","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:509:1950":{"id":"0:509:1950","crate_id":0,"name":"try_init","span":{"filename":"src/lib.rs","begin":[796,4],"end":[807,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"SetLoggerError","id":"24:352:1752","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8363:4291":{"id":"2:8363:4291","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8365:3475"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:323:2508":{"id":"0:323:2508","crate_id":0,"name":"Stdout","span":{"filename":"src/fmt/writer/mod.rs","begin":[19,4],"end":[19,10]},"visibility":"default","docs":"Logs will be sent to standard output.","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13427:61895":{"id":"2:13427:61895","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"17:10468:5527":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:8803:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:601:8595":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:13884:7228":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"12:928:3963":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:51378:4377":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"12:764:3810":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"20:2342:6299":{"crate_id":20,"path":["regex","prog","Inst"],"kind":"enum"},"16:7514:5129":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:49480:4533":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"0:571:1950":{"crate_id":0,"path":["env_logger","try_init"],"kind":"function"},"29:3776:8855":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"29:3750:8844":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:46659:7693":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:4535:7288":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"22:1809:6103":{"crate_id":22,"path":["aho_corasick","packed","teddy","runtime","Mask128"],"kind":"struct"},"21:2176:5663":{"crate_id":21,"path":["regex_syntax","ast","CaptureName"],"kind":"struct"},"1:11409:4135":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"29:3886:8905":{"crate_id":29,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:11575:3992":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"21:2469:127":{"crate_id":21,"path":["regex_syntax","hir","Error"],"kind":"struct"},"1:2395:3490":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:1669:8704":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:8690:3032":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13746:7190":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:2733:5342":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:16004:2678":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:3375:4797":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:4397:4067":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:46650:4336":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"29:3793:8861":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"20:2886:2889":{"crate_id":20,"path":["regex","re_set","bytes","SetMatchesIntoIter"],"kind":"struct"},"6:5395:9178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:5736:5166":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:8176:4739":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:8193:5871":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:14034:4014":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:53255:4380":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"0:579:1830":{"crate_id":0,"path":["env_logger","builder"],"kind":"function"},"2:37651:3389":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"29:6560:9399":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"29:580:8595":{"crate_id":29,"path":["libc","unix","linger"],"kind":"struct"},"2:3746:4248":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12671:6850":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:12076:59956":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:13064:4158":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"22:1571:5704":{"crate_id":22,"path":["aho_corasick","packed","api","MatchKind"],"kind":"enum"},"1:1438:3434":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:3175:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:10353:5474":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:6685:9389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:3200:2927":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:6021:5364":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:11150:2938":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"29:6566:9400":{"crate_id":29,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"29:6427:9387":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:5753:5167":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:6238:5111":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:10646:12217":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"12:2392:5661":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:48272:2628":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"21:334:5605":{"crate_id":21,"path":["regex_syntax","ast","visitor","ClassFrame"],"kind":"enum"},"17:9440:6392":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:2218:4799":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:3427:4232":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"12:2052:3910":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"15:0:2659":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:12065:55677":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"6:1662:8700":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:5975:5173":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:13568:3500":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"29:3880:8903":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:3287:5376":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:49612:4566":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:46590:2934":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"20:2001:127":{"crate_id":20,"path":["regex","error","Error"],"kind":"enum"},"1:12242:3034":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:5452:9190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:8954:5512":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:542:5081":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:23942:4607":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:51523:4413":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:24129:7664":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:1149:7797":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"23:984:5556":{"crate_id":23,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:3981:8826":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"21:1541:4863":{"crate_id":21,"path":["regex_syntax","ast","Position"],"kind":"struct"},"17:13819:7210":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"21:2326:134":{"crate_id":21,"path":["regex_syntax","error","Formatter"],"kind":"struct"},"6:4440:9125":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:49432:4557":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:47545:3810":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"26:142:2481":{"crate_id":26,"path":["humantime","date","format_rfc3339_millis"],"kind":"function"},"2:3352:4202":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"29:6031:9380":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:47614:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"29:5732:9245":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:3882:2947":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:51076:4419":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:4741:2930":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"20:2986:2883":{"crate_id":20,"path":["regex","re_unicode","SplitN"],"kind":"struct"},"5:8344:4806":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:0:2652":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"29:648:40861":{"crate_id":29,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:46284:3906":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:7441:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"29:4059:8945":{"crate_id":29,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:23089:17483":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:4032:4033":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"29:4181:9002":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"29:6537:9393":{"crate_id":29,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"22:1252:5699":{"crate_id":22,"path":["aho_corasick","ahocorasick","FindOverlappingIter"],"kind":"struct"},"6:1727:8739":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:46031:3892":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"29:3873:8901":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"21:2097:5659":{"crate_id":21,"path":["regex_syntax","ast","RepetitionKind"],"kind":"enum"},"12:114:63160":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:53595:7788":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:11981:6718":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:8413:3082":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:3966:8819":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5175:9054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:6111:9299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:47691:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"20:3002:2884":{"crate_id":20,"path":["regex","re_unicode","SubCaptureMatches"],"kind":"struct"},"2:24601:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:900:3799":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"29:5014:9125":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nlattr"],"kind":"struct"},"23:823:5564":{"crate_id":23,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:49684:4569":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:47682:3434":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4516:9018":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"29:4200:9010":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"12:1256:3974":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:57678:7795":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:5257:9093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"20:2431:6385":{"crate_id":20,"path":["regex","prog","InstBytes"],"kind":"struct"},"5:5889:5852":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:13377:7077":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:37627:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:11924:4551":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"20:2545:2885":{"crate_id":20,"path":["regex","re_builder","set_bytes","RegexSetBuilder"],"kind":"struct"},"1:11360:4084":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"21:1295:5693":{"crate_id":21,"path":["regex_syntax","utf8","ScalarRange"],"kind":"struct"},"5:6475:3908":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"0:713:1905":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Nanos"],"kind":"variant"},"12:979:3970":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:3970:5842":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:47674:3810":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"22:1861:6109":{"crate_id":22,"path":["aho_corasick","prefilter","Packed"],"kind":"struct"},"17:9719:6489":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"29:4192:9008":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:4304:7281":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:47800:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10887:6563":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:7927:3788":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:14821:4018":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:5707:5164":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"27:306:3067":{"crate_id":27,"path":["termcolor","LossyStandardStream"],"kind":"struct"},"21:1967:5651":{"crate_id":21,"path":["regex_syntax","ast","ClassSetRange"],"kind":"struct"},"1:1524:3969":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:46802:4309":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"12:0:2657":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"21:2306:127":{"crate_id":21,"path":["regex_syntax","error","Error"],"kind":"enum"},"1:5960:4137":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:9943:63177":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"0:74:1802":{"crate_id":0,"path":["env_logger","filter","Builder"],"kind":"struct"},"17:10950:6570":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:49381:4550":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:49880:4167":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:7333:5128":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"29:0:798":{"crate_id":29,"path":["libc"],"kind":"module"},"2:50241:4651":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"16:7250:5206":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4110:8888":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:4230:7280":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"9:963:4947":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:5995:9257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5146:9030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"29:5766:9264":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"29:3621:8758":{"crate_id":29,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:11297:5619":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"12:2066:3912":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:10106:5537":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:10577:55818":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"12:466:63164":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:12187:3935":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:7732:4015":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:13284:40121":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"17:13062:6986":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:10858:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"0:711:1902":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Micros"],"kind":"variant"},"23:885:3389":{"crate_id":23,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:9368:6390":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"22:1548:6085":{"crate_id":22,"path":["aho_corasick","nfa","fill_failure_transitions_leftmost","QueuedState"],"kind":"struct"},"17:11750:6665":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:3278:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"18:705:6035":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"21:2729:5662":{"crate_id":21,"path":["regex_syntax","hir","GroupKind"],"kind":"enum"},"2:51595:4401":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:10149:6492":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:48498:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4362:8966":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11231:5458":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10584:5514":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:8379:4746":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"21:2696:5681":{"crate_id":21,"path":["regex_syntax","hir","WordBoundary"],"kind":"enum"},"16:6366:5032":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:50198:4581":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:13331:7065":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:745:63179":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:9296:6389":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10623:6524":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:50202:4582":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10827:5507":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:5330:6481":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:5165:2793":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:12124:3929":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:3488:3909":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:49911:4171":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4340:8955":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"24:160:1749":{"crate_id":24,"path":["log","Log"],"kind":"trait"},"1:2362:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"9:1020:4949":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:15986:55676":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:3145:5380":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:13453:7094":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"21:2389:6144":{"crate_id":21,"path":["regex_syntax","hir","print","PrinterBuilder"],"kind":"struct"},"16:6780:5193":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"27:90:3057":{"crate_id":27,"path":["termcolor","StandardStream"],"kind":"struct"},"21:2191:5664":{"crate_id":21,"path":["regex_syntax","ast","SetFlags"],"kind":"struct"},"2:3411:4224":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:47007:7698":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:24147:39881":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:49779:4575":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"20:1554:2875":{"crate_id":20,"path":["regex","re_unicode","Captures"],"kind":"struct"},"17:12040:6726":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:4955:7300":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:46434:4713":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"7:85:45394":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:607:6399":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"29:1479:8617":{"crate_id":29,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"22:1493:6080":{"crate_id":22,"path":["aho_corasick","nfa","Dense"],"kind":"struct"},"17:12442:6810":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:24669:3794":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:3440:4238":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:5271:9104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:838:4161":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:6094:9294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:49200:4535":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:46603:4332":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:5979:9245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:14000:7255":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:612:8600":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"21:2842:5612":{"crate_id":21,"path":["regex_syntax","parser","ParserBuilder"],"kind":"struct"},"1:1152:7799":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"22:1843:5568":{"crate_id":22,"path":["aho_corasick","prefilter","PrefilterState"],"kind":"struct"},"20:2665:2884":{"crate_id":20,"path":["regex","re_bytes","SubCaptureMatches"],"kind":"struct"},"1:10684:3497":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:56377:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9528:2936":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:1531:8619":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:48258:2626":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:8902:47715":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:1482:3909":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:12373:6796":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:32340:3551":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"5:8330:4805":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:713:3389":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"21:1427:1757":{"crate_id":21,"path":["regex_syntax","ast","print","Writer"],"kind":"struct"},"24:216:1748":{"crate_id":24,"path":["log","LevelFilter"],"kind":"enum"},"17:11822:6692":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:50037:4175":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:51030:7715":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:53439:7780":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:12132:3434":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:5030:1745":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"22:1887:6058":{"crate_id":22,"path":["aho_corasick","prefilter","RareByteOffsets"],"kind":"struct"},"2:49269:4541":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"11:0:2656":{"crate_id":11,"path":["adler"],"kind":"module"},"22:1316:5704":{"crate_id":22,"path":["aho_corasick","ahocorasick","MatchKind"],"kind":"enum"},"16:2968:5368":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:2945:5390":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:13296:7055":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"29:3671:8795":{"crate_id":29,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:3358:4205":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"14:56:6611":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:4639:2918":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:7804:5118":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:15032:4017":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:50186:4588":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"29:5864:9299":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:11482:6611":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"24:325:2817":{"crate_id":24,"path":["log","MetadataBuilder"],"kind":"struct"},"5:8130:3908":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"20:2439:6386":{"crate_id":20,"path":["regex","re_builder","RegexOptions"],"kind":"struct"},"23:912:6041":{"crate_id":23,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"21:2619:5676":{"crate_id":21,"path":["regex_syntax","hir","ClassUnicodeRange"],"kind":"struct"},"2:51339:4392":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:7379:3434":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:11439:4538":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:1606:8657":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"29:3743:8840":{"crate_id":29,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1558:8627":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:4242:8920":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:8849:5454":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:49770:3906":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:6024:9269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:15053:2479":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:2310:4861":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"29:6531:9392":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:11598:3993":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"29:1679:4095":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:4965:2783":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:4067:8865":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"28:0:1552":{"crate_id":28,"path":["atty"],"kind":"module"},"1:10592:3787":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"27:217:3063":{"crate_id":27,"path":["termcolor","NoColor"],"kind":"struct"},"2:45812:4244":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:9261:3141":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:12195:6753":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"29:5934:9340":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:50170:4580":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"20:265:6267":{"crate_id":20,"path":["regex","compile","ByteClassSet"],"kind":"struct"},"17:10224:6509":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"20:2658:2872":{"crate_id":20,"path":["regex","re_bytes","CaptureLocations"],"kind":"struct"},"16:7158:5198":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:22583:61730":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:994:4810":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:51234:4412":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13205:7037":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"21:2877:54589":{"crate_id":21,"path":["regex_syntax","unicode","ClassQuery"],"kind":"enum"},"2:46739:4347":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"0:706:1893":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision"],"kind":"enum"},"1:11414:4138":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"21:2677:5680":{"crate_id":21,"path":["regex_syntax","hir","Anchor"],"kind":"enum"},"2:46353:4715":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:51124:4399":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"29:3634:8767":{"crate_id":29,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:9689:63172":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:580:8584":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"22:1853:1802":{"crate_id":22,"path":["aho_corasick","prefilter","Builder"],"kind":"struct"},"2:51358:7718":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:53518:7785":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"12:1147:3973":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4416:8987":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"29:559:8584":{"crate_id":29,"path":["libc","unix","iovec"],"kind":"struct"},"1:12138:3932":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:10656:6527":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:14570:9611":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:11457:9273":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:16007:2680":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"29:1504:8627":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:4434:9111":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"29:5107:9178":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:46453:4432":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12142:6745":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:23465:4288":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"22:1635:5554":{"crate_id":22,"path":["aho_corasick","packed","api","FindIter"],"kind":"struct"},"2:50071:7709":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"17:13318:7059":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:3505:2800":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:3800:7278":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"29:4928:9082":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:3169:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:13865:7224":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:767:6046":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"20:2266:6364":{"crate_id":20,"path":["regex","literal","imp","Memmem"],"kind":"struct"},"6:6853:9373":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:15216:3946":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:51744:4381":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:3396:3913":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"22:1916:6121":{"crate_id":22,"path":["aho_corasick","prefilter","RareBytesThree"],"kind":"struct"},"1:10866:4062":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:9971:63168":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"14:0:2658":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"20:1915:205":{"crate_id":20,"path":["regex","dfa","Result"],"kind":"enum"},"29:3698:8818":{"crate_id":29,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"18:740:6041":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"0:720:1771":{"crate_id":0,"path":["env_logger","Env"],"kind":"struct"},"20:3024:2878":{"crate_id":20,"path":["regex","re_unicode","Matches"],"kind":"struct"},"2:56325:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:11138:3810":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"29:6554:9398":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"18:821:5557":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:3269:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:2794:5094":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:7255:7807":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2188:3913":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"29:4233:9023":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"20:1903:6325":{"crate_id":20,"path":["regex","dfa","Fsm"],"kind":"struct"},"17:13386:7078":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:7823:5120":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:12061:9608":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"27:373:2416":{"crate_id":27,"path":["termcolor","Color"],"kind":"enum"},"1:4607:2958":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12610:6836":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:2262:4845":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"21:2749:5657":{"crate_id":21,"path":["regex_syntax","hir","Repetition"],"kind":"struct"},"12:2032:3809":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:12385:6798":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:24068:6356":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"12:1121:3972":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:2553:4848":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:12203:3936":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"18:755:63180":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"22:1403:6069":{"crate_id":22,"path":["aho_corasick","dfa","Premultiplied"],"kind":"struct"},"9:1075:4950":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:12343:6777":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:527:8553":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:6226:9364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:2926:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"29:5256:9207":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:1011:3809":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:2292:4270":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"0:573:2017":{"crate_id":0,"path":["env_logger","try_init_from_env"],"kind":"function"},"16:6591:5190":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:6554:5188":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"20:2035:6337":{"crate_id":20,"path":["regex","exec","ExecReadOnly"],"kind":"struct"},"2:49666:2878":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:2967:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"21:2807:5682":{"crate_id":21,"path":["regex_syntax","hir","HirInfo"],"kind":"struct"},"6:4474:9002":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"23:993:5557":{"crate_id":23,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"27:92:3058":{"crate_id":27,"path":["termcolor","StandardStreamLock"],"kind":"struct"},"5:1635:3961":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:10611:6523":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4464:9001":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:51925:7729":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:6257:4776":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:10565:3848":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:4346:8957":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:2200:5844":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:46751:4348":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"22:1358:6067":{"crate_id":22,"path":["aho_corasick","classes","ByteClassBuilder"],"kind":"struct"},"6:6668:9485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"0:71:1755":{"crate_id":0,"path":["env_logger","filter","Filter"],"kind":"struct"},"18:651:5564":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"29:512:8324":{"crate_id":29,"path":["libc","unix","timespec"],"kind":"struct"},"2:49716:2938":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:7615:4009":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"29:5784:9273":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13098:7015":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:2484:47807":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:8250:2844":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:11340:7868":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:48583:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:10420:5467":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:11186:6583":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:3714:7276":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"21:1844:5645":{"crate_id":21,"path":["regex_syntax","ast","ClassUnicode"],"kind":"struct"},"20:2630:2882":{"crate_id":20,"path":["regex","re_bytes","Split"],"kind":"struct"},"17:10962:6571":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:8138:4812":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"21:2913:5690":{"crate_id":21,"path":["regex_syntax","utf8","Utf8Sequence"],"kind":"enum"},"2:4066:3890":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"29:6593:9405":{"crate_id":29,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:1663:3964":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"15:269:5039":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"26:141:2483":{"crate_id":26,"path":["humantime","date","format_rfc3339_seconds"],"kind":"function"},"17:13348:7070":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"22:1178:3848":{"crate_id":22,"path":["aho_corasick","state_id","private","Sealed"],"kind":"trait"},"21:1913:5649":{"crate_id":21,"path":["regex_syntax","ast","ClassSet"],"kind":"enum"},"17:4008:6404":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:1457:3973":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:2594:7804":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"22:1758:6093":{"crate_id":22,"path":["aho_corasick","packed","teddy","runtime","TeddyFat1Mask256"],"kind":"struct"},"1:12116:3809":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"14:231:4749":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:8474:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"20:0:1554":{"crate_id":20,"path":["regex"],"kind":"module"},"6:4277:8922":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"9:776:4929":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:4783:4281":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:46024:4250":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"29:3658:8785":{"crate_id":29,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4493:9010":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"29:4874:9056":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:50178:4585":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"29:500:8550":{"crate_id":29,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:52403:4397":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:88:40463":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:6620:5397":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:56351:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:11397:2883":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:5008:3826":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:48842:7706":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"12:2253:3971":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:9600:63173":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:4432:2951":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:6959:3855":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"29:144:40529":{"crate_id":29,"path":["libc","unix","FILE"],"kind":"enum"},"29:597:8603":{"crate_id":29,"path":["libc","unix","tms"],"kind":"struct"},"29:6548:9397":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12221:6756":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"0:108:660":{"crate_id":0,"path":["env_logger","fmt"],"kind":"module"},"2:9381:4158":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:6199:4099":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:45945:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:14550:3884":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"29:3836:8882":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"20:2016:5583":{"crate_id":20,"path":["regex","exec","Exec"],"kind":"struct"},"16:4704:7292":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:13488:7105":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:11232:3833":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"6:4270:4101":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:7205:5202":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:3729:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:4995:7301":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:1653:3963":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:2162:3908":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:11130:2935":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"2:12057:5867":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"21:2872:6261":{"crate_id":21,"path":["regex_syntax","unicode","UnicodeWordError"],"kind":"struct"},"29:3799:8863":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"12:2040:3908":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"22:1801:6099":{"crate_id":22,"path":["aho_corasick","packed","teddy","runtime","TeddyFat3Mask256"],"kind":"struct"},"1:3561:2943":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:4485:9008":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"20:2178:6359":{"crate_id":20,"path":["regex","input","ByteInput"],"kind":"struct"},"17:12234:6758":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"23:850:142":{"crate_id":23,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:13923:4013":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13119:7020":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:3041:5370":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:3519:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:10530:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:46551:5861":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:46391:3906":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"21:1319:5609":{"crate_id":21,"path":["regex_syntax","ast","parse","Primitive"],"kind":"enum"},"17:10317:5470":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:3336:3911":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:51642:4389":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:9733:4076":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:6937:3860":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"22:1308:5703":{"crate_id":22,"path":["aho_corasick","ahocorasick","AhoCorasickBuilder"],"kind":"struct"},"29:5262:9208":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:3384:4216":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"23:1022:5559":{"crate_id":23,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"29:3826:8875":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"11:46:9459":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:52438:4379":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:13356:7073":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:46427:4712":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10635:6525":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:10252:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:23871:4606":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:6934:9399":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"23:927:63180":{"crate_id":23,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"22:1778:6096":{"crate_id":22,"path":["aho_corasick","packed","teddy","runtime","TeddyFat2Mask256"],"kind":"struct"},"2:3401:3916":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:4752:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"20:2891:2890":{"crate_id":20,"path":["regex","re_set","bytes","SetMatchesIter"],"kind":"struct"},"6:1567:8632":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:12171:3934":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:46711:4344":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"21:2140:5661":{"crate_id":21,"path":["regex_syntax","ast","Group"],"kind":"struct"},"16:4734:7293":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"20:2324:6278":{"crate_id":20,"path":["regex","prog","Program"],"kind":"struct"},"22:1342:6052":{"crate_id":22,"path":["aho_corasick","classes","ByteClasses"],"kind":"struct"},"6:3896:8767":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:7303:5207":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5387:9177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:48522:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:3366:1746":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:1619:3971":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"29:6405:9386":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:3933:8795":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:11420:4094":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11588:6638":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:10809:3880":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:593:8590":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"20:1977:6271":{"crate_id":20,"path":["regex","dfa","StateFlags"],"kind":"struct"},"17:10926:6568":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:11077:2959":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:9551:5455":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:3372:3002":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:47716:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:1704:8729":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:8115:3434":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:7257:5842":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:2769:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:2863:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"20:2368:6375":{"crate_id":20,"path":["regex","prog","InstSave"],"kind":"struct"},"2:46631:4335":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:5423:9472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:4454:8995":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:5561:5160":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"18:802:5555":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"0:472:1760":{"crate_id":0,"path":["env_logger","DEFAULT_FILTER_ENV"],"kind":"constant"},"1:12405:3507":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:4670:2918":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"22:1566:6088":{"crate_id":22,"path":["aho_corasick","nfa","AllBytesIter"],"kind":"struct"},"17:11199:6585":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:4160:8914":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"18:721:6036":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:49630:4567":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"23:974:5555":{"crate_id":23,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:47884:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:16008:2681":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"22:1413:6070":{"crate_id":22,"path":["aho_corasick","dfa","PremultipliedByteClass"],"kind":"struct"},"1:1642:3973":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:12252:3043":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"22:1393:6068":{"crate_id":22,"path":["aho_corasick","dfa","ByteClass"],"kind":"struct"},"1:820:5889":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"17:2512:5469":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:10661:12219":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11779:6676":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13180:7027":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"9:0:2654":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:8973:3046":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:12598:6834":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:24567:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:6764:2918":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"21:2030:5655":{"crate_id":21,"path":["regex_syntax","ast","Assertion"],"kind":"struct"},"17:13446:7093":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"22:1925:6123":{"crate_id":22,"path":["aho_corasick","prefilter","StartBytesBuilder"],"kind":"struct"},"2:4051:3891":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"1:11193:3830":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"20:1945:6255":{"crate_id":20,"path":["regex","dfa","Byte"],"kind":"struct"},"2:13079:4162":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:5430:9473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:11479:3857":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:4300:2960":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"17:12287:6765":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:4038:8855":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:14069:4282":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:48832:3992":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:49339:4546":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:513:6141":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:2543:5525":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:152:54009":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:47666:3809":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:51316:4388":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"20:2639:2883":{"crate_id":20,"path":["regex","re_bytes","SplitN"],"kind":"struct"},"2:3277:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:3264:5375":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:2777:4847":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10253:5434":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:22804:4297":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"17:9896:63169":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"29:5114:9179":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:7884:5116":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:1235:4843":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:9034:47718":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:51869:7727":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6219:5180":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:545:8558":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"29:4144:8987":{"crate_id":29,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:6032:5099":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:374:4803":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4081:8872":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"21:1996:5653":{"crate_id":21,"path":["regex_syntax","ast","ClassSetBinaryOp"],"kind":"struct"},"1:16027:2698":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:14166:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:2397:3491":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:16020:2691":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"29:5282:9222":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"23:833:5568":{"crate_id":23,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:4728:4299":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:16009:2682":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:5285:9112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6636:5125":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7856:5211":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"21:2067:5657":{"crate_id":21,"path":["regex_syntax","ast","Repetition"],"kind":"struct"},"1:5930:4134":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:10200:6507":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"21:2219:5666":{"crate_id":21,"path":["regex_syntax","ast","FlagsItem"],"kind":"struct"},"5:3341:4796":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13780:7202":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"29:544:8575":{"crate_id":29,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"24:352:1752":{"crate_id":24,"path":["log","SetLoggerError"],"kind":"struct"},"6:5183:9056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"29:4948:9093":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:49726:4570":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:2773:5391":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:15235:3953":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:3166:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:7677:4013":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"7:0:1481":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:4641:7290":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:11283:4532":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11653:6648":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:1132:3893":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:3423:4230":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"29:3645:8775":{"crate_id":29,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:22934:3845":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:5564:9222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:9139:3042":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:14633:2929":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:11425:4537":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4356:8963":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:12227:3033":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:47537:3809":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:51492:4409":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:46612:4333":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:8164:61055":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:547:5349":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"20:2874:2887":{"crate_id":20,"path":["regex","re_set","bytes","RegexSet"],"kind":"struct"},"29:572:8590":{"crate_id":29,"path":["libc","unix","winsize"],"kind":"struct"},"20:3052:6292":{"crate_id":20,"path":["regex","sparse","SparseSet"],"kind":"struct"},"21:2966:5692":{"crate_id":21,"path":["regex_syntax","utf8","Utf8Sequences"],"kind":"struct"},"5:3759:3809":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4005:8840":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"26:144:2482":{"crate_id":26,"path":["humantime","date","format_rfc3339_nanos"],"kind":"function"},"2:12007:4142":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:13760:7196":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:49462:2882":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:1764:8751":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:46771:4350":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"20:2879:2888":{"crate_id":20,"path":["regex","re_set","bytes","SetMatches"],"kind":"struct"},"17:10403:5478":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:6699:9288":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"29:3994:8921":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:4256:8921":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:8473:3081":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:3549:7275":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"12:777:3434":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"9:809:3992":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:3812:2985":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:51546:4416":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:52939:4391":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:169:54010":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:54:5002":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:8880:3811":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"12:815:3965":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"20:2995:2872":{"crate_id":20,"path":["regex","re_unicode","CaptureLocations"],"kind":"struct"},"1:3736:2946":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:24533:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:2269:4267":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:14952:5896":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:4748:2933":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:14575:3880":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"18:850:5559":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:13767:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:13520:7116":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:4157:5515":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:3247:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"22:1838:6106":{"crate_id":22,"path":["aho_corasick","prefilter","PrefilterObj"],"kind":"struct"},"16:7392:5114":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:10667:3919":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:10962:2948":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:3894:4835":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"29:6006:9374":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ip_mreqn"],"kind":"struct"},"20:1625:2880":{"crate_id":20,"path":["regex","re_unicode","Replacer"],"kind":"trait"},"2:50174:4583":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:11932:6704":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11159:6582":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:2397:2801":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:5346:5107":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"20:1254:5581":{"crate_id":20,"path":["regex","re_bytes","CapturesDebug"],"kind":"struct"},"2:3516:3080":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:10071:5542":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"27:237:3064":{"crate_id":27,"path":["termcolor","Ansi"],"kind":"struct"},"5:3362:3912":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:46973:7648":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:299:6396":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:4392:9466":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:8602:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"29:5955:9354":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:11137:2936":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:6438:4338":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:8298:4804":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:13772:7199":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6014:5175":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:1446:3961":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:8404:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:16014:2685":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:46720:4345":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:50451:2991":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"29:4100:8966":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:16026:2697":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:53503:7784":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:7236:5205":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:5408:4706":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:8160:3434":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:10988:6573":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:10912:6564":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"22:1444:1802":{"crate_id":22,"path":["aho_corasick","dfa","Builder"],"kind":"struct"},"1:6697:9286":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"20:2583:2877":{"crate_id":20,"path":["regex","re_bytes","Match"],"kind":"struct"},"1:14239:2508":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"29:5807:9291":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"29:1694:8746":{"crate_id":29,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:10952:4030":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"20:2210:6360":{"crate_id":20,"path":["regex","literal","imp","LiteralSearcher"],"kind":"struct"},"9:996:4948":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4532:9023":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:9133:47721":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"12:2059:3911":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"20:2784:2889":{"crate_id":20,"path":["regex","re_set","unicode","SetMatchesIntoIter"],"kind":"struct"},"2:7756:4307":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:9961:6494":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"29:75:40463":{"crate_id":29,"path":["libc","unix","DIR"],"kind":"enum"},"2:24215:9606":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10179:6506":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:7642:4777":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:12993:2827":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"22:1679:1802":{"crate_id":22,"path":["aho_corasick","packed","teddy","compile","Builder"],"kind":"struct"},"1:2458:3508":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"14:189:7555":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:7286:7807":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6166:5177":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:6807:5194":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"29:6577:9404":{"crate_id":29,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:5328:9144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"12:1183:5013":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:2183:3912":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:4922:7299":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"18:897:5563":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:10826:3881":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:4028:8849":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:9849:63176":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:47605:3816":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:22581:61727":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:4732:58004":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:53428:7779":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:1600:8655":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"14:11:7555":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:11143:2882":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:51769:4382":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:56390:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:1472:3972":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"21:2408:6237":{"crate_id":21,"path":["regex_syntax","hir","translate","TranslatorBuilder"],"kind":"struct"},"17:9210:47722":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:7212:3908":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"29:5151:9196":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"23:705:5698":{"crate_id":23,"path":["memchr","cow","Imp"],"kind":"enum"},"22:1503:6268":{"crate_id":22,"path":["aho_corasick","nfa","Transitions"],"kind":"enum"},"2:3389:4219":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:6662:9387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4446:8990":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13497:7108":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:11317:55675":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"27:29:2545":{"crate_id":27,"path":["termcolor","WriteColor"],"kind":"trait"},"12:1103:3971":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:3775:2799":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13842:7223":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:3178:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"18:611:5565":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:46989:7696":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:6181:9340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"29:4015:8922":{"crate_id":29,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"21:1555:5633":{"crate_id":21,"path":["regex_syntax","ast","WithComments"],"kind":"struct"},"2:7858:4375":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"26:255:2489":{"crate_id":26,"path":["humantime","wrapper","Timestamp"],"kind":"struct"},"1:12742:4040":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:11947:6708":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"19:117:9407":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:45860:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"21:2563:5636":{"crate_id":21,"path":["regex_syntax","hir","Literal"],"kind":"enum"},"17:2314:5473":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:10975:6572":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"20:2901:2876":{"crate_id":20,"path":["regex","re_trait","Locations"],"kind":"struct"},"29:1546:8655":{"crate_id":29,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"29:4985:9111":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nlmsgerr"],"kind":"struct"},"0:391:134":{"crate_id":0,"path":["env_logger","fmt","Formatter"],"kind":"struct"},"16:5790:5169":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10128:5539":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:161:40530":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"23:695:5565":{"crate_id":23,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:9088:47720":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:13637:7146":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:47596:3140":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"18:858:5560":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:5815:5170":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"29:3786:8858":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"21:1720:5639":{"crate_id":21,"path":["regex_syntax","ast","HexLiteralKind"],"kind":"enum"},"15:230:5034":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4296:8934":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:4599:5845":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"16:7738:5208":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"29:3805:8865":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11962:6713":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"12:787:3964":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:10543:6515":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"20:1836:6314":{"crate_id":20,"path":["regex","compile","SuffixCache"],"kind":"struct"},"1:9771:5888":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"21:2764:5659":{"crate_id":21,"path":["regex_syntax","hir","RepetitionKind"],"kind":"enum"},"29:5964:9357":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:48561:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:7620:4776":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:3197:3757":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:10095:5536":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:12083:7971":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"6:565:8575":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:5472:5156":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:14242:2510":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"18:830:5558":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:24237:4624":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"21:2851:5613":{"crate_id":21,"path":["regex_syntax","parser","Parser"],"kind":"struct"},"1:2572:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"20:962:6275":{"crate_id":20,"path":["regex","pool","Pool"],"kind":"struct"},"2:46673:4337":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:32500:60938":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"8:0:2653":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13598:7134":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:9186:5511":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:12537:6823":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:9063:3040":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:10580:3747":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"21:1737:5640":{"crate_id":21,"path":["regex_syntax","ast","Class"],"kind":"enum"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:10236:5443":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"29:5777:9269":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"26:284:5761":{"crate_id":26,"path":["humantime","date","Precision"],"kind":"enum"},"5:5875:5850":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"21:2525:5603":{"crate_id":21,"path":["regex_syntax","hir","HirKind"],"kind":"enum"},"17:10052:6501":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11604:6639":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"12:399:5018":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:10279:5480":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:49986:4173":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:7453:5109":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:11539:6627":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:4684:2928":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:16024:2695":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"21:1436:127":{"crate_id":21,"path":["regex_syntax","ast","Error"],"kind":"struct"},"17:9264:6480":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:5785:3872":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"29:1534:8647":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10160:6505":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"22:1771:6095":{"crate_id":22,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask256"],"kind":"struct"},"21:2658:5679":{"crate_id":21,"path":["regex_syntax","hir","ClassBytesRange"],"kind":"struct"},"1:14565:9609":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:12275:6764":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"29:4153:8990":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13799:7207":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:7117:3131":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:15483:55820":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:11356:4534":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:11628:6643":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"29:4239:9026":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12699:6854":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"20:2156:6357":{"crate_id":20,"path":["regex","input","InputAt"],"kind":"struct"},"22:1589:5736":{"crate_id":22,"path":["aho_corasick","packed","api","Config"],"kind":"struct"},"2:3103:3848":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:5775:3871":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"29:3719:8826":{"crate_id":29,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:6511:4339":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11277:6586":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:11524:3982":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:13620:7139":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:7174:5199":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:7146:5197":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"23:817:5567":{"crate_id":23,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12712:6855":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:49352:4547":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:47562:3139":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:1493:3964":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:5485:9196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"26:0:1553":{"crate_id":26,"path":["humantime"],"kind":"module"},"9:234:4907":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"29:1667:8736":{"crate_id":29,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:3039:61885":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:12501:4726":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:7649:4011":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:6863:3859":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4048:8858":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"23:153:54009":{"crate_id":23,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:5858:4131":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:48265:2625":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:12741:6858":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:6695:9284":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"21:1695:5638":{"crate_id":21,"path":["regex_syntax","ast","SpecialLiteralKind"],"kind":"enum"},"5:1843:5842":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"29:3980:8920":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:6644:5191":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"22:1184:5709":{"crate_id":22,"path":["aho_corasick","state_id","StateID"],"kind":"trait"},"1:7629:4010":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:9332:5523":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"26:230:3015":{"crate_id":26,"path":["humantime","duration","FormattedDuration"],"kind":"struct"},"17:11809:6688":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:32400:60937":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"29:6525:9391":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:4230:8919":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:6893:4341":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:12811:4568":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13192:7032":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:16018:2689":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:5185:2794":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13258:7049":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"22:1955:2877":{"crate_id":22,"path":["aho_corasick","Match"],"kind":"struct"},"2:3577:3978":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:2866:2780":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:1544:8622":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"20:2607:2351":{"crate_id":20,"path":["regex","re_bytes","Regex"],"kind":"struct"},"2:50206:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:9467:8459":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:24499:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:3064:5427":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:45784:3813":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:46413:4574":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:45968:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:12456:6812":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:53129:4395":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:47018:7649":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"23:902:63178":{"crate_id":23,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:28054:4296":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:13429:7086":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:51445:4421":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:571:8578":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"29:518:8555":{"crate_id":29,"path":["libc","unix","rlimit"],"kind":"struct"},"2:46486:4638":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:14609:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:4885:2802":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:4055:8861":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:15509:5043":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"26:269:127":{"crate_id":26,"path":["humantime","date","Error"],"kind":"enum"},"22:1714:5583":{"crate_id":22,"path":["aho_corasick","packed","teddy","runtime","Exec"],"kind":"enum"},"2:8363:4291":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:1075:3903":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:0:2662":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:5538:9207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:15072:8327":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:783:5889":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:5402:9179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:6459:3853":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:46374:4709":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"12:379:5019":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:1537:9374":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:9260:2986":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:49865:4164":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:3279:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:10814:5506":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"21:2949:5691":{"crate_id":21,"path":["regex_syntax","utf8","Utf8Range"],"kind":"struct"},"21:1773:5642":{"crate_id":21,"path":["regex_syntax","ast","ClassPerlKind"],"kind":"enum"},"16:3392:5382":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:2912:5367":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"29:5020:9128":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:46473:4637":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:53380:4383":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"29:4171:9001":{"crate_id":29,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:1644:3962":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:16028:2699":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:2991:5379":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:8639:3030":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:7824:5854":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:3717:4632":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"29:1650:8729":{"crate_id":29,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"20:2238:63194":{"crate_id":20,"path":["regex","literal","imp","LiteralIter"],"kind":"enum"},"17:10571:6520":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"27:189:2373":{"crate_id":27,"path":["termcolor","Buffer"],"kind":"struct"},"1:11156:3828":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"9:927:45491":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:50421:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"22:0:2777":{"crate_id":22,"path":["aho_corasick"],"kind":"module"},"17:12155:6748":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:7663:4012":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:3839:5842":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:12257:3044":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:5213:9073":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:6951:9404":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:12118:6743":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:1190:12221":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:23664:3846":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:1311:5543":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"26:206:127":{"crate_id":26,"path":["humantime","duration","Error"],"kind":"enum"},"2:46328:4430":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"0:707:1896":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Seconds"],"kind":"variant"},"1:3682:2939":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"12:940:3967":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:3743:5503":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12431:6808":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:2751:3886":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11254:5456":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"12:971:3969":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:23137:4376":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"29:1626:8712":{"crate_id":29,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:22602:61729":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"29:5879:9304":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:5093:660":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:10366:6400":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:3734:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"29:5724:9240":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:12507:6818":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:3118:5381":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"27:59:3055":{"crate_id":27,"path":["termcolor","IoStandardStream"],"kind":"enum"},"17:10448:5445":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"20:2962:2351":{"crate_id":20,"path":["regex","re_unicode","Regex"],"kind":"struct"},"1:6319:4100":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:12659:6849":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:7928:4265":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:1236:6401":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:6954:4734":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13306:7056":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11572:6633":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:50182:4584":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:3347:4200":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:2194:3547":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"21:1625:5635":{"crate_id":21,"path":["regex_syntax","ast","Alternation"],"kind":"struct"},"16:5505:5158":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"24:0:1747":{"crate_id":24,"path":["log"],"kind":"module"},"17:13685:7183":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:8132:3789":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"6:6054:9291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"29:1615:8704":{"crate_id":29,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"29:4892:9069":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:48531:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"29:4904:9073":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"22:1457:2948":{"crate_id":22,"path":["aho_corasick","error","ErrorKind"],"kind":"enum"},"1:3658:5869":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:10840:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"5:8391:4747":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"21:2233:5667":{"crate_id":21,"path":["regex_syntax","ast","FlagsItemKind"],"kind":"enum"},"2:53399:7776":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:16003:2677":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:3044:61883":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:48052:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:47495:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:10516:5529":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:11402:3828":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"24:294:1750":{"crate_id":24,"path":["log","Metadata"],"kind":"struct"},"1:15130:4023":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:46111:4439":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:7549:5117":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"21:1931:5650":{"crate_id":21,"path":["regex_syntax","ast","ClassSetItem"],"kind":"enum"},"17:12632:6847":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"21:1370:5614":{"crate_id":21,"path":["regex_syntax","ast","parse","ParserI"],"kind":"struct"},"5:1694:4840":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:539:8555":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"21:1354:5613":{"crate_id":21,"path":["regex_syntax","ast","parse","Parser"],"kind":"struct"},"12:880:3909":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:24052:7967":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"21:2785:5660":{"crate_id":21,"path":["regex_syntax","hir","RepetitionRange"],"kind":"enum"},"2:10447:7651":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:16022:2693":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:3740:4245":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12756:6862":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:45922:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:1607:3810":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7264:5124":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:7378:5113":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"22:1940:6125":{"crate_id":22,"path":["aho_corasick","prefilter","StartBytesTwo"],"kind":"struct"},"16:4890:7298":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7226:5204":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:24250:4623":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:6464:5121":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:5952:4136":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:16017:2688":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:10705:4851":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:12521:6821":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:10804:4040":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:11365:4085":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:6132:9305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"23:137:54008":{"crate_id":23,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"9:686:4880":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"26:305:3020":{"crate_id":26,"path":["humantime","date","Rfc3339Timestamp"],"kind":"struct"},"29:4935:9084":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"21:1346:5612":{"crate_id":21,"path":["regex_syntax","ast","parse","ParserBuilder"],"kind":"struct"},"17:11738:6664":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:14958:5897":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"29:5040:9144":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:9574:5461":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"21:1898:5648":{"crate_id":21,"path":["regex_syntax","ast","ClassBracketed"],"kind":"struct"},"2:50439:3889":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:5789:3873":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"13:232:7943":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:8107:2957":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:7795:4020":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:13506:7109":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"29:4976:9105":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nlmsghdr"],"kind":"struct"},"17:13978:7249":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:0:2660":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:15229:3952":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:10788:6559":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"21:2399:1757":{"crate_id":21,"path":["regex_syntax","hir","print","Writer"],"kind":"struct"},"1:12004:4014":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"10:0:2655":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:14079:4596":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:48795:3749":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:2062:2918":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:6911:9393":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12494:6817":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"12:750:3809":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:3040:9496":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"29:1497:8624":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:12168:6532":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:13279:7653":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:45901:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:5632:5162":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:6357:5183":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:12645:6848":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:3406:3917":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"16:6768:5406":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:14:1881":{"crate_id":2,"path":["core","write"],"kind":"macro"},"20:2967:2874":{"crate_id":20,"path":["regex","re_unicode","CaptureNames"],"kind":"struct"},"22:1537:6053":{"crate_id":22,"path":["aho_corasick","nfa","Compiler"],"kind":"struct"},"5:4643:5846":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13627:7141":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:46468:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:24771:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:626:8608":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"21:2395:6146":{"crate_id":21,"path":["regex_syntax","hir","print","Printer"],"kind":"struct"},"29:3710:8821":{"crate_id":29,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"27:353:2544":{"crate_id":27,"path":["termcolor","ColorSpec"],"kind":"struct"},"21:2205:5665":{"crate_id":21,"path":["regex_syntax","ast","Flags"],"kind":"struct"},"1:10377:7900":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:46290:7686":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"20:2291:6372":{"crate_id":20,"path":["regex","pikevm","Threads"],"kind":"struct"},"16:3091:5428":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"20:2648:2874":{"crate_id":20,"path":["regex","re_bytes","CaptureNames"],"kind":"struct"},"1:12744:5893":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:696:3337":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"29:3731:8831":{"crate_id":29,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"20:2257:6367":{"crate_id":20,"path":["regex","literal","imp","SingleByteSet"],"kind":"struct"},"2:24185:39882":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:1526:8617":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:3364:4208":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"29:3819:8872":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:6126:5176":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:5672:5163":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10801:6561":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:1441:3971":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:46782:2935":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:1748:8746":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:9404:6391":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:4699:5846":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:14626:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:10295:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:3376:4212":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:3342:3001":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:8446:3909":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:5522:5159":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4402:8982":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"12:843:3961":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:46621:4334":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:51901:7728":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:11070:2957":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"14:194:46063":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:3320:5429":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"20:2512:2886":{"crate_id":20,"path":["regex","re_builder","unicode","RegexBuilder"],"kind":"struct"},"21:2012:5654":{"crate_id":21,"path":["regex_syntax","ast","ClassSetBinaryOpKind"],"kind":"enum"},"2:47968:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:2153:670":{"crate_id":2,"path":["core","mem","forget"],"kind":"function"},"16:6999:5195":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"12:1203:5014":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:12247:6760":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"20:2166:6358":{"crate_id":20,"path":["regex","input","CharInput"],"kind":"struct"},"29:5748:9257":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:56403:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:2375:6377":{"crate_id":20,"path":["regex","prog","InstSplit"],"kind":"struct"},"5:4306:3810":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:6004:9263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:4321:8945":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:10313:2629":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:12158:3933":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"22:1817:6104":{"crate_id":22,"path":["aho_corasick","packed","teddy","runtime","Mask256"],"kind":"struct"},"29:5993:9373":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","termios2"],"kind":"struct"},"2:53556:7787":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:7295:5126":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:49842:4160":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:10502:6513":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"12:895:5004":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:11114:3809":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"22:1894:6115":{"crate_id":22,"path":["aho_corasick","prefilter","RareByteOffset"],"kind":"struct"},"20:1785:6303":{"crate_id":20,"path":["regex","compile","Patch"],"kind":"struct"},"2:32348:60935":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"20:2219:63192":{"crate_id":20,"path":["regex","literal","imp","Matcher"],"kind":"enum"},"25:0:2653":{"crate_id":25,"path":["cfg_if"],"kind":"module"},"2:51821:7726":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:46503:4639":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:4448:7285":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"20:318:63198":{"crate_id":20,"path":["regex","dfa","InstPtrs"],"kind":"struct"},"24:275:1751":{"crate_id":24,"path":["log","Record"],"kind":"struct"},"6:6247:9377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"29:1513:8632":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:11026:6576":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:9005:47717":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"23:1010:4161":{"crate_id":23,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:1041:3791":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:16016:2687":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:12480:6815":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"3:321:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:49042:4731":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:10427:5890":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:12568:6828":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11358:5509":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"20:2021:5584":{"crate_id":20,"path":["regex","exec","ExecNoSync"],"kind":"struct"},"1:11268:3957":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"9:603:7959":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"27:177:2505":{"crate_id":27,"path":["termcolor","BufferWriter"],"kind":"struct"},"16:3195:5372":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:24222:4668":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:7279:5415":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:4215:3908":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:13963:7248":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:13054:4159":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:14804:3502":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:3339:4049":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:49326:4545":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"29:1580:8676":{"crate_id":29,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:6682:5122":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:48516:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"20:1766:6296":{"crate_id":20,"path":["regex","backtrack","Cache"],"kind":"struct"},"6:5201:9069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:6101:5104":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"0:474:1788":{"crate_id":0,"path":["env_logger","Logger"],"kind":"struct"},"16:6569:5399":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:12735:4561":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"27:97:3060":{"crate_id":27,"path":["termcolor","WriterInner"],"kind":"enum"},"2:48803:7701":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:3048:61882":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:2155:3809":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:432:1875":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:12038:4017":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"21:0:2776":{"crate_id":21,"path":["regex_syntax"],"kind":"module"},"2:53480:7783":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:11428:4083":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:12795:4565":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:9065:47719":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:4142:8903":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:24873:4610":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:13532:7119":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:11082:5460":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:1428:3810":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:24805:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"21:2581:5640":{"crate_id":21,"path":["regex_syntax","hir","Class"],"kind":"enum"},"1:11250:3834":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"6:1740:8742":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:49894:4170":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:8410:4834":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:11499:6616":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:10140:5482":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:46980:3035":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"29:5903:9315":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"22:1825:63849":{"crate_id":22,"path":["aho_corasick","prefilter","Candidate"],"kind":"enum"},"17:13590:7133":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"21:2599:5645":{"crate_id":21,"path":["regex_syntax","hir","ClassUnicode"],"kind":"struct"},"1:3325:4045":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:13817:61230":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:5375:9170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:8839:7809":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:12302:2999":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:3506:5377":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:3351:4055":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:24106:4466":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:2159:3434":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:10618:3531":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:3172:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:6691:5192":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:10292:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"7:38:45387":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"14:216:46069":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11665:6649":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:5741:3870":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"23:840:5569":{"crate_id":23,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:12773:7884":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"2:51696:4396":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:6899:9391":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:53454:7781":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:5407:5152":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"23:867:5570":{"crate_id":23,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"21:2484:2948":{"crate_id":21,"path":["regex_syntax","hir","ErrorKind"],"kind":"enum"},"29:4866:9054":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:6110:5147":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"29:506:8553":{"crate_id":29,"path":["libc","unix","timeval"],"kind":"struct"},"1:10452:5892":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:52589:4403":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:12552:6827":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"21:2044:5656":{"crate_id":21,"path":["regex_syntax","ast","AssertionKind"],"kind":"enum"},"1:2166:3909":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"29:4223:9018":{"crate_id":29,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"23:1039:5561":{"crate_id":23,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:2866:5366":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:3581:4253":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:6437:3850":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:4088:8875":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:2456:3507":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"27:95:3059":{"crate_id":27,"path":["termcolor","BufferedStandardStream"],"kind":"struct"},"1:14601:4042":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:294:6395":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:6208:5179":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"29:1608:8700":{"crate_id":29,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:47553:3434":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"20:2929:2873":{"crate_id":20,"path":["regex","re_trait","CaptureMatches"],"kind":"struct"},"17:12917:6874":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:9639:55851":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"21:2155:5662":{"crate_id":21,"path":["regex_syntax","ast","GroupKind"],"kind":"enum"},"22:1517:6082":{"crate_id":22,"path":["aho_corasick","nfa","IterTransitionsMut"],"kind":"struct"},"17:11714:6660":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:681:6400":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"20:2299:63188":{"crate_id":20,"path":["regex","pikevm","FollowEpsilon"],"kind":"enum"},"22:1350:6064":{"crate_id":22,"path":["aho_corasick","classes","ByteClassRepresentatives"],"kind":"struct"},"16:6949:5410":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"23:963:5554":{"crate_id":23,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4127:8896":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13788:7203":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:15970:6296":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:510:6397":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:15353:4081":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:4080:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"23:893:6036":{"crate_id":23,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:23676:61361":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:6688:4792":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:10266:5437":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"20:2190:6274":{"crate_id":20,"path":["regex","input","Char"],"kind":"struct"},"17:13465:7100":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:4332:8951":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"29:1640:8723":{"crate_id":29,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:10575:3746":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:9766:5887":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"21:2867:5687":{"crate_id":21,"path":["regex_syntax","unicode","CaseFoldError"],"kind":"struct"},"2:49530:4563":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:10458:6442":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:10081:5480":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:2508:4318":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"20:2918:2878":{"crate_id":20,"path":["regex","re_trait","Matches"],"kind":"struct"},"2:55967:4325":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"22:1560:6087":{"crate_id":22,"path":["aho_corasick","nfa","QueuedSet"],"kind":"struct"},"18:867:5561":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7195:5201":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:46581:4331":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:6640:9386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:23770:3848":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:7119:5100":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"20:2389:6311":{"crate_id":20,"path":["regex","prog","EmptyLook"],"kind":"enum"},"24:195:2190":{"crate_id":24,"path":["log","Level"],"kind":"enum"},"2:52372:4394":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:3920:8785":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:1488:3963":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:6634:60581":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:47622:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:6744:5404":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:3648:2944":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:46420:4711":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:6126:9304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:3772:7277":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:3522:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10117:5538":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:9886:6492":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:13547:7123":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:12582:6830":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"21:1805:5644":{"crate_id":21,"path":["regex_syntax","ast","ClassAsciiKind"],"kind":"enum"},"29:4111:8974":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5475:9480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:4921:2803":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:22549:61357":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:6577:5189":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:9933:6493":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:11506:3132":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"23:1069:5563":{"crate_id":23,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:607:8598":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:7843:5210":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:3287:2797":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:13963:60961":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:8929:47716":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:50190:4586":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:13912:7237":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:32159:4663":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:6787:3883":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:50023:4174":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:730:63178":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:25243:4478":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:5415:2918":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:4852:7297":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6269:5182":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:4269:1030":{"crate_id":1,"path":["std","io","prelude"],"kind":"module"},"2:53465:7782":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:49420:4262":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:50058:4177":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"20:2067:63193":{"crate_id":20,"path":["regex","exec","MatchLiteralType"],"kind":"enum"},"6:5579:9233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:1091:5842":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:5727:3867":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:1680:8712":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:53050:4411":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"13:120:46035":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"20:2687:2879":{"crate_id":20,"path":["regex","re_bytes","NoExpand"],"kind":"struct"},"6:4148:8905":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"12:2045:3909":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"21:1417:6144":{"crate_id":21,"path":["regex_syntax","ast","print","PrinterBuilder"],"kind":"struct"},"21:2443:6242":{"crate_id":21,"path":["regex_syntax","hir","translate","TranslatorI"],"kind":"struct"},"2:52325:4390":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"23:1030:5560":{"crate_id":23,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:1944:2192":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:5416:9471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"29:3725:8828":{"crate_id":29,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:12010:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:6859:3856":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:46312:4428":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"29:1686:8742":{"crate_id":29,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:11411:4536":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:9763:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:14317:3531":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:50362:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:4434:2952":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:3018:5369":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:3338:5356":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:7111:5854":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:2433:3500":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:157:40529":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"29:591:8600":{"crate_id":29,"path":["libc","unix","itimerval"],"kind":"struct"},"17:10673:47906":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13272:7053":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"13:0:2651":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:48635:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"23:0:2662":{"crate_id":23,"path":["memchr"],"kind":"module"},"17:12771:6589":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:5833:4740":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5298:9118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:3429:5095":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"22:1868:6110":{"crate_id":22,"path":["aho_corasick","prefilter","RareBytesBuilder"],"kind":"struct"},"9:722:4883":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"9:469:7944":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:1721:8736":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8646:3031":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:49046:4730":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:6265:9380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:1507:3967":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:15975:12222":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"29:3813:8870":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5207:9072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"0:572:1960":{"crate_id":0,"path":["env_logger","init"],"kind":"function"},"21:1982:5652":{"crate_id":21,"path":["regex_syntax","ast","ClassSetUnion"],"kind":"struct"},"1:15019:4016":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:24121:7663":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:5605:4251":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:6117:9301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:24093:4465":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:46761:4349":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"21:1423:6146":{"crate_id":21,"path":["regex_syntax","ast","print","Printer"],"kind":"struct"},"1:15045:55679":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"22:1363:5706":{"crate_id":22,"path":["aho_corasick","dfa","DFA"],"kind":"enum"},"2:8448:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:24737:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:16019:2690":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:2027:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:4723:2394":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:5456:5155":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"12:432:5017":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"21:2858:127":{"crate_id":21,"path":["regex_syntax","unicode","Error"],"kind":"enum"},"1:1501:3966":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"12:869:3908":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"29:4070:8951":{"crate_id":29,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:48136:3029":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:6424:5185":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:13130:4166":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12182:6752":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:3525:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:5111:2791":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"20:1801:63196":{"crate_id":20,"path":["regex","compile","MaybeInst"],"kind":"enum"},"2:51253:7717":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4075:8870":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:11434:4102":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"20:2481:2886":{"crate_id":20,"path":["regex","re_builder","bytes","RegexBuilder"],"kind":"struct"},"17:10331:5482":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"12:2280:3973":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:9343:3844":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:11354:4083":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:23470:17502":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"21:1790:5643":{"crate_id":21,"path":["regex_syntax","ast","ClassAscii"],"kind":"struct"},"2:52006:4422":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:6964:9494":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"20:1953:6331":{"crate_id":20,"path":["regex","dfa","EmptyFlags"],"kind":"struct"},"29:4046:8941":{"crate_id":29,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"20:1898:6268":{"crate_id":20,"path":["regex","dfa","Transitions"],"kind":"struct"},"2:38808:3888":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"20:1820:63195":{"crate_id":20,"path":["regex","compile","InstHole"],"kind":"enum"},"22:1481:3992":{"crate_id":22,"path":["aho_corasick","nfa","State"],"kind":"struct"},"22:1764:6094":{"crate_id":22,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask128"],"kind":"struct"},"6:4061:8863":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11555:6631":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"20:3015:2873":{"crate_id":20,"path":["regex","re_unicode","CaptureMatches"],"kind":"struct"},"5:8203:3434":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"20:1995:6336":{"crate_id":20,"path":["regex","dfa","StateMap"],"kind":"struct"},"22:1694:4285":{"crate_id":22,"path":["aho_corasick","packed","teddy","compile","Mask"],"kind":"struct"},"16:6718:5402":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"29:5075:9165":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13898:7230":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"29:148:40530":{"crate_id":29,"path":["libc","unix","fpos_t"],"kind":"enum"},"21:2274:5620":{"crate_id":21,"path":["regex_syntax","either","Either"],"kind":"enum"},"21:1569:5634":{"crate_id":21,"path":["regex_syntax","ast","Comment"],"kind":"struct"},"16:5360:5150":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"18:791:5554":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:16021:2692":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:2888:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:5735:3869":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"16:5580:5347":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:9861:5889":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:10407:5468":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:10864:6562":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:22877:4287":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"12:1162:5012":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:46792:4351":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:6964:3139":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:3492:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:1215:4842":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"29:4117:8977":{"crate_id":29,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"12:183:5020":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:51147:4387":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:9174:7809":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"5:1486:3974":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:10489:5528":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:3772:3810":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:12327:6772":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:24013:7657":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"6:6893:9390":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"20:2977:2882":{"crate_id":20,"path":["regex","re_unicode","Split"],"kind":"struct"},"20:2789:2890":{"crate_id":20,"path":["regex","re_set","unicode","SetMatchesIter"],"kind":"struct"},"6:6031:9273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13986:7252":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:7073:5196":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"29:3854:8891":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:6790:3850":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:2171:3910":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"21:2250:4119":{"crate_id":21,"path":["regex_syntax","ast","Flag"],"kind":"enum"},"6:4386:8979":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:6940:9400":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4410:8986":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"29:5870:9301":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"12:1703:5027":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:3522:6406":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:4198:8916":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:11835:6693":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:10061:6502":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:13564:7127":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"20:2273:6325":{"crate_id":20,"path":["regex","pikevm","Fsm"],"kind":"struct"},"2:3380:4214":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:38871:3399":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:5837:4742":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:22930:3848":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:15201:3945":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11434:6596":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:53192:4415":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:10001:47769":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"29:4078:8955":{"crate_id":29,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:3877:8757":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:49584:4536":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:11519:6626":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:521:8550":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:46998:2958":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:6557:3900":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"27:105:3061":{"crate_id":27,"path":["termcolor","WriterInnerLock"],"kind":"enum"},"5:8362:9497":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:12795:6872":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"29:586:8598":{"crate_id":29,"path":["libc","unix","sigval"],"kind":"struct"},"2:23139:4285":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"22:1383:6061":{"crate_id":22,"path":["aho_corasick","dfa","Standard"],"kind":"struct"},"21:2337:5685":{"crate_id":21,"path":["regex_syntax","hir","interval","IntervalSet"],"kind":"struct"},"29:3946:8917":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4135:8901":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"29:3865:8896":{"crate_id":29,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:8488:3931":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"12:1666:5025":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:13154:7021":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:15754:5898":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:11993:6720":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:4512:2950":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:23082:3848":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12982:6925":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:49448:2936":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12095:6737":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:10303:2626":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:5421:5153":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:3370:3910":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:48279:2627":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:15122:7897":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:16002:2676":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:4762:7294":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:49251:4539":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:6922:9397":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"20:2417:6383":{"crate_id":20,"path":["regex","prog","InstChar"],"kind":"struct"},"1:10957:4031":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:12525:2448":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"22:1645:5739":{"crate_id":22,"path":["aho_corasick","packed","pattern","Patterns"],"kind":"struct"},"17:13240:7041":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:1551:8624":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"20:2678:2881":{"crate_id":20,"path":["regex","re_bytes","ReplacerRef"],"kind":"struct"},"16:7928:4305":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:1694:8723":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"0:580:1828":{"crate_id":0,"path":["env_logger","from_env"],"kind":"function"},"2:48811:3748":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:16025:2696":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"20:2028:5593":{"crate_id":20,"path":["regex","exec","ExecNoSyncStr"],"kind":"struct"},"20:1931:3992":{"crate_id":20,"path":["regex","dfa","State"],"kind":"struct"},"21:1528:5619":{"crate_id":21,"path":["regex_syntax","ast","Span"],"kind":"struct"},"17:12307:6771":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"29:1522:8638":{"crate_id":29,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:49300:4544":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"20:2283:6296":{"crate_id":20,"path":["regex","pikevm","Cache"],"kind":"struct"},"2:32334:3550":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10477:5526":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:6491:5186":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:5433:5154":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"21:348:5606":{"crate_id":21,"path":["regex_syntax","ast","visitor","ClassInduct"],"kind":"enum"},"17:11640:6646":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:52246:4402":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:10242:2394":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:4020:8846":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:12053:4018":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"20:2099:6354":{"crate_id":20,"path":["regex","exec","ProgramCacheInner"],"kind":"struct"},"17:11616:6642":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"20:2382:6380":{"crate_id":20,"path":["regex","prog","InstEmptyLook"],"kind":"struct"},"1:8289:3789":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"16:5384:5151":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:10540:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:13939:55856":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"22:1607:1802":{"crate_id":22,"path":["aho_corasick","packed","api","Builder"],"kind":"struct"},"5:2330:4844":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:6240:9482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:52085:4410":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:10934:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:47926:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:14588:7896":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:50194:4587":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:46641:1755":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"20:2081:63189":{"crate_id":20,"path":["regex","exec","MatchNfaType"],"kind":"enum"},"2:46059:4306":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:1733:4095":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:6685:3870":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"20:2315:5838":{"crate_id":20,"path":["regex","pool","PoolGuard"],"kind":"struct"},"21:1758:5641":{"crate_id":21,"path":["regex_syntax","ast","ClassPerl"],"kind":"struct"},"23:947:6035":{"crate_id":23,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"2:51673:4393":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"24:288:2816":{"crate_id":24,"path":["log","RecordBuilder"],"kind":"struct"},"1:1472:3908":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"22:1598:5737":{"crate_id":22,"path":["aho_corasick","packed","api","ForceAlgorithm"],"kind":"enum"},"2:48619:3406":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:24635:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"20:2578:2885":{"crate_id":20,"path":["regex","re_builder","set_unicode","RegexSetBuilder"],"kind":"struct"},"1:11120:2934":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"18:645:5567":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12051:6727":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"21:2083:5658":{"crate_id":21,"path":["regex_syntax","ast","RepetitionOp"],"kind":"struct"},"1:16011:2684":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"20:1236:2875":{"crate_id":20,"path":["regex","re_bytes","Captures"],"kind":"struct"},"6:672:40861":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:3365:5357":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:9594:5885":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:3951:3909":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"5:8313:4638":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:10299:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:5653:3898":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:4417:7284":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11337:5524":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:7406:5112":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"22:1785:6097":{"crate_id":22,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask128"],"kind":"struct"},"5:8197:3434":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:53341:4418":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:11098:2931":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:4614:7289":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:13422:4096":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"29:605:8608":{"crate_id":29,"path":["libc","unix","servent"],"kind":"struct"},"1:15092:2998":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:50398:4594":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"23:939:6046":{"crate_id":23,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"9:692:4882":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"5:4443:3809":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"22:1746:6091":{"crate_id":22,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask128"],"kind":"struct"},"1:11668:3809":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:3417:4227":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:10844:5482":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"0:576:2032":{"crate_id":0,"path":["env_logger","init_from_env"],"kind":"function"},"1:15412:4089":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:50048:4176":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:57699:7796":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"21:2456:5665":{"crate_id":21,"path":["regex_syntax","hir","translate","Flags"],"kind":"struct"},"2:2957:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"22:1656:5756":{"crate_id":22,"path":["aho_corasick","packed","pattern","PatternIter"],"kind":"struct"},"1:9060:3039":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5363:9165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:618:8603":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10599:6522":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:6013:9264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:49289:4543":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"20:2908:5587":{"crate_id":20,"path":["regex","re_trait","SubCapturesPosIter"],"kind":"struct"},"21:1383:5615":{"crate_id":21,"path":["regex_syntax","ast","parse","GroupState"],"kind":"enum"},"1:12282:2479":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:1157:12220":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:10041:6500":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:10211:6508":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:47528:3433":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:48850:7707":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"27:0:1555":{"crate_id":27,"path":["termcolor"],"kind":"module"},"2:5631:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:51285:4400":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:52796:4423":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"9:1056:4942":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"24:164:2818":{"crate_id":24,"path":["log","NopLogger"],"kind":"struct"},"0:709:1899":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Millis"],"kind":"variant"},"1:10566:3800":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"21:1859:5646":{"crate_id":21,"path":["regex_syntax","ast","ClassUnicodeKind"],"kind":"enum"},"23:877:6035":{"crate_id":23,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13924:7239":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"20:2938:2877":{"crate_id":20,"path":["regex","re_unicode","Match"],"kind":"struct"},"1:7932:55855":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"22:1752:6092":{"crate_id":22,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask256"],"kind":"struct"},"21:2379:5636":{"crate_id":21,"path":["regex_syntax","hir","literal","Literal"],"kind":"struct"},"29:1673:8739":{"crate_id":29,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:533:8324":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:5373:4081":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:11658:3995":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"18:812:5556":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"20:2129:2791":{"crate_id":20,"path":["regex","expand","Ref"],"kind":"enum"},"29:5885:9305":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:46299:4427":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:49754:4573":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:10799:1750":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"22:1336:2373":{"crate_id":22,"path":["aho_corasick","buffer","Buffer"],"kind":"struct"},"17:11118:47724":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:48094:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"20:1572:5581":{"crate_id":20,"path":["regex","re_unicode","CapturesDebug"],"kind":"struct"},"2:2219:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:13394:7080":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:5927:5172":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"21:1583:5607":{"crate_id":21,"path":["regex_syntax","ast","Ast"],"kind":"enum"},"20:1748:6223":{"crate_id":20,"path":["regex","backtrack","Bounded"],"kind":"struct"},"22:1278:5701":{"crate_id":22,"path":["aho_corasick","ahocorasick","StreamChunkIter"],"kind":"struct"},"1:8908:3035":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:12028:6724":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13554:7124":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:23774:4286":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:8463:4772":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:9280:6481":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"29:5087:9170":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13370:7075":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:10307:2627":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:3907:8775":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:10587:1802":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:4315:8942":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"29:4124:8979":{"crate_id":29,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:11206:4530":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"29:4216:9015":{"crate_id":29,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"29:3704:8819":{"crate_id":29,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:8388:3992":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"16:5231:7303":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:13810:7208":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"27:78:3056":{"crate_id":27,"path":["termcolor","IoStandardStreamLock"],"kind":"enum"},"29:3758:8846":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:634:8613":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:3329:3809":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13582:7131":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:53408:7777":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:5647:3896":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:5295:46140":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"29:524:8558":{"crate_id":29,"path":["libc","unix","rusage"],"kind":"struct"},"17:9476:6393":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:4509:9015":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"21:2357:5686":{"crate_id":21,"path":["regex_syntax","hir","interval","IntervalSetIter"],"kind":"struct"},"16:4506:7287":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:5719:3868":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:12010:6723":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:15331:3836":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:13574:7130":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"12:1784:5840":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:47758:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:586:8587":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:48549:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:3648:4631":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:775:6035":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4425:9105":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"15:248:5035":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:13961:4015":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:6928:9398":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:49279:4542":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:5273:5359":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:4666:2926":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:12073:6736":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"21:1668:5637":{"crate_id":21,"path":["regex_syntax","ast","LiteralKind"],"kind":"enum"},"6:6077:9292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:11685:3998":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:51180:4420":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:13659:3960":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"29:3968:8919":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:3883:8758":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:5444:9478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:1459:3962":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:52163:4417":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:1633:3972":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"29:6013:9377":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:9659:63174":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"29:4161:8995":{"crate_id":29,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:15474:7899":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:22536:3389":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:51051:7716":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"23:170:54010":{"crate_id":23,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:10311:2630":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"22:1934:6124":{"crate_id":22,"path":["aho_corasick","prefilter","StartBytesOne"],"kind":"struct"},"29:5757:9263":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"22:1467:5708":{"crate_id":22,"path":["aho_corasick","nfa","NFA"],"kind":"struct"},"22:1268:5700":{"crate_id":22,"path":["aho_corasick","ahocorasick","StreamFindIter"],"kind":"struct"},"1:5981:4140":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"12:856:3962":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"6:3987:8828":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"12:2412:9457":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:13402:7082":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:3972:8821":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11915:6698":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:10710:2934":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"1:3194:4041":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:3297:3398":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"29:550:8578":{"crate_id":29,"path":["libc","unix","hostent"],"kind":"struct"},"16:6087:5106":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:13858:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:9979:4517":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4116:8891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"29:5847:9294":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:13073:4161":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"12:2269:3972":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:668:5569":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:50354:7714":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:9259:2987":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:6252:5181":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"12:2404:63165":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:5314:6480":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"29:3936:8916":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"12:353:9602":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"24:357:2822":{"crate_id":24,"path":["log","ParseLevelError"],"kind":"struct"},"17:10377:5472":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:5156:2792":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:49512:4562":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"29:4837:9030":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:13084:4163":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:8263:2845":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:2187:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:11245:4531":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6518:5187":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:11794:6682":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:7975:5871":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"6:1626:8671":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"12:1238:5015":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:6136:5148":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:24:600":{"crate_id":2,"path":["core","env"],"kind":"macro"},"9:157:4899":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"29:565:8587":{"crate_id":29,"path":["libc","unix","pollfd"],"kind":"struct"},"1:7507:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:5039:2785":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:10435:6511":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"12:162:5016":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:32299:3549":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:3038:2620":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"29:4008:4101":{"crate_id":29,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:4526:9469":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:3241:5374":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"29:492:6141":{"crate_id":29,"path":["libc","unix","group"],"kind":"struct"},"6:5436:9476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:1634:8676":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:13609:7138":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"23:809:6035":{"crate_id":23,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"0:0:2054":{"crate_id":0,"path":["env_logger"],"kind":"module"},"16:4386:7283":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:11045:47723":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:2816:5384":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:5584:12223":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:6672:2977":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:7670:3441":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:51099:4407":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11328:6589":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:12262:6763":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:2843:5365":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"29:5979:9364":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:13733:7184":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:8380:3789":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:24839:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"21:2118:5660":{"crate_id":21,"path":["regex_syntax","ast","RepetitionRange"],"kind":"enum"},"29:1490:8622":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:886:5562":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"29:4053:8942":{"crate_id":29,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:16015:2686":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:1712:8730":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:53533:7786":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:3396:3915":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"12:2072:3913":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:4000:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"29:4094:8963":{"crate_id":29,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"20:412:6270":{"crate_id":20,"path":["regex","dfa","TransitionsRow"],"kind":"struct"},"2:11318:4533":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4373:8974":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:9759:6490":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"12:2419:2844":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:22564:61357":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:3758:4249":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"22:1686:6053":{"crate_id":22,"path":["aho_corasick","packed","teddy","compile","Compiler"],"kind":"struct"},"17:9799:6491":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:6413:5031":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"22:1670:5740":{"crate_id":22,"path":["aho_corasick","packed","rabinkarp","RabinKarp"],"kind":"struct"},"1:14236:2951":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:22840:4277":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"29:1567:8669":{"crate_id":29,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"29:4962:9104":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:22604:61725":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13942:7245":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:3431:4218":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:9627:55854":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"14:244:7558":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:32696:3552":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:22751:4284":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:22940:3847":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:5544:9208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"29:4034:8934":{"crate_id":29,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:8738:3045":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"9:900:9460":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:4471:2508":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:4823:7296":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:11726:6663":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"22:1879:6057":{"crate_id":22,"path":["aho_corasick","prefilter","ByteSet"],"kind":"struct"},"17:12725:6856":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"22:1615:4161":{"crate_id":22,"path":["aho_corasick","packed","api","Searcher"],"kind":"struct"},"29:4084:8957":{"crate_id":29,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:5237:9082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11304:47725":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:136:54008":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"22:1451:127":{"crate_id":22,"path":["aho_corasick","error","Error"],"kind":"struct"},"23:1058:5562":{"crate_id":23,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:14936:5895":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:0:1331":{"crate_id":1,"path":["std"],"kind":"module"},"5:69:4771":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:14808:3899":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:9245:5438":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"26:143:2480":{"crate_id":26,"path":["humantime","date","format_rfc3339_micros"],"kind":"function"},"29:1484:8619":{"crate_id":29,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:7453:5842":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"22:1706:5742":{"crate_id":22,"path":["aho_corasick","packed","teddy","runtime","Teddy"],"kind":"struct"},"29:5004:9118":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:5290:9113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"22:1297:5702":{"crate_id":22,"path":["aho_corasick","ahocorasick","StreamChunk"],"kind":"enum"},"2:3435:4235":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:15185:3944":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"18:637:6035":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:46682:4342":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:51721:4378":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:5034:2784":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:6150:9315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"23:955:6035":{"crate_id":23,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:3559:4243":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"22:1663:4158":{"crate_id":22,"path":["aho_corasick","packed","pattern","Pattern"],"kind":"struct"},"20:3042:2879":{"crate_id":20,"path":["regex","re_unicode","NoExpand"],"kind":"struct"},"17:11147:6581":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:47842:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:4740:4300":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:11208:3832":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:5308:9128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:46691:4340":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:24035:4470":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"27:325:2543":{"crate_id":27,"path":["termcolor","ColorChoice"],"kind":"enum"},"1:4400:4068":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:6861:3858":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:3337:2778":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:49745:4572":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:7467:5110":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:11180:3829":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:3368:2779":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"22:1527:1802":{"crate_id":22,"path":["aho_corasick","nfa","Builder"],"kind":"struct"},"6:5226:9074":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"29:3956:8918":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"29:6435:9389":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:3274:3079":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:14103:5894":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:7894:5145":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:49761:4574":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:13933:7243":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4098:8882":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:1518:3968":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:4515:4824":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:14130:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"16:7024:5413":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:6202:9354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:5968:4139":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:5029:7302":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:5788:5842":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:7792:4019":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:45876:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:50344:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:10701:3502":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"20:2424:6384":{"crate_id":20,"path":["regex","prog","InstRanges"],"kind":"struct"},"21:1653:5636":{"crate_id":21,"path":["regex_syntax","ast","Literal"],"kind":"struct"},"2:14242:2992":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6605:5123":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"29:1572:8671":{"crate_id":29,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:6976:9405":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"20:1790:4810":{"crate_id":20,"path":["regex","compile","Hole"],"kind":"enum"},"1:5376:4082":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:1674:3965":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"20:2772:2887":{"crate_id":20,"path":["regex","re_set","unicode","RegexSet"],"kind":"struct"},"2:8367:4293":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"12:952:3968":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"21:2891:63242":{"crate_id":21,"path":["regex_syntax","unicode","CanonicalClassQuery"],"kind":"enum"},"1:11615:3994":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:4179:8915":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"21:1406:5617":{"crate_id":21,"path":["regex_syntax","ast","parse","NestLimiter"],"kind":"struct"},"0:473:1763":{"crate_id":0,"path":["env_logger","DEFAULT_WRITE_STYLE_ENV"],"kind":"constant"},"21:1881:5647":{"crate_id":21,"path":["regex_syntax","ast","ClassUnicodeOpKind"],"kind":"enum"},"1:6082:4091":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"21:1451:2948":{"crate_id":21,"path":["regex_syntax","ast","ErrorKind"],"kind":"enum"},"6:4308:8941":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:1302:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"28:8:2542":{"crate_id":28,"path":["atty","Stream"],"kind":"enum"},"17:11378:5508":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:4287:8929":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"20:2777:2888":{"crate_id":20,"path":["regex","re_set","unicode","SetMatches"],"kind":"struct"},"17:12946:6894":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:53302:4398":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:53419:7778":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"20:1888:6320":{"crate_id":20,"path":["regex","dfa","CacheInner"],"kind":"struct"},"17:11001:6574":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:10558:6518":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:2921:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:24169:39873":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:7042:5414":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:12846:4530":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:5960:5354":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:11086:2929":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:1497:3965":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:5717:5165":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:15391:4082":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"21:2651:5678":{"crate_id":21,"path":["regex_syntax","hir","ClassBytesIter"],"kind":"struct"},"17:12783:6865":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4012:8844":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:46561:7692":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:12023:4016":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:5971:9240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:56364:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49405:4642":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"12:1682:5026":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:3341:4050":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:894:3798":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:7870:5115":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:10305:2628":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:11674:3997":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:5244:9084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:9809:63170":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:4379:8977":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:46052:4305":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"16:3604:6410":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:48010:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"21:2715:5661":{"crate_id":21,"path":["regex_syntax","hir","Group"],"kind":"struct"},"14:250:7559":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"26:237:121":{"crate_id":26,"path":["humantime","wrapper","Duration"],"kind":"struct"},"1:12262:2998":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:14643:55673":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:1912:41835":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:5766:5168":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:7342:5142":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:10309:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"12:2398:9455":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"29:4991:9112":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"21:2415:6239":{"crate_id":21,"path":["regex_syntax","hir","translate","Translator"],"kind":"struct"},"20:1882:6296":{"crate_id":20,"path":["regex","dfa","Cache"],"kind":"struct"},"2:49361:4548":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:5797:3875":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"22:1901:6116":{"crate_id":22,"path":["aho_corasick","prefilter","RareBytesOne"],"kind":"struct"},"29:3917:8915":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:9729:63175":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:8027:3789":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"5:1195:63144":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"18:621:5698":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:2889:5385":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:49959:4172":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:5208:2795":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6731:5403":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4208:8917":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"23:917:63179":{"crate_id":23,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"27:426:3066":{"crate_id":27,"path":["termcolor","ParseColorErrorKind"],"kind":"enum"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:12467:6813":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:10028:6499":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:10677:3975":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:4538:9026":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:9649:6488":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"29:3615:8757":{"crate_id":29,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"29:4996:9113":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:7786:5119":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:12408:6807":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:5101:2790":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:49736:4571":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:9839:5482":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"20:2612:2878":{"crate_id":20,"path":["regex","re_bytes","Matches"],"kind":"struct"},"22:1947:6126":{"crate_id":22,"path":["aho_corasick","prefilter","StartBytesThree"],"kind":"struct"},"0:32:1753":{"crate_id":0,"path":["env_logger","filter"],"kind":"module"},"2:24703:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:1597:3809":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"29:4898:9072":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:13587:1771":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:11847:6696":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"12:933:3966":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"20:1294:2880":{"crate_id":20,"path":["regex","re_bytes","Replacer"],"kind":"trait"},"2:13893:7655":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"22:1239:5554":{"crate_id":22,"path":["aho_corasick","ahocorasick","FindIter"],"kind":"struct"},"22:1423:4033":{"crate_id":22,"path":["aho_corasick","dfa","Repr"],"kind":"struct"},"17:13163:7025":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:3310:2983":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:3182:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:8121:4811":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"29:3766:8849":{"crate_id":29,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:3172:5371":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:3960:8818":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:12685:6851":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:12735:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:1651:3974":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:16029:2700":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:9718:4075":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"21:1639:4740":{"crate_id":21,"path":["regex_syntax","ast","Concat"],"kind":"struct"},"5:7849:5859":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7216:5203":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:1530:3970":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:8146:61856":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"20:1841:6315":{"crate_id":20,"path":["regex","compile","SuffixCacheEntry"],"kind":"struct"},"21:2511:5602":{"crate_id":21,"path":["regex_syntax","hir","Hir"],"kind":"struct"},"12:472:63161":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:4473:2953":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"20:2106:6355":{"crate_id":20,"path":["regex","expand","CaptureRef"],"kind":"struct"},"29:6519:9390":{"crate_id":29,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:5855:5171":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:13054:6984":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:1939:3909":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:49260:4540":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:46397:4710":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:11100:5462":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"20:2621:2873":{"crate_id":20,"path":["regex","re_bytes","CaptureMatches"],"kind":"struct"},"24:238:2815":{"crate_id":24,"path":["log","MaybeStaticStr"],"kind":"enum"},"16:4671:7291":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"29:1552:8657":{"crate_id":29,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:13172:7026":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:10529:6514":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:3488:5378":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:4790:7295":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:8106:2993":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:50228:3005":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"17:9769:63171":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:11696:6659":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"29:1710:8751":{"crate_id":29,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:51211:4408":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:9162:5457":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:1618:3434":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:46730:4346":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:13477:7101":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"29:5830:9292":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:49371:4549":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"12:2036:3434":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:1621:8669":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"29:4025:8929":{"crate_id":29,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:11957:4552":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"29:4138:8986":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"29:4917:9074":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:8887:4264":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:10925:3848":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:8180:2782":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"21:1395:5616":{"crate_id":21,"path":["regex_syntax","ast","parse","ClassState"],"kind":"enum"},"1:13786:4022":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:10938:6569":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:7420:5130":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"5:4242:5842":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:5500:4089":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6072:5127":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:6176:5178":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:11678:6650":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"23:1002:5558":{"crate_id":23,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:13282:7054":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:923:4809":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"29:4130:8982":{"crate_id":29,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"20:2045:63190":{"crate_id":20,"path":["regex","exec","MatchType"],"kind":"enum"},"2:8400:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:6905:9392":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:4477:7286":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:13782:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:15498:5043":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"27:412:3065":{"crate_id":27,"path":["termcolor","ParseColorError"],"kind":"struct"},"1:16005:2679":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"18:783:6035":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:12247:3036":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:16023:2694":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:3218:5373":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:12772:4564":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:1017:3789":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"0:734:1802":{"crate_id":0,"path":["env_logger","Builder"],"kind":"struct"},"29:613:8613":{"crate_id":29,"path":["libc","unix","protoent"],"kind":"struct"},"2:8883:3812":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:3281:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:4378:3434":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"29:1814:41835":{"crate_id":29,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:46702:4343":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"29:3848:8888":{"crate_id":29,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:46343:4714":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:4350:7282":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:10301:2625":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:5996:5174":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:8925:4115":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"21:2366:6129":{"crate_id":21,"path":["regex_syntax","hir","literal","Literals"],"kind":"struct"},"17:12208:6755":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7477:5131":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:6152:5108":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:22993:4285":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"21:2423:54586":{"crate_id":21,"path":["regex_syntax","hir","translate","HirFrame"],"kind":"enum"},"1:4510:2510":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:22853:3848":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:6211:9357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:11406:6593":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:0:2661":{"crate_id":17,"path":["object"],"kind":"module"},"1:9634:5886":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"6:3993:8831":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:50407:4595":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:5595:5161":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:10241:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"16:5488:5157":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:1576:8638":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:11015:6575":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:4394:4066":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:46066:2791":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:4078:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:11767:6673":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:3104:4242":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:45991:2838":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:9768:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:10874:2945":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:2793:3887":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:11453:3882":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"9:41:4932":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:7332:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:11970:6715":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:8481:3930":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:7571:5105":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"21:2638:5677":{"crate_id":21,"path":["regex_syntax","hir","ClassBytes"],"kind":"struct"},"22:1793:6098":{"crate_id":22,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask256"],"kind":"struct"},"9:749:4884":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:3323:1984":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"9:27:4931":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"22:1908:6118":{"crate_id":22,"path":["aho_corasick","prefilter","RareBytesTwo"],"kind":"struct"},"20:1773:63186":{"crate_id":20,"path":["regex","backtrack","Job"],"kind":"enum"},"6:1588:8647":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:10816:4042":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:11163:2882":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:48820:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:661:5568":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:2177:3911":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"29:1658:8730":{"crate_id":29,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:7761:5209":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:13540:7122":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"29:3898:8914":{"crate_id":29,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:56338:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13041:6977":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"29:5125:9190":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:49438:4558":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11458:6610":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"29:5297:9233":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:10304:5471":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:2754:5358":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:3275:2798":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:5536:2977":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"20:3033:2881":{"crate_id":20,"path":["regex","re_unicode","ReplacerRef"],"kind":"struct"},"16:7185:5200":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:16010:2683":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:1415:3809":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:10882:2947":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"29:5099:9177":{"crate_id":29,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:695:5570":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:2283:4269":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:51397:7719":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"22:1225:5698":{"crate_id":22,"path":["aho_corasick","ahocorasick","Imp"],"kind":"enum"},"14:47:7555":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13221:7040":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:6391:5184":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"20:1861:6316":{"crate_id":20,"path":["regex","compile","SuffixCacheKey"],"kind":"struct"},"2:46366:4575":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"22:1215:5697":{"crate_id":22,"path":["aho_corasick","ahocorasick","AhoCorasick"],"kind":"struct"},"21:2612:5675":{"crate_id":21,"path":["regex_syntax","hir","ClassUnicodeIter"],"kind":"struct"},"16:3939:7279":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:9974:4516":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"22:1625:5738":{"crate_id":22,"path":["aho_corasick","packed","api","SearchKind"],"kind":"enum"},"2:49566:2883":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:52132:4414":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:23128:3848":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:4218:8918":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"}},"external_crates":{"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"log","html_root_url":"https://docs.rs/log/0.4.14/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"22":{"name":"aho_corasick","html_root_url":null},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"humantime","html_root_url":null},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"memchr","html_root_url":null},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"libc","html_root_url":null},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"termcolor","html_root_url":null},"20":{"name":"regex","html_root_url":null},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"28":{"name":"atty","html_root_url":null},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"regex_syntax","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":17}