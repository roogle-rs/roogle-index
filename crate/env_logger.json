{"root":"0:0:1961","crate_version":"0.11.1","includes_private":false,"index":{"a:2:32882:2962-0:355:255":{"id":"a:2:32882:2962-0:355:255","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:407":{"id":"0:407","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[61,9],"end":[61,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2961:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:401:2210":{"id":"0:401:2210","crate_id":0,"name":"Millis","span":{"filename":"src/fmt/mod.rs","begin":[66,4],"end":[66,10]},"visibility":"default","docs":"Millisecond precision (3 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12976:34989":{"id":"2:12976:34989","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:4690"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:380":{"id":"0:380","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32827:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12873:2507":{"id":"2:12873:2507","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12106:2506"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2109":{"id":"0:69:2109","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[594,4],"end":[596,5]},"visibility":"public","docs":"Returns the maximum `LevelFilter` that this env logger instance is\nconfigured to output.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LevelFilter","id":"20:218:2081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12987:28121":{"id":"2:12987:28121","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:3698":{"id":"2:12897:3698","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44493:2853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[793,0],"end":[800,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:105:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:88:2336":{"id":"0:88:2336","crate_id":0,"name":"default_filter_or","span":{"filename":"src/logger.rs","begin":[731,4],"end":[738,5]},"visibility":"public","docs":"Use the default environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:365:1960":{"id":"0:365:1960","crate_id":0,"name":"WriteStyle","span":{"filename":"src/fmt/writer/mod.rs","begin":[13,0],"end":[21,1]},"visibility":"public","docs":"Whether or not to print styles to the target.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:385:2558","0:366:2560","0:368:2435"],"impls":["a:2:42477:2901-0:365:1960","a:2:2966:253-0:365:1960","a:2:32825:244-0:365:1960","a:2:32882:2962-0:365:1960","a:2:42476:2902-0:365:1960","b:2:2754-0:365:1960","b:2:2744-0:365:1960","b:2:2748-0:365:1960","b:2:2441-0:365:1960","b:2:2444-0:365:1960","b:2:3558-0:365:1960","b:2:2759-0:365:1960","b:5:687-0:365:1960","0:377","0:380","0:370","0:375","0:222","0:381","0:372","0:373","0:220","0:383"]}}},"0:320-0:355:255":{"id":"0:320-0:355:255","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[282,20],"end":[282,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::Target","name":"Target","id":"0:355:255","glob":false}}},"b:2:2441-0:365:1960":{"id":"b:2:2441-0:365:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2078"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42476:2902-0:324:2108":{"id":"a:2:42476:2902-0:324:2108","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"5:690:2345":{"id":"5:690:2345","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:409:461":{"id":"0:409:461","crate_id":0,"name":"clone","span":{"filename":"src/fmt/mod.rs","begin":[61,15],"end":[61,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:241-0:365:1960":{"id":"0:241-0:365:1960","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[52,0],"end":[52,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::writer::WriteStyle","name":"WriteStyle","id":"0:365:1960","glob":false}}},"2:12953:34981":{"id":"2:12953:34981","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12558:4690","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::match_indices":"2:12950:34980"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44407:7061","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42477:2901-0:355:255":{"id":"a:2:42477:2901-0:355:255","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:2901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12967:34988":{"id":"2:12967:34988","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:4690"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:398:1959":{"id":"b:2:2744-0:398:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2153"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12913:3339":{"id":"2:12913:3339","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42354:198","prim@char":"1:12055:457","self::pattern":"2:12558:4690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12995:34992":{"id":"2:12995:34992","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4738:34992"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44538:6996","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898:34976":{"id":"2:12898:34976","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44503:7063","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:2109":{"id":"0:49:2109","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[371,4],"end":[374,5]},"visibility":"public","docs":"Adds filters to the logger.\n\nThe given module (if any) will log at most the specified level provided.\nIf no module is provided then the filter will apply to all log messages.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter(Some(\"path::to::module\"), LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["module",{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:218:2081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12964:34987":{"id":"2:12964:34987","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:4690"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12583:15367","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:2200":{"id":"0:40:2200","crate_id":0,"name":"format_indent","span":{"filename":"src/logger.rs","begin":[279,4],"end":[282,5]},"visibility":"public","docs":"Configures the amount of spaces to use to indent multiline log records.\nA value of `None` disables any kind of indentation.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["indent",{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:324:2108":{"id":"b:2:2748-0:324:2108","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32825:244-0:247:141":{"id":"a:2:32825:244-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2748-0:336:2139":{"id":"b:2:2748-0:336:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42477:2901-0:247:141":{"id":"a:2:42477:2901-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:2901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:82:1048":{"id":"0:82:1048","crate_id":0,"name":"new","span":{"filename":"src/logger.rs","begin":[701,4],"end":[703,5]},"visibility":"public","docs":"Get a default set of environment variables.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2342":{"id":"0:96:2342","crate_id":0,"name":"default_write_style_or","span":{"filename":"src/logger.rs","begin":[770,4],"end":[777,5]},"visibility":"public","docs":"Use the default environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12890:30480":{"id":"2:12890:30480","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12889:30479"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:336:2139":{"id":"b:2:3558-0:336:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2744-0:336:2139":{"id":"b:2:2744-0:336:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2747:2153"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2966:253-0:355:255":{"id":"a:2:2966:253-0:355:255","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:245":{"id":"0:245","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[74,0],"end":[78,1]},"visibility":"default","docs":"The default timestamp precision is seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:246:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:219-0:355:255":{"id":"0:219-0:355:255","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[9,0],"end":[9,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"target::Target","name":"Target","id":"0:355:255","glob":false}}},"a:2:42477:2901-0:398:1959":{"id":"a:2:42477:2901-0:398:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:2901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/target.rs","begin":[14,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:212:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[784,0],"end":[791,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::borrow::Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:102:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2759-0:247:141":{"id":"b:2:2759-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2762:135":{"id":"2:2762:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32755:8504","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:85:2332":{"id":"0:85:2332","crate_id":0,"name":"filter_or","span":{"filename":"src/logger.rs","begin":[718,4],"end":[726,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["filter_env",{"generic":"E"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:2308":{"id":"0:70:2308","crate_id":0,"name":"matches","span":{"filename":"src/logger.rs","begin":[599,4],"end":[601,5]},"visibility":"public","docs":"Checks if this record matches the configured filter.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["record",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:273:2084","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5559:35679":{"id":"5:5559:35679","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42476:2902-0:60:2276":{"id":"a:2:42476:2902-0:60:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12876:30453":{"id":"2:12876:30453","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12072:1652"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:398:1959":{"id":"b:2:2748-0:398:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2441-0:60:2276":{"id":"b:2:2441-0:60:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2078"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32825:244-0:355:255":{"id":"a:2:32825:244-0:355:255","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3558-0:355:255":{"id":"b:2:3558-0:355:255","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:48:2228":{"id":"0:48:2228","crate_id":0,"name":"filter_level","span":{"filename":"src/logger.rs","begin":[349,4],"end":[352,5]},"visibility":"public","docs":"Adds a directive to the filter for all modules.\n\n# Examples\n\nOnly include messages for info and above for logs globally:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:218:2081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:398:1959":{"id":"b:2:3558-0:398:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:55:2262":{"id":"0:55:2262","crate_id":0,"name":"try_init","span":{"filename":"src/logger.rs","begin":[456,4],"end":[467,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"SetLoggerError","id":"20:344:2085","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[604,0],"end":[673,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Log","id":"20:151:2082","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:72:2310","0:73:1965","0:77:2320"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[675,0],"end":[681,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:169:725":{"id":"0:169:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/humantime.rs","begin":[104,4],"end":[113,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:247:141":{"id":"b:2:2748-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12950:34980":{"id":"2:12950:34980","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12558:4690","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::rmatch_indices":"2:12953:34981"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44389:7060","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:2962-0:156:2409":{"id":"a:2:32882:2962-0:156:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:47:2223":{"id":"0:47:2223","crate_id":0,"name":"filter_module","span":{"filename":"src/logger.rs","begin":[330,4],"end":[333,5]},"visibility":"public","docs":"Adds a directive to the filter for a specific module.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_module(\"path::to::module\", LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["module",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:218:2081","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:2140":{"id":"0:124:2140","crate_id":0,"name":"builder","span":{"filename":"src/logger.rs","begin":[937,0],"end":[939,1]},"visibility":"public","docs":"Create a new builder with the default environment variables.\n\nThe builder can be configured before being initialized.\nThis is a convenient way of calling [`Builder::from_default_env`].\n\n[`Builder::from_default_env`]: struct.Builder.html#method.from_default_env","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:27081":{"id":"2:12970:27081","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:4690"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2136":{"id":"0:26:2136","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[104,4],"end":[111,5]},"visibility":"public","docs":"Initializes the log builder from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nInitialise a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::from_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374:725":{"id":"0:374:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,22],"end":[12,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2157":{"id":"0:53:2157","crate_id":0,"name":"parse_write_style","span":{"filename":"src/logger.rs","begin":[433,4],"end":[436,5]},"visibility":"public","docs":"Parses whether or not to write styles in the same form as the `RUST_LOG_STYLE`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write_style",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:3340":{"id":"2:12866:3340","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:30488":{"id":"2:12935:30488","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12055:457","str::splitn":"2:12932:30486","self::pattern":"2:12558:4690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44361:6933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:30490":{"id":"2:12938:30490","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[10,0],"end":[72,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::fmt::Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:2204","0:152:2485","0:153:2486","0:154:2487","0:155:2488"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12963:34986":{"id":"2:12963:34986","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:2962-0:336:2139":{"id":"a:2:32882:2962-0:336:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2759-0:156:2409":{"id":"b:2:2759-0:156:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:258:2193":{"id":"0:258:2193","crate_id":0,"name":"write","span":{"filename":"src/fmt/mod.rs","begin":[150,4],"end":[152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:355:255":{"id":"b:2:2759-0:355:255","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:405:2216":{"id":"0:405:2216","crate_id":0,"name":"Nanos","span":{"filename":"src/fmt/mod.rs","begin":[70,4],"end":[70,9]},"visibility":"default","docs":"Nanosecond precision (9 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:398:1959":{"id":"0:398:1959","crate_id":0,"name":"TimestampPrecision","span":{"filename":"src/fmt/mod.rs","begin":[62,0],"end":[71,1]},"visibility":"public","docs":"Formatting precision of timestamps.\n\nSeconds give precision of full seconds, milliseconds give thousands of a\nsecond (3 decimal digits), microseconds are millionth of a second (6 decimal\ndigits) and nanoseconds are billionth of a second (9 decimal digits).","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:399:2207","0:401:2210","0:403:2213","0:405:2216"],"impls":["a:2:42477:2901-0:398:1959","a:2:2966:253-0:398:1959","a:2:32825:244-0:398:1959","a:2:32882:2962-0:398:1959","a:2:42476:2902-0:398:1959","b:2:2754-0:398:1959","b:2:2744-0:398:1959","b:2:2748-0:398:1959","b:2:2441-0:398:1959","b:2:2444-0:398:1959","b:2:3558-0:398:1959","b:2:2759-0:398:1959","b:5:687-0:398:1959","0:245","0:408","0:407","0:410"]}}},"2:2446:2430":{"id":"2:2446:2430","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:253-0:336:2139":{"id":"a:2:2966:253-0:336:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2754-0:247:141":{"id":"b:2:2754-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12894:3706":{"id":"2:12894:3706","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44225:2856","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:30492":{"id":"2:12900:30492","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:4690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:2218":{"id":"0:46:2218","crate_id":0,"name":"format_suffix","span":{"filename":"src/logger.rs","begin":[311,4],"end":[314,5]},"visibility":"public","docs":"Configures the end of line suffix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["suffix",{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[128,0],"end":[147,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:256:2433"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42477:2901-0:336:2139":{"id":"a:2:42477:2901-0:336:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:2901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:399:2207":{"id":"0:399:2207","crate_id":0,"name":"Seconds","span":{"filename":"src/fmt/mod.rs","begin":[64,4],"end":[64,11]},"visibility":"default","docs":"Full second precision (0 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:256:2433":{"id":"0:256:2433","crate_id":0,"name":"default_level_style","span":{"filename":"src/fmt/mod.rs","begin":[132,4],"end":[146,5]},"visibility":"public","docs":"Get the default [`style::Style`] for the given level.\n\nThe style can be used to print other values besides the level.","links":{"`style::Style`":"23:389:2434"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"Level","id":"20:198:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"style::Style","id":"23:389:2434","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:2487":{"id":"0:154:2487","crate_id":0,"name":"timestamp_micros","span":{"filename":"src/fmt/humantime.rs","begin":[57,4],"end":[62,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmicrosecond precision.","links":{"`Timestamp`":"0:156:2409"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5828-0:156:2409":{"id":"b:5:5828-0:156:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10000:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5826:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5830:1605"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:322-0:365:1960":{"id":"0:322-0:365:1960","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[282,48],"end":[282,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::WriteStyle","name":"WriteStyle","id":"0:365:1960","glob":false}}},"2:12870:34972":{"id":"2:12870:34972","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12868:34971"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:2209":{"id":"0:43:2209","crate_id":0,"name":"format_timestamp_millis","span":{"filename":"src/logger.rs","begin":[296,4],"end":[298,5]},"visibility":"public","docs":"Configures the timestamp to use millisecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:324:2108":{"id":"b:2:2744-0:324:2108","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2153"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:50:2155":{"id":"0:50:2155","crate_id":0,"name":"parse_filters","span":{"filename":"src/logger.rs","begin":[380,4],"end":[383,5]},"visibility":"public","docs":"Parses the directives string in the same form as the `RUST_LOG`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["filters",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:689:2750":{"id":"5:689:2750","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:2:32825:244-0:324:2108":{"id":"a:2:32825:244-0:324:2108","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5573:28123":{"id":"5:5573:28123","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12990:28125"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[159,0],"end":[167,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:261:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2754-0:355:255":{"id":"b:2:2754-0:355:255","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:366:2560":{"id":"0:366:2560","crate_id":0,"name":"Always","span":{"filename":"src/fmt/writer/mod.rs","begin":[18,4],"end":[18,10]},"visibility":"default","docs":"Try very hard to print styles.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12868:34971":{"id":"2:12868:34971","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[693,9],"end":[693,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:342:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3558-0:365:1960":{"id":"b:2:3558-0:365:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,16],"end":[12,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2961:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[149,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_all_vectored","write_all","write_fmt","is_write_vectored","by_ref","write_vectored"],"trait":{"name":"Write","id":"1:3551:2447","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:258:2193","0:259:2320"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2966:253-0:247:141":{"id":"a:2:2966:253-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:42:2206":{"id":"0:42:2206","crate_id":0,"name":"format_timestamp_secs","span":{"filename":"src/logger.rs","begin":[291,4],"end":[293,5]},"visibility":"public","docs":"Configures the timestamp to use second precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:2170":{"id":"0:33:2170","crate_id":0,"name":"parse_default_env","span":{"filename":"src/logger.rs","begin":[210,4],"end":[212,5]},"visibility":"public","docs":"Applies the configuration from the environment using default variable names.\n\nThis method is a convenient way to call `parse_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger with filter level `Off`, then configure it using the\ndefault environment variables:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:156:2409":{"id":"b:2:3558-0:156:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12926:34977":{"id":"2:12926:34977","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12558:4690","str::split":"2:12917:2497","prim@char":"1:12055:457","`DoubleEndedIterator`":"2:7942:128","str::rsplit_terminator":"2:12929:34978"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44289:7058","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:247:141":{"id":"b:2:2441-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2078"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5570:35681":{"id":"5:5570:35681","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:30493":{"id":"2:12903:30493","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:4690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12985:2237":{"id":"2:12985:2237","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12519:134","`FromStr`":"2:12518:2803"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12518:2803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12518:2803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,33],"end":[12,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10211:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:378:789"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:116:2262":{"id":"0:116:2262","crate_id":0,"name":"try_init","span":{"filename":"src/logger.rs","begin":[846,0],"end":[848,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"log::SetLoggerError","id":"20:344:2085","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403:2213":{"id":"0:403:2213","crate_id":0,"name":"Micros","span":{"filename":"src/fmt/mod.rs","begin":[68,4],"end":[68,10]},"visibility":"default","docs":"Microsecond precision (6 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2759-0:324:2108":{"id":"b:2:2759-0:324:2108","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:212:725":{"id":"0:212:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/writer/target.rs","begin":[15,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:32444":{"id":"2:12895:32444","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12896:32442"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44513:7064","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:398:1959":{"id":"b:2:2759-0:398:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:371:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:687-0:365:1960":{"id":"b:5:687-0:365:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2750","5:690:2345","5:691:3398"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12893:7074":{"id":"2:12893:7074","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12055:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44215:7056","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12990:28125":{"id":"2:12990:28125","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:324:2108":{"id":"b:2:3558-0:324:2108","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:68:2164":{"id":"0:68:2164","crate_id":0,"name":"from_default_env","span":{"filename":"src/logger.rs","begin":[588,4],"end":[590,5]},"visibility":"public","docs":"Creates the logger from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The logger will use the\n[default environment variables].\n\n# Examples\n\nCreates a logger using the default environment variables:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_default_env();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:355:255":{"id":"0:355:255","crate_id":0,"name":"Target","span":{"filename":"src/fmt/writer/target.rs","begin":[4,0],"end":[12,1]},"visibility":"public","docs":"Log target, either `stdout`, `stderr` or a custom pipe.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:356:2579","0:363:2582","0:358:2584"],"impls":["a:2:42477:2901-0:355:255","a:2:2966:253-0:355:255","a:2:32825:244-0:355:255","a:2:32882:2962-0:355:255","a:2:42476:2902-0:355:255","b:2:2754-0:355:255","b:2:2744-0:355:255","b:2:2748-0:355:255","b:2:2441-0:355:255","b:2:2444-0:355:255","b:2:3558-0:355:255","b:2:2759-0:355:255","0:211","0:361"]}}},"0:34:737":{"id":"0:34:737","crate_id":0,"name":"format","span":{"filename":"src/logger.rs","begin":[243,4],"end":[249,5]},"visibility":"public","docs":"Sets the format function for formatting the log output.\n\nThis function is called on each record logged and should format the\nlog record and output it to the given [`Formatter`].\n\nThe format function is expected to output the string directly to the\n`Formatter` so that implementations can use the [`std::fmt`] macros\nto format and output without intermediate heap allocations. The default\n`env_logger` formatter takes advantage of this.\n\nWhen the `color` feature is enabled, styling via ANSI escape codes is supported and the\noutput will automatically respect [`Builder::write_style`].\n\n# Examples\n\nUse a custom format to write only the log message:\n\n```\nuse std::io::Write;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}\", record.args()));\n```\n\n[`Formatter`]: fmt/struct.Formatter.html\n[`String`]: https://doc.rust-lang.org/stable/std/string/struct.String.html\n[`std::fmt`]: https://doc.rust-lang.org/std/fmt/index.html","links":{"`Builder::write_style`":"0:52:2250"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["format",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3185:138","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:273:2084","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:60:2276":{"id":"b:2:2444-0:60:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:2430"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12960:34984":{"id":"2:12960:34984","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261:725":{"id":"0:261:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[160,4],"end":[166,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2250":{"id":"0:52:2250","crate_id":0,"name":"write_style","span":{"filename":"src/logger.rs","begin":[424,4],"end":[427,5]},"visibility":"public","docs":"Sets whether or not styles will be written.\n\nThis can be useful in environments that don't support control characters\nfor setting colors.\n\n# Examples\n\nNever attempt to write styles:\n\n```\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder.write_style(WriteStyle::Never);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write_style",{"resolved_path":{"name":"fmt::WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:324:2108":{"id":"b:2:2754-0:324:2108","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3560:1643":{"id":"2:3560:1643","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40123:6986","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:2340":{"id":"0:93:2340","crate_id":0,"name":"write_style_or","span":{"filename":"src/logger.rs","begin":[757,4],"end":[765,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["write_style_env",{"generic":"E"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221:752":{"id":"0:221:752","crate_id":0,"name":"from","span":{"filename":"src/fmt/writer/mod.rs","begin":[25,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["choice",{"resolved_path":{"name":"anstream::ColorChoice","id":"32:21:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:259:2320":{"id":"0:259:2320","crate_id":0,"name":"flush","span":{"filename":"src/fmt/mod.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371:461":{"id":"0:371:461","crate_id":0,"name":"clone","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:35678":{"id":"5:5555:35678","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2187","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2187","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:2962-0:247:141":{"id":"a:2:32882:2962-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:54:2255":{"id":"0:54:2255","crate_id":0,"name":"is_test","span":{"filename":"src/logger.rs","begin":[442,4],"end":[445,5]},"visibility":"public","docs":"Sets whether or not the logger will be used in unit tests.\n\nIf `is_test` is `true` then the logger will allow the testing framework to\ncapture log records rather than printing them to the terminal directly.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["is_test",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2276":{"id":"0:60:2276","crate_id":0,"name":"Logger","span":{"filename":"src/logger.rs","begin":[531,0],"end":[535,1]},"visibility":"public","docs":"The env logger.\n\nThis struct implements the `Log` trait from the [`log` crate][log-crate-url],\nwhich allows it to act as a logger.\n\nThe [`init()`], [`try_init()`], [`Builder::init()`] and [`Builder::try_init()`]\nmethods will each construct a `Logger` and immediately initialize it as the\ndefault global logger.\n\nIf you'd instead need access to the constructed `Logger`, you can use\nthe associated [`Builder`] and install it with the\n[`log` crate][log-crate-url] directly.\n\n[log-crate-url]: https://docs.rs/log\n[`init()`]: fn.init.html\n[`try_init()`]: fn.try_init.html\n[`Builder::init()`]: struct.Builder.html#method.init\n[`Builder::try_init()`]: struct.Builder.html#method.try_init\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:64","a:2:42477:2901-0:60:2276","a:2:2966:253-0:60:2276","a:2:32825:244-0:60:2276","a:2:32882:2962-0:60:2276","a:2:42476:2902-0:60:2276","b:2:2754-0:60:2276","b:2:2744-0:60:2276","b:2:2748-0:60:2276","b:2:2441-0:60:2276","b:2:2444-0:60:2276","b:2:3558-0:60:2276","b:2:2759-0:60:2276","0:71","0:78"]}}},"b:2:2441-0:336:2139":{"id":"b:2:2441-0:336:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2443:2078"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2758:1630":{"id":"2:2758:1630","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12883:30452":{"id":"2:12883:30452","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:247:141":{"id":"b:2:2444-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:2430"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:77:2320":{"id":"0:77:2320","crate_id":0,"name":"flush","span":{"filename":"src/logger.rs","begin":[672,4],"end":[672,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240-0:355:255":{"id":"0:240-0:355:255","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[51,0],"end":[51,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::writer::Target","name":"Target","id":"0:355:255","glob":false}}},"0:363:2582":{"id":"0:363:2582","crate_id":0,"name":"Stderr","span":{"filename":"src/fmt/writer/target.rs","begin":[9,4],"end":[9,10]},"visibility":"default","docs":"Logs will be sent to standard error.","links":{},"attrs":["#[default]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2441-0:324:2108":{"id":"b:2:2441-0:324:2108","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2078"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2444-0:365:1960":{"id":"b:2:2444-0:365:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:2430"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:105:60":{"id":"0:105:60","crate_id":0,"name":"default","span":{"filename":"src/logger.rs","begin":[794,4],"end":[799,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1965":{"id":"0:73:1965","crate_id":0,"name":"log","span":{"filename":"src/logger.rs","begin":[609,4],"end":[670,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["record",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:273:2084","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,22],"end":[12,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5562:35680":{"id":"5:5562:35680","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:60:2276":{"id":"b:2:2759-0:60:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2744-0:247:141":{"id":"b:2:2744-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2153"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12982:34991":{"id":"2:12982:34991","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:4690"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:398:1959":{"id":"b:5:687-0:398:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2750","5:690:2345","5:691:3398"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12865:882":{"id":"2:12865:882","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12055:457"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3558-0:60:2276":{"id":"b:2:3558-0:60:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:246:60":{"id":"0:246:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/mod.rs","begin":[75,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:34982":{"id":"2:12956:34982","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12973:30495":{"id":"2:12973:30495","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:4690"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42476:2902-0:156:2409":{"id":"a:2:42476:2902-0:156:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:51:1572":{"id":"0:51:1572","crate_id":0,"name":"target","span":{"filename":"src/logger.rs","begin":[403,4],"end":[406,5]},"visibility":"public","docs":"Sets the target for the log output.\n\nEnv logger can log to either stdout, stderr or a custom pipe. The default is stderr.\n\nThe custom pipe can be used to send the log messages to a custom sink (for example a file).\nDo note that direct writes to a file can become a bottleneck due to IO operation times.\n\n# Examples\n\nWrite log message to `stdout`:\n\n```\nuse env_logger::{Builder, Target};\n\nlet mut builder = Builder::new();\n\nbuilder.target(Target::Stdout);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"resolved_path":{"name":"fmt::Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42476:2902-0:247:141":{"id":"a:2:42476:2902-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:152:2485":{"id":"0:152:2485","crate_id":0,"name":"timestamp_seconds","span":{"filename":"src/fmt/humantime.rs","begin":[39,4],"end":[44,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with full\nsecond precision.","links":{"`Timestamp`":"0:156:2409"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:336:2139":{"id":"b:2:2754-0:336:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:25:1048":{"id":"0:25:1048","crate_id":0,"name":"new","span":{"filename":"src/logger.rs","begin":[72,4],"end":[74,5]},"visibility":"public","docs":"Initializes the log builder with defaults.\n\n**NOTE:** This method won't read from any environment variables.\nUse the [`filter`] and [`write_style`] methods to configure the builder\nor use [`from_env`] or [`from_default_env`] instead.\n\n# Examples\n\nCreate a new builder and configure filters and style:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder\n    .filter(None, LevelFilter::Info)\n    .write_style(WriteStyle::Always)\n    .init();\n```\n\n[`filter`]: #method.filter\n[`write_style`]: #method.write_style\n[`from_env`]: #method.from_env\n[`from_default_env`]: #method.from_default_env","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2504:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:382:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[86,0],"end":[101,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:22:2090":{"id":"0:22:2090","crate_id":0,"name":"DEFAULT_FILTER_ENV","span":{"filename":"src/logger.rs","begin":[10,0],"end":[10,48]},"visibility":"public","docs":"The default name for the environment variable to read filters from.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"expr":"\"RUST_LOG\"","value":null,"is_literal":true}}},"2:12864":{"id":"2:12864","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12865:882","2:12866:3340","2:12867:34970","2:12868:34971","2:12870:34972","2:12873:2507","2:12874:34973","2:12875:339","2:12876:30453","2:12877:2337","2:12879:30450","2:12881:30451","2:12883:30452","2:12885:34974","2:12886:34975","2:12887:30475","2:12888:30476","2:12889:30479","2:12890:30480","2:12892:6947","2:12893:7074","2:12894:3706","2:12895:32444","2:12896:32442","2:12897:3698","2:12898:34976","2:12899:32425","2:12900:30492","2:12903:30493","2:12906:30494","2:12909:3378","2:12913:3339","2:12917:2497","2:12920:30482","2:12923:30484","2:12926:34977","2:12929:34978","2:12932:30486","2:12935:30488","2:12938:30490","2:12941:30491","2:12944:2308","2:12947:34979","2:12950:34980","2:12953:34981","2:12956:34982","2:12958:34983","2:12960:34984","2:12962:34985","2:12963:34986","2:12964:34987","2:12967:34988","2:12970:27081","2:12973:30495","2:12976:34989","2:12979:34990","2:12982:34991","2:12985:2237","2:12987:28121","2:12988:30367","2:12989:2789","2:12990:28125","2:12991:28126","2:12992:30370","2:12993:30371","2:12994:30372","2:12995:34992","2:12997:10017","2:12998:26605"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59:725":{"id":"0:59:725","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[500,4],"end":[509,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:2136":{"id":"0:125:2136","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[948,0],"end":[953,1]},"visibility":"public","docs":"Create a builder from the given environment variables.\n\nThe builder can be configured before being initialized.","links":{},"attrs":["#[deprecated(since = \"0.8.0\", note =\n\"Prefer `env_logger::Builder::from_env()` instead.\")]"],"deprecation":{"since":"0.8.0","note":"Prefer `env_logger::Builder::from_env()` instead."},"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:30491":{"id":"2:12941:30491","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:2271":{"id":"0:56:2271","crate_id":0,"name":"init","span":{"filename":"src/logger.rs","begin":[478,4],"end":[481,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:398:1959":{"id":"b:2:2441-0:398:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2078"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12947:34979":{"id":"2:12947:34979","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12558:4690","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::matches":"2:12944:2308"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44461:7062","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:2962-0:365:1960":{"id":"a:2:32882:2962-0:365:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2444-0:324:2108":{"id":"b:2:2444-0:324:2108","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:2430"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:160:725":{"id":"0:160:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/humantime.rs","begin":[87,4],"end":[100,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:362:60":{"id":"0:362:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/writer/target.rs","begin":[3,9],"end":[3,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:2192":{"id":"0:37:2192","crate_id":0,"name":"format_level","span":{"filename":"src/logger.rs","begin":[260,4],"end":[263,5]},"visibility":"public","docs":"Whether or not to write the level in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[24,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ColorChoice","id":"32:21:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:221:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12888:30476":{"id":"2:12888:30476","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12887:30475","str::split_at_mut_checked":"2:12890:30480"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356:2579":{"id":"0:356:2579","crate_id":0,"name":"Stdout","span":{"filename":"src/fmt/writer/target.rs","begin":[6,4],"end":[6,10]},"visibility":"default","docs":"Logs will be sent to standard output.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:2966:253-0:156:2409":{"id":"a:2:2966:253-0:156:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2763:1628":{"id":"2:2763:1628","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12887:30475":{"id":"2:12887:30475","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12889:30479","str::split_at_mut":"2:12888:30476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[61,15],"end":[61,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:409:461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12885:34974":{"id":"2:12885:34974","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12061:1548","str::slice_mut_unchecked":"2:12886:34975","crate::ops::Index":"2:39955:10048"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:30486":{"id":"2:12932:30486","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:4690","str::rsplitn":"2:12935:30488"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44343:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12962:34985":{"id":"2:12962:34985","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5574:28124":{"id":"5:5574:28124","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12991:28126"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:30482":{"id":"2:12920:30482","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:4690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12374:6928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42476:2902-0:355:255":{"id":"a:2:42476:2902-0:355:255","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:42476:2902-0:365:1960":{"id":"a:2:42476:2902-0:365:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12889:30479":{"id":"2:12889:30479","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12890:30480"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:2962-0:398:1959":{"id":"a:2:32882:2962-0:398:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2444-0:398:1959":{"id":"b:2:2444-0:398:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:2430"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12909:3378":{"id":"2:12909:3378","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42354:198","prim@char":"1:12055:457","self::pattern":"2:12558:4690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:2195":{"id":"0:38:2195","crate_id":0,"name":"format_module_path","span":{"filename":"src/logger.rs","begin":[266,4],"end":[269,5]},"visibility":"public","docs":"Whether or not to write the module path in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:2962-0:60:2276":{"id":"a:2:32882:2962-0:60:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12875:339":{"id":"2:12875:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12876:30453","`u8`":"1:12072:1652"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:382:668":{"id":"0:382:668","crate_id":0,"name":"eq","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330:60":{"id":"0:330:60","crate_id":0,"name":"default","span":{"filename":"src/logger.rs","begin":[37,9],"end":[37,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238-23:0:1963":{"id":"0:238-23:0:1963","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[47,0],"end":[47,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"import":{"source":"anstyle","name":"style","id":"23:0:1963","glob":false}}},"2:12997:10017":{"id":"2:12997:10017","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4739:10017"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44547:6882","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:355:255":{"id":"b:2:2441-0:355:255","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2078"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5556:2452":{"id":"5:5556:2452","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:355:255":{"id":"b:2:2744-0:355:255","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2153"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2748-0:60:2276":{"id":"b:2:2748-0:60:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12992:30370":{"id":"2:12992:30370","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:37842"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:385:2558":{"id":"0:385:2558","crate_id":0,"name":"Auto","span":{"filename":"src/fmt/writer/mod.rs","begin":[16,4],"end":[16,8]},"visibility":"default","docs":"Try to print styles, but don't force the issue.","links":{},"attrs":["#[default]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2759-0:365:1960":{"id":"b:2:2759-0:365:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:102:752":{"id":"0:102:752","crate_id":0,"name":"from","span":{"filename":"src/logger.rs","begin":[788,4],"end":[790,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["filter_env",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:247:141":{"id":"0:247:141","crate_id":0,"name":"Formatter","span":{"filename":"src/fmt/mod.rs","begin":[101,0],"end":[104,1]},"visibility":"public","docs":"A formatter to write logs into.\n\n`Formatter` implements the standard [`Write`] trait for writing log records.\nIt also supports terminal colors, through the [`style`] method.\n\n# Examples\n\nUse the [`writeln`] macro to format a log record.\nAn instance of a `Formatter` is passed to an `env_logger` format as `buf`:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}: {}\", record.level(), record.args()));\n```\n\n[`Write`]: https://doc.rust-lang.org/stable/std/io/trait.Write.html\n[`writeln`]: https://doc.rust-lang.org/stable/std/macro.writeln.html\n[`style`]: #method.style","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:150","0:255","a:2:42477:2901-0:247:141","a:2:2966:253-0:247:141","a:2:32825:244-0:247:141","a:2:32882:2962-0:247:141","a:2:42476:2902-0:247:141","b:2:2754-0:247:141","b:2:2744-0:247:141","b:2:2748-0:247:141","b:2:2441-0:247:141","b:2:2444-0:247:141","b:2:3558-0:247:141","b:2:2759-0:247:141","0:257","0:260"]}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[537,0],"end":[602,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:2136","0:68:2164","0:69:2109","0:70:2308"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2747:2153":{"id":"2:2747:2153","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2721:142"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:30494":{"id":"2:12906:30494","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:4690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360:1764":{"id":"0:360:1764","crate_id":0,"name":"0","span":{"filename":"src/fmt/writer/target.rs","begin":[11,9],"end":[11,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Box","id":"5:281:2187","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"std::io::Write","id":"1:3551:2447","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}}}},"0:151:2204":{"id":"0:151:2204","crate_id":0,"name":"timestamp","span":{"filename":"src/fmt/humantime.rs","begin":[30,4],"end":[35,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC.\n\n# Examples\n\nInclude the current timestamp with the log record:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    let ts = buf.timestamp();\n\n    writeln!(buf, \"{}: {}: {}\", ts, record.level(), record.args())\n});\n```\n\n[`Timestamp`]: struct.Timestamp.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:691:3398":{"id":"5:691:3398","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:2197":{"id":"0:39:2197","crate_id":0,"name":"format_target","span":{"filename":"src/logger.rs","begin":[272,4],"end":[275,5]},"visibility":"public","docs":"Whether or not to write the target in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:2109":{"id":"0:83:2109","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[706,4],"end":[713,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["filter_env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:60:2276":{"id":"b:2:2754-0:60:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:117:2271":{"id":"0:117:2271","crate_id":0,"name":"init","span":{"filename":"src/logger.rs","begin":[859,0],"end":[861,1]},"visibility":"public","docs":"Initializes the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/target.rs","begin":[3,9],"end":[3,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:362:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,29],"end":[12,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2509:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32825:244-0:398:1959":{"id":"a:2:32825:244-0:398:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2441-0:156:2409":{"id":"b:2:2441-0:156:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2078"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2444-0:355:255":{"id":"b:2:2444-0:355:255","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:2430"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:23:2093":{"id":"0:23:2093","crate_id":0,"name":"DEFAULT_WRITE_STYLE_ENV","span":{"filename":"src/logger.rs","begin":[13,0],"end":[13,59]},"visibility":"public","docs":"The default name for the environment variable to read style preferences from.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"expr":"\"RUST_LOG_STYLE\"","value":null,"is_literal":true}}},"b:2:2744-0:365:1960":{"id":"b:2:2744-0:365:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2153"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42476:2902-0:398:1959":{"id":"a:2:42476:2902-0:398:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:128:725":{"id":"0:128:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[1,0],"end":[714,1]},"visibility":"public","docs":"Formatting for log records.\n\nThis module contains a [`Formatter`] that can be used to format log records\ninto without needing temporary allocations. Usually you won't need to worry\nabout the contents of this module and can use the `Formatter` like an ordinary\n[`Write`].\n\n# Formatting log records\n\nThe format used to print log records can be customised using the [`Builder::format`]\nmethod.\nCustom formats can apply different color and weight to printed values using\n[`Style`] builders.\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    writeln!(buf, \"{}: {}\",\n        record.level(),\n        record.args())\n});\n```\n\n[`Formatter`]: struct.Formatter.html\n[`Style`]: struct.Style.html\n[`Builder::format`]: ../struct.Builder.html#method.format\n[`Write`]: https://doc.rust-lang.org/stable/std/io/trait.Write.html","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:238-23:0:1963","0:239-0:156:2409","0:240-0:355:255","0:241-0:365:1960","0:398:1959","0:247:141"],"is_stripped":false}}},"0:223:752":{"id":"0:223:752","crate_id":0,"name":"from","span":{"filename":"src/fmt/writer/mod.rs","begin":[37,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["choice",{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:30484":{"id":"2:12923:30484","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12558:4690","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::split":"2:12917:2497"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44257:6931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12958:34983":{"id":"2:12958:34983","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12988:30367":{"id":"2:12988:30367","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40309:30374","Self::is_ascii":"2:12987:28121"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40309:30374","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2190":{"id":"0:36:2190","crate_id":0,"name":"default_format","span":{"filename":"src/logger.rs","begin":[254,4],"end":[257,5]},"visibility":"public","docs":"Use the default format.\n\nThis method will clear any custom format set on the builder.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:156:2409":{"id":"b:2:2444-0:156:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:2430"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65:2136":{"id":"0:65:2136","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[564,4],"end":[569,5]},"visibility":"public","docs":"Creates the logger from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nCreate a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_env(\"MY_LOG\");\n```\n\nCreate a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Logger, Env};\n\nlet env = Env::new().filter_or(\"MY_LOG\", \"info\").write_style_or(\"MY_LOG_STYLE\", \"always\");\n\nlet logger = Logger::from_env(env);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12989:2789":{"id":"2:12989:2789","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2141":{"id":"0:29:2141","crate_id":0,"name":"parse_env","span":{"filename":"src/logger.rs","begin":[149,4],"end":[164,5]},"visibility":"public","docs":"Applies the configuration from the environment.\n\nThis function allows a builder to be configured with default parameters,\nto be then overridden by the environment.\n\n# Examples\n\nInitialise a logger with filter level `Off`, then override the log\nfilter from an environment variable called `MY_LOG`:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger with filter level `Off`, then use the `MY_LOG`\nvariable to override filtering and `MY_LOG_STYLE` to override  whether\nor not to write styles:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["env",{"generic":"E"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12979:34990":{"id":"2:12979:34990","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12055:457","self::pattern":"2:12558:4690"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1961":{"id":"0:0:1961","crate_id":0,"name":"env_logger","span":{"filename":"src/lib.rs","begin":[7,0],"end":[283,24]},"visibility":"public","docs":"A simple logger that can be configured via environment variables, for use\nwith the logging facade exposed by the [`log` crate][log-crate-url].\n\nDespite having \"env\" in its name, **`env_logger`** can also be configured by\nother means besides environment variables. See [the examples][gh-repo-examples]\nin the source repository for more approaches.\n\nBy default, `env_logger` writes logs to `stderr`, but can be configured to\ninstead write them to `stdout`.\n\n## Example\n\n```\nuse log::{debug, error, log_enabled, info, Level};\n\nenv_logger::init();\n\ndebug!(\"this is a debug {}\", \"message\");\nerror!(\"this is printed by default\");\n\nif log_enabled!(Level::Info) {\n    let x = 3 * 4; // expensive computation\n    info!(\"the answer was: {}\", x);\n}\n```\n\nAssumes the binary is `main`:\n\n```{.bash}\n$ RUST_LOG=error ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n```\n\n```{.bash}\n$ RUST_LOG=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\n```{.bash}\n$ RUST_LOG=debug ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nYou can also set the log level on a per module basis:\n\n```{.bash}\n$ RUST_LOG=main=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nAnd enable all logging:\n\n```{.bash}\n$ RUST_LOG=main ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nIf the binary name contains hyphens, you will need to replace\nthem with underscores:\n\n```{.bash}\n$ RUST_LOG=my_app ./my-app\n[2017-11-09T02:12:24Z DEBUG my_app] this is a debug message\n[2017-11-09T02:12:24Z ERROR my_app] this is printed by default\n[2017-11-09T02:12:24Z INFO my_app] the answer was: 12\n```\n\nThis is because Rust modules and crates cannot contain hyphens\nin their name, although `cargo` continues to accept them.\n\nSee the documentation for the [`log` crate][log-crate-url] for more\ninformation about its API.\n\n## Enabling logging\n\n**By default all logging is disabled except for the `error` level**\n\nThe **`RUST_LOG`** environment variable controls logging with the syntax:\n```text\nRUST_LOG=[target][=][level][,...]\n```\nOr in other words, its a comma-separated list of directives.\nDirectives can filter by **target**, by **level**, or both (using `=`).\n\nFor example,\n```text\nRUST_LOG=data=debug,hardware=debug\n```\n\n**target** is typically the path of the module the message\nin question originated from, though it can be overridden.\nThe path is rooted in the name of the crate it was compiled for, so if\nyour program is in a file called, for example, `hello.rs`, the path would\nsimply be `hello`.\n\nFurthermore, the log can be filtered using prefix-search based on the\nspecified log target.\n\nFor example, `RUST_LOG=example` would match the following targets:\n- `example`\n- `example::test`\n- `example::test::module::submodule`\n- `examples::and_more_examples`\n\nWhen providing the crate name or a module path, explicitly specifying the\nlog level is optional. If omitted, all logging for the item will be\nenabled.\n\n**level** is the maximum [`log::Level`][level-enum] to be shown and includes:\n- `error`\n- `warn`\n- `info`\n- `debug`\n- `trace`\n- `off` (pseudo level to disable all logging for the target)\n\nLogging level names are case-insensitive; e.g.,\n`debug`, `DEBUG`, and `dEbuG` all represent the same logging level. For\nconsistency, our convention is to use the lower case names. Where our docs\ndo use other forms, they do so in the context of specific examples, so you\nwon't be surprised if you see similar usage in the wild.\n\nSome examples of valid values of `RUST_LOG` are:\n\n- `RUST_LOG=hello` turns on all logging for the `hello` module\n- `RUST_LOG=trace` turns on all logging for the application, regardless of its name\n- `RUST_LOG=TRACE` turns on all logging for the application, regardless of its name (same as previous)\n- `RUST_LOG=info` turns on all info logging\n- `RUST_LOG=INFO` turns on all info logging (same as previous)\n- `RUST_LOG=hello=debug` turns on debug logging for `hello`\n- `RUST_LOG=hello=DEBUG` turns on debug logging for `hello` (same as previous)\n- `RUST_LOG=hello,std::option` turns on `hello`, and std's option logging\n- `RUST_LOG=error,hello=warn` turn on global error logging and also warn for `hello`\n- `RUST_LOG=error,hello=off`  turn on global error logging, but turn off logging for `hello`\n- `RUST_LOG=off` turns off all logging for the application\n- `RUST_LOG=OFF` turns off all logging for the application (same as previous)\n\n## Filtering results\n\nA `RUST_LOG` directive may include a regex filter. The syntax is to append `/`\nfollowed by a regex. Each message is checked against the regex, and is only\nlogged if it matches. Note that the matching is done after formatting the\nlog string but before adding any logging meta-data. There is a single filter\nfor all modules.\n\nSome examples:\n\n* `hello/foo` turns on all logging for the 'hello' module where the log\n  message includes 'foo'.\n* `info/f.o` turns on all info logging where the log message includes 'foo',\n  'f1o', 'fao', etc.\n* `hello=debug/foo*foo` turns on debug logging for 'hello' where the log\n  message includes 'foofoo' or 'fofoo' or 'fooooooofoo', etc.\n* `error,hello=warn/[0-9]scopes` turn on global error logging and also\n  warn for hello. In both cases the log message must include a single digit\n  number followed by 'scopes'.\n\n## Capturing logs in tests\n\nRecords logged during `cargo test` will not be captured by the test harness by default.\nThe [`Builder::is_test`] method can be used in unit tests to ensure logs will be captured:\n\n```\n#[cfg(test)]\nmod tests {\n    use log::info;\n\n    fn init() {\n        let _ = env_logger::builder().is_test(true).try_init();\n    }\n\n    #[test]\n    fn it_works() {\n        init();\n\n        info!(\"This record will be captured by `cargo test`\");\n\n        assert_eq!(2, 1 + 1);\n    }\n}\n```\n\nEnabling test capturing comes at the expense of color and other style support\nand may have performance implications.\n\n## Disabling colors\n\nColors and other styles can be configured with the `RUST_LOG_STYLE`\nenvironment variable. It accepts the following values:\n\n* `auto` (default) will attempt to print style characters, but don't force the issue.\nIf the console isn't available on Windows, or if TERM=dumb, for example, then don't print colors.\n* `always` will always print style characters even if they aren't supported by the terminal.\nThis includes emitting ANSI colors on Windows if the console API is unavailable.\n* `never` will never print style characters.\n\n## Tweaking the default format\n\nParts of the default format can be excluded from the log output using the [`Builder`].\nThe following example excludes the timestamp from the log output:\n\n```\nenv_logger::builder()\n    .format_timestamp(None)\n    .init();\n```\n\n### Stability of the default format\n\nThe default format won't optimise for long-term stability, and explicitly makes no\nguarantees about the stability of its output across major, minor or patch version\nbumps during `0.x`.\n\nIf you want to capture or interpret the output of `env_logger` programmatically\nthen you should use a custom format.\n\n### Using a custom format\n\nCustom formats can be provided as closures to the [`Builder`].\nThese closures take a [`Formatter`][crate::fmt::Formatter] and `log::Record` as arguments:\n\n```\nuse std::io::Write;\n\nenv_logger::builder()\n    .format(|buf, record| {\n        writeln!(buf, \"{}: {}\", record.level(), record.args())\n    })\n    .init();\n```\n\nSee the [`fmt`] module for more details about custom formats.\n\n## Specifying defaults for environment variables\n\n`env_logger` can read configuration from environment variables.\nIf these variables aren't present, the default value to use can be tweaked with the [`Env`] type.\nThe following example defaults to log `warn` and above if the `RUST_LOG` environment variable\nisn't set:\n\n```\nuse env_logger::Env;\n\nenv_logger::Builder::from_env(Env::default().default_filter_or(\"warn\")).init();\n```\n\n[gh-repo-examples]: https://github.com/rust-cli/env_logger/tree/main/examples\n[level-enum]: https://docs.rs/log/latest/log/enum.Level.html\n[log-crate-url]: https://docs.rs/log\n[`Builder`]: struct.Builder.html\n[`Builder::is_test`]: struct.Builder.html#method.is_test\n[`Env`]: struct.Env.html\n[`fmt`]: fmt/index.html","links":{"crate::fmt::Formatter":"0:247:141"},"attrs":["#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/static/images/favicon.ico\")]","#![deny(missing_debug_implementations, missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:128:725","0:320-0:355:255","0:321-0:398:1959","0:322-0:365:1960","0:323-0:3:1958"],"is_stripped":false}}},"0:44:2212":{"id":"0:44:2212","crate_id":0,"name":"format_timestamp_micros","span":{"filename":"src/logger.rs","begin":[301,4],"end":[303,5]},"visibility":"public","docs":"Configures the timestamp to use microsecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:336:2139":{"id":"b:2:2759-0:336:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2762:135","2:2763:1628"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2754-0:365:1960":{"id":"b:2:2754-0:365:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:153:2486":{"id":"0:153:2486","crate_id":0,"name":"timestamp_millis","span":{"filename":"src/fmt/humantime.rs","begin":[48,4],"end":[53,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmillisecond precision.","links":{"`Timestamp`":"0:156:2409"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42477:2901-0:324:2108":{"id":"a:2:42477:2901-0:324:2108","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:2901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:2966:253-0:60:2276":{"id":"a:2:2966:253-0:60:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3558-0:247:141":{"id":"b:2:3558-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3556:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3560:1643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2444-0:336:2139":{"id":"b:2:2444-0:336:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32826:2961","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2446:2430"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12944:2308":{"id":"2:12944:2308","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12558:4690","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::rmatches":"2:12947:34979"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44443:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,50],"end":[12,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:384:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:411:725":{"id":"0:411:725","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[61,22],"end":[61,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:28126":{"id":"2:12991:28126","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:156:2409":{"id":"b:2:2754-0:156:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:378:789":{"id":"0:378:789","crate_id":0,"name":"hash","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,33],"end":[12,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10219:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2488":{"id":"0:155:2488","crate_id":0,"name":"timestamp_nanos","span":{"filename":"src/fmt/humantime.rs","begin":[66,4],"end":[71,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nnanosecond precision.","links":{"`Timestamp`":"0:156:2409"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:2497":{"id":"2:12917:2497","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12558:4690","`DoubleEndedIterator`":"2:7942:128","prim@char":"1:12055:457","str::split_whitespace":"2:12895:32444","str::rsplit":"2:12923:30484"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44239:2857","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:34978":{"id":"2:12929:34978","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12558:4690","str::split":"2:12917:2497","prim@char":"1:12055:457","str::split_terminator":"2:12926:34977"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44307:7059","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12563:4588","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12578:15368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2310":{"id":"0:72:2310","crate_id":0,"name":"enabled","span":{"filename":"src/logger.rs","begin":[605,4],"end":[607,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:292:2083","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324:2108":{"id":"0:324:2108","crate_id":0,"name":"Builder","span":{"filename":"src/logger.rs","begin":[38,0],"end":[43,1]},"visibility":"public","docs":"`Builder` acts as builder for initializing a `Logger`.\n\nIt can be used to customize the log format, change the environment variable used\nto provide the logging directives and also set the default log level filter.\n\n# Examples\n\n```\n# use std::io::Write;\nuse env_logger::Builder;\nuse log::{LevelFilter, error, info};\n\nlet mut builder = Builder::from_default_env();\n\nbuilder\n    .format(|buf, record| writeln!(buf, \"{} - {}\", record.level(), record.args()))\n    .filter(None, LevelFilter::Info)\n    .init();\n\nerror!(\"error message\");\ninfo!(\"info message\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:24","a:2:42477:2901-0:324:2108","a:2:2966:253-0:324:2108","a:2:32825:244-0:324:2108","a:2:32882:2962-0:324:2108","a:2:42476:2902-0:324:2108","b:2:2754-0:324:2108","b:2:2744-0:324:2108","b:2:2748-0:324:2108","b:2:2441-0:324:2108","b:2:2444-0:324:2108","b:2:3558-0:324:2108","b:2:2759-0:324:2108","0:329","0:58"]}}},"a:2:32825:244-0:60:2276":{"id":"a:2:32825:244-0:60:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:45:2215":{"id":"0:45:2215","crate_id":0,"name":"format_timestamp_nanos","span":{"filename":"src/logger.rs","begin":[306,4],"end":[308,5]},"visibility":"public","docs":"Configures the timestamp to use nanosecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:60:2276":{"id":"b:2:2744-0:60:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2153"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:368:2435":{"id":"0:368:2435","crate_id":0,"name":"Never","span":{"filename":"src/fmt/writer/mod.rs","begin":[20,4],"end":[20,9]},"visibility":"default","docs":"Never print styles.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:2966:253-0:365:1960":{"id":"a:2:2966:253-0:365:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[499,0],"end":[510,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:321-0:398:1959":{"id":"0:321-0:398:1959","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[282,28],"end":[282,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::TimestampPrecision","name":"TimestampPrecision","id":"0:398:1959","glob":false}}},"2:12993:30371":{"id":"2:12993:30371","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:37842"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5572:2877":{"id":"5:5572:2877","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7571:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2757:135":{"id":"2:2757:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:91:2250":{"id":"0:91:2250","crate_id":0,"name":"write_style","span":{"filename":"src/logger.rs","begin":[745,4],"end":[752,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["write_style_env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42477:2901-0:365:1960":{"id":"a:2:42477:2901-0:365:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:2901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2748-0:156:2409":{"id":"b:2:2748-0:156:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42477:2901-0:156:2409":{"id":"a:2:42477:2901-0:156:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:2901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2966:253-0:398:1959":{"id":"a:2:2966:253-0:398:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12899:32425":{"id":"2:12899:32425","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44531:6946","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42477:2901-0:60:2276":{"id":"a:2:42477:2901-0:60:2276","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42477:2901","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:3:1958":{"id":"0:3:1958","crate_id":0,"name":"logger","span":{"filename":"src/logger.rs","begin":[1,0],"end":[1017,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:2090","0:23:2093","0:324:2108","0:60:2276","0:336:2139","0:116:2262","0:117:2271","0:118:2349","0:121:2364","0:124:2140","0:125:2136"],"is_stripped":true}}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[103,0],"end":[114,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10000:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:169:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5571:35682":{"id":"5:5571:35682","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2187","`String`":"5:7571:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2187","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:2409":{"id":"0:156:2409","crate_id":0,"name":"Timestamp","span":{"filename":"src/fmt/humantime.rs","begin":[81,0],"end":[84,1]},"visibility":"public","docs":"An [RFC3339] formatted timestamp.\n\nThe timestamp implements [`Display`] and can be written to a [`Formatter`].\n\n[RFC3339]: https://www.ietf.org/rfc/rfc3339.txt\n[`Display`]: https://doc.rust-lang.org/stable/std/fmt/trait.Display.html\n[`Formatter`]: struct.Formatter.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:42477:2901-0:156:2409","a:2:2966:253-0:156:2409","a:2:32825:244-0:156:2409","a:2:32882:2962-0:156:2409","a:2:42476:2902-0:156:2409","b:2:2754-0:156:2409","b:2:2744-0:156:2409","b:2:2748-0:156:2409","b:2:2441-0:156:2409","b:2:2444-0:156:2409","b:2:3558-0:156:2409","b:2:2759-0:156:2409","b:5:5828-0:156:2409","0:159","0:168"]}}},"0:121:2364":{"id":"0:121:2364","crate_id":0,"name":"init_from_env","span":{"filename":"src/logger.rs","begin":[923,0],"end":[929,1]},"visibility":"public","docs":"Initializes the global logger with an env logger from the given environment\nvariables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::init_from_env(env);\n```\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12896:32442":{"id":"2:12896:32442","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12895:32444"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44522:7065","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32882:2962-0:324:2108":{"id":"a:2:32882:2962-0:324:2108","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32882:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[699,0],"end":[782,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:82:1048","0:83:2109","0:85:2332","0:88:2336","0:91:2250","0:93:2340","0:96:2342"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:336:2139":{"id":"0:336:2139","crate_id":0,"name":"Env","span":{"filename":"src/logger.rs","begin":[694,0],"end":[697,1]},"visibility":"public","docs":"Set of environment variables to configure from.\n\n# Default environment variables\n\nBy default, the `Env` will read the following environment variables:\n\n- `RUST_LOG`: the level filter\n- `RUST_LOG_STYLE`: whether or not to print styles with records.\n\nThese sources can be configured using the builder methods on `Env`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:80","a:2:42477:2901-0:336:2139","a:2:2966:253-0:336:2139","a:2:32825:244-0:336:2139","a:2:32882:2962-0:336:2139","a:2:42476:2902-0:336:2139","b:2:2754-0:336:2139","b:2:2744-0:336:2139","b:2:2748-0:336:2139","b:2:2441-0:336:2139","b:2:2444-0:336:2139","b:2:3558-0:336:2139","b:2:2759-0:336:2139","0:103","0:99","0:340"]}}},"b:2:2744-0:156:2409":{"id":"b:2:2744-0:156:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2153"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:239-0:156:2409":{"id":"0:239-0:156:2409","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[50,0],"end":[50,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"humantime\")]"],"deprecation":null,"inner":{"import":{"source":"self::humantime::Timestamp","name":"Timestamp","id":"0:156:2409","glob":false}}},"2:12994:30372":{"id":"2:12994:30372","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:37842"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12877:2337":{"id":"2:12877:2337","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42354:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2443:2078":{"id":"2:2443:2078","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41:2203":{"id":"0:41:2203","crate_id":0,"name":"format_timestamp","span":{"filename":"src/logger.rs","begin":[285,4],"end":[288,5]},"visibility":"public","docs":"Configures if timestamp should be included and in what precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["timestamp",{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"fmt::TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5830:1605":{"id":"5:5830:1605","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7571:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:725":{"id":"0:79:725","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[676,4],"end":[680,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:384:60":{"id":"0:384:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,50],"end":[12,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[37,9],"end":[37,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:330:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12998:26605":{"id":"2:12998:26605","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4736:26605"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44556:6995","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:2164":{"id":"0:32:2164","crate_id":0,"name":"from_default_env","span":{"filename":"src/logger.rs","begin":[184,4],"end":[186,5]},"visibility":"public","docs":"Initializes the log builder from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger using the default environment variables:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32825:244-0:336:2139":{"id":"a:2:32825:244-0:336:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32825:244-0:365:1960":{"id":"a:2:32825:244-0:365:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12867:34970":{"id":"2:12867:34970","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:34975":{"id":"2:12886:34975","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12061:1548","crate::ops::IndexMut":"2:3220:10049","str::slice_unchecked":"2:12885:34974"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:398:1959":{"id":"b:2:2754-0:398:1959","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1630"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5554":{"id":"5:5554","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5555:35678","5:5556:2452","5:5559:35679","5:5562:35680","5:5570:35681","5:5571:35682","5:5572:2877","5:5573:28123","5:5574:28124"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:342:725":{"id":"0:342:725","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[693,9],"end":[693,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9951:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:253-0:324:2108":{"id":"a:2:2966:253-0:324:2108","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12881:30451":{"id":"2:12881:30451","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2750:752":{"id":"2:2750:752","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323-0:3:1958":{"id":"0:323-0:3:1958","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[283,0],"end":[283,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::logger","name":"logger","id":"0:3:1958","glob":true}}},"0:57:2263":{"id":"0:57:2263","crate_id":0,"name":"build","span":{"filename":"src/logger.rs","begin":[487,4],"end":[496,5]},"visibility":"public","docs":"Build an env logger.\n\nThe returned logger implements the `Log` trait and can be installed manually\nor nested within another logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Logger","id":"0:60:2276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222":{"id":"0:222","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[36,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"anstream::ColorChoice","id":"32:21:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:223:752"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32825:244-0:156:2409":{"id":"a:2:32825:244-0:156:2409","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32825:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42476:2902-0:336:2139":{"id":"a:2:42476:2902-0:336:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42476:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2748-0:355:255":{"id":"b:2:2748-0:355:255","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[45,0],"end":[497,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:324:2108","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:25:1048","0:26:2136","0:29:2141","0:32:2164","0:33:2170","0:34:737","0:36:2190","0:37:2192","0:38:2195","0:39:2197","0:40:2200","0:41:2203","0:42:2206","0:43:2209","0:44:2212","0:45:2215","0:46:2218","0:47:2223","0:48:2228","0:49:2109","0:50:2155","0:51:1572","0:52:2250","0:53:2157","0:54:2255","0:55:2262","0:56:2271","0:57:2263"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:118:2349":{"id":"0:118:2349","crate_id":0,"name":"try_init_from_env","span":{"filename":"src/logger.rs","begin":[891,0],"end":[898,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger from the given\nenvironment variables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\n# fn run() -> Result<(), Box<dyn ::std::error::Error>> {\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::try_init_from_env(env)?;\n\nOk(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"resolved_path":{"name":"Result","id":"2:42495:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"log::SetLoggerError","id":"20:344:2085","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[61,22],"end":[61,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:1959","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:411:725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12874:34973":{"id":"2:12874:34973","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:365:1960":{"id":"b:2:2748-0:365:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:752"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12892:6947":{"id":"2:12892:6947","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12055:457"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44209:6940","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:358:2584":{"id":"0:358:2584","crate_id":0,"name":"Pipe","span":{"filename":"src/fmt/writer/target.rs","begin":[11,4],"end":[11,50]},"visibility":"default","docs":"Logs will be sent to a custom pipe.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:360:1764"]},"discriminant":null}}},"2:12879:30450":{"id":"2:12879:30450","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42354:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42352:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10651:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"27:1340:36940":{"crate_id":27,"path":["aho_corasick","packed","api","ForceAlgorithm"],"kind":"enum"},"2:44443:4997":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:2721:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:4461:8801":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:11079:4999":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"26:1893:3904":{"crate_id":26,"path":["regex_syntax","ast","Flags"],"kind":"struct"},"5:2167:6731":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"25:1780:4965":{"crate_id":25,"path":["regex","input","CharInput"],"kind":"struct"},"26:1983:135":{"crate_id":26,"path":["regex_syntax","error","Error"],"kind":"enum"},"1:8589:7237":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:6870:3963":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"29:99:26626":{"crate_id":29,"path":["anstream","stream","RawStream"],"kind":"trait"},"2:48469:7202":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:569:8566":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:4063:10110":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8295:7318":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:40787:6994":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:261:5029":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:7946:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:46819:7129":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:489:8521":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:12076:1648":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:1793:2452":{"crate_id":2,"path":["core","mem","replace"],"kind":"function"},"2:44846:7087":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:32809:2765":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:33488:6403":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:11605:4241":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:42174:4432":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"30:198:21317":{"crate_id":30,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"9:446:21280":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:3230:9686":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12584:5161":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:11089:5177":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:13485:5432":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:7616:9476":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"25:2445:5012":{"crate_id":25,"path":["regex","re_trait","Locations"],"kind":"struct"},"16:6230:6291":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:3264:5042":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:2529:6151":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"22:99:2535":{"crate_id":22,"path":["humantime","date","format_rfc3339_seconds"],"kind":"function"},"16:4433:6187":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:6263:4453":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"27:1666:4686":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesBuilder"],"kind":"struct"},"18:0:2627":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:3473:5043":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:6231:4022":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:21565:10091":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:7099:4027":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:12072:1652":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:23797:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:8066:7272":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:2341:642":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:7176:35790":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:1632:8670":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7951:6544":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:14038:5544":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:7706:22301":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"27:1270:2108":{"crate_id":27,"path":["aho_corasick","nfa","Builder"],"kind":"struct"},"18:635:4558":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:7565:6488":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:12572:4569":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:42292:7232":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"18:726:4151":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:41351:6904":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:3597:5044":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:22402:15509":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"25:2556:4998":{"crate_id":25,"path":["regex","re_unicode","CaptureMatches"],"kind":"struct"},"1:5701:4023":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:5044:9047":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:22683:4405":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:48645:7212":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"26:1618:4795":{"crate_id":26,"path":["regex_syntax","ast","ClassBracketed"],"kind":"struct"},"25:1491:4198":{"crate_id":25,"path":["regex","compile","SuffixCacheKey"],"kind":"struct"},"2:44063:7043":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:2304:21428":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"11:2498:21354":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"5:6032:15804":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:44955:9644":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12478:5320":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:7912:7267":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:5794:6233":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:3406:6176":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:4610:8872":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"29:292:4133":{"crate_id":29,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"1:7602:5034":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"29:144:26627":{"crate_id":29,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"1:6040:4023":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:13455:5428":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:3494:2840":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:40798:6995":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"26:2068:2087":{"crate_id":26,"path":["regex_syntax","hir","print","Writer"],"kind":"struct"},"32:0:3519":{"crate_id":32,"path":["colorchoice"],"kind":"module"},"1:8892:4448":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:2990:9501":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"25:2188:4997":{"crate_id":25,"path":["regex","re_bytes","Matches"],"kind":"struct"},"17:15039:5820":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10818:5161":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:8370:7323":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:4496:8818":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:2994:34223":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:9033:27086":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:4821:5050":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:13999:5539":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6012:9203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:11121:6935":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:2883:21429":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"11:1603:6654":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:6929:6392":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:44669:7075":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6268:4340":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:6882:6385":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:2998:34222":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:43378:2813":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"11:1025:6646":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"25:1702:36223":{"crate_id":25,"path":["regex","exec","MatchNfaType"],"kind":"enum"},"0:403:2213":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Micros"],"kind":"variant"},"1:10944:4035":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:2988:34219":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:10854:7245":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:7968:4446":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:4595:8866":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:7619:2879":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:548:8555":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:9452:7267":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"26:1187:2087":{"crate_id":26,"path":["regex_syntax","ast","print","Writer"],"kind":"struct"},"2:1802:3660":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:4572:2766":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"25:2157:4996":{"crate_id":25,"path":["regex","re_builder","set_unicode","RegexSetBuilder"],"kind":"struct"},"5:7653:3965":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:513:5033":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:10651:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"25:1526:4870":{"crate_id":25,"path":["regex","dfa","Transitions"],"kind":"struct"},"1:12053:407":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:4518:6190":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:9949:7025":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"25:2574:5005":{"crate_id":25,"path":["regex","re_unicode","ReplacerRef"],"kind":"struct"},"1:3435:2880":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:45210:7093":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:2032:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"25:2518:2857":{"crate_id":25,"path":["regex","re_unicode","Split"],"kind":"struct"},"17:11493:5206":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:12070:805":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:31017:3664":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:40777:6993":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:10073:2139":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"6:4783:8912":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:10155:4212":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:5075:9057":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:10440:2873":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"26:2475:4176":{"crate_id":26,"path":["regex_syntax","parser","ParserBuilder"],"kind":"struct"},"17:13986:5538":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:4452:7235":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"28:698:3306":{"crate_id":28,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4401:8765":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"26:1797:26575":{"crate_id":26,"path":["regex_syntax","ast","RepetitionKind"],"kind":"enum"},"1:8076:2870":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:5541:6211":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:44686:7076":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:30979:2900":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:16032:5398":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:12808:5346":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"26:1849:26574":{"crate_id":26,"path":["regex_syntax","ast","GroupKind"],"kind":"enum"},"2:21356:33022":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:8360:3438":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"14:220:6638":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:7311:3343":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:12629:15374":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11524:5209":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"28:740:35801":{"crate_id":28,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:44823:7079":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:15313:5875":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:4867:4016":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"11:2352:6647":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"28:81:26535":{"crate_id":28,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13473:5429":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:3416:32681":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4549:8842":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:15168:5841":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:42487:2903":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"27:1060:26619":{"crate_id":27,"path":["aho_corasick","ahocorasick","MatchKind"],"kind":"enum"},"17:14876:5770":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:16165:6114":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:45262:7097":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:15102:5825":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"27:1331:4165":{"crate_id":27,"path":["aho_corasick","packed","api","Config"],"kind":"struct"},"26:2122:3904":{"crate_id":26,"path":["regex_syntax","hir","translate","Flags"],"kind":"struct"},"28:797:4566":{"crate_id":28,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:10675:7268":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:11382:7256":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:11680:15364":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"32:40:4078":{"crate_id":32,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"1:12054:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:41216:7013":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:3308:2579":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:6059:9229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:8391:9344":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:12388:5313":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:6927:9444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:41063:4413":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:8900:3436":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"28:665:150":{"crate_id":28,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:3556:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:10710:5160":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:15126:5827":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:8599:3436":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:10350:4238":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:4228:10130":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:11110:8313":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:3185:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"27:1519:4658":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddyFat2Mask256"],"kind":"struct"},"2:40066:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"27:1013:4601":{"crate_id":27,"path":["aho_corasick","ahocorasick","StreamFindIter"],"kind":"struct"},"2:40833:6997":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:4351:8728":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"24:97:3329":{"crate_id":24,"path":["env_filter","op","FilterOp"],"kind":"struct"},"17:13497:5433":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:14529:5638":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:6692:6362":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:43341:32471":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:3012:2747":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:14235:5591":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:4545:6191":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"25:2418:5007":{"crate_id":25,"path":["regex","re_set","bytes","RegexSet"],"kind":"struct"},"2:43416:2815":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"24:90:3331":{"crate_id":24,"path":["env_filter","filtered_log","FilteredLog"],"kind":"struct"},"17:15281:5867":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:1795:641":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:44979:9650":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:12318:5045":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"26:1531:26582":{"crate_id":26,"path":["regex_syntax","ast","ClassAsciiKind"],"kind":"enum"},"11:800:3951":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:1791:2585":{"crate_id":2,"path":["core","mem","take"],"kind":"function"},"9:0:2619":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10720:35793":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13325:4260":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:5865:6246":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:5146:9091":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:2504:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:14051:5546":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:22615:6956":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:7889:6538":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:9858:22356":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:651:4541":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4800:8919":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:4267:3436":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:46721:7125":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"27:1505:4656":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask128"],"kind":"struct"},"1:7924:4457":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"25:1623:135":{"crate_id":25,"path":["regex","error","Error"],"kind":"enum"},"1:9002:2946":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:15368:5893":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:110:313":{"crate_id":5,"path":["alloc","alloc","alloc"],"kind":"function"},"2:40806:6882":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"25:2583:5006":{"crate_id":25,"path":["regex","re_unicode","NoExpand"],"kind":"struct"},"2:7863:15480":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6152:4332":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:46344:7107":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"26:1868:4818":{"crate_id":26,"path":["regex_syntax","ast","CaptureName"],"kind":"struct"},"2:22001:4424":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:6595:2410":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:9198:3088":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"26:1130:4715":{"crate_id":26,"path":["regex_syntax","ast","parse","ParserI"],"kind":"struct"},"9:356:21295":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"25:2452:5013":{"crate_id":25,"path":["regex","re_trait","SubCapturesPosIter"],"kind":"struct"},"6:6961:9453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:12071:801":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:22975:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:6394:6309":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:10448:3999":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:43816:7037":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:4764:8904":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:15569:5958":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:6764:9363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:12336:6945":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:42551:3343":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"22:134:135":{"crate_id":22,"path":["humantime","duration","Error"],"kind":"enum"},"17:10661:5159":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:44833:7083":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:24025:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:12422:5315":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:12464:22485":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5928:9153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:14912:5799":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:142:2714":{"crate_id":5,"path":["alloc","boxed"],"kind":"module"},"11:1910:4801":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:31574:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:7491:6487":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:11318:4037":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:48355:7197":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:10718:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"18:659:4559":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:8109:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:40008:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:645:10019":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:31011:3663":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:10845:2857":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:12342:5307":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:6128:9256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"11:1676:3926":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"15:394:21393":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:6549:3932":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"25:2234:5003":{"crate_id":25,"path":["regex","re_bytes","CaptureLocations"],"kind":"struct"},"2:40884:7000":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:15778:6019":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:9163:2531":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"11:1582:6653":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"25:1417:4911":{"crate_id":25,"path":["regex","compile","Patch"],"kind":"struct"},"2:44951:9643":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:12563:4588":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12328:5303":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:9781:22355":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13387:5413":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:2419:6146":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:13855:5517":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"28:655:4144":{"crate_id":28,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:44987:4423":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:5020:2832":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:8022:22302":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:22864:10104":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"9:481:21279":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11773:5235":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13797:5510":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:4789:8915":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:6139:4018":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"26:2544:26616":{"crate_id":26,"path":["regex_syntax","utf8","Utf8Sequence"],"kind":"enum"},"2:41035:4410":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:11093:2531":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:44123:7047":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13899:5525":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:4381:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:44864:6950":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:8939:7346":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:31205:32424":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"26:2081:4836":{"crate_id":26,"path":["regex_syntax","hir","translate","Translator"],"kind":"struct"},"2:8051:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:7419:3343":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:4376:2755":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:3188:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:11269:22391":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:14325:5603":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:33302:6406":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:12027:10024":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:542:8552":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"27:1156:4619":{"crate_id":27,"path":["aho_corasick","dfa","PremultipliedByteClass"],"kind":"struct"},"1:9445:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"25:178:4869":{"crate_id":25,"path":["regex","compile","ByteClassSet"],"kind":"struct"},"6:4841:8942":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:16223:6127":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:10573:35798":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:10155:8309":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:8981:10194":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:7209:29930":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:10888:6928":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13015:4247":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:44761:6949":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"29:451:4628":{"crate_id":29,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"16:5630:4310":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:10641:10091":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"25:1719:4960":{"crate_id":25,"path":["regex","exec","ProgramCacheInner"],"kind":"struct"},"25:1927:3915":{"crate_id":25,"path":["regex","pool","PoolGuard"],"kind":"struct"},"6:7668:9489":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2718:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:22334:10311":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"27:1210:4581":{"crate_id":27,"path":["aho_corasick","nfa","NFA"],"kind":"struct"},"2:42314:6919":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:8270:2856":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:1456:3343":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:7802:10023":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"25:1543:233":{"crate_id":25,"path":["regex","dfa","Result"],"kind":"enum"},"17:10399:2856":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"27:1136:4617":{"crate_id":27,"path":["aho_corasick","dfa","ByteClass"],"kind":"struct"},"1:2688:2858":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:10927:6929":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:44619:15380":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:11637:7259":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"26:2307:4189":{"crate_id":26,"path":["regex_syntax","hir","ClassBytesRange"],"kind":"struct"},"1:8908:7345":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:5891:9141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:10688:7367":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:11367:4229":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:4111:10113":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:32912:3293":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:939:6642":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"27:1280:4589":{"crate_id":27,"path":["aho_corasick","nfa","Compiler"],"kind":"struct"},"2:9150:4588":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:44975:9649":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:149:3917":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:3170:2775":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:15400:5901":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:15:2193":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:6669:6361":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15931:5380":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:11166:5181":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:39959:6981":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"26:2505:4861":{"crate_id":26,"path":["regex_syntax","unicode","UnicodeWordError"],"kind":"struct"},"16:8055:6450":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:1302:6646":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:40749:32423":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:11443:5204":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:14449:5630":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"26:2089:26612":{"crate_id":26,"path":["regex_syntax","hir","translate","HirFrame"],"kind":"enum"},"2:3008:3292":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"16:5555:6215":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:11419:4217":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:22123:10091":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:12711:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:4601:2768":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:11730:5229":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:13363:5409":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:9066:4458":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:6880:10218":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:4198:29927":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:10211:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:6609:2951":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10524:5157":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:2789:6163":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:14868:5769":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:6858:6384":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:7571:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:5309:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"27:1376:4559":{"crate_id":27,"path":["aho_corasick","packed","api","FindIter"],"kind":"struct"},"2:43081:2817":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:4937:6203":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:3833:3965":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:13832:5514":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:3240:4800":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:26425:272":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:3702:3932":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:41022:2854":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:47229:7153":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"28:815:4149":{"crate_id":28,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:4517:2764":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:10886:4448":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4902:8967":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"28:843:4151":{"crate_id":28,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:14066:5549":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:7914:6540":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:9015:4449":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:1514:8592":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"26:2135:135":{"crate_id":26,"path":["regex_syntax","hir","Error"],"kind":"struct"},"18:698:4149":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11405:5203":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"23:174:3717":{"crate_id":23,"path":["anstyle","color","Color"],"kind":"enum"},"17:13292:4254":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4955:8993":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:5713:4316":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"25:2224:5002":{"crate_id":25,"path":["regex","re_bytes","CaptureNames"],"kind":"struct"},"6:1710:8713":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"29:114:2862":{"crate_id":29,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"16:5521:6169":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:7907:2083":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:5776:2832":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"27:985:4559":{"crate_id":27,"path":["aho_corasick","ahocorasick","FindIter"],"kind":"struct"},"16:5485:4306":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:7609:6489":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"25:1903:4980":{"crate_id":25,"path":["regex","pikevm","Threads"],"kind":"struct"},"25:1885:4931":{"crate_id":25,"path":["regex","pikevm","Fsm"],"kind":"struct"},"1:4769:10161":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"25:2035:4993":{"crate_id":25,"path":["regex","prog","InstRanges"],"kind":"struct"},"6:1558:8617":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"26:1749:26578":{"crate_id":26,"path":["regex_syntax","ast","AssertionKind"],"kind":"enum"},"1:9107:4460":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:7594:6754":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:7651:9484":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:8511:4628":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"18:80:26535":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:46130:7098":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:14131:5555":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:15273:5866":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"27:971:5027":{"crate_id":27,"path":["aho_corasick","ahocorasick","Imp"],"kind":"enum"},"2:43592:3534":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:7934:7269":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:3468:2776":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:5616:4307":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:5515:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"27:1309:4638":{"crate_id":27,"path":["aho_corasick","nfa","AllBytesIter"],"kind":"struct"},"11:123:3920":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:11915:22460":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:12238:5297":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:2769:6162":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:14111:5554":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:7400:4351":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:40026:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"18:689:4568":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:5104:9076":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"14:31:6634":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:0:2625":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:8369:15478":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:8354:7322":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"24:0:1964":{"crate_id":24,"path":["env_filter"],"kind":"module"},"18:608:4552":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:3753:2869":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:14788:5707":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:574:8568":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:42352:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:7932:6541":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:555:8558":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"16:2835:6165":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:7449:15474":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:5637:9265":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:11158:9580":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13089:5362":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"29:181:10091":{"crate_id":29,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"17:10877:5162":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:48553:7208":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:6495:2947":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:918:4398":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"27:1101:4616":{"crate_id":27,"path":["aho_corasick","classes","ByteClassBuilder"],"kind":"struct"},"6:4686:8887":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:7613:7377":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11567:5213":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:2268:7228":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:5238:6207":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:7692:9494":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"25:2349:5011":{"crate_id":25,"path":["regex","re_set","unicode","SetMatchesIter"],"kind":"struct"},"2:22211:10306":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:12671:5335":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:15655:5984":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:4986:5051":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:22699:4426":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"18:491:5027":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:5278:6208":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:7717:3087":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:44640:7067":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:15463:5915":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:12433:4247":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:2035:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:10463:4004":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:3027:6407":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:1496:6652":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:12038:27080":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:6503:3951":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:14723:5656":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:4809:10121":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:11075:4423":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:482:4011":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:32827:251":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:1287:6647":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:22806:32476":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:8012:6549":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:12320:6944":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"25:1770:4964":{"crate_id":25,"path":["regex","input","InputAt"],"kind":"struct"},"16:6811:22296":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:6366:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:40046:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:3773:6180":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:42435:3012":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:32914:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:40956:3988":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:14855:5762":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:7332:15481":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:1639:8674":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:41192:4556":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:4708:9359":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:4302:2777":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:3227:27851":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"26:1193:135":{"crate_id":26,"path":["regex_syntax","ast","Error"],"kind":"struct"},"2:42146:10101":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:3804:7230":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:9130:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:42466:3013":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:7984:6548":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:47153:7151":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"29:341:4136":{"crate_id":29,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"17:14489:5633":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:4097:10111":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:9755:22337":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"26:1836:3910":{"crate_id":26,"path":["regex_syntax","ast","Group"],"kind":"struct"},"26:1106:4176":{"crate_id":26,"path":["regex_syntax","ast","parse","ParserBuilder"],"kind":"struct"},"25:1510:4464":{"crate_id":25,"path":["regex","dfa","Cache"],"kind":"struct"},"17:13538:5445":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"28:730:35803":{"crate_id":28,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:4488:8816":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11634:5221":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:13844:5516":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:1578:3343":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:43324:2813":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:4847:8945":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12949:5045":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:34085:15489":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"28:648:4542":{"crate_id":28,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:44209:6940":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4375:8745":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:5130:9088":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"26:1430:26585":{"crate_id":26,"path":["regex_syntax","ast","SpecialLiteralKind"],"kind":"enum"},"16:6376:6302":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"29:377:4532":{"crate_id":29,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"2:12558:4690":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"26:254:36257":{"crate_id":26,"path":["regex_syntax","ast","visitor","ClassFrame"],"kind":"enum"},"16:5897:22291":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:2675:10091":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"27:1681:4688":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesTwo"],"kind":"struct"},"6:5969:9174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"23:201:2436":{"crate_id":23,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"26:1392:3905":{"crate_id":26,"path":["regex_syntax","ast","Literal"],"kind":"struct"},"1:8534:7335":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"29:61:26632":{"crate_id":29,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"6:7610:9475":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:12074:1650":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:12278:5300":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:8233:2852":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:10887:35800":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6941:22297":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:2336:4277":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"25:949:4896":{"crate_id":25,"path":["regex","re_bytes","CapturesDebug"],"kind":"struct"},"25:2482:4610":{"crate_id":25,"path":["regex","re_unicode","Match"],"kind":"struct"},"1:10229:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"11:2469:3965":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"25:1822:4967":{"crate_id":25,"path":["regex","literal","imp","LiteralSearcher"],"kind":"struct"},"2:42495:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:2489:6149":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:6903:3976":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"28:760:4541":{"crate_id":28,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"1:7672:4031":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"25:1559:4628":{"crate_id":25,"path":["regex","dfa","State"],"kind":"struct"},"17:10954:22372":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:5009:9029":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:34800:6412":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:22562:6955":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"27:1187:2108":{"crate_id":27,"path":["aho_corasick","dfa","Builder"],"kind":"struct"},"2:32795:6450":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:1650:8682":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"14:0:2623":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:7492:3078":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:2037:5037":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:3310:2875":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"11:2536:3910":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:3206:4801":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:4523:8830":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:437:5032":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:5822:2944":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:21339:33029":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:5120:7240":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:3596:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:504:3066":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:11368:7255":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:1968:10059":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:42898:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"25:1954:4907":{"crate_id":25,"path":["regex","prog","Inst"],"kind":"enum"},"30:85:26630":{"crate_id":30,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"26:2272:4188":{"crate_id":26,"path":["regex_syntax","hir","ClassUnicodeRange"],"kind":"struct"},"1:3192:1180":{"crate_id":1,"path":["std","io","prelude"],"kind":"module"},"17:14994:5811":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:43576:3535":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:43314:9571":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:10317:4237":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:4881:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:8616:7341":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"18:113:26537":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"30:252:4087":{"crate_id":30,"path":["anstyle_parse","Parser"],"kind":"struct"},"1:4560:10135":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:11557:5212":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:6263:9304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:6658:9311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"26:268:36256":{"crate_id":26,"path":["regex_syntax","ast","visitor","ClassInduct"],"kind":"enum"},"16:2284:21402":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:14463:5631":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"26:1470:3908":{"crate_id":26,"path":["regex_syntax","ast","Class"],"kind":"enum"},"16:5568:6220":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12107:4217":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:43353:4823":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:13399:5416":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"28:776:4559":{"crate_id":28,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11497:5207":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"25:2593:4898":{"crate_id":25,"path":["regex","sparse","SparseSet"],"kind":"struct"},"2:46242:7103":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:9799:2814":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:41365:6905":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:9181:2912":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:5897:9142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:637:7218":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:2617:6155":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:10933:3722":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:2492:2080":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:13553:5451":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"30:92:26632":{"crate_id":30,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"2:40086:10029":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:43584:4434":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"25:2042:4994":{"crate_id":25,"path":["regex","prog","InstBytes"],"kind":"struct"},"2:10006:2824":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5859:9123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:5404:3912":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:23609:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:2446:10088":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:13509:5434":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:1585:3965":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:7227:3351":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"11:2548:8502":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:1809:665":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:13738:5496":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:7788:10022":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"26:1881:4820":{"crate_id":26,"path":["regex_syntax","ast","SetFlags"],"kind":"struct"},"17:15078:5821":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:22348:15509":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:6584:6899":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:4566:8852":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6077:4317":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"28:806:4568":{"crate_id":28,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:21358:33030":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:1506:4397":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:2509:6150":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:15646:5982":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:3741:6179":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"26:1143:26594":{"crate_id":26,"path":["regex_syntax","ast","parse","GroupState"],"kind":"enum"},"1:10381:4033":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"25:2206:2857":{"crate_id":25,"path":["regex","re_bytes","Split"],"kind":"struct"},"26:2265:4851":{"crate_id":26,"path":["regex_syntax","hir","ClassUnicodeIter"],"kind":"struct"},"5:6631:3343":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"28:835:4573":{"crate_id":28,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"27:1696:4610":{"crate_id":27,"path":["aho_corasick","Match"],"kind":"struct"},"5:3622:3437":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"26:2254:4789":{"crate_id":26,"path":["regex_syntax","hir","ClassUnicode"],"kind":"struct"},"2:39955:10048":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:6745:4345":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:3049:15502":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"33:0:3520":{"crate_id":33,"path":["anstyle_query"],"kind":"module"},"2:2971:2772":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:40:3928":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:5170:2892":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:47499:7158":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:5852:6890":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:15635:5981":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:588:8576":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:6047:9224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:40123:6986":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:7971:6545":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:1316:6651":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:7466:6746":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:6718:9344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:12056:1668":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:21684:10091":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:7383:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:14386:5612":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:11621:4226":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:14246:5593":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:1604:8646":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12863:5348":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12824:22364":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:4005:10105":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"25:1531:4931":{"crate_id":25,"path":["regex","dfa","Fsm"],"kind":"struct"},"2:12297:6943":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:2728:2868":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:10646:7362":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"25:1987:4986":{"crate_id":25,"path":["regex","prog","InstSplit"],"kind":"struct"},"2:48504:7205":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:2234:5041":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"28:556:5027":{"crate_id":28,"path":["memchr","cow","Imp"],"kind":"enum"},"31:23:21317":{"crate_id":31,"path":["utf8parse","types","Action"],"kind":"enum"},"2:44655:7072":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"25:1792:4966":{"crate_id":25,"path":["regex","input","ByteInput"],"kind":"struct"},"2:7913:2960":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:281:2187":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12043:5281":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"26:1328:26572":{"crate_id":26,"path":["regex_syntax","ast","Ast"],"kind":"enum"},"6:1521:8594":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:4702:6195":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:1913:17233":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:46843:7130":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:15473:5920":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4516:8827":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5829:9098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:6773:4347":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"13:0:2616":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:40895:32421":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:14189:5581":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:1115:34397":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:849:3437":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:5825:4285":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:1634:2406":{"crate_id":2,"path":["core","mem"],"kind":"module"},"6:7639:9482":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"27:1609:4674":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesBuilder"],"kind":"struct"},"6:563:8563":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"29:470:2410":{"crate_id":29,"path":["anstream","buffer","Buffer"],"kind":"struct"},"6:1501:8586":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:6201:4335":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:5025:2882":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:6348:4341":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:4227:2832":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"8:0:2618":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:2438:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:45223:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"25:1422:3940":{"crate_id":25,"path":["regex","compile","Hole"],"kind":"enum"},"17:15410:5904":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:11583:5217":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12647:5333":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:5117:9082":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"11:396:3924":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:34627:15494":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:6062:6276":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4870:8953":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13064:5361":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"20:320:2800":{"crate_id":20,"path":["log","MetadataBuilder"],"kind":"struct"},"5:2157:3066":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"27:998:4598":{"crate_id":27,"path":["aho_corasick","ahocorasick","FindOverlappingIter"],"kind":"struct"},"17:16176:6119":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:11142:4217":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:6136:9258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:4830:8934":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7429:35785":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:13437:5420":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4647:8884":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:5896:3951":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:2665:6157":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:6079:9237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13959:5534":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"11:832:6652":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:31043:32455":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:1517:4398":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:3386:260":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:38717:15498":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:11630:28082":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"25:1213:4893":{"crate_id":25,"path":["regex","re_unicode","Captures"],"kind":"struct"},"17:12851:4250":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:11743:5230":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"22:102:2534":{"crate_id":22,"path":["humantime","date","format_rfc3339_nanos"],"kind":"function"},"2:40309:30374":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:11788:5238":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:22295:10308":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"27:1602:4673":{"crate_id":27,"path":["aho_corasick","prefilter","Packed"],"kind":"struct"},"2:23985:6975":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"26:2058:4180":{"crate_id":26,"path":["regex_syntax","hir","print","PrinterBuilder"],"kind":"struct"},"6:4506:8824":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:44136:7048":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:15944:5394":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:9807:22345":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:8283:2853":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"26:1454:26586":{"crate_id":26,"path":["regex_syntax","ast","HexLiteralKind"],"kind":"enum"},"6:7556:9472":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4824:8931":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:5662:22290":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:11661:5223":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12408:4246":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:6228:9279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:654:16241":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"26:2222:3905":{"crate_id":26,"path":["regex_syntax","hir","Literal"],"kind":"enum"},"28:690:4541":{"crate_id":28,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"27:1688:4689":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesThree"],"kind":"struct"},"2:9654:32961":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:40847:15428":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:6395:6892":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:12530:5329":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:45250:2907":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:7536:6750":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:39986:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"29:0:1962":{"crate_id":29,"path":["anstream"],"kind":"module"},"2:48606:7211":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:46464:7112":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:12518:2803":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"27:1357:4569":{"crate_id":27,"path":["aho_corasick","packed","api","Searcher"],"kind":"struct"},"2:40866:6999":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:14147:5560":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"20:349:2801":{"crate_id":20,"path":["log","ParseLevelError"],"kind":"struct"},"17:12030:5280":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:34454:15493":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"27:1291:4635":{"crate_id":27,"path":["aho_corasick","nfa","fill_failure_transitions_leftmost","QueuedState"],"kind":"struct"},"6:1718:8717":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"25:2162:4610":{"crate_id":25,"path":["regex","re_bytes","Match"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:10018:22341":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6215:4337":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:4529:8832":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:47855:7191":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:3551:2447":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:12516:5327":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:3463:2832":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:3376:15503":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"29:313:4135":{"crate_id":29,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"1:8336:7232":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:6837:9385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:48458:7201":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13344:4267":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:12055:457":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:7521:32421":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:3313:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:5640:10188":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"26:2238:3908":{"crate_id":26,"path":["regex_syntax","hir","Class"],"kind":"enum"},"26:1681:4796":{"crate_id":26,"path":["regex_syntax","ast","ClassSetRange"],"kind":"struct"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"23:293:4206":{"crate_id":23,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"11:1142:6650":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"11:1896:3965":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"28:114:26537":{"crate_id":28,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:10828:35792":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:42280:7028":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"14:202:15382":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:735:26545":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"25:2028:4992":{"crate_id":25,"path":["regex","prog","InstChar"],"kind":"struct"},"6:123:15885":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:41599:6910":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:14752:5676":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:4813:6199":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:1546:8608":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:2509:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"27:1620:4593":{"crate_id":27,"path":["aho_corasick","prefilter","ByteSet"],"kind":"struct"},"17:13024:22366":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:3039:15500":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:43095:2825":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:0:2621":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:1440:3437":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:45161:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:13766:5503":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:12089:5285":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"26:2001:141":{"crate_id":26,"path":["regex_syntax","error","Formatter"],"kind":"struct"},"2:1832:1199":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"25:2527:4999":{"crate_id":25,"path":["regex","re_unicode","SplitN"],"kind":"struct"},"2:2676:15432":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"25:2050:4192":{"crate_id":25,"path":["regex","re_builder","RegexOptions"],"kind":"struct"},"16:5006:6205":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:9145:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"13:110:35776":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:0:887":{"crate_id":6,"path":["libc"],"kind":"module"},"1:7823:3471":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:6898:9428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:14012:5541":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:44971:9648":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:3665:3951":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"5:7560:2898":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:10457:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:10997:5170":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:46972:7133":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:9467:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:1507:8589":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"28:715:35804":{"crate_id":28,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:12543:5330":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"26:2289:4838":{"crate_id":26,"path":["regex_syntax","hir","ClassBytes"],"kind":"struct"},"17:13877:5524":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:23425:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:1528:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"20:198:2407":{"crate_id":20,"path":["log","Level"],"kind":"enum"},"6:4908:8969":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:10012:2822":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11026:22374":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:42818:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:2436:10083":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:6056:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"15:327:4363":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:12724:22363":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:14977:5809":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:8849:7342":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"25:931:4893":{"crate_id":25,"path":["regex","re_bytes","Captures"],"kind":"struct"},"16:3010:5054":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:44361:6933":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:11000:6931":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13046:5358":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"25:2423:5008":{"crate_id":25,"path":["regex","re_set","bytes","SetMatches"],"kind":"struct"},"26:2372:26574":{"crate_id":26,"path":["regex_syntax","hir","GroupKind"],"kind":"enum"},"16:6724:6366":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"11:1883:3436":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:5346:6209":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:16050:5408":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"25:2473:4998":{"crate_id":25,"path":["regex","re_trait","CaptureMatches"],"kind":"struct"},"17:2203:5038":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:4434:8789":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:2351:15509":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:44053:7042":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"25:1468:4923":{"crate_id":25,"path":["regex","compile","SuffixCache"],"kind":"struct"},"16:5726:6224":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:1975:712":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:11644:7259":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"27:1512:4657":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask256"],"kind":"struct"},"1:867:4395":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"15:288:21383":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:9039:3014":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:6011:2892":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:6803:6370":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"20:273:2084":{"crate_id":20,"path":["log","Record"],"kind":"struct"},"1:836:3436":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:2959:2773":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:10486:3076":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"11:2151:6647":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:9135:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:12929:5349":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"25:2536:5003":{"crate_id":25,"path":["regex","re_unicode","CaptureLocations"],"kind":"struct"},"16:5919:22292":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:23891:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"24:41:2292":{"crate_id":24,"path":["env_filter","filter","Filter"],"kind":"struct"},"16:6737:4303":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:14260:5595":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:46220:7102":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:2712:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:5360:3932":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:1151:34395":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"25:1831:36229":{"crate_id":25,"path":["regex","literal","imp","Matcher"],"kind":"enum"},"2:48489:7204":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"25:2084:4995":{"crate_id":25,"path":["regex","re_builder","bytes","RegexBuilder"],"kind":"struct"},"6:4854:8947":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"30:285:4131":{"crate_id":30,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"16:7152:6430":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:14986:5810":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:7386:4350":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:4968:9003":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:5151:7240":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"11:875:6644":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:7371:9462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"26:1183:4721":{"crate_id":26,"path":["regex_syntax","ast","print","Printer"],"kind":"struct"},"2:48309:7196":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:4968:6204":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:43831:9642":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:44798:7078":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:44035:7039":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:2434:10082":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:10622:35797":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:928:10036":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:8966:10192":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:4355:6185":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:4444:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:5681:2832":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:12260:6941":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:15176:5844":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"27:1675:4687":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesOne"],"kind":"struct"},"2:44257:6931":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:11639:6937":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"27:1042:36942":{"crate_id":27,"path":["aho_corasick","ahocorasick","StreamChunk"],"kind":"enum"},"32:21:2562":{"crate_id":32,"path":["colorchoice","ColorChoice"],"kind":"enum"},"11:1087:35775":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:700:3343":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:46627:7123":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10439:4214":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:40727:6988":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:13214:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:13406:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:11102:5178":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:10737:27088":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:6682:9328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"22:100:2533":{"crate_id":22,"path":["humantime","date","format_rfc3339_millis"],"kind":"function"},"17:12399:5314":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:2457:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:11898:5248":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"29:363:4138":{"crate_id":29,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"1:2666:3999":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:501:8523":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:10246:27220":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:6188:6290":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4388:8755":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"30:0:3517":{"crate_id":30,"path":["anstyle_parse"],"kind":"module"},"2:44239:2857":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:7103:35788":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:5484:7243":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:2266:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"25:1649:4942":{"crate_id":25,"path":["regex","exec","ExecNoSyncStr"],"kind":"struct"},"2:40986:2883":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:4236:10131":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:4893:8961":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:22448:10302":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:46675:7124":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:10004:2816":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:22722:6957":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:7365:9460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:48449:7200":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:32826:2961":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:32816:6979":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:41551:6907":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:11674:5224":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:7294:6470":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:41589:3994":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:43369:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:1024:3932":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:12494:5322":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"25:2332:5007":{"crate_id":25,"path":["regex","re_set","unicode","RegexSet"],"kind":"struct"},"2:46605:7122":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:13308:4258":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:9737:22339":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:11510:5208":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:12578:15368":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4808:8923":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:13946:5531":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:3001:3290":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:14311:5600":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"30:298:4132":{"crate_id":30,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"17:13594:5462":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"25:2508:5002":{"crate_id":25,"path":["regex","re_unicode","CaptureNames"],"kind":"struct"},"2:42779:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:15206:5850":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:48247:7195":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11115:5179":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:4772:10134":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"26:1281:4432":{"crate_id":26,"path":["regex_syntax","ast","Span"],"kind":"struct"},"1:1862:3460":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4440:8791":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:6713:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:41123:7011":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"14:165:21364":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"20:292:2083":{"crate_id":20,"path":["log","Metadata"],"kind":"struct"},"5:7411:3343":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:1570:8625":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12300:22484":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"10:0:2620":{"crate_id":10,"path":["adler"],"kind":"module"},"6:5992:9187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"25:1231:4896":{"crate_id":25,"path":["regex","re_unicode","CapturesDebug"],"kind":"struct"},"24:85:3328":{"crate_id":24,"path":["env_filter","directive","Directive"],"kind":"struct"},"1:1939:7225":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"11:837:6639":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:4380:7234":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:2593:6154":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:34144:15491":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:6741:9362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"23:413:4209":{"crate_id":23,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"2:12090:6938":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:8253:2854":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:39296:15499":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:23245:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:3993:6183":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"26:2049:3905":{"crate_id":26,"path":["regex_syntax","hir","literal","Literal"],"kind":"struct"},"26:1518:4778":{"crate_id":26,"path":["regex_syntax","ast","ClassAscii"],"kind":"struct"},"17:11051:5174":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:41167:4416":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:6248:9293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:11702:5226":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"7:78:21273":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:7523:4355":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:951:6645":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"11:1923:4691":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:11501:7229":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"27:1194:135":{"crate_id":27,"path":["aho_corasick","error","Error"],"kind":"struct"},"20:0:1965":{"crate_id":20,"path":["log"],"kind":"module"},"16:4649:6193":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:10254:3532":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:5966:4414":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:7942:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:15151:5836":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:3768:6729":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:12022:4464":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:7414:4352":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6045:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:42976:2942":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4738:8891":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:16259:5413":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:15383:5897":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"20:155:2790":{"crate_id":20,"path":["log","NopLogger"],"kind":"struct"},"25:307:4872":{"crate_id":25,"path":["regex","dfa","TransitionsRow"],"kind":"struct"},"6:1576:8627":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"25:2001:4920":{"crate_id":25,"path":["regex","prog","EmptyLook"],"kind":"enum"},"6:1691:8706":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:9995:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:1596:8641":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:4871:6201":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"29:484:2580":{"crate_id":29,"path":["anstream","auto","AutoStream"],"kind":"struct"},"2:46529:7114":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11242:5186":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"27:1584:4542":{"crate_id":27,"path":["aho_corasick","prefilter","PrefilterState"],"kind":"struct"},"16:6849:6381":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:11128:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"5:6713:3932":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:44538:6996":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"25:1601:4205":{"crate_id":25,"path":["regex","dfa","StateFlags"],"kind":"struct"},"6:4932:8983":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:3266:2873":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:12075:1651":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"9:501:6711":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:10769:35796":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"27:1534:4660":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask256"],"kind":"struct"},"17:12597:5331":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:9020:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:2718:9502":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:7056:9716":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:16269:5418":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:8263:2855":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"22:180:2409":{"crate_id":22,"path":["humantime","wrapper","Timestamp"],"kind":"struct"},"2:7397:32804":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:47649:7159":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:403:5030":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:4628:8883":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:10137:22338":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:2249:34322":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:21573:10223":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"20:239:2798":{"crate_id":20,"path":["log","MaybeStaticStr"],"kind":"enum"},"13:226:4367":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:6331:6301":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:5974:9175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4473:8810":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13146:5371":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"15:0:2624":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:46894:7131":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"27:1085:4580":{"crate_id":27,"path":["aho_corasick","classes","ByteClasses"],"kind":"struct"},"16:7998:4361":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:11407:9656":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:6555:6335":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"3:0:484":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"26:2510:26613":{"crate_id":26,"path":["regex_syntax","unicode","ClassQuery"],"kind":"enum"},"2:3044:15501":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:8210:2881":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"5:5669:3963":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:10010:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:22125:10222":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"25:2503:4892":{"crate_id":25,"path":["regex","re_unicode","Regex"],"kind":"struct"},"28:871:4579":{"crate_id":28,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:14298:5599":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:4987:33341":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"26:1316:4756":{"crate_id":26,"path":["regex_syntax","ast","Comment"],"kind":"struct"},"27:1224:4628":{"crate_id":27,"path":["aho_corasick","nfa","State"],"kind":"struct"},"17:15390:5898":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:10092:22362":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:44044:7040":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"20:218:2081":{"crate_id":20,"path":["log","LevelFilter"],"kind":"enum"},"26:2484:4087":{"crate_id":26,"path":["regex_syntax","parser","Parser"],"kind":"struct"},"2:23515:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:15616:5976":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:5959:21401":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"26:1582:26583":{"crate_id":26,"path":["regex_syntax","ast","ClassUnicodeKind"],"kind":"enum"},"1:893:3951":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:588:10016":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:15301:5874":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:7622:9477":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:2729:6160":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:45040:15608":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:11841:5245":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:581:3306":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"11:430:35770":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:12077:857":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"27:961:4595":{"crate_id":27,"path":["aho_corasick","ahocorasick","AhoCorasick"],"kind":"struct"},"2:3181:2958":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"26:1771:3909":{"crate_id":26,"path":["regex_syntax","ast","Repetition"],"kind":"struct"},"16:536:4289":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:3999:10106":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:39971:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"14:40:5395":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:11341:5199":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:7507:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:7335:6172":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13972:5253":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"25:1405:36221":{"crate_id":25,"path":["regex","backtrack","Job"],"kind":"enum"},"16:7537:4357":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"25:0:1778":{"crate_id":25,"path":["regex"],"kind":"module"},"31:0:3518":{"crate_id":31,"path":["utf8parse"],"kind":"module"},"1:5569:7245":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"11:1066:21358":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:212:3930":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:2641:6156":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:640:7220":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:1207:5036":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"20:286:2799":{"crate_id":20,"path":["log","RecordBuilder"],"kind":"struct"},"2:2435:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13568:5457":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"28:706:4545":{"crate_id":28,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:14091:5551":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:2847:6760":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"5:830:3938":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:7962:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"27:1420:2108":{"crate_id":27,"path":["aho_corasick","packed","teddy","compile","Builder"],"kind":"struct"},"2:23155:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:1703:8710":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:8463:7332":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:6136:2832":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:4914:8972":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:44389:7060":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:42410:3436":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:8407:4206":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:7331:3951":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:13116:5367":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"23:305:2445":{"crate_id":23,"path":["anstyle","effect","Effects"],"kind":"struct"},"1:8866:4447":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:15289:5868":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:9457:4032":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:6665:2956":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:5921:9151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:15799:6022":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:22256:10307":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"11:2124:6393":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:15023:5817":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:4805:15421":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:16249:6131":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:46304:7105":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:15222:5854":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:21971:10091":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:557:3073":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:922:6639":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:46174:7100":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"0:405:2216":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Nanos"],"kind":"variant"},"1:4890:10120":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"28:852:26545":{"crate_id":28,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:1271:6393":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:15769:6017":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:3347:2582":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:13723:5492":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:32883:3294":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"25:1579:4200":{"crate_id":25,"path":["regex","dfa","EmptyFlags"],"kind":"struct"},"1:12066:701":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4676:8886":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:21586:4173":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"11:2231:4369":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:7653:4029":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"25:1726:4963":{"crate_id":25,"path":["regex","expand","CaptureRef"],"kind":"struct"},"25:2344:5010":{"crate_id":25,"path":["regex","re_set","unicode","SetMatchesIntoIter"],"kind":"struct"},"27:1493:4654":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask256"],"kind":"struct"},"25:1289:26563":{"crate_id":25,"path":["regex","re_unicode","Replacer"],"kind":"trait"},"25:2337:5008":{"crate_id":25,"path":["regex","re_set","unicode","SetMatches"],"kind":"struct"},"2:11093:6933":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10671:35794":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"10:36:8507":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:8276:2857":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:2859:6166":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:8951:10193":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"26:0:3322":{"crate_id":26,"path":["regex_syntax"],"kind":"module"},"2:44110:7003":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:13252:5398":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"11:434:35771":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:3545:6177":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:1674:8699":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:3739:10102":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12508:5325":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:47465:7157":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:6134:4302":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12371:5349":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:6159:9264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:2995:21431":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:10338:7342":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:1607:4691":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:2271:3699":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:42332:6920":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:481:4540":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:483:8518":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:43613:4628":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:40721:6882":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:4220:10129":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"27:1542:4661":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddyFat3Mask256"],"kind":"struct"},"25:1666:36222":{"crate_id":25,"path":["regex","exec","MatchType"],"kind":"enum"},"16:7306:6471":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:12175:5289":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:9659:4418":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:15748:6011":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:1591:8639":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:4694:10110":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:11153:5161":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:46575:7121":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"11:364:3922":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:119:15884":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"11:2140:6646":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:8413:7236":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:4792:725":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:13165:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:22319:10091":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:11324:5196":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11214:5184":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:9284:3466":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"25:1746:2765":{"crate_id":25,"path":["regex","expand","Ref"],"kind":"enum"},"17:15333:5882":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:9140:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"26:2403:26575":{"crate_id":26,"path":["regex_syntax","hir","RepetitionKind"],"kind":"enum"},"17:12353:5311":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"26:1057:4705":{"crate_id":26,"path":["regex_syntax","utf8","ScalarRange"],"kind":"struct"},"26:2442:4855":{"crate_id":26,"path":["regex_syntax","hir","HirInfo"],"kind":"struct"},"27:1526:4659":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask128"],"kind":"struct"},"17:15138:5830":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:12264:5299":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:15010:5812":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:9970:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:1446:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:42560:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:22771:32411":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"26:1694:4797":{"crate_id":26,"path":["regex_syntax","ast","ClassSetUnion"],"kind":"struct"},"6:1528:8597":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:21312:33018":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:5068:9054":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:14587:5647":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:46751:7126":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:2584:2865":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:6798:9369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:5111:9079":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:4984:10160":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"28:97:26536":{"crate_id":28,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:12062:1633":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"27:1579:4668":{"crate_id":27,"path":["aho_corasick","prefilter","PrefilterObj"],"kind":"struct"},"2:7900:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:6320:6300":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:15760:6013":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:7735:2108":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:10054:3460":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:4584:8861":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:9951:233":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:6691:9334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"7:31:21266":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"11:2443:3951":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:1887:3467":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5152:9094":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"14:160:6634":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:1923:6756":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:22840:6971":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:15701:5998":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:48107:7193":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:4093:2832":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"11:1007:6393":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"11:811:3965":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:3560:27275":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:5708:7246":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:42662:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:42258:32473":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:4724:8890":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:14341:5605":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4776:8911":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4878:8957":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"4:0:2617":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:12080:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:12073:1649":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:4811:10123":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:2110:6759":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"27:1200:2870":{"crate_id":27,"path":["aho_corasick","error","ErrorKind"],"kind":"enum"},"18:589:4545":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:44983:9651":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:597:5034":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:5980:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:4674:6194":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"30:26:26634":{"crate_id":30,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"1:1581:3951":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:45151:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:11056:7343":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"26:2064:4721":{"crate_id":26,"path":["regex_syntax","hir","print","Printer"],"kind":"struct"},"1:5377:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:40136:6987":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:6169:9267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"26:2324:4849":{"crate_id":26,"path":["regex_syntax","hir","Anchor"],"kind":"enum"},"6:5941:9162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:22747:6958":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:32882:2962":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"18:680:4566":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:44522:7065":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:1734:8722":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:5878:4291":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:42476:2902":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:7679:2754":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:5298:22288":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"27:1236:4631":{"crate_id":27,"path":["aho_corasick","nfa","Dense"],"kind":"struct"},"2:48478:7203":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:31032:2813":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"0:247:141":{"crate_id":0,"path":["env_logger","fmt","Formatter"],"kind":"struct"},"2:30749:10103":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"11:351:35767":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:11038:6932":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:1990:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"26:2148:2870":{"crate_id":26,"path":["regex_syntax","hir","ErrorKind"],"kind":"enum"},"1:11413:9657":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6362:4342":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:43088:2824":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:13526:5442":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:6535:2955":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:7453:4114":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"0:128:725":{"crate_id":0,"path":["env_logger","fmt"],"kind":"module"},"16:2749:6161":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:7361:34320":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:3856:6182":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"25:1637:4939":{"crate_id":25,"path":["regex","exec","Exec"],"kind":"struct"},"16:3830:6181":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:14284:5598":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:4966:425":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:14560:5644":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"27:1642:4679":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesOne"],"kind":"struct"},"17:0:2626":{"crate_id":17,"path":["object"],"kind":"module"},"2:46995:7134":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:718:4573":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:41558:6908":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:40966:7002":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"25:2197:4998":{"crate_id":25,"path":["regex","re_bytes","CaptureMatches"],"kind":"struct"},"25:2132:4996":{"crate_id":25,"path":["regex","re_builder","set_bytes","RegexSetBuilder"],"kind":"struct"},"17:12683:5336":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"5:7391:4404":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:4628:2769":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"27:1435:4173":{"crate_id":27,"path":["aho_corasick","packed","teddy","compile","Mask"],"kind":"struct"},"23:389:2434":{"crate_id":23,"path":["anstyle","style","Style"],"kind":"struct"},"2:22853:6972":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"11:2369:6657":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"26:1905:4821":{"crate_id":26,"path":["regex_syntax","ast","FlagsItem"],"kind":"struct"},"17:10759:4217":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:1760:736":{"crate_id":2,"path":["core","mem","forget"],"kind":"function"},"27:923:10091":{"crate_id":27,"path":["aho_corasick","state_id","private","Sealed"],"kind":"trait"},"2:42857:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:2806:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:25:665":{"crate_id":2,"path":["core","env"],"kind":"macro"},"16:5316:4212":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:47199:7152":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"26:1631:26587":{"crate_id":26,"path":["regex_syntax","ast","ClassSet"],"kind":"enum"},"2:40923:10063":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"11:742:4398":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:15521:5957":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:2553:6152":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:9984:22360":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:32755:8504":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:11392:5202":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:11043:4447":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"26:2012:4834":{"crate_id":26,"path":["regex_syntax","hir","interval","IntervalSet"],"kind":"struct"},"28:638:26547":{"crate_id":28,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:7388:9471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:9886:22357":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:2353:15510":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:12583:15367":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:34281:15492":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:8387:7325":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:11755:5233":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:10075:7353":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:10670:9655":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:42477:2901":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:7904:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:46482:7113":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:7760:3076":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:12454:5318":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:6804:9371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:7619:22300":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11647:5222":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"28:546:4540":{"crate_id":28,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11595:4240":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:6120:9254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:3397:15410":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"10:44:4370":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:5696:4311":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:4572:6192":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:4616:8874":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:15434:5908":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"11:1917:4802":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:3579:2846":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:11688:5225":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"18:598:35804":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4543:8840":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:12362:5312":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:15116:5826":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:5:1718":{"crate_id":5,"path":["alloc","vec"],"kind":"macro"},"25:1850:36226":{"crate_id":25,"path":["regex","literal","imp","LiteralIter"],"kind":"enum"},"2:4182:6884":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"12:0:2622":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:6813:9374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:16105:6098":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:12006:7380":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:12065:699":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:0:539":{"crate_id":2,"path":["core"],"kind":"module"},"2:44073:7044":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"18:515:4539":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4745:8892":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:10982:22373":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:10446:2582":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"15:306:21384":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"11:2403:3437":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:2917:21430":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"11:1566:21359":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:3199:3436":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:1790:3965":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"11:787:4396":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12127:5287":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:43601:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"9:237:4628":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:14436:5629":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"23:0:1963":{"crate_id":23,"path":["anstyle"],"kind":"module"},"18:623:35801":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:2049:2869":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"27:1487:4653":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask128"],"kind":"struct"},"2:9472:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"24:19:2108":{"crate_id":24,"path":["env_filter","filter","Builder"],"kind":"struct"},"16:6610:6348":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11075:4229":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"26:1114:4087":{"crate_id":26,"path":["regex_syntax","ast","parse","Parser"],"kind":"struct"},"17:15596:5970":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:266:3932":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:10014:2823":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:15608:5973":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:621:7217":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:22791:32443":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:5955:9173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:6114:9251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4860:8950":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:13239:6953":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:14402:5616":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:2063:6729":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:5023:9035":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:6086:9238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:13356:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:11016:5172":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"27:1455:4939":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Exec"],"kind":"enum"},"6:527:8543":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:16069:6091":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"26:2422:26576":{"crate_id":26,"path":["regex_syntax","hir","RepetitionRange"],"kind":"enum"},"29:436:4141":{"crate_id":29,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"6:4922:8977":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:1697:8709":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"28:823:4569":{"crate_id":28,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:6422:3919":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"11:102:9631":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:7063:3984":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:7343:9459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"29:406:4139":{"crate_id":29,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"16:4283:6184":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:41144:6898":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:11128:5141":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:15342:5883":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:7194:35789":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:1596:4801":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:2966:253":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:1537:8602":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:2689:6158":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:14079:5550":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:10431:3998":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:11354:5200":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:42092:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:13187:33251":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"29:393:4132":{"crate_id":29,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"2:10796:3436":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"25:1380:4816":{"crate_id":25,"path":["regex","backtrack","Bounded"],"kind":"struct"},"31:88:4087":{"crate_id":31,"path":["utf8parse","Parser"],"kind":"struct"},"17:10251:4235":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:33908:2748":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"27:1558:4666":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Mask256"],"kind":"struct"},"5:4197:2832":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:3799:3343":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:7604:9474":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"0:399:2207":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Seconds"],"kind":"variant"},"6:4364:8737":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:45148:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:11547:5099":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"25:2215:4999":{"crate_id":25,"path":["regex","re_bytes","SplitN"],"kind":"struct"},"2:21324:33018":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:6966:4026":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:9220:28042":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"26:1292:4694":{"crate_id":26,"path":["regex_syntax","ast","Position"],"kind":"struct"},"27:1566:36939":{"crate_id":27,"path":["aho_corasick","prefilter","Candidate"],"kind":"enum"},"17:15376:5896":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:3906:7231":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7355:6482":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:1885:3466":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:4459:3958":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:15822:6026":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"29:501:3523":{"crate_id":29,"path":["anstream","strip","StripStream"],"kind":"struct"},"2:23065:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"25:213:36234":{"crate_id":25,"path":["regex","dfa","InstPtrs"],"kind":"struct"},"28:632:4539":{"crate_id":28,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:32791:6977":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"26:1647:26573":{"crate_id":26,"path":["regex_syntax","ast","ClassSetItem"],"kind":"enum"},"5:7302:2909":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"31:53:4628":{"crate_id":31,"path":["utf8parse","types","State"],"kind":"enum"},"26:1304:4755":{"crate_id":26,"path":["regex_syntax","ast","WithComments"],"kind":"struct"},"1:9026:3070":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"29:420:4533":{"crate_id":29,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"6:4578:8858":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:13272:5408":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"25:2543:5004":{"crate_id":25,"path":["regex","re_unicode","SubCaptureMatches"],"kind":"struct"},"2:39875:3440":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"27:1079:2410":{"crate_id":27,"path":["aho_corasick","buffer","Buffer"],"kind":"struct"},"2:3220:10049":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"26:1206:2870":{"crate_id":26,"path":["regex_syntax","ast","ErrorKind"],"kind":"enum"},"6:5052:9049":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:45239:7096":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:36676:6413":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:2269:4402":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:2819:6164":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"11:774:4395":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:3177:6140":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:5066:863":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:4170:6883":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:6445:6312":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13922:5530":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:8343:9652":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:5694:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"11:1891:3951":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"26:2074:4182":{"crate_id":26,"path":["regex_syntax","hir","translate","TranslatorBuilder"],"kind":"struct"},"17:15092:5824":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:12058:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:1054:6646":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:44289:7058":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:7645:9483":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:7633:9481":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:40116:6985":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:5645:6221":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"26:1720:26580":{"crate_id":26,"path":["regex_syntax","ast","ClassSetBinaryOpKind"],"kind":"enum"},"1:10746:27093":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:1496:8584":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:4396:3958":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:15445:5912":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:46375:7108":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:21370:33027":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:13814:5513":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:13424:5419":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"25:1804:4875":{"crate_id":25,"path":["regex","input","Char"],"kind":"struct"},"27:1550:4665":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Mask128"],"kind":"struct"},"25:1936:4880":{"crate_id":25,"path":["regex","prog","Program"],"kind":"struct"},"2:44513:7064":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:15058:4268":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:48431:7199":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:7375:3343":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"26:2109:4840":{"crate_id":26,"path":["regex_syntax","hir","translate","TranslatorI"],"kind":"struct"},"2:22477:10303":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:8549:10183":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:4333:2778":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"25:2435:5011":{"crate_id":25,"path":["regex","re_set","bytes","SetMatchesIter"],"kind":"struct"},"26:2390:3909":{"crate_id":26,"path":["regex_syntax","hir","Repetition"],"kind":"struct"},"16:6646:6360":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"25:713:4876":{"crate_id":25,"path":["regex","pool","Pool"],"kind":"struct"},"23:251:3718":{"crate_id":23,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"11:710:4397":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:7669:3969":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6759:4346":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:12969:5351":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"26:1785:4810":{"crate_id":26,"path":["regex_syntax","ast","RepetitionOp"],"kind":"struct"},"2:44343:4999":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"25:2107:4995":{"crate_id":25,"path":["regex","re_builder","unicode","RegexBuilder"],"kind":"struct"},"26:2029:4835":{"crate_id":26,"path":["regex_syntax","hir","interval","IntervalSetIter"],"kind":"struct"},"6:1664:8693":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:1487:4396":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:41105:4415":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:533:8546":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:2546:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:4035:10107":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:6215:4009":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:4884:8958":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:11877:4243":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:2652:2866":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:44155:7050":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:7444:6485":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:6700:9335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:10259:3533":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"28:752:4558":{"crate_id":28,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"26:1368:3911":{"crate_id":26,"path":["regex_syntax","ast","Alternation"],"kind":"struct"},"2:2728:263":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:12768:22342":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:46445:7111":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:8855:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:14545:5640":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:5033:9041":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:7366:6173":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:3431:2774":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:42535:3436":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:40993:7003":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:1063:6647":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:3266:4691":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12201:5294":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:909:6652":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"26:2593:4867":{"crate_id":26,"path":["regex_syntax","utf8","Utf8Sequences"],"kind":"struct"},"1:7740:3077":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4556:8845":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:11562:7231":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"26:1380:3912":{"crate_id":26,"path":["regex_syntax","ast","Concat"],"kind":"struct"},"2:22733:32420":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:790:3935":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:22668:4425":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"27:1349:2108":{"crate_id":27,"path":["aho_corasick","packed","api","Builder"],"kind":"struct"},"2:40764:6992":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:43395:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:12076:5284":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"16:4733:6196":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"25:2241:5004":{"crate_id":25,"path":["regex","re_bytes","SubCaptureMatches"],"kind":"struct"},"2:42701:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:531:4542":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:4977:9009":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:4844:6200":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:38607:15496":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:7270:4299":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"25:1869:4975":{"crate_id":25,"path":["regex","literal","imp","SingleByteSet"],"kind":"struct"},"2:46941:7132":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:41206:6902":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:5038:6206":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:6282:6297":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"25:2462:4997":{"crate_id":25,"path":["regex","re_trait","Matches"],"kind":"struct"},"1:11478:4039":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"0:0:1961":{"crate_id":0,"path":["env_logger"],"kind":"module"},"2:42401:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:4710:8889":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:14414:5618":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:41565:2947":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:32802:6978":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"29:326:4531":{"crate_id":29,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"16:7684:6501":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:13187:5380":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:11063:5176":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:33674:15488":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:256:5028":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:5885:9138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8221:2851":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:10869:27092":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:1826:3452":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:7351:6745":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:22388:10312":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:2399:6145":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:44493:2853":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:4527:2765":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:12707:5338":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:2275:2841":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"25:1656:4943":{"crate_id":25,"path":["regex","exec","ExecReadOnly"],"kind":"struct"},"17:11764:5234":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"25:1516:4926":{"crate_id":25,"path":["regex","dfa","CacheInner"],"kind":"struct"},"16:7118:3012":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"26:1917:26579":{"crate_id":26,"path":["regex_syntax","ast","FlagsItemKind"],"kind":"enum"},"16:6408:6311":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"26:2300:4852":{"crate_id":26,"path":["regex_syntax","hir","ClassBytesIter"],"kind":"struct"},"2:43631:4436":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"27:1303:4637":{"crate_id":27,"path":["aho_corasick","nfa","QueuedSet"],"kind":"struct"},"26:1955:26596":{"crate_id":26,"path":["regex_syntax","either","Either"],"kind":"enum"},"17:11799:5239":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:4666:8885":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:2355:6143":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:16198:6121":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:12079:1258":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"25:1688:36220":{"crate_id":25,"path":["regex","exec","MatchLiteralType"],"kind":"enum"},"1:5849:2945":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:38552:15495":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:15266:5865":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:16079:6092":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:12289:5301":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:3157:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:6579:22295":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:6599:6347":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:7679:9490":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"26:2360:3910":{"crate_id":26,"path":["regex_syntax","hir","Group"],"kind":"struct"},"17:15624:5977":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:6895:6387":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:4119:10115":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:41176:6900":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"27:1093:4612":{"crate_id":27,"path":["aho_corasick","classes","ByteClassRepresentatives"],"kind":"struct"},"16:6141:35786":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"14:214:6637":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:4947:8988":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:1425:3436":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"27:1499:4655":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddyFat1Mask256"],"kind":"struct"},"5:4426:2832":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:2979:6174":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:11853:5246":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:3232:4802":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:22482:10301":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:21302:3306":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:22433:10091":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:634:6725":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"9:423:21282":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"27:1404:4588":{"crate_id":27,"path":["aho_corasick","packed","pattern","Pattern"],"kind":"struct"},"2:11606:6936":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:15678:5997":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:2459:6148":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"26:2500:4860":{"crate_id":26,"path":["regex_syntax","unicode","CaseFoldError"],"kind":"struct"},"2:12374:6928":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"5:3211:34351":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"11:2554:35766":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:4698:8888":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:14271:5596":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:3080:6408":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:357:3085":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:2987:2750":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"27:1246:4870":{"crate_id":27,"path":["aho_corasick","nfa","Transitions"],"kind":"enum"},"16:8097:6556":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:41580:2880":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:12557:4229":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:5601:22289":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:1072:6651":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:2439:6147":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:6116:6281":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:41073:2292":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:11107:6934":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"27:1447:4639":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Teddy"],"kind":"struct"},"26:2491:135":{"crate_id":26,"path":["regex_syntax","unicode","Error"],"kind":"enum"},"17:13173:5379":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:2418:2311":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:4907:6202":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:10443:2579":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"25:1571:4850":{"crate_id":25,"path":["regex","dfa","Byte"],"kind":"struct"},"29:490:36958":{"crate_id":29,"path":["anstream","auto","StreamInner"],"kind":"enum"},"27:1386:4645":{"crate_id":27,"path":["aho_corasick","packed","pattern","Patterns"],"kind":"struct"},"28:680:4146":{"crate_id":28,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:44407:7061":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:13774:5505":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:3233:9687":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:46274:7104":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:7657:9485":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"27:1628:4594":{"crate_id":27,"path":["aho_corasick","prefilter","RareByteOffsets"],"kind":"struct"},"1:11341:7374":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"27:1594:2108":{"crate_id":27,"path":["aho_corasick","prefilter","Builder"],"kind":"struct"},"2:21976:10226":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:5140:9089":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:44531:6946":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"27:1366:36941":{"crate_id":27,"path":["aho_corasick","packed","api","SearchKind"],"kind":"enum"},"2:23703:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:12443:5317":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:41574:6909":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:2319:6141":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:7973:4445":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:10284:4236":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"27:1427:4589":{"crate_id":27,"path":["aho_corasick","packed","teddy","compile","Compiler"],"kind":"struct"},"2:40738:6989":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:1914:9505":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"27:1657:4684":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesThree"],"kind":"struct"},"25:1473:4196":{"crate_id":25,"path":["regex","compile","SuffixCacheEntry"],"kind":"struct"},"2:12106:2506":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"0:398:1959":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision"],"kind":"enum"},"6:6711:9340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:10612:5158":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"25:1452:36232":{"crate_id":25,"path":["regex","compile","InstHole"],"kind":"enum"},"1:5500:7244":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:6868:9411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:706:4569":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:903:3965":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:40840:6998":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:2540:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"11:2542:8501":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:48568:7209":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:14503:5636":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"11:673:3436":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:15356:5890":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:563:4146":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:507:8526":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:10534:35795":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:33967:2914":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:6612:2952":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"11:856:6642":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:7341:3943":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:3017:2913":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:3349:2872":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:6893:3975":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:3191:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:15734:6004":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:3709:6178":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"22:0:1777":{"crate_id":22,"path":["humantime"],"kind":"module"},"2:48515:7206":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:22013:33031":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:363:3086":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"26:1166:4720":{"crate_id":26,"path":["regex_syntax","ast","parse","NestLimiter"],"kind":"struct"},"1:5197:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:10820:3437":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"11:1160:6651":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"23:271:3719":{"crate_id":23,"path":["anstyle","color","RgbColor"],"kind":"struct"},"6:5982:9180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12213:5295":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"11:2423:3343":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:8300:10100":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:4428:8788":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"9:329:8508":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:46427:7110":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:7345:6481":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"16:6221:4339":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"26:1569:4789":{"crate_id":26,"path":["regex_syntax","ast","ClassUnicode"],"kind":"struct"},"16:7225:22298":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"22:164:129":{"crate_id":22,"path":["humantime","wrapper","Duration"],"kind":"struct"},"17:16138:6105":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:4813:10124":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:11335:4454":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:4194:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:4704:9355":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:7598:9473":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12485:22486":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:6590:9638":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"20:151:2082":{"crate_id":20,"path":["log","Log"],"kind":"trait"},"6:4480:8814":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:11189:5182":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:5894:2954":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:12189:5293":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:15957:6047":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:16212:6125":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:7333:15482":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:15720:6002":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:4065:3932":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"22:207:35822":{"crate_id":22,"path":["humantime","date","Precision"],"kind":"enum"},"16:6546:6334":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:44084:7045":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:6318:4023":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:3260:6175":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"25:987:26563":{"crate_id":25,"path":["regex","re_bytes","Replacer"],"kind":"trait"},"17:13753:5501":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"20:344:2085":{"crate_id":20,"path":["log","SetLoggerError"],"kind":"struct"},"1:5033:10166":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"5:3358:3965":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:880:4396":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"27:1166:4015":{"crate_id":27,"path":["aho_corasick","dfa","Repr"],"kind":"struct"},"1:11841:4043":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"14:7:6634":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:4455:8798":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:2715:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"25:2183:4892":{"crate_id":25,"path":["regex","re_bytes","Regex"],"kind":"struct"},"1:8201:2879":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:7595:4359":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:45169:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:3600:5059":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:4217:15351":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"27:929:26620":{"crate_id":27,"path":["aho_corasick","state_id","StateID"],"kind":"trait"},"25:2254:5005":{"crate_id":25,"path":["regex","re_bytes","ReplacerRef"],"kind":"struct"},"21:0:2618":{"crate_id":21,"path":["cfg_if"],"kind":"module"},"2:47997:7192":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:14933:5804":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:6499:2948":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"26:2578:4704":{"crate_id":26,"path":["regex_syntax","utf8","Utf8Range"],"kind":"struct"},"17:15214:5852":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:48185:7194":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:3391:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:31601:3306":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"27:1411:4640":{"crate_id":27,"path":["aho_corasick","packed","rabinkarp","RabinKarp"],"kind":"struct"},"16:6462:22294":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:7477:10035":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:596:8580":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:4107:10112":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:21341:33024":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:2420:10078":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"25:1878:4972":{"crate_id":25,"path":["regex","literal","imp","Memmem"],"kind":"struct"},"27:1635:4172":{"crate_id":27,"path":["aho_corasick","prefilter","RareByteOffset"],"kind":"struct"},"1:7990:2867":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:3245:34355":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:6994:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:6099:6278":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:7917:7268":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:4538:10134":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:6426:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:11256:5188":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:7508:6747":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"22:101:2532":{"crate_id":22,"path":["humantime","date","format_rfc3339_micros"],"kind":"function"},"1:1602:4802":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:8922:7247":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:21512:10091":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"26:2174:3914":{"crate_id":26,"path":["regex_syntax","hir","Hir"],"kind":"struct"},"5:7038:3981":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:7324:6478":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:7867:15479":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:10008:2825":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"18:507:4541":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:41091:7008":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:6781:9364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:11228:7373":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"23:325:4207":{"crate_id":23,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"2:44547:6882":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8446:10170":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:9952:2447":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:43984:7038":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:44461:7062":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:4975:10159":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:4049:10108":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"11:1051:6647":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13581:5461":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:31100:32447":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:7376:6483":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:4535:8835":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:14212:5590":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:11715:5227":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:42418:3437":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12225:5296":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:2487:9498":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:7869:6537":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:5464:7242":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:21693:10221":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:11293:22392":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:8605:7340":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:12067:806":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"11:1903:4800":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:10044:22361":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:21695:4173":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:41135:6897":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:11396:7258":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"11:1107:6649":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:903:3436":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:4057:10109":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:10665:9653":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:10000:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:5826:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:45029:2917":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:10365:3996":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"27:1146:4618":{"crate_id":27,"path":["aho_corasick","dfa","Premultiplied"],"kind":"struct"},"6:4755:8899":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:10846:3471":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"25:1980:4984":{"crate_id":25,"path":["regex","prog","InstSave"],"kind":"struct"},"1:4300:7233":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:13674:5467":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:10699:4457":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:14599:5654":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"11:2569:6746":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"11:328:9635":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:7995:2959":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:6934:9447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:5580:6168":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:6431:4343":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:44812:15381":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:687:3437":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:1900:15519":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:2573:6153":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"27:1052:4153":{"crate_id":27,"path":["aho_corasick","ahocorasick","AhoCorasickBuilder"],"kind":"struct"},"1:5815:2943":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:45202:7091":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"26:1081:26593":{"crate_id":26,"path":["regex_syntax","ast","parse","Primitive"],"kind":"enum"},"1:1824:3451":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:7548:6752":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:6222:9278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"26:1816:26576":{"crate_id":26,"path":["regex_syntax","ast","RepetitionRange"],"kind":"enum"},"5:1131:34221":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"9:177:4386":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:475:4717":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:38662:15497":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:1098:5035":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:10728:2851":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"5:4107:3437":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:6965:7350":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11313:5194":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:6788:35787":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"26:1405:26577":{"crate_id":26,"path":["regex_syntax","ast","LiteralKind"],"kind":"enum"},"17:12993:22365":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"11:2326:6646":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:5450:7241":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"23:335:3720":{"crate_id":23,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"17:14356:5609":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:12900:4253":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:580:8571":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:44215:7056":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11042:5173":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:9087:27090":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:23335:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:4035:3951":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:41341:2855":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:47389:7155":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:44967:9647":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:7982:7271":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"30:109:4089":{"crate_id":30,"path":["anstyle_parse","params","Params"],"kind":"struct"},"25:1617:4938":{"crate_id":25,"path":["regex","dfa","StateMap"],"kind":"struct"},"2:42426:3343":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:15249:5858":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:44185:7052":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:46326:7106":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:9061:4452":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:4638:10152":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:11574:4369":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:9074:7350":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"5:3170:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:2074:6730":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:5759:6231":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4449:8796":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"0:401:2210":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Millis"],"kind":"variant"},"17:14025:5542":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:10965:6930":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:43623:4435":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:10419:4239":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:0:1540":{"crate_id":1,"path":["std"],"kind":"module"},"6:6889:9425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:48530:7207":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:6370:10313":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:12621:5332":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"11:299:9632":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:43074:2816":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"25:2565:4997":{"crate_id":25,"path":["regex","re_unicode","Matches"],"kind":"struct"},"6:62:15830":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4603:8870":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:3268:2874":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:3392:2862":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:4814:8925":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:5004:9027":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:16093:6096":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"18:96:26536":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:46797:7128":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:41607:6912":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:6908:6390":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:14968:5805":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:16151:6111":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:6030:6273":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:13235:5395":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"11:2562:8505":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:44503:7063":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:44145:7049":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"23:347:3721":{"crate_id":23,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"26:1706:4799":{"crate_id":26,"path":["regex_syntax","ast","ClassSetBinaryOp"],"kind":"struct"},"1:3512:2842":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:22833:9639":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:15324:5879":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:41114:6891":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:44734:7077":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:1574:3436":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:16187:6120":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"25:2430:5010":{"crate_id":25,"path":["regex","re_set","bytes","SetMatchesIntoIter"],"kind":"struct"},"17:14516:5637":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10170:4213":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:6666:9316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:44198:7055":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:12659:5334":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:8289:7316":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:46773:7127":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:45005:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:10950:4036":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:15992:6077":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:6100:9249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"26:1932:4823":{"crate_id":26,"path":["regex_syntax","ast","Flag"],"kind":"enum"},"1:12059:338":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:2375:6144":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:7319:6744":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:7998:2869":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:1040:6393":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:13375:5412":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"27:1260:4633":{"crate_id":27,"path":["aho_corasick","nfa","IterTransitionsMut"],"kind":"struct"},"17:15190:5847":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:13412:5418":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:859:3343":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"23:359:3722":{"crate_id":23,"path":["anstyle","reset","Reset"],"kind":"struct"},"23:380:4208":{"crate_id":23,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"2:42937:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"25:2263:5006":{"crate_id":25,"path":["regex","re_bytes","NoExpand"],"kind":"struct"},"18:538:4144":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:42543:3437":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:4581:2767":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:14475:5632":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12695:5337":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"26:1602:26584":{"crate_id":26,"path":["regex_syntax","ast","ClassUnicodeOpKind"],"kind":"enum"},"6:6071:9236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:6254:6294":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:10905:5163":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:47075:7135":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:12792:5119":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:40879:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:3569:2843":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:8879:7343":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:5846:6239":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:46150:7099":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:1590:4800":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"11:883:6645":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:21567:10220":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:42130:6918":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"11:844:10036":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"9:391:21281":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:4989:9018":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"25:1895:4464":{"crate_id":25,"path":["regex","pikevm","Cache"],"kind":"struct"},"28:787:4565":{"crate_id":28,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:15426:5907":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"18:521:26547":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:11825:5243":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"26:1489:4774":{"crate_id":26,"path":["regex_syntax","ast","ClassPerl"],"kind":"struct"},"17:12572:4217":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:13211:5394":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:5867:9125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:4998:9024":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:2709:6159":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"14:187:21371":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4939:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:886:3940":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"27:1023:4602":{"crate_id":27,"path":["aho_corasick","ahocorasick","StreamChunkIter"],"kind":"struct"},"28:624:4541":{"crate_id":28,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:41013:7005":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:12061:1548":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:15418:5905":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:1682:8700":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"22:192:135":{"crate_id":22,"path":["humantime","date","Error"],"kind":"enum"},"2:3403:15409":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:12068:803":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:44963:9646":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:3012:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10915:35799":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:47435:7156":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:533:3071":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"26:2342:4807":{"crate_id":26,"path":["regex_syntax","hir","WordBoundary"],"kind":"enum"},"2:44225:2856":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:15814:6023":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:40814:6996":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:5910:9143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:7808:3470":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:8363:3439":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:10219:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:44307:7059":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:12887:4251":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:10068:22344":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"25:1398:4464":{"crate_id":25,"path":["regex","backtrack","Cache"],"kind":"struct"},"17:9916:22358":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"26:1155:26595":{"crate_id":26,"path":["regex_syntax","ast","parse","ClassState"],"kind":"enum"},"6:6819:9375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:1708:2832":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:13367:4009":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"26:1737:3907":{"crate_id":26,"path":["regex_syntax","ast","Assertion"],"kind":"struct"},"6:5085:9062":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:8916:3343":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"7:0:1697":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:4399:6186":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:12056:5283":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:613:35803":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"18:754:4579":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:12060:1515":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:15456:5913":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10185:4233":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"27:1314:26619":{"crate_id":27,"path":["aho_corasick","packed","api","MatchKind"],"kind":"enum"},"17:15582:5964":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:39911:15353":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"22:157:2926":{"crate_id":22,"path":["humantime","duration","FormattedDuration"],"kind":"struct"},"18:670:4565":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:2961:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:16121:6103":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"5:1537:6728":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:4236:15412":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"11:2304:6393":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:4453:2757":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:41044:4412":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"26:1502:26581":{"crate_id":26,"path":["regex_syntax","ast","ClassPerlKind"],"kind":"enum"},"9:52:4371":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:34026:15490":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11812:5241":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"30:137:4628":{"crate_id":30,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"5:1388:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:5015:9030":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"28:882:26546":{"crate_id":28,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:41053:7006":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:16235:6130":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:9054:4694":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:5331:4213":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:4787:6198":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13606:5465":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"22:227:2931":{"crate_id":22,"path":["humantime","date","Rfc3339Timestamp"],"kind":"struct"},"16:7452:22299":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:43835:6926":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:765:26546":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6292:6298":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:2724:264":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:42623:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:1686:3932":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:10709:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"27:1106:4596":{"crate_id":27,"path":["aho_corasick","dfa","DFA"],"kind":"enum"},"17:2175:22419":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:4491:6189":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"28:0:2627":{"crate_id":28,"path":["memchr"],"kind":"module"},"1:8348:10133":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:6244:22293":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:945:6644":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:5123:9085":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:12251:5298":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"11:2383:3436":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:3139:15352":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"26:2038:4695":{"crate_id":26,"path":["regex_syntax","hir","literal","Literals"],"kind":"struct"},"17:14847:5759":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:15197:5849":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:46405:7109":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:48393:7198":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:32825:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:4761:6197":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:3801:7229":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:7551:4358":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:3010:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:10218:4234":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:7716:10091":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:4249:10132":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"29:244:27275":{"crate_id":29,"path":["anstream","fmt","Adapter"],"kind":"struct"},"2:4448:2756":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"5:2196:4399":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:47311:7154":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:683:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"18:573:4541":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:11541:7230":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"26:2186:26598":{"crate_id":26,"path":["regex_syntax","hir","HirKind"],"kind":"enum"},"17:11467:5205":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:12078:1707":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:7653:6497":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:41157:7012":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"26:2524:36255":{"crate_id":26,"path":["regex_syntax","unicode","CanonicalClassQuery"],"kind":"enum"},"17:11537:5210":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:14372:5610":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:22:739":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:10002:2817":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:914:4397":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"27:0:3323":{"crate_id":27,"path":["aho_corasick"],"kind":"module"},"27:1649:4681":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesTwo"],"kind":"struct"},"5:7584:6753":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:2977:4015":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"27:1397:4650":{"crate_id":27,"path":["aho_corasick","packed","pattern","PatternIter"],"kind":"struct"},"2:22346:32633":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:12789:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"27:1126:4157":{"crate_id":27,"path":["aho_corasick","dfa","Standard"],"kind":"struct"},"2:40910:7001":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:11288:6708":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"25:1911:36230":{"crate_id":25,"path":["regex","pikevm","FollowEpsilon"],"kind":"enum"},"6:7702:9496":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:14177:5579":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:44165:7051":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:42114:6916":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:41082:6889":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"11:1887:3343":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:7482:6486":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"25:1994:4989":{"crate_id":25,"path":["regex","prog","InstEmptyLook"],"kind":"struct"},"6:6943:9450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:11618:4463":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:8071:4456":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:8362:7316":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:12074:15569":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:5408:15356":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:42740:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:21514:10224":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:42478:3421":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"28:768:4541":{"crate_id":28,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:11227:5185":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"28:725:4552":{"crate_id":28,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:15836:6029":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:14575:4247":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:6913:9435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:4462:6188":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:1478:4395":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:44959:9645":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"18:643:4541":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:495:8310":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:40821:15427":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:9671:22340":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:44556:6995":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:3609:3436":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13785:5508":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11865:5247":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:6679:2957":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:6107:9250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:22755:6959":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:12069:804":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:46196:7101":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12150:5288":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"25:1433:36233":{"crate_id":25,"path":["regex","compile","MaybeInst"],"kind":"enum"},"16:5499:6167":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:42584:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"25:1642:4941":{"crate_id":25,"path":["regex","exec","ExecNoSync"],"kind":"struct"},"26:1177:4180":{"crate_id":26,"path":["regex_syntax","ast","print","PrinterBuilder"],"kind":"struct"},"1:11067:27078":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:4706:9357":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:48583:7210":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:2795:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:9938:22359":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:13461:2908":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"}},"external_crates":{"31":{"name":"utf8parse","html_root_url":null},"28":{"name":"memchr","html_root_url":null},"25":{"name":"regex","html_root_url":null},"22":{"name":"humantime","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"colorchoice","html_root_url":null},"29":{"name":"anstream","html_root_url":null},"26":{"name":"regex_syntax","html_root_url":null},"23":{"name":"anstyle","html_root_url":null},"20":{"name":"log","html_root_url":"https://docs.rs/log/0.4.17/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"anstyle_query","html_root_url":null},"30":{"name":"anstyle_parse","html_root_url":null},"27":{"name":"aho_corasick","html_root_url":null},"24":{"name":"env_filter","html_root_url":null},"21":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}