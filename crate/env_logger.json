{"root":"0:0:2114","crate_version":"0.11.3","includes_private":false,"index":{"0:241-0:365:2113":{"id":"0:241-0:365:2113","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[82,0],"end":[82,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::writer::WriteStyle","name":"WriteStyle","id":"0:365:2113","glob":false}}},"2:2907:1755":{"id":"2:2907:1755","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:780":{"id":"0:79:780","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[695,4],"end":[699,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238-22:0:2116":{"id":"0:238-22:0:2116","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[75,0],"end":[75,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"import":{"source":"anstyle","name":"style","id":"22:0:2116","glob":false}}},"0:380":{"id":"0:380","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31998:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:29:2295":{"id":"0:29:2295","crate_id":0,"name":"parse_env","span":{"filename":"src/logger.rs","begin":[149,4],"end":[164,5]},"visibility":"public","docs":"Applies the configuration from the environment.\n\nThis function allows a builder to be configured with default parameters,\nto be then overridden by the environment.\n\n# Examples\n\nInitialise a logger with filter level `Off`, then override the log\nfilter from an environment variable called `MY_LOG`:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger with filter level `Off`, then use the `MY_LOG`\nvariable to override filtering and `MY_LOG_STYLE` to override  whether\nor not to write styles:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["env",{"generic":"E"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41612:3090-0:324:2262":{"id":"a:2:41612:3090-0:324:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41612:3090","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:407":{"id":"0:407","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[91,9],"end":[91,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3106:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41612:3090-0:247:142":{"id":"a:2:41612:3090-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41612:3090","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:39:2351":{"id":"0:39:2351","crate_id":0,"name":"format_target","span":{"filename":"src/logger.rs","begin":[272,4],"end":[275,5]},"visibility":"public","docs":"Whether or not to write the target in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:2487":{"id":"0:77:2487","crate_id":0,"name":"flush","span":{"filename":"src/logger.rs","begin":[691,4],"end":[691,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2429":{"id":"0:57:2429","crate_id":0,"name":"build","span":{"filename":"src/logger.rs","begin":[506,4],"end":[515,5]},"visibility":"public","docs":"Build an env logger.\n\nThe returned logger implements the `Log` trait and can be installed manually\nor nested within another logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3146:3485-0:324:2262":{"id":"a:2:3146:3485-0:324:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3146:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13250:27945":{"id":"2:13250:27945","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:980:41492"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323-0:3:2111":{"id":"0:323-0:3:2111","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[275,0],"end":[275,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::logger","name":"logger","id":"0:3:2111","glob":true}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[812,0],"end":[819,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:105:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2888-0:60:2442":{"id":"b:2:2888-0:60:2442","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2891:2307"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2615-0:247:142":{"id":"b:2:2615-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2617:2232"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31996:236-0:398:2112":{"id":"a:2:31996:236-0:398:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:729:2943":{"id":"5:729:2943","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:2:3111:246-0:336:2293":{"id":"a:2:3111:246-0:336:2293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:49:2263":{"id":"0:49:2263","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[390,4],"end":[393,5]},"visibility":"public","docs":"Adds filters to the logger.\n\nThe given module (if any) will log at most the specified level provided.\nIf no module is provided then the filter will apply to all log messages.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter(Some(\"path::to::module\"), LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["module",{"resolved_path":{"name":"Option","id":"2:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:223:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32053:3154-0:355:248":{"id":"a:2:32053:3154-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32053:3154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2892-0:365:2113":{"id":"b:2:2892-0:365:2113","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13131:35062":{"id":"2:13131:35062","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:2507":{"id":"0:93:2507","crate_id":0,"name":"write_style_or","span":{"filename":"src/logger.rs","begin":[776,4],"end":[784,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["write_style_env",{"generic":"E"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3727-0:247:142":{"id":"b:2:3727-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13180:28080":{"id":"2:13180:28080","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12812:4769","`DoubleEndedIterator`":"2:8205:129","prim@char":"1:12325:458","str::split":"2:13174:2680"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43397:6924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:15495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13252:35081":{"id":"2:13252:35081","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4906:35081"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43678:7003","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:35775":{"id":"5:5604:35775","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2341","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:295:2341","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:731:3590":{"id":"5:731:3590","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:2349":{"id":"0:38:2349","crate_id":0,"name":"format_module_path","span":{"filename":"src/logger.rs","begin":[266,4],"end":[269,5]},"visibility":"public","docs":"Whether or not to write the module path in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378:850":{"id":"0:378:850","crate_id":0,"name":"hash","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,33],"end":[12,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10471:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2888-0:247:142":{"id":"b:2:2888-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2891:2307"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13189:28082":{"id":"2:13189:28082","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12812:4769","str::rsplitn":"2:13192:28084"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43483:5084","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356:2771":{"id":"0:356:2771","crate_id":0,"name":"Stdout","span":{"filename":"src/fmt/writer/target.rs","begin":[6,4],"end":[6,10]},"visibility":"default","docs":"Logs will be sent to standard output.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2898-0:324:2262":{"id":"b:2:2898-0:324:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:136","2:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13146:28075":{"id":"2:13146:28075","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13147:28076"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13217:35073":{"id":"2:13217:35073","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2888-0:156:2592":{"id":"b:2:2888-0:156:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2891:2307"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2898-0:60:2442":{"id":"b:2:2898-0:60:2442","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:136","2:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2888-0:355:248":{"id":"b:2:2888-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2891:2307"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13142:35063":{"id":"2:13142:35063","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12331:1672","str::slice_mut_unchecked":"2:13143:35064","crate::ops::Index":"2:39126:10163"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:385:2750":{"id":"0:385:2750","crate_id":0,"name":"Auto","span":{"filename":"src/fmt/writer/mod.rs","begin":[16,4],"end":[16,8]},"visibility":"default","docs":"Try to print styles, but don't force the issue.","links":{},"attrs":["#[default]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2892-0:336:2293":{"id":"b:2:2892-0:336:2293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:727-0:365:2113":{"id":"b:5:727-0:365:2113","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:2943","5:730:2512","5:731:3590"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:37:2346":{"id":"0:37:2346","crate_id":0,"name":"format_level","span":{"filename":"src/logger.rs","begin":[260,4],"end":[263,5]},"visibility":"public","docs":"Whether or not to write the level in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:322-0:365:2113":{"id":"0:322-0:365:2113","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[274,48],"end":[274,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::WriteStyle","name":"WriteStyle","id":"0:365:2113","glob":false}}},"b:2:2903-0:247:142":{"id":"b:2:2903-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2906:136","2:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13201:2475":{"id":"2:13201:2475","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12812:4769","`DoubleEndedIterator`":"2:8205:129","prim@char":"1:12325:458","str::rmatches":"2:13204:35068"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43583:5082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2509":{"id":"0:96:2509","crate_id":0,"name":"default_write_style_or","span":{"filename":"src/logger.rs","begin":[789,4],"end":[796,5]},"visibility":"public","docs":"Use the default environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403:2367":{"id":"0:403:2367","crate_id":0,"name":"Micros","span":{"filename":"src/fmt/mod.rs","begin":[98,4],"end":[98,10]},"visibility":"default","docs":"Microsecond precision (6 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41611:3091-0:398:2112":{"id":"a:2:41611:3091-0:398:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41611:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:245":{"id":"0:245","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[104,0],"end":[108,1]},"visibility":"default","docs":"The default timestamp precision is seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:246:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:48:2394":{"id":"0:48:2394","crate_id":0,"name":"filter_level","span":{"filename":"src/logger.rs","begin":[368,4],"end":[371,5]},"visibility":"public","docs":"Adds a directive to the filter for all modules.\n\n# Examples\n\nOnly include messages for info and above for logs globally:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:223:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/target.rs","begin":[14,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:212:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[803,0],"end":[810,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::borrow::Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:102:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:398:2112":{"id":"0:398:2112","crate_id":0,"name":"TimestampPrecision","span":{"filename":"src/fmt/mod.rs","begin":[92,0],"end":[101,1]},"visibility":"public","docs":"Formatting precision of timestamps.\n\nSeconds give precision of full seconds, milliseconds give thousands of a\nsecond (3 decimal digits), microseconds are millionth of a second (6 decimal\ndigits) and nanoseconds are billionth of a second (9 decimal digits).","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:399:2361","0:401:2364","0:403:2367","0:405:2370"],"impls":["a:2:3146:3485-0:398:2112","a:2:41612:3090-0:398:2112","a:2:3111:246-0:398:2112","a:2:32053:3154-0:398:2112","a:2:31996:236-0:398:2112","a:2:41611:3091-0:398:2112","b:2:3727-0:398:2112","b:2:2898-0:398:2112","b:2:2892-0:398:2112","b:2:2615-0:398:2112","b:2:2618-0:398:2112","b:2:2903-0:398:2112","b:2:2888-0:398:2112","b:5:727-0:398:2112","0:407","0:408","0:245","0:410"]}}},"2:2906:136":{"id":"2:2906:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31924:8527","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:32053:3154-0:60:2442":{"id":"a:2:32053:3154-0:60:2442","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32053:3154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:247:142":{"id":"0:247:142","crate_id":0,"name":"Formatter","span":{"filename":"src/fmt/mod.rs","begin":[130,0],"end":[133,1]},"visibility":"public","docs":"A formatter to write logs into.\n\n`Formatter` implements the standard [`Write`] trait for writing log records.\nIt also supports terminal styling using ANSI escape codes.\n\n# Examples\n\nUse the [`writeln`] macro to format a log record.\nAn instance of a `Formatter` is passed to an `env_logger` format as `buf`:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}: {}\", record.level(), record.args()));\n```\n\n[`Write`]: std::io::Write\n[`writeln`]: std::writeln","links":{"std::io::Write":"1:3590:2630","std::writeln":"2:16:2919"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:150","0:255","a:2:3146:3485-0:247:142","a:2:41612:3090-0:247:142","a:2:3111:246-0:247:142","a:2:32053:3154-0:247:142","a:2:31996:236-0:247:142","a:2:41611:3091-0:247:142","b:2:3727-0:247:142","b:2:2898-0:247:142","b:2:2892-0:247:142","b:2:2615-0:247:142","b:2:2618-0:247:142","b:2:2903-0:247:142","b:2:2888-0:247:142","0:260","0:257"]}}},"b:2:2888-0:336:2293":{"id":"b:2:2888-0:336:2293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2891:2307"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32053:3154-0:365:2113":{"id":"a:2:32053:3154-0:365:2113","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32053:3154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3146:3485-0:247:142":{"id":"a:2:3146:3485-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3146:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2898-0:336:2293":{"id":"b:2:2898-0:336:2293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2901:136","2:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13156:33440":{"id":"2:13156:33440","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43671:6939","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[623,0],"end":[692,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Log","id":"20:120:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:72:2477","0:73:2118","0:77:2487"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[694,0],"end":[700,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2903-0:336:2293":{"id":"b:2:2903-0:336:2293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2906:136","2:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41611:3091-0:336:2293":{"id":"a:2:41611:3091-0:336:2293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41611:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13242:2403":{"id":"2:13242:2403","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12773:135","`FromStr`":"2:12772:2991"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12772:2991","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12772:2991","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2888-0:365:2113":{"id":"b:2:2888-0:365:2113","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2891:2307"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13136:28045":{"id":"2:13136:28045","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41519:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13149:6940":{"id":"2:13149:6940","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43349:6933","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:2437":{"id":"0:56:2437","crate_id":0,"name":"init","span":{"filename":"src/logger.rs","begin":[497,4],"end":[500,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3146:3485-0:398:2112":{"id":"a:2:3146:3485-0:398:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3146:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:68:2318":{"id":"0:68:2318","crate_id":0,"name":"from_default_env","span":{"filename":"src/logger.rs","begin":[607,4],"end":[609,5]},"visibility":"public","docs":"Creates the logger from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The logger will use the\n[default environment variables].\n\n# Examples\n\nCreates a logger using the default environment variables:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_default_env();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13123:3532":{"id":"2:13123:3532","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:366:2752":{"id":"0:366:2752","crate_id":0,"name":"Always","span":{"filename":"src/fmt/writer/mod.rs","begin":[18,4],"end":[18,10]},"visibility":"default","docs":"Try very hard to print styles.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41612:3090-0:365:2113":{"id":"a:2:41612:3090-0:365:2113","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41612:3090","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41612:3090-0:355:248":{"id":"a:2:41612:3090-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41612:3090","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:3727-0:355:248":{"id":"b:2:3727-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[10,0],"end":[70,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::fmt::Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:2358","0:152:2668","0:153:2669","0:154:2670","0:155:2671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:42:2360":{"id":"0:42:2360","crate_id":0,"name":"format_timestamp_secs","span":{"filename":"src/logger.rs","begin":[291,4],"end":[293,5]},"visibility":"public","docs":"Configures the timestamp to use second precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2290":{"id":"0:26:2290","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[104,4],"end":[111,5]},"visibility":"public","docs":"Initializes the log builder from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nInitialise a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::from_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13233:35078":{"id":"2:13233:35078","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12812:4769"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:15495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13215:35072":{"id":"2:13215:35072","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2615-0:324:2262":{"id":"b:2:2615-0:324:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2617:2232"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:399:2361":{"id":"0:399:2361","crate_id":0,"name":"Seconds","span":{"filename":"src/fmt/mod.rs","begin":[94,4],"end":[94,11]},"visibility":"default","docs":"Full second precision (0 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:401:2364":{"id":"0:401:2364","crate_id":0,"name":"Millis","span":{"filename":"src/fmt/mod.rs","begin":[96,4],"end":[96,10]},"visibility":"default","docs":"Millisecond precision (3 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13220:35075":{"id":"2:13220:35075","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3727-0:365:2113":{"id":"b:2:3727-0:365:2113","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:358:2776":{"id":"0:358:2776","crate_id":0,"name":"Pipe","span":{"filename":"src/fmt/writer/target.rs","begin":[11,4],"end":[11,50]},"visibility":"default","docs":"Logs will be sent to a custom pipe.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:360:1923"]},"discriminant":null}}},"a:2:3111:246-0:324:2262":{"id":"a:2:3111:246-0:324:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13125:35060":{"id":"2:13125:35060","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13227:27603":{"id":"2:13227:27603","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12812:4769"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2620:2612":{"id":"2:2620:2612","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:2669":{"id":"0:153:2669","crate_id":0,"name":"timestamp_millis","span":{"filename":"src/fmt/humantime.rs","begin":[46,4],"end":[51,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmillisecond precision.","links":{"`Timestamp`":"0:156:2592"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:239-0:156:2592":{"id":"0:239-0:156:2592","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[78,0],"end":[78,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"humantime\")]"],"deprecation":null,"inner":{"import":{"source":"self::humantime::Timestamp","name":"Timestamp","id":"0:156:2592","glob":false}}},"0:371:462":{"id":"0:371:462","crate_id":0,"name":"clone","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2618-0:336:2293":{"id":"b:2:2618-0:336:2293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2620:2612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[157,0],"end":[178,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:256:2616"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:34:793":{"id":"0:34:793","crate_id":0,"name":"format","span":{"filename":"src/logger.rs","begin":[243,4],"end":[249,5]},"visibility":"public","docs":"Sets the format function for formatting the log output.\n\nThis function is called on each record logged and should format the\nlog record and output it to the given [`Formatter`].\n\nThe format function is expected to output the string directly to the\n`Formatter` so that implementations can use the [`std::fmt`] macros\nto format and output without intermediate heap allocations. The default\n`env_logger` formatter takes advantage of this.\n\nWhen the `color` feature is enabled, styling via ANSI escape codes is supported and the\noutput will automatically respect [`Builder::write_style`].\n\n# Examples\n\nUse a custom format to write only the log message:\n\n```\nuse std::io::Write;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}\", record.args()));\n```\n\n[`Formatter`]: fmt/struct.Formatter.html\n[`String`]: https://doc.rust-lang.org/stable/std/string/struct.String.html\n[`std::fmt`]: https://doc.rust-lang.org/std/fmt/index.html","links":{"`Builder::write_style`":"0:52:2416"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["format",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3352:139","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:287:2238","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:3022:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:411:780":{"id":"0:411:780","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[91,22],"end":[91,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13183:35066":{"id":"2:13183:35066","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12812:4769","str::split":"2:13174:2680","prim@char":"1:12325:458","`DoubleEndedIterator`":"2:8205:129","str::rsplit_terminator":"2:13186:35067"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43429:7073","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13151:3900":{"id":"2:13151:3900","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43365:3044","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13160:28089":{"id":"2:13160:28089","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12812:4769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13133:28048":{"id":"2:13133:28048","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12342:1800"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2888-0:398:2112":{"id":"b:2:2888-0:398:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2891:2307"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3:2111":{"id":"0:3:2111","crate_id":0,"name":"logger","span":{"filename":"src/logger.rs","begin":[1,0],"end":[1036,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:2244","0:23:2247","0:324:2262","0:60:2442","0:336:2293","0:116:2428","0:117:2437","0:118:2516","0:121:2531","0:124:2294","0:125:2290"],"is_stripped":true}}},"b:2:2903-0:355:248":{"id":"b:2:2903-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2906:136","2:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2903-0:365:2113":{"id":"b:2:2903-0:365:2113","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2906:136","2:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2892-0:398:2112":{"id":"b:2:2892-0:398:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[190,0],"end":[198,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:261:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[712,9],"end":[712,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:342:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:152:2668":{"id":"0:152:2668","crate_id":0,"name":"timestamp_seconds","span":{"filename":"src/fmt/humantime.rs","begin":[37,4],"end":[42,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with full\nsecond precision.","links":{"`Timestamp`":"0:156:2592"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3729:1770":{"id":"2:3729:1770","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39295:6993","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,16],"end":[12,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3106:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32053:3154-0:324:2262":{"id":"a:2:32053:3154-0:324:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32053:3154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3111:246-0:156:2592":{"id":"a:2:3111:246-0:156:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3146:3485-0:365:2113":{"id":"a:2:3146:3485-0:365:2113","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3146:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[180,0],"end":[188,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","by_ref","write_vectored","write_all","write_all_vectored","write_fmt"],"trait":{"name":"Write","id":"1:3590:2630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:258:2347","0:259:2487"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:128:780":{"id":"0:128:780","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[1,0],"end":[809,1]},"visibility":"public","docs":"Formatting for log records.\n\nThis module contains a [`Formatter`] that can be used to format log records\ninto without needing temporary allocations. Usually you won't need to worry\nabout the contents of this module and can use the `Formatter` like an ordinary\n[`Write`].\n\n# Formatting log records\n\nThe format used to print log records can be customised using the [`Builder::format`]\nmethod.\n\nTerminal styling is done through ANSI escape codes and will be adapted to the capabilities of\nthe target stream.\nFor example, you could use one of:\n- [anstyle](https://docs.rs/anstyle) is a minimal, runtime string styling API and is re-exported as [`style`]\n- [owo-colors](https://docs.rs/owo-colors) is a feature rich runtime string styling API\n- [color-print](https://docs.rs/color-print) for feature-rich compile-time styling API\nSee also [`Formatter::default_level_style`]\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    writeln!(buf, \"{}: {}\",\n        record.level(),\n        record.args())\n});\n```\n\n# Key Value arguments\n\nIf the `unstable-kv` feature is enabled, then the default format will include key values from\nthe log by default, but this can be disabled by calling [`Builder::format_key_values`]\nwith [`hidden_kv_format`] as the format function.\n\nThe way these keys and values are formatted can also be customized with a separate format\nfunction that is called by the default format with [`Builder::format_key_values`].\n\n```\n# #[cfg(feature= \"unstable-kv\")]\n# {\nuse log::info;\nenv_logger::init();\ninfo!(x=\"45\"; \"Some message\");\ninfo!(x=\"12\"; \"Another message {x}\", x=\"12\");\n# }\n```\n\nSee <https://docs.rs/log/latest/log/#structured-logging>.\n\n[`Builder::format`]: crate::Builder::format\n[`Write`]: std::io::Write\n[`Builder::format_key_values`]: crate::Builder::format_key_values","links":{"`Formatter`":"0:247:142","crate::Builder::format":"0:34:793","std::io::Write":"1:3590:2630","`style`":"22:0:2116","`Formatter::default_level_style`":"0:256:2616"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:238-22:0:2116","0:239-0:156:2592","0:240-0:355:248","0:241-0:365:2113","0:398:2112","0:247:142"],"is_stripped":false}}},"5:5605:2636":{"id":"5:5605:2636","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32053:3154-0:398:2112":{"id":"a:2:32053:3154-0:398:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32053:3154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:65:2290":{"id":"0:65:2290","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[583,4],"end":[588,5]},"visibility":"public","docs":"Creates the logger from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nCreate a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_env(\"MY_LOG\");\n```\n\nCreate a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Logger, Env};\n\nlet env = Env::new().filter_or(\"MY_LOG\", \"info\").write_style_or(\"MY_LOG_STYLE\", \"always\");\n\nlet logger = Logger::from_env(env);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13186:35067":{"id":"2:13186:35067","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12812:4769","str::split":"2:13174:2680","prim@char":"1:12325:458","str::split_terminator":"2:13183:35066"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43447:7074","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:15495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2309":{"id":"0:50:2309","crate_id":0,"name":"parse_filters","span":{"filename":"src/logger.rs","begin":[399,4],"end":[402,5]},"visibility":"public","docs":"Parses the directives string in the same form as the `RUST_LOG`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["filters",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,33],"end":[12,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10463:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:378:850"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3111:246-0:398:2112":{"id":"a:2:3111:246-0:398:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:83:2263":{"id":"0:83:2263","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[725,4],"end":[732,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["filter_env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:780":{"id":"0:59:780","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[519,4],"end":[528,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3727-0:60:2442":{"id":"b:2:3727-0:60:2442","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:33:2324":{"id":"0:33:2324","crate_id":0,"name":"parse_default_env","span":{"filename":"src/logger.rs","begin":[210,4],"end":[212,5]},"visibility":"public","docs":"Applies the configuration from the environment using default variable names.\n\nThis method is a convenient way to call `parse_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger with filter level `Off`, then configure it using the\ndefault environment variables:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:1153":{"id":"0:82:1153","crate_id":0,"name":"new","span":{"filename":"src/logger.rs","begin":[720,4],"end":[722,5]},"visibility":"public","docs":"Get a default set of environment variables.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:371:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32053:3154-0:247:142":{"id":"a:2:32053:3154-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32053:3154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13254:10130":{"id":"2:13254:10130","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4907:10130"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43687:6874","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:398:2112":{"id":"b:2:2898-0:398:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:136","2:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:240-0:355:248":{"id":"0:240-0:355:248","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[81,0],"end":[81,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::writer::Target","name":"Target","id":"0:355:248","glob":false}}},"b:2:2892-0:156:2592":{"id":"b:2:2892-0:156:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:256:2616":{"id":"0:256:2616","crate_id":0,"name":"default_level_style","span":{"filename":"src/fmt/mod.rs","begin":[163,4],"end":[177,5]},"visibility":"public","docs":"Get the default [`style::Style`] for the given level.\n\nThe style can be used to print other values besides the level.\n\nSee [`style`] for how to adapt it to the styling crate of your choice","links":{"`style`":"22:0:2116","`style::Style`":"22:405:2617"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"Level","id":"20:194:2590","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"style::Style","id":"22:405:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:35777":{"id":"5:5611:35777","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5856:1730":{"id":"5:5856:1730","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3727-0:398:2112":{"id":"b:2:3727-0:398:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:121:2531":{"id":"0:121:2531","crate_id":0,"name":"init_from_env","span":{"filename":"src/logger.rs","begin":[942,0],"end":[948,1]},"visibility":"public","docs":"Initializes the global logger with an env logger from the given environment\nvariables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::init_from_env(env);\n```\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:2389":{"id":"0:47:2389","crate_id":0,"name":"filter_module","span":{"filename":"src/logger.rs","begin":[349,4],"end":[352,5]},"visibility":"public","docs":"Adds a directive to the filter for a specific module.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_module(\"path::to::module\", LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["module",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:223:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2442":{"id":"0:60:2442","crate_id":0,"name":"Logger","span":{"filename":"src/logger.rs","begin":[550,0],"end":[554,1]},"visibility":"public","docs":"The env logger.\n\nThis struct implements the `Log` trait from the [`log` crate][log-crate-url],\nwhich allows it to act as a logger.\n\nThe [`init()`], [`try_init()`], [`Builder::init()`] and [`Builder::try_init()`]\nmethods will each construct a `Logger` and immediately initialize it as the\ndefault global logger.\n\nIf you'd instead need access to the constructed `Logger`, you can use\nthe associated [`Builder`] and install it with the\n[`log` crate][log-crate-url] directly.\n\n[log-crate-url]: https://docs.rs/log\n[`init()`]: fn.init.html\n[`try_init()`]: fn.try_init.html\n[`Builder::init()`]: struct.Builder.html#method.init\n[`Builder::try_init()`]: struct.Builder.html#method.try_init\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:64","a:2:3146:3485-0:60:2442","a:2:41612:3090-0:60:2442","a:2:3111:246-0:60:2442","a:2:32053:3154-0:60:2442","a:2:31996:236-0:60:2442","a:2:41611:3091-0:60:2442","b:2:3727-0:60:2442","b:2:2898-0:60:2442","b:2:2892-0:60:2442","b:2:2615-0:60:2442","b:2:2618-0:60:2442","b:2:2903-0:60:2442","b:2:2888-0:60:2442","0:71","0:78"]}}},"2:13236:35079":{"id":"2:13236:35079","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12812:4769"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13124:35059":{"id":"2:13124:35059","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2671":{"id":"0:155:2671","crate_id":0,"name":"timestamp_nanos","span":{"filename":"src/fmt/humantime.rs","begin":[64,4],"end":[69,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nnanosecond precision.","links":{"`Timestamp`":"0:156:2592"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2416":{"id":"0:91:2416","crate_id":0,"name":"write_style","span":{"filename":"src/logger.rs","begin":[764,4],"end":[771,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["write_style_env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13127:35061":{"id":"2:13127:35061","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13125:35060"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2416":{"id":"0:52:2416","crate_id":0,"name":"write_style","span":{"filename":"src/logger.rs","begin":[443,4],"end":[446,5]},"visibility":"public","docs":"Sets whether or not styles will be written.\n\nThis can be useful in environments that don't support control characters\nfor setting colors.\n\n# Examples\n\nNever attempt to write styles:\n\n```\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder.write_style(WriteStyle::Never);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write_style",{"resolved_path":{"name":"fmt::WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:2290":{"id":"0:125:2290","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[967,0],"end":[972,1]},"visibility":"public","docs":"Create a builder from the given environment variables.\n\nThe builder can be configured before being initialized.","links":{},"attrs":["#[deprecated(since = \"0.8.0\", note =\n\"Prefer `env_logger::Builder::from_env()` instead.\")]"],"deprecation":{"since":"0.8.0","note":"Prefer `env_logger::Builder::from_env()` instead."},"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13154:3892":{"id":"2:13154:3892","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43633:3041","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13251:27946":{"id":"2:13251:27946","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:980:41492"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13255:27217":{"id":"2:13255:27217","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4904:27217"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43696:7002","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41612:3090-0:60:2442":{"id":"a:2:41612:3090-0:60:2442","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41612:3090","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13177:28078":{"id":"2:13177:28078","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12812:4769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12628:6921","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:365:2113":{"id":"0:365:2113","crate_id":0,"name":"WriteStyle","span":{"filename":"src/fmt/writer/mod.rs","begin":[13,0],"end":[21,1]},"visibility":"public","docs":"Whether or not to print styles to the target.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:385:2750","0:366:2752","0:368:2618"],"impls":["a:2:3146:3485-0:365:2113","a:2:41612:3090-0:365:2113","a:2:3111:246-0:365:2113","a:2:32053:3154-0:365:2113","a:2:31996:236-0:365:2113","a:2:41611:3091-0:365:2113","b:2:3727-0:365:2113","b:2:2898-0:365:2113","b:2:2892-0:365:2113","b:2:2615-0:365:2113","b:2:2618-0:365:2113","b:2:2903-0:365:2113","b:2:2888-0:365:2113","b:5:727-0:365:2113","0:370","0:377","0:372","0:222","0:383","0:381","0:375","0:373","0:220","0:380"]}}},"b:5:727-0:398:2112":{"id":"b:5:727-0:398:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:723:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:729:2943","5:730:2512","5:731:3590"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:151:2358":{"id":"0:151:2358","crate_id":0,"name":"timestamp","span":{"filename":"src/fmt/humantime.rs","begin":[28,4],"end":[33,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC.\n\n# Examples\n\nInclude the current timestamp with the log record:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    let ts = buf.timestamp();\n\n    writeln!(buf, \"{}: {}: {}\", ts, record.level(), record.args())\n});\n```","links":{"`Timestamp`":"0:156:2592"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,22],"end":[12,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73:2118":{"id":"0:73:2118","crate_id":0,"name":"log","span":{"filename":"src/logger.rs","begin":[628,4],"end":[689,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["record",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:287:2238","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2892-0:324:2262":{"id":"b:2:2892-0:324:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:105:60":{"id":"0:105:60","crate_id":0,"name":"default","span":{"filename":"src/logger.rs","begin":[813,4],"end":[818,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41612:3090-0:336:2293":{"id":"a:2:41612:3090-0:336:2293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41612:3090","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:31996:236-0:324:2262":{"id":"a:2:31996:236-0:324:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:324:2262":{"id":"0:324:2262","crate_id":0,"name":"Builder","span":{"filename":"src/logger.rs","begin":[38,0],"end":[43,1]},"visibility":"public","docs":"`Builder` acts as builder for initializing a `Logger`.\n\nIt can be used to customize the log format, change the environment variable used\nto provide the logging directives and also set the default log level filter.\n\n# Examples\n\n```\n# use std::io::Write;\nuse env_logger::Builder;\nuse log::{LevelFilter, error, info};\n\nlet mut builder = Builder::from_default_env();\n\nbuilder\n    .format(|buf, record| writeln!(buf, \"{} - {}\", record.level(), record.args()))\n    .filter(None, LevelFilter::Info)\n    .init();\n\nerror!(\"error message\");\ninfo!(\"info message\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:24","a:2:3146:3485-0:324:2262","a:2:41612:3090-0:324:2262","a:2:3111:246-0:324:2262","a:2:32053:3154-0:324:2262","a:2:31996:236-0:324:2262","a:2:41611:3091-0:324:2262","b:2:3727-0:324:2262","b:2:2898-0:324:2262","b:2:2892-0:324:2262","b:2:2615-0:324:2262","b:2:2618-0:324:2262","b:2:2903-0:324:2262","b:2:2888-0:324:2262","0:58","0:329"]}}},"0:70:2475":{"id":"0:70:2475","crate_id":0,"name":"matches","span":{"filename":"src/logger.rs","begin":[618,4],"end":[620,5]},"visibility":"public","docs":"Checks if this record matches the configured filter.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["record",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:287:2238","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2894:810":{"id":"2:2894:810","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:2244":{"id":"0:22:2244","crate_id":0,"name":"DEFAULT_FILTER_ENV","span":{"filename":"src/logger.rs","begin":[10,0],"end":[10,48]},"visibility":"public","docs":"The default name for the environment variable to read filters from.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"expr":"\"RUST_LOG\"","value":null,"is_literal":true}}},"2:13138:28046":{"id":"2:13138:28046","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13134:2504":{"id":"2:13134:2504","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41519:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3146:3485-0:156:2592":{"id":"a:2:3146:3485-0:156:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3146:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3146:3485-0:336:2293":{"id":"a:2:3146:3485-0:336:2293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3146:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:336:2293":{"id":"0:336:2293","crate_id":0,"name":"Env","span":{"filename":"src/logger.rs","begin":[713,0],"end":[716,1]},"visibility":"public","docs":"Set of environment variables to configure from.\n\n# Default environment variables\n\nBy default, the `Env` will read the following environment variables:\n\n- `RUST_LOG`: the level filter\n- `RUST_LOG_STYLE`: whether or not to print styles with records.\n\nThese sources can be configured using the builder methods on `Env`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:80","a:2:3146:3485-0:336:2293","a:2:41612:3090-0:336:2293","a:2:3111:246-0:336:2293","a:2:32053:3154-0:336:2293","a:2:31996:236-0:336:2293","a:2:41611:3091-0:336:2293","b:2:3727-0:336:2293","b:2:2898-0:336:2293","b:2:2892-0:336:2293","b:2:2615-0:336:2293","b:2:2618-0:336:2293","b:2:2903-0:336:2293","b:2:2888-0:336:2293","0:99","0:103","0:340"]}}},"2:13198:28087":{"id":"2:13198:28087","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:15495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2888-0:324:2262":{"id":"b:2:2888-0:324:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2891:2307"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31996:236-0:336:2293":{"id":"a:2:31996:236-0:336:2293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3111:246-0:365:2113":{"id":"a:2:3111:246-0:365:2113","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:246:60":{"id":"0:246:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/mod.rs","begin":[105,4],"end":[107,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:355:248":{"id":"b:2:2898-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:136","2:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:212:780":{"id":"0:212:780","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/writer/target.rs","begin":[15,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:409:462":{"id":"0:409:462","crate_id":0,"name":"clone","span":{"filename":"src/fmt/mod.rs","begin":[91,15],"end":[91,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:321-0:398:2112":{"id":"0:321-0:398:2112","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[274,28],"end":[274,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::TimestampPrecision","name":"TimestampPrecision","id":"0:398:2112","glob":false}}},"2:13145:28072":{"id":"2:13145:28072","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13144:28071","str::split_at_mut_checked":"2:13147:28076"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2263":{"id":"0:69:2263","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[613,4],"end":[615,5]},"visibility":"public","docs":"Returns the maximum `LevelFilter` that this env logger instance is\nconfigured to output.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LevelFilter","id":"20:223:2235","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:2372":{"id":"0:46:2372","crate_id":0,"name":"format_suffix","span":{"filename":"src/logger.rs","begin":[311,4],"end":[314,5]},"visibility":"public","docs":"Configures the end of line suffix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["suffix",{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41611:3091-0:355:248":{"id":"a:2:41611:3091-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41611:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[83,0],"end":[98,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2665:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:382:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13207:35069":{"id":"2:13207:35069","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12812:4769","`DoubleEndedIterator`":"2:8205:129","prim@char":"1:12325:458","str::rmatch_indices":"2:13210:35070"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43529:7075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:405:2370":{"id":"0:405:2370","crate_id":0,"name":"Nanos","span":{"filename":"src/fmt/mod.rs","begin":[100,4],"end":[100,9]},"visibility":"default","docs":"Nanosecond precision (9 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41611:3091-0:324:2262":{"id":"a:2:41611:3091-0:324:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41611:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:3727-0:324:2262":{"id":"b:2:3727-0:324:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2902:1757":{"id":"2:2902:1757","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41630:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:810":{"id":"0:102:810","crate_id":0,"name":"from","span":{"filename":"src/logger.rs","begin":[807,4],"end":[809,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["filter_env",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32053:3154-0:156:2592":{"id":"a:2:32053:3154-0:156:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32053:3154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:156:2592":{"id":"0:156:2592","crate_id":0,"name":"Timestamp","span":{"filename":"src/fmt/humantime.rs","begin":[78,0],"end":[81,1]},"visibility":"public","docs":"An [RFC3339] formatted timestamp.\n\nThe timestamp implements [`Display`] and can be written to a [`Formatter`].\n\n[RFC3339]: https://www.ietf.org/rfc/rfc3339.txt\n[`Display`]: std::fmt::Display","links":{"`Formatter`":"0:247:142","std::fmt::Display":"2:10252:128"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:3146:3485-0:156:2592","a:2:41612:3090-0:156:2592","a:2:3111:246-0:156:2592","a:2:32053:3154-0:156:2592","a:2:31996:236-0:156:2592","a:2:41611:3091-0:156:2592","b:2:3727-0:156:2592","b:2:2898-0:156:2592","b:2:2892-0:156:2592","b:2:2615-0:156:2592","b:2:2618-0:156:2592","b:2:2903-0:156:2592","b:2:2888-0:156:2592","b:5:5854-0:156:2592","0:159","0:168"]}}},"0:368:2618":{"id":"0:368:2618","crate_id":0,"name":"Never","span":{"filename":"src/fmt/writer/mod.rs","begin":[20,4],"end":[20,9]},"visibility":"default","docs":"Never print styles.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2618-0:324:2262":{"id":"b:2:2618-0:324:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2620:2612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2618-0:156:2592":{"id":"b:2:2618-0:156:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2620:2612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:223:810":{"id":"0:223:810","crate_id":0,"name":"from","span":{"filename":"src/fmt/writer/mod.rs","begin":[37,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["choice",{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2892-0:60:2442":{"id":"b:2:2892-0:60:2442","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2903-0:398:2112":{"id":"b:2:2903-0:398:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2906:136","2:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13246:27940":{"id":"2:13246:27940","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:35779":{"id":"5:5620:35779","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:295:2341","`String`":"5:7632:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2341","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13170:3531":{"id":"2:13170:3531","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41519:190","prim@char":"1:12325:458","self::pattern":"2:12812:4769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:15495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13219:35074":{"id":"2:13219:35074","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:362:60":{"id":"0:362:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/writer/target.rs","begin":[3,9],"end":[3,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3727-0:336:2293":{"id":"b:2:3727-0:336:2293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2898-0:156:2592":{"id":"b:2:2898-0:156:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:136","2:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41612:3090-0:156:2592":{"id":"a:2:41612:3090-0:156:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41612:3090","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:41:2357":{"id":"0:41:2357","crate_id":0,"name":"format_timestamp","span":{"filename":"src/logger.rs","begin":[285,4],"end":[288,5]},"visibility":"public","docs":"Configures if timestamp should be included and in what precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["timestamp",{"resolved_path":{"name":"Option","id":"2:41517:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"fmt::TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[24,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ColorChoice","id":"31:21:2754","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:221:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2898-0:247:142":{"id":"b:2:2898-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:136","2:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13143:35064":{"id":"2:13143:35064","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12331:1672","crate::ops::IndexMut":"2:3387:10164","str::slice_unchecked":"2:13142:35063"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[91,15],"end":[91,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2631:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:409:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:154:2670":{"id":"0:154:2670","crate_id":0,"name":"timestamp_micros","span":{"filename":"src/fmt/humantime.rs","begin":[55,4],"end":[60,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmicrosecond precision.","links":{"`Timestamp`":"0:156:2592"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13213:35071":{"id":"2:13213:35071","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13244:27937":{"id":"2:13244:27937","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13121":{"id":"2:13121","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13122:974","2:13123:3532","2:13124:35059","2:13125:35060","2:13127:35061","2:13130:2690","2:13131:35062","2:13132:334","2:13133:28048","2:13134:2504","2:13136:28045","2:13138:28046","2:13140:28047","2:13142:35063","2:13143:35064","2:13144:28071","2:13145:28072","2:13146:28075","2:13147:28076","2:13149:6940","2:13150:7089","2:13151:3900","2:13152:33424","2:13153:33397","2:13154:3892","2:13155:35065","2:13156:33440","2:13157:28088","2:13160:28089","2:13163:28090","2:13166:3570","2:13170:3531","2:13174:2680","2:13177:28078","2:13180:28080","2:13183:35066","2:13186:35067","2:13189:28082","2:13192:28084","2:13195:28086","2:13198:28087","2:13201:2475","2:13204:35068","2:13207:35069","2:13210:35070","2:13213:35071","2:13215:35072","2:13217:35073","2:13219:35074","2:13220:35075","2:13221:35076","2:13224:35077","2:13227:27603","2:13230:28091","2:13233:35078","2:13236:35079","2:13239:35080","2:13242:2403","2:13244:27937","2:13245:27938","2:13246:27940","2:13247:27941","2:13248:27942","2:13249:27944","2:13250:27945","2:13251:27946","2:13252:35081","2:13254:10130","2:13255:27217"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2903-0:60:2442":{"id":"b:2:2903-0:60:2442","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2906:136","2:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13153:33397":{"id":"2:13153:33397","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13152:33424"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43662:7080","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2891:2307":{"id":"2:2891:2307","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2865:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41611:3091-0:60:2442":{"id":"a:2:41611:3091-0:60:2442","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41611:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2618-0:247:142":{"id":"b:2:2618-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2620:2612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13140:28047":{"id":"2:13140:28047","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10903:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:2499":{"id":"0:85:2499","crate_id":0,"name":"filter_or","span":{"filename":"src/logger.rs","begin":[737,4],"end":[745,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["filter_env",{"generic":"E"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:2363":{"id":"0:43:2363","crate_id":0,"name":"format_timestamp_millis","span":{"filename":"src/logger.rs","begin":[296,4],"end":[298,5]},"visibility":"public","docs":"Configures the timestamp to use millisecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330:60":{"id":"0:330:60","crate_id":0,"name":"default","span":{"filename":"src/logger.rs","begin":[37,9],"end":[37,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13247:27941":{"id":"2:13247:27941","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:342:780":{"id":"0:342:780","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[712,9],"end":[712,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:3065":{"id":"5:5621:3065","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13163:28090":{"id":"2:13163:28090","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12812:4769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:15495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2615-0:60:2442":{"id":"b:2:2615-0:60:2442","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2617:2232"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:320-0:355:248":{"id":"0:320-0:355:248","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[274,20],"end":[274,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::Target","name":"Target","id":"0:355:248","glob":false}}},"2:13245:27938":{"id":"2:13245:27938","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39481:3481","Self::is_ascii":"2:13244:27937"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39481:3481","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13248:27942":{"id":"2:13248:27942","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2617:2232":{"id":"2:2617:2232","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41611:3091-0:247:142":{"id":"a:2:41611:3091-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41611:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13195:28086":{"id":"2:13195:28086","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:258:2347":{"id":"0:258:2347","crate_id":0,"name":"write","span":{"filename":"src/fmt/mod.rs","begin":[181,4],"end":[183,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3022:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[556,0],"end":[621,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:2290","0:68:2318","0:69:2263","0:70:2475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:374:780":{"id":"0:374:780","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,22],"end":[12,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:780":{"id":"0:160:780","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/humantime.rs","begin":[84,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:730:2512":{"id":"5:730:2512","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/target.rs","begin":[3,9],"end":[3,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:362:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:51:1697":{"id":"0:51:1697","crate_id":0,"name":"target","span":{"filename":"src/logger.rs","begin":[422,4],"end":[425,5]},"visibility":"public","docs":"Sets the target for the log output.\n\nEnv logger can log to either stdout, stderr or a custom pipe. The default is stderr.\n\nThe custom pipe can be used to send the log messages to a custom sink (for example a file).\nDo note that direct writes to a file can become a bottleneck due to IO operation times.\n\n# Examples\n\nWrite log message to `stdout`:\n\n```\nuse env_logger::{Builder, Target};\n\nlet mut builder = Builder::new();\n\nbuilder.target(Target::Stdout);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"resolved_path":{"name":"fmt::Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,29],"end":[12,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2670:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13144:28071":{"id":"2:13144:28071","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13146:28075","str::split_at_mut":"2:13145:28072"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5622:29323":{"id":"5:5622:29323","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13247:27941"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2618-0:60:2442":{"id":"b:2:2618-0:60:2442","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2620:2612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13210:35070":{"id":"2:13210:35070","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12812:4769","`DoubleEndedIterator`":"2:8205:129","prim@char":"1:12325:458","str::match_indices":"2:13207:35069"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43547:7076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:15495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41611:3091-0:365:2113":{"id":"a:2:41611:3091-0:365:2113","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41611:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:88:2503":{"id":"0:88:2503","crate_id":0,"name":"default_filter_or","span":{"filename":"src/logger.rs","begin":[750,4],"end":[757,5]},"visibility":"public","docs":"Use the default environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:732:118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:355:248":{"id":"0:355:248","crate_id":0,"name":"Target","span":{"filename":"src/fmt/writer/target.rs","begin":[4,0],"end":[12,1]},"visibility":"public","docs":"Log target, either `stdout`, `stderr` or a custom pipe.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:356:2771","0:363:2774","0:358:2776"],"impls":["a:2:3146:3485-0:355:248","a:2:41612:3090-0:355:248","a:2:3111:246-0:355:248","a:2:32053:3154-0:355:248","a:2:31996:236-0:355:248","a:2:41611:3091-0:355:248","b:2:3727-0:355:248","b:2:2898-0:355:248","b:2:2892-0:355:248","b:2:2615-0:355:248","b:2:2618-0:355:248","b:2:2903-0:355:248","b:2:2888-0:355:248","0:361","0:211"]}}},"0:54:2421":{"id":"0:54:2421","crate_id":0,"name":"is_test","span":{"filename":"src/logger.rs","begin":[461,4],"end":[464,5]},"visibility":"public","docs":"Sets whether or not the logger will be used in unit tests.\n\nIf `is_test` is `true` then the logger will allow the testing framework to\ncapture log records rather than printing them to the terminal directly.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["is_test",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2615-0:336:2293":{"id":"b:2:2615-0:336:2293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2617:2232"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:363:2774":{"id":"0:363:2774","crate_id":0,"name":"Stderr","span":{"filename":"src/fmt/writer/target.rs","begin":[9,4],"end":[9,10]},"visibility":"default","docs":"Logs will be sent to standard error.","links":{},"attrs":["#[default]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13204:35068":{"id":"2:13204:35068","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12812:4769","`DoubleEndedIterator`":"2:8205:129","prim@char":"1:12325:458","str::matches":"2:13201:2475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43601:7077","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:15495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2901:136":{"id":"2:2901:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:169:780":{"id":"0:169:780","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/humantime.rs","begin":[101,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41611:3091-0:156:2592":{"id":"a:2:41611:3091-0:156:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41611:3091","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2615-0:365:2113":{"id":"b:2:2615-0:365:2113","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2617:2232"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2898-0:365:2113":{"id":"b:2:2898-0:365:2113","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2868:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:136","2:2902:1757"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,50],"end":[12,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:384:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31996:236-0:247:142":{"id":"a:2:31996:236-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13122:974":{"id":"2:13122:974","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12325:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13132:334":{"id":"2:13132:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13133:28048","`u8`":"1:12342:1800"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603":{"id":"5:5603","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5604:35775","5:5605:2636","5:5608:35776","5:5611:35777","5:5619:35778","5:5620:35779","5:5621:3065","5:5622:29323","5:5623:29324"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2618-0:365:2113":{"id":"b:2:2618-0:365:2113","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2620:2612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13174:2680":{"id":"2:13174:2680","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12812:4769","`DoubleEndedIterator`":"2:8205:129","prim@char":"1:12325:458","str::split_whitespace":"2:13152:33424","str::rsplit":"2:13180:28080"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43379:3045","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[518,0],"end":[529,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31996:236-0:365:2113":{"id":"a:2:31996:236-0:365:2113","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:219-0:355:248":{"id":"0:219-0:355:248","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[9,0],"end":[9,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"target::Target","name":"Target","id":"0:355:248","glob":false}}},"2:13230:28091":{"id":"2:13230:28091","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12812:4769"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41517:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:15495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3727-0:156:2592":{"id":"b:2:3727-0:156:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3725:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3729:1770"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2618-0:355:248":{"id":"b:2:2618-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2620:2612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2615-0:355:248":{"id":"b:2:2615-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2617:2232"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:382:678":{"id":"0:382:678","crate_id":0,"name":"eq","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2615-0:156:2592":{"id":"b:2:2615-0:156:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2617:2232"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13157:28088":{"id":"2:13157:28088","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12812:4769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221:810":{"id":"0:221:810","crate_id":0,"name":"from","span":{"filename":"src/fmt/writer/mod.rs","begin":[25,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["choice",{"resolved_path":{"name":"anstream::ColorChoice","id":"31:21:2754","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2892-0:355:248":{"id":"b:2:2892-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41612:3090-0:398:2112":{"id":"a:2:41612:3090-0:398:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41612:3090","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13130:2690":{"id":"2:13130:2690","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12360:2689"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13249:27944":{"id":"2:13249:27944","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:980:41492"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[100,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:169:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72:2477":{"id":"0:72:2477","crate_id":0,"name":"enabled","span":{"filename":"src/logger.rs","begin":[624,4],"end":[626,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:306:2237","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2516":{"id":"0:118:2516","crate_id":0,"name":"try_init_from_env","span":{"filename":"src/logger.rs","begin":[910,0],"end":[917,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger from the given\nenvironment variables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\n# fn run() -> Result<(), Box<dyn ::std::error::Error>> {\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::try_init_from_env(env)?;\n\nOk(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"resolved_path":{"name":"Result","id":"2:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"log::SetLoggerError","id":"20:358:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13152:33424":{"id":"2:13152:33424","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13153:33397"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43653:7079","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3146:3485-0:60:2442":{"id":"a:2:3146:3485-0:60:2442","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3146:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:117:2437":{"id":"0:117:2437","crate_id":0,"name":"init","span":{"filename":"src/logger.rs","begin":[878,0],"end":[880,1]},"visibility":"public","docs":"Initializes the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2618-0:398:2112":{"id":"b:2:2618-0:398:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2612:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2620:2612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:259:2487":{"id":"0:259:2487","crate_id":0,"name":"flush","span":{"filename":"src/fmt/mod.rs","begin":[185,4],"end":[187,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3022:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13192:28084":{"id":"2:13192:28084","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12325:458","str::splitn":"2:13189:28082","self::pattern":"2:12812:4769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43501:6926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:15495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13155:35065":{"id":"2:13155:35065","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43643:7078","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13166:3570":{"id":"2:13166:3570","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41519:190","prim@char":"1:12325:458","self::pattern":"2:12812:4769"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[718,0],"end":[801,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:82:1153","0:83:2263","0:85:2499","0:88:2503","0:91:2416","0:93:2507","0:96:2509"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:25:1153":{"id":"0:25:1153","crate_id":0,"name":"new","span":{"filename":"src/logger.rs","begin":[72,4],"end":[74,5]},"visibility":"public","docs":"Initializes the log builder with defaults.\n\n**NOTE:** This method won't read from any environment variables.\nUse the [`filter`] and [`write_style`] methods to configure the builder\nor use [`from_env`] or [`from_default_env`] instead.\n\n# Examples\n\nCreate a new builder and configure filters and style:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder\n    .filter(None, LevelFilter::Info)\n    .write_style(WriteStyle::Always)\n    .init();\n```\n\n[`filter`]: #method.filter\n[`write_style`]: #method.write_style\n[`from_env`]: #method.from_env\n[`from_default_env`]: #method.from_default_env","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:2354":{"id":"0:40:2354","crate_id":0,"name":"format_indent","span":{"filename":"src/logger.rs","begin":[279,4],"end":[282,5]},"visibility":"public","docs":"Configures the amount of spaces to use to indent multiline log records.\nA value of `None` disables any kind of indentation.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["indent",{"resolved_path":{"name":"Option","id":"2:41517:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2369":{"id":"0:45:2369","crate_id":0,"name":"format_timestamp_nanos","span":{"filename":"src/logger.rs","begin":[306,4],"end":[308,5]},"visibility":"public","docs":"Configures the timestamp to use nanosecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261:780":{"id":"0:261:780","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[191,4],"end":[197,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10221:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10202:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3111:246-0:355:248":{"id":"a:2:3111:246-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:31996:236-0:355:248":{"id":"a:2:31996:236-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:23:2247":{"id":"0:23:2247","crate_id":0,"name":"DEFAULT_WRITE_STYLE_ENV","span":{"filename":"src/logger.rs","begin":[13,0],"end":[13,59]},"visibility":"public","docs":"The default name for the environment variable to read style preferences from.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"expr":"\"RUST_LOG_STYLE\"","value":null,"is_literal":true}}},"2:13239:35080":{"id":"2:13239:35080","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12812:4769"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12833:15495","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3111:246-0:60:2442":{"id":"a:2:3111:246-0:60:2442","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13221:35076":{"id":"2:13221:35076","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12812:4769"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12838:15494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13224:35077":{"id":"2:13224:35077","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12812:4769"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:384:60":{"id":"0:384:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,50],"end":[12,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2428":{"id":"0:55:2428","crate_id":0,"name":"try_init","span":{"filename":"src/logger.rs","begin":[475,4],"end":[486,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"SetLoggerError","id":"20:358:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[37,9],"end":[37,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2940:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:330:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13147:28076":{"id":"2:13147:28076","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13146:28075"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41517:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5623:29324":{"id":"5:5623:29324","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13248:27942"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31996:236-0:60:2442":{"id":"a:2:31996:236-0:60:2442","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2442","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:124:2294":{"id":"0:124:2294","crate_id":0,"name":"builder","span":{"filename":"src/logger.rs","begin":[956,0],"end":[958,1]},"visibility":"public","docs":"Create a new builder with the default environment variables.\n\nThe builder can be configured before being initialized.\nThis is a convenient way of calling [`Builder::from_default_env`].\n\n[`Builder::from_default_env`]: struct.Builder.html#method.from_default_env","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5854-0:156:2592":{"id":"b:5:5854-0:156:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10252:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5852:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5856:1730"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31996:236-0:156:2592":{"id":"a:2:31996:236-0:156:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:0:2114":{"id":"0:0:2114","crate_id":0,"name":"env_logger","span":{"filename":"src/lib.rs","begin":[7,0],"end":[275,24]},"visibility":"public","docs":"A simple logger that can be configured via environment variables, for use\nwith the logging facade exposed by the [`log` crate][log-crate-url].\n\nDespite having \"env\" in its name, **`env_logger`** can also be configured by\nother means besides environment variables. See [the examples][gh-repo-examples]\nin the source repository for more approaches.\n\nBy default, `env_logger` writes logs to `stderr`, but can be configured to\ninstead write them to `stdout`.\n\n## Example\n\n```\nuse log::{debug, error, log_enabled, info, Level};\n\nenv_logger::init();\n\ndebug!(\"this is a debug {}\", \"message\");\nerror!(\"this is printed by default\");\n\nif log_enabled!(Level::Info) {\n    let x = 3 * 4; // expensive computation\n    info!(\"the answer was: {}\", x);\n}\n```\n\nAssumes the binary is `main`:\n\n```{.bash}\n$ RUST_LOG=error ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n```\n\n```{.bash}\n$ RUST_LOG=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\n```{.bash}\n$ RUST_LOG=debug ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nYou can also set the log level on a per module basis:\n\n```{.bash}\n$ RUST_LOG=main=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nAnd enable all logging:\n\n```{.bash}\n$ RUST_LOG=main ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nIf the binary name contains hyphens, you will need to replace\nthem with underscores:\n\n```{.bash}\n$ RUST_LOG=my_app ./my-app\n[2017-11-09T02:12:24Z DEBUG my_app] this is a debug message\n[2017-11-09T02:12:24Z ERROR my_app] this is printed by default\n[2017-11-09T02:12:24Z INFO my_app] the answer was: 12\n```\n\nThis is because Rust modules and crates cannot contain hyphens\nin their name, although `cargo` continues to accept them.\n\nSee the documentation for the [`log` crate][log-crate-url] for more\ninformation about its API.\n\n## Enabling logging\n\n**By default all logging is disabled except for the `error` level**\n\nThe **`RUST_LOG`** environment variable controls logging with the syntax:\n```text\nRUST_LOG=[target][=][level][,...]\n```\nOr in other words, its a comma-separated list of directives.\nDirectives can filter by **target**, by **level**, or both (using `=`).\n\nFor example,\n```text\nRUST_LOG=data=debug,hardware=debug\n```\n\n**target** is typically the path of the module the message\nin question originated from, though it can be overridden.\nThe path is rooted in the name of the crate it was compiled for, so if\nyour program is in a file called, for example, `hello.rs`, the path would\nsimply be `hello`.\n\nFurthermore, the log can be filtered using prefix-search based on the\nspecified log target.\n\nFor example, `RUST_LOG=example` would match the following targets:\n- `example`\n- `example::test`\n- `example::test::module::submodule`\n- `examples::and_more_examples`\n\nWhen providing the crate name or a module path, explicitly specifying the\nlog level is optional. If omitted, all logging for the item will be\nenabled.\n\n**level** is the maximum [`log::Level`][level-enum] to be shown and includes:\n- `error`\n- `warn`\n- `info`\n- `debug`\n- `trace`\n- `off` (pseudo level to disable all logging for the target)\n\nLogging level names are case-insensitive; e.g.,\n`debug`, `DEBUG`, and `dEbuG` all represent the same logging level. For\nconsistency, our convention is to use the lower case names. Where our docs\ndo use other forms, they do so in the context of specific examples, so you\nwon't be surprised if you see similar usage in the wild.\n\nSome examples of valid values of `RUST_LOG` are:\n\n- `RUST_LOG=hello` turns on all logging for the `hello` module\n- `RUST_LOG=trace` turns on all logging for the application, regardless of its name\n- `RUST_LOG=TRACE` turns on all logging for the application, regardless of its name (same as previous)\n- `RUST_LOG=info` turns on all info logging\n- `RUST_LOG=INFO` turns on all info logging (same as previous)\n- `RUST_LOG=hello=debug` turns on debug logging for `hello`\n- `RUST_LOG=hello=DEBUG` turns on debug logging for `hello` (same as previous)\n- `RUST_LOG=hello,std::option` turns on `hello`, and std's option logging\n- `RUST_LOG=error,hello=warn` turn on global error logging and also warn for `hello`\n- `RUST_LOG=error,hello=off`  turn on global error logging, but turn off logging for `hello`\n- `RUST_LOG=off` turns off all logging for the application\n- `RUST_LOG=OFF` turns off all logging for the application (same as previous)\n\n## Filtering results\n\nA `RUST_LOG` directive may include a regex filter. The syntax is to append `/`\nfollowed by a regex. Each message is checked against the regex, and is only\nlogged if it matches. Note that the matching is done after formatting the\nlog string but before adding any logging meta-data. There is a single filter\nfor all modules.\n\nSome examples:\n\n* `hello/foo` turns on all logging for the 'hello' module where the log\n  message includes 'foo'.\n* `info/f.o` turns on all info logging where the log message includes 'foo',\n  'f1o', 'fao', etc.\n* `hello=debug/foo*foo` turns on debug logging for 'hello' where the log\n  message includes 'foofoo' or 'fofoo' or 'fooooooofoo', etc.\n* `error,hello=warn/[0-9]scopes` turn on global error logging and also\n  warn for hello. In both cases the log message must include a single digit\n  number followed by 'scopes'.\n\n## Capturing logs in tests\n\nRecords logged during `cargo test` will not be captured by the test harness by default.\nThe [`Builder::is_test`] method can be used in unit tests to ensure logs will be captured:\n\n```\n#[cfg(test)]\nmod tests {\n    use log::info;\n\n    fn init() {\n        let _ = env_logger::builder().is_test(true).try_init();\n    }\n\n    #[test]\n    fn it_works() {\n        init();\n\n        info!(\"This record will be captured by `cargo test`\");\n\n        assert_eq!(2, 1 + 1);\n    }\n}\n```\n\nEnabling test capturing comes at the expense of color and other style support\nand may have performance implications.\n\n## Disabling colors\n\nColors and other styles can be configured with the `RUST_LOG_STYLE`\nenvironment variable. It accepts the following values:\n\n* `auto` (default) will attempt to print style characters, but don't force the issue.\nIf the console isn't available on Windows, or if TERM=dumb, for example, then don't print colors.\n* `always` will always print style characters even if they aren't supported by the terminal.\nThis includes emitting ANSI colors on Windows if the console API is unavailable.\n* `never` will never print style characters.\n\n## Tweaking the default format\n\nParts of the default format can be excluded from the log output using the [`Builder`].\nThe following example excludes the timestamp from the log output:\n\n```\nenv_logger::builder()\n    .format_timestamp(None)\n    .init();\n```\n\n### Stability of the default format\n\nThe default format won't optimise for long-term stability, and explicitly makes no\nguarantees about the stability of its output across major, minor or patch version\nbumps during `0.x`.\n\nIf you want to capture or interpret the output of `env_logger` programmatically\nthen you should use a custom format.\n\n### Using a custom format\n\nCustom formats can be provided as closures to the [`Builder`].\nThese closures take a [`Formatter`][crate::fmt::Formatter] and `log::Record` as arguments:\n\n```\nuse std::io::Write;\n\nenv_logger::builder()\n    .format(|buf, record| {\n        writeln!(buf, \"{}: {}\", record.level(), record.args())\n    })\n    .init();\n```\n\nSee the [`fmt`] module for more details about custom formats.\n\n## Specifying defaults for environment variables\n\n`env_logger` can read configuration from environment variables.\nIf these variables aren't present, the default value to use can be tweaked with the [`Env`] type.\nThe following example defaults to log `warn` and above if the `RUST_LOG` environment variable\nisn't set:\n\n```\nuse env_logger::Env;\n\nenv_logger::Builder::from_env(Env::default().default_filter_or(\"warn\")).init();\n```\n\n[gh-repo-examples]: https://github.com/rust-cli/env_logger/tree/main/examples\n[level-enum]: https://docs.rs/log/latest/log/enum.Level.html\n[log-crate-url]: https://docs.rs/log","links":{"`Builder`":"0:324:2262","`Env`":"0:336:2293","`Builder::is_test`":"0:54:2421","`fmt`":"0:128:780","crate::fmt::Formatter":"0:247:142"},"attrs":["#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/static/images/favicon.ico\")]","#![deny(missing_debug_implementations, missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:128:780","0:320-0:355:248","0:321-0:398:2112","0:322-0:365:2113","0:323-0:3:2111"],"is_stripped":false}}},"5:5608:35776":{"id":"5:5608:35776","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12818:4663","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2892-0:247:142":{"id":"b:2:2892-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2894:810"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5619:35778":{"id":"5:5619:35778","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2311":{"id":"0:53:2311","crate_id":0,"name":"parse_write_style","span":{"filename":"src/logger.rs","begin":[452,4],"end":[455,5]},"visibility":"public","docs":"Parses whether or not to write styles in the same form as the `RUST_LOG_STYLE`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write_style",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2903-0:156:2592":{"id":"b:2:2903-0:156:2592","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2592","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2906:136","2:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3146:3485-0:355:248":{"id":"a:2:3146:3485-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3146:3485","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2615-0:398:2112":{"id":"b:2:2615-0:398:2112","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31997:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2609:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2617:2232"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:36:2344":{"id":"0:36:2344","crate_id":0,"name":"default_format","span":{"filename":"src/logger.rs","begin":[254,4],"end":[257,5]},"visibility":"public","docs":"Use the default format.\n\nThis method will clear any custom format set on the builder.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222":{"id":"0:222","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[36,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2865:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"WriteStyle","id":"0:365:2113","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"anstream::ColorChoice","id":"31:21:2754","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:223:810"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3111:246-0:247:142":{"id":"a:2:3111:246-0:247:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3111:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[91,22],"end":[91,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10247:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2112","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:411:780"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[45,0],"end":[516,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:25:1153","0:26:2290","0:29:2295","0:32:2318","0:33:2324","0:34:793","0:36:2344","0:37:2346","0:38:2349","0:39:2351","0:40:2354","0:41:2357","0:42:2360","0:43:2363","0:44:2366","0:45:2369","0:46:2372","0:47:2389","0:48:2394","0:49:2263","0:50:2309","0:51:1697","0:52:2416","0:53:2311","0:54:2421","0:55:2428","0:56:2437","0:57:2429"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:44:2366":{"id":"0:44:2366","crate_id":0,"name":"format_timestamp_micros","span":{"filename":"src/logger.rs","begin":[301,4],"end":[303,5]},"visibility":"public","docs":"Configures the timestamp to use microsecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360:1923":{"id":"0:360:1923","crate_id":0,"name":"0","span":{"filename":"src/fmt/writer/target.rs","begin":[11,9],"end":[11,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Box","id":"5:295:2341","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"std::io::Write","id":"1:3590:2630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:31996:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}}}},"a:2:32053:3154-0:336:2293":{"id":"a:2:32053:3154-0:336:2293","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32053:3154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2293","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13150:7089":{"id":"2:13150:7089","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43355:7071","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2903-0:324:2262":{"id":"b:2:2903-0:324:2262","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2862:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2872:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2906:136","2:2907:1755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116:2428":{"id":"0:116:2428","crate_id":0,"name":"try_init","span":{"filename":"src/logger.rs","begin":[865,0],"end":[867,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41630:225","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"log::SetLoggerError","id":"20:358:2239","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:2318":{"id":"0:32:2318","crate_id":0,"name":"from_default_env","span":{"filename":"src/logger.rs","begin":[184,4],"end":[186,5]},"visibility":"public","docs":"Initializes the log builder from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger using the default environment variables:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:42530:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:43601:7077":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"25:1114:4015":{"crate_id":25,"path":["regex_syntax","ast","parse","Parser"],"kind":"struct"},"1:5576:7299":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:7348:9416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:8773:7395":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:491:8549":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:3172:6497":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:10262:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:44121:9729":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:7497:6560":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:12422:5402":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13344:4198":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:4770:2961":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:12827:4644":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:43296:7065":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:44356:7108":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"25:1618:4878":{"crate_id":25,"path":["regex_syntax","ast","ClassBracketed"],"kind":"struct"},"17:12887:4182":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:41257:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:7052:6471":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:5781:6256":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:41517:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:5423:9026":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:10018:22953":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:15434:5995":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:5665:9136":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:10251:4166":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:11128:5227":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:22329:10433":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"25:2029:4918":{"crate_id":25,"path":["regex_syntax","hir","interval","IntervalSetIter"],"kind":"struct"},"5:1527:4335":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:13855:5604":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12225:5383":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"22:261:3913":{"crate_id":22,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"17:14284:5685":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:41630:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:7429:9445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:12514:6934":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:31962:6985":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"26:1314:27231":{"crate_id":26,"path":["aho_corasick","packed","api","MatchKind"],"kind":"enum"},"17:15734:6091":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"25:1849:27186":{"crate_id":25,"path":["regex_syntax","ast","GroupKind"],"kind":"enum"},"16:7755:4291":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:14025:5629":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:2592:6241":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:7813:6580":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:4830:6285":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:45495:7135":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"24:1289:27175":{"crate_id":24,"path":["regex","re_unicode","Replacer"],"kind":"trait"},"16:6758:6425":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:42209:3004":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"30:0:3716":{"crate_id":30,"path":["utf8parse"],"kind":"module"},"25:2074:4110":{"crate_id":25,"path":["regex_syntax","hir","translate","TranslatorBuilder"],"kind":"struct"},"2:45928:7180":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:12076:5371":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:4863:10248":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:11252:9658":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:4383:15474":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:15023:5904":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:1064:35015":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:46078:7186":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:3352:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:4294:10260":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"25:1893:4113":{"crate_id":25,"path":["regex_syntax","ast","Flags"],"kind":"struct"},"17:11392:5289":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:1568:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:10907:7328":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"18:635:4633":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11567:5300":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:40055:7007":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"26:1291:4713":{"crate_id":26,"path":["aho_corasick","nfa","fill_failure_transitions_leftmost","QueuedState"],"kind":"struct"},"6:6900:9374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:5219:8938":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6872:6451":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:42551:3003":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"28:181:10205":{"crate_id":28,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"16:2323:22039":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:13538:5532":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:6811:9345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"11:102:9710":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:14847:5846":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:5367:22899":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:14933:5891":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:15281:5954":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:8838:3628":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:41758:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:11075:4160":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:597:5121":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4837:8791":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:7621:3086":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"24:1987:5071":{"crate_id":24,"path":["regex","prog","InstSplit"],"kind":"struct"},"17:15616:6063":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:11621:4157":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"26:1675:4766":{"crate_id":26,"path":["aho_corasick","prefilter","StartBytesOne"],"kind":"struct"},"2:10617:15700":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:1639:8708":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:1865:3651":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:15400:5988":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:4617:2949":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"25:1430:27197":{"crate_id":25,"path":["regex_syntax","ast","SpecialLiteralKind"],"kind":"enum"},"11:328:9714":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"27:752:4633":{"crate_id":27,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12056:5370":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:7632:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"24:2473:5083":{"crate_id":24,"path":["regex","re_trait","CaptureMatches"],"kind":"struct"},"2:30493:33170":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"16:6317:6369":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:218:6818":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:8300:9562":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:15266:5952":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"20:306:2237":{"crate_id":20,"path":["log","Metadata"],"kind":"struct"},"6:538:8581":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:14246:5680":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:10666:3061":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:9858:22968":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:7580:6574":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:12343:1782":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"26:1649:4760":{"crate_id":26,"path":["aho_corasick","prefilter","RareBytesTwo"],"kind":"struct"},"6:7561:9516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:15814:6110":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:6421:10436":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"17:14177:5666":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:3778:6266":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:1155:36387":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:5788:7302":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:13553:5538":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:44315:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"26:1126:4085":{"crate_id":26,"path":["aho_corasick","dfa","Standard"],"kind":"struct"},"17:11293:23004":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"6:4897:8827":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:40238:2459":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5296:8976":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:12349:1371":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"26:1156:4695":{"crate_id":26,"path":["aho_corasick","dfa","PremultipliedByteClass"],"kind":"struct"},"25:2484:4015":{"crate_id":25,"path":["regex_syntax","parser","Parser"],"kind":"struct"},"16:6560:4274":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"16:7559:6573":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"11:2352:6738":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:3387:10164":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"30:53:4705":{"crate_id":30,"path":["utf8parse","types","State"],"kind":"enum"},"17:12264:5386":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:9147:7405":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:44307:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:5236:8945":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:10997:5256":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:40218:7019":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:43975:7098":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:9178:7406":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"25:1836:4800":{"crate_id":25,"path":["regex_syntax","ast","Group"],"kind":"struct"},"24:1850:37089":{"crate_id":24,"path":["regex","literal","imp","LiteralIter"],"kind":"enum"},"1:8626:7385":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:10202:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:15078:5908":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:5336:8988":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"9:238:4705":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:16069:6178":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:41613:3613":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12043:5368":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:10769:36622":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"11:1910:4884":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"26:1136:4693":{"crate_id":26,"path":["aho_corasick","dfa","ByteClass"],"kind":"struct"},"16:7061:6474":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:6554:6744":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:16187:6207":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:42223:3012":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:15655:6071":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:14066:5636":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:46351:7223":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"10:0:2812":{"crate_id":10,"path":["adler"],"kind":"module"},"2:39985:7003":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:7656:22911":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:11877:4174":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:14356:5696":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:3669:5146":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:11891:6930":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:5636:9125":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"25:1206:3058":{"crate_id":25,"path":["regex_syntax","ast","ErrorKind"],"kind":"enum"},"1:8046:3661":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"24:1380:4899":{"crate_id":24,"path":["regex","backtrack","Bounded"],"kind":"struct"},"25:1681:4879":{"crate_id":25,"path":["regex_syntax","ast","ClassSetRange"],"kind":"struct"},"18:754:4654":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:2478:6236":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12189:5380":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13399:5503":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:6079:4224":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:45524:7137":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:11217:4368":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:11367:4160":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"27:546:4615":{"crate_id":27,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:867:5115":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:9755:22949":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:2936:22041":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:46497:7231":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:538:4072":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:8184:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"24:713:4960":{"crate_id":24,"path":["regex","pool","Pool"],"kind":"struct"},"6:4870:8815":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5146:8915":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:16176:6206":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:5:1877":{"crate_id":5,"path":["alloc","vec"],"kind":"macro"},"1:2199:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:42758:4507":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:22968:6977":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"24:1417:4994":{"crate_id":24,"path":["regex","compile","Patch"],"kind":"struct"},"24:2349:5096":{"crate_id":24,"path":["regex","re_set","unicode","SetMatchesIter"],"kind":"struct"},"1:3022:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:40066:15679":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:13701:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:8211:4517":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:4269:3020":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:1923:4770":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11269:23003":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:13497:5520":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:12360:2689":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:45907:7179":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:12371:5436":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:7098:6477":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"27:843:4079":{"crate_id":27,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"25:1392:4779":{"crate_id":25,"path":["regex_syntax","ast","Literal"],"kind":"struct"},"2:12551:6936":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:5212:8937":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:13363:5496":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"25:2360:4800":{"crate_id":25,"path":["regex_syntax","hir","Group"],"kind":"struct"},"17:11405:5290":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"27:624:4616":{"crate_id":27,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"26:1584:4617":{"crate_id":26,"path":["aho_corasick","prefilter","PrefilterState"],"kind":"struct"},"6:0:979":{"crate_id":6,"path":["libc"],"kind":"module"},"16:0:2817":{"crate_id":16,"path":["gimli"],"kind":"module"},"27:871:4654":{"crate_id":27,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:5477:9062":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:15151:5923":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:465:4801":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"18:659:4634":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:4074:6744":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:40764:6902":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:23023:6982":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:25886:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:6714:9317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:11755:5320":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:5174:8917":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:5502:9069":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:6446:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:42748:4705":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:3116:2964":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:14529:5725":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:1584:6744":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:2207:6830":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:2289:3029":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:7412:6852":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"16:5831:4243":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:6655:3147":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"25:2491:136":{"crate_id":25,"path":["regex_syntax","unicode","Error"],"kind":"enum"},"21:157:3115":{"crate_id":21,"path":["humantime","duration","FormattedDuration"],"kind":"struct"},"5:7645:6860":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:43251:7016":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:9718:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:8622:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"26:998:4673":{"crate_id":26,"path":["aho_corasick","ahocorasick","FindOverlappingIter"],"kind":"struct"},"1:10294:3651":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:15635:6068":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:11217:6923":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:12929:5436":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:3565:15540":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5624:9119":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:30429:3088":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"26:1397:4729":{"crate_id":26,"path":["aho_corasick","packed","pattern","PatternIter"],"kind":"struct"},"2:10463:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:8288:9560":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"26:1366:37835":{"crate_id":26,"path":["aho_corasick","packed","api","SearchKind"],"kind":"enum"},"17:12494:5409":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:15582:6051":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:8282:9559":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"9:357:21905":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:4348:6876":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:5277:8968":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:4152:10239":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:5742:6299":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:11810:7282":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:4864:8814":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13844:5603":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:15778:6106":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"26:1194:136":{"crate_id":26,"path":["aho_corasick","error","Error"],"kind":"struct"},"26:1101:4692":{"crate_id":26,"path":["aho_corasick","classes","ByteClassBuilder"],"kind":"struct"},"26:1620:4668":{"crate_id":26,"path":["aho_corasick","prefilter","ByteSet"],"kind":"struct"},"6:1723:8748":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5671:9138":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:1726:35015":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:11179:6922":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:5191:8925":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"24:2337:5093":{"crate_id":24,"path":["regex","re_set","unicode","SetMatches"],"kind":"struct"},"16:2374:6231":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:23486:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:13477:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:8625:3630":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:295:2341":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:2460:10202":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"19:0:1248":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:12332:1760":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:8502:3043":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:13064:5448":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:8197:9550":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12150:5375":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:13738:5583":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:11788:5325":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"28:470:2593":{"crate_id":28,"path":["anstream","buffer","Buffer"],"kind":"struct"},"1:4757:9436":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"11:364:36579":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4891:8824":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"25:2174:4932":{"crate_id":25,"path":["regex_syntax","hir","Hir"],"kind":"struct"},"17:16151:6198":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"25:1304:4841":{"crate_id":25,"path":["regex_syntax","ast","WithComments"],"kind":"struct"},"31:0:3717":{"crate_id":31,"path":["colorchoice"],"kind":"module"},"2:21475:34479":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"24:1398:4539":{"crate_id":24,"path":["regex","backtrack","Cache"],"kind":"struct"},"2:42951:7052":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:8200:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"11:1903:4883":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"28:0:2115":{"crate_id":28,"path":["anstream"],"kind":"module"},"24:1649:5026":{"crate_id":24,"path":["regex","exec","ExecNoSyncStr"],"kind":"struct"},"1:3618:3034":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:1830:6826":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:6782:22907":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"15:327:4296":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"14:40:5482":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:954:6736":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"28:393:4060":{"crate_id":28,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"29:0:3715":{"crate_id":29,"path":["anstyle_parse"],"kind":"module"},"1:4826:10262":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:22659:4370":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:12336:733":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:5716:10310":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:5122:8913":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8304:7332":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:3024:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:5352:8990":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"25:2510:27225":{"crate_id":25,"path":["regex_syntax","unicode","ClassQuery"],"kind":"enum"},"2:22935:6974":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:2612:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:45311:7118":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:1686:8735":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:723:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:7266:27863":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:6664:9298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:3033:34981":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:5370:9000":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:22924:6973":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:10978:27608":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"24:1831:37082":{"crate_id":24,"path":["regex","literal","imp","Matcher"],"kind":"enum"},"5:7553:3269":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:15799:6109":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:11331:5084":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"11:837:6730":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"11:700:3535":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:22606:6953":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:5445:9042":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:22553:6952":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:31924:8527":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:6940:4236":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:6494:6387":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:11682:9736":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:22979:6978":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:10203:2630":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"27:740:36633":{"crate_id":27,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:42216:3005":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:10878:7422":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:45360:7123":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:33197:15620":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"10:36:8530":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:12292:4539":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:43633:3041":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"11:2423:3535":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"11:2548:8525":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"25:1292:4774":{"crate_id":25,"path":["regex_syntax","ast","Position"],"kind":"struct"},"24:2050:4122":{"crate_id":24,"path":["regex","re_builder","RegexOptions"],"kind":"struct"},"2:15:2347":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:1680:8732":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"25:1905:4904":{"crate_id":25,"path":["regex_syntax","ast","FlagsItem"],"kind":"struct"},"17:12300:23096":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"24:1878:5056":{"crate_id":24,"path":["regex","literal","imp","Memmem"],"kind":"struct"},"2:10506:3730":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"25:2372:27186":{"crate_id":25,"path":["regex_syntax","hir","GroupKind"],"kind":"enum"},"11:1051:6738":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:10700:27850":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"25:2109:4923":{"crate_id":25,"path":["regex_syntax","hir","translate","TranslatorI"],"kind":"struct"},"16:7539:6260":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11634:5308":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:11593:29881":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:2702:3046":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"22:384:3917":{"crate_id":22,"path":["anstyle","reset","Reset"],"kind":"struct"},"16:2548:6239":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:9346:4535":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:21674:10205":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:9300:4524":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"27:81:27147":{"crate_id":27,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:39288:6992":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:46587:7243":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:5196:7295":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:5400:4144":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"26:0:3515":{"crate_id":26,"path":["aho_corasick"],"kind":"module"},"16:3329:6263":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:12838:15494":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12443:5404":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:43185:7055":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"11:1107:6740":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:9445:3101":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12557:4160":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"25:1771:4845":{"crate_id":25,"path":["regex_syntax","ast","Repetition"],"kind":"struct"},"17:13753:5588":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"18:491:5114":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6504:6388":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:40371:6894":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:497:8552":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:21429:34468":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"26:1106:4671":{"crate_id":26,"path":["aho_corasick","dfa","DFA"],"kind":"enum"},"26:1357:4644":{"crate_id":26,"path":["aho_corasick","packed","api","Searcher"],"kind":"struct"},"17:10877:5248":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"22:281:3914":{"crate_id":22,"path":["anstyle","color","RgbColor"],"kind":"struct"},"17:16121:6190":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:9910:4362":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:11300:9659":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:38467:15629":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:9807:22957":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"26:1558:4745":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","Mask256"],"kind":"struct"},"5:7436:3535":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:9886:22969":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:2684:6245":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:5052:8900":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6466:6384":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:46451:7227":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"29:85:27242":{"crate_id":29,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"16:7428:22910":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:40187:3042":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:6409:9170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:13626:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:2418:6233":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:6441:9188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:9391:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:44097:9723":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:11915:23072":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:280:35015":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"9:447:21890":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8472:3040":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:7516:9492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:10818:5247":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"26:1349:2262":{"crate_id":26,"path":["aho_corasick","packed","api","Builder"],"kind":"struct"},"24:2234:5088":{"crate_id":24,"path":["regex","re_bytes","CaptureLocations"],"kind":"struct"},"17:11051:5260":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:11115:5265":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:14212:5677":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6574:4275":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:5588:9097":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:45833:7161":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"14:214:6728":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:3842:6268":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:10997:7300":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"24:1927:5068":{"crate_id":24,"path":["regex","pool","PoolGuard"],"kind":"struct"},"1:11012:27601":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:22469:10425":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"18:573:4616":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:7841:5121":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"28:244:30471":{"crate_id":28,"path":["anstream","fmt","Adapter"],"kind":"struct"},"29:252:4015":{"crate_id":29,"path":["anstyle_parse","Parser"],"kind":"struct"},"18:765:27158":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"24:2536:5088":{"crate_id":24,"path":["regex","re_unicode","CaptureLocations"],"kind":"struct"},"2:31966:6540":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:8439:3067":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"27:835:4648":{"crate_id":27,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"27:665:152":{"crate_id":27,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:485:8547":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:7546:9509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:643:4616":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"18:521:27159":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:46549:7235":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:45801:7159":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:5415:9021":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:6047:6327":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:16093:6183":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"27:655:4072":{"crate_id":27,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5769:6308":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"26:1534:4739":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask256"],"kind":"struct"},"2:4259:3020":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:6730:3142":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:4164:10242":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:1937:2636":{"crate_id":2,"path":["core","mem","replace"],"kind":"function"},"2:10258:3012":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"26:1146:4694":{"crate_id":26,"path":["aho_corasick","dfa","Premultiplied"],"kind":"struct"},"1:5029:10281":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:5344:8989":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:3153:3487":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:39935:6999":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:43954:15508":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:6343:4525":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:484:27861":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:21686:4101":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:41553:3629":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:46508:7232":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:6621:9283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:22209:10428":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"18:735:27157":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:10256:3004":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:2394:6232":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:39308:6994":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:2234:5128":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:12335:717":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:45567:7147":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:6798:3149":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:10714:3267":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"24:1822:5051":{"crate_id":24,"path":["regex","literal","imp","LiteralSearcher"],"kind":"struct"},"11:787:4335":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:15190:5934":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:44348:7106":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:2757:9580":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:14489:5720":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:14325:5690":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"11:2231:4305":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:14912:5886":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"24:2197:5083":{"crate_id":24,"path":["regex","re_bytes","CaptureMatches"],"kind":"struct"},"1:1610:4770":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:4309:3628":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:4944:10247":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:44113:9727":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:4587:6278":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:40018:15558":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"26:1200:3058":{"crate_id":26,"path":["aho_corasick","error","ErrorKind"],"kind":"enum"},"2:45396:7129":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:6915:9385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:14560:5731":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:14516:5724":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:6681:3535":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"18:698:4077":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:5863:22901":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:862:3535":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8040:10136":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"26:1079:2593":{"crate_id":26,"path":["aho_corasick","buffer","Buffer"],"kind":"struct"},"5:2236:4339":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:3481:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"24:2518:3045":{"crate_id":24,"path":["regex","re_unicode","Split"],"kind":"struct"},"2:31973:6986":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:22690:4371":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:39948:7000":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:41445:7043":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:15992:6164":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"26:1435:4101":{"crate_id":26,"path":["aho_corasick","packed","teddy","compile","Mask"],"kind":"struct"},"2:43397:6924":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:10399:3044":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:7472:3535":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11853:5333":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13606:5552":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:13814:5600":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"24:2574:5090":{"crate_id":24,"path":["regex","re_unicode","ReplacerRef"],"kind":"struct"},"1:3380:2774":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:5722:6257":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"14:202:15509":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:5107:6294":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:45375:7124":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"26:1260:4710":{"crate_id":26,"path":["aho_corasick","nfa","IterTransitionsMut"],"kind":"struct"},"2:8167:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:3358:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"28:363:4066":{"crate_id":28,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"2:22913:6972":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:13832:5601":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:8509:3044":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11142:4148":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:8205:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:40270:4359":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:7412:9444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:3397:6826":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:40004:7004":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:9938:22971":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:2124:6483":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:3599:30471":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:12949:5132":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:5382:9005":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"25:1983:136":{"crate_id":25,"path":["regex_syntax","error","Error"],"kind":"enum"},"6:7314:9397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11799:5326":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11574:4305":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:15206:5937":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:10524:5243":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:906:6826":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:6849:6450":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:591:10129":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:22990:6979":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"11:1891:6744":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:43662:7080":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:2598:3053":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:6136:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6802:6437":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:10511:3731":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"24:1642:5025":{"crate_id":24,"path":["regex","exec","ExecNoSync"],"kind":"struct"},"1:10902:9734":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7570:6261":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"26:1246:4954":{"crate_id":26,"path":["aho_corasick","nfa","Transitions"],"kind":"enum"},"2:32473:6496":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:21505:10205":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"16:3614:6265":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:42513:3001":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"27:852:27157":{"crate_id":27,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:5244:8949":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:5320:8984":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:5581:9095":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13116:5454":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"24:1571:4934":{"crate_id":24,"path":["regex","dfa","Byte"],"kind":"struct"},"2:4973:15551":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:40516:6896":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"30:88:4015":{"crate_id":30,"path":["utf8parse","Parser"],"kind":"struct"},"17:15126:5914":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:43204:7058":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:6471:9198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"24:1422:10151":{"crate_id":24,"path":["regex","compile","Hole"],"kind":"enum"},"2:35847:6503":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"11:1087:36590":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"11:844:10149":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:6853:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:7119:35021":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"24:2332:5092":{"crate_id":24,"path":["regex","re_set","unicode","RegexSet"],"kind":"struct"},"20:363:2990":{"crate_id":20,"path":["log","ParseLevelError"],"kind":"struct"},"2:42504:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:4824:8781":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:8702:7392":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:42727:3732":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"25:1881:4903":{"crate_id":25,"path":["regex_syntax","ast","SetFlags"],"kind":"struct"},"9:53:4307":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:10472:27725":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:44117:9728":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:21487:34473":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:39198:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"26:1657:4763":{"crate_id":26,"path":["aho_corasick","prefilter","RareBytesThree"],"kind":"struct"},"20:120:2236":{"crate_id":20,"path":["log","Log"],"kind":"trait"},"24:987:27175":{"crate_id":24,"path":["regex","re_bytes","Replacer"],"kind":"trait"},"5:2309:4342":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:7888:6592":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:870:10150":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:15678:6084":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11313:5281":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:14545:5727":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:9369:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:4865:10250":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:7891:27864":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:7355:6520":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:39046:3631":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:22115:10205":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:2512:15640":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:14402:5703":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:2836:15562":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"24:2084:5080":{"crate_id":24,"path":["regex","re_builder","bytes","RegexBuilder"],"kind":"struct"},"6:8247:9551":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:359:3276":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:39969:7002":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:8601:7376":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"28:484:2772":{"crate_id":28,"path":["anstream","auto","AutoStream"],"kind":"struct"},"16:7727:4288":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:11773:5322":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:11858:6929":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"17:12516:5414":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:11702:5313":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:7489:3543":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"24:1903:5064":{"crate_id":24,"path":["regex","pikevm","Threads"],"kind":"struct"},"16:7618:4285":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"11:434:36591":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"15:306:21995":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"24:1623:136":{"crate_id":24,"path":["regex","error","Error"],"kind":"enum"},"6:8006:9538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:4992:8871":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:43940:7093":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:5037:6292":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:1485:8610":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:7006:6460":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:9688:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:6524:9222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12671:5422":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:14235:5678":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:4743:6282":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:1593:4883":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:6629:9284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:3264:5129":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:8855:7401":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:8175:6636":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13946:5618":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:25:675":{"crate_id":2,"path":["core","env"],"kind":"macro"},"11:2536:4800":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:7111:6480":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:9305:4533":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"25:2593:4951":{"crate_id":25,"path":["regex_syntax","utf8","Utf8Sequences"],"kind":"struct"},"6:6706:9314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"11:2326:6737":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:7402:6851":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:37723:15625":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:21962:10348":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:5536:9076":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:8575:7284":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"11:1007:6483":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:852:3629":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:8073:6628":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:2438:6234":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"26:971:5114":{"crate_id":26,"path":["aho_corasick","ahocorasick","Imp"],"kind":"enum"},"1:5902:3133":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:8306:9563":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:7609:6859":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:11557:5299":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:5307:6295":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"24:2583:5091":{"crate_id":24,"path":["regex","re_unicode","NoExpand"],"kind":"struct"},"28:406:4067":{"crate_id":28,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"6:5260:8957":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"14:187:21982":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:3289:3062":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"27:815:4077":{"crate_id":27,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:10455:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"20:124:2980":{"crate_id":20,"path":["log","NopLogger"],"kind":"struct"},"16:6231:6361":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:30863:3501":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:12308:27593":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"11:1142:6741":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:22315:10205":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:7372:3535":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:943:3628":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"27:715:36630":{"crate_id":27,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:7330:9409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:10381:8170":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:6615:3137":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:1577:6825":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:14051:5633":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:15822:6113":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:46664:7261":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:5290:8973":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:1829:3643":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:14341:5692":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:12628:6921":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:6120:7301":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:8652:7288":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:5466:9057":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:11029:4520":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:44171:3106":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:5598:9102":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:2053:9583":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:11743:5317":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:13375:5499":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"20:300:2988":{"crate_id":20,"path":["log","RecordBuilder"],"kind":"struct"},"27:0:2819":{"crate_id":27,"path":["memchr"],"kind":"module"},"17:12724:22975":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:6532:9227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:640:7268":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:4427:7286":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:261:5116":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13766:5590":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5686:4239":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:11865:5334":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:8155:7328":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11524:5296":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:7144:22909":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"11:2369:6749":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:11661:5310":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:8607:7383":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:3157:2940":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:1692:8736":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:6562:9250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:3242:6498":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:14977:5896":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"24:1980:5069":{"crate_id":24,"path":["regex","prog","InstSave"],"kind":"struct"},"16:4641:6280":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:12792:5205":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:9396:3144":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:40131:7015":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:14189:5668":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:256:5115":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"24:1452:37084":{"crate_id":24,"path":["regex","compile","InstHole"],"kind":"enum"},"2:45780:7158":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:9161:7303":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:9695:7327":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:2951:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:43696:7002":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:4543:2948":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:22782:33178":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11166:5267":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"27:787:4640":{"crate_id":27,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:3250:9766":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:33625:15623":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:15720:6089":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:15138:5917":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:689:4643":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:6924:15525":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"24:2188:5082":{"crate_id":24,"path":["regex","re_bytes","Matches"],"kind":"struct"},"6:6650:9296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"25:2238:4844":{"crate_id":25,"path":["regex_syntax","hir","Class"],"kind":"enum"},"2:40279:6883":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:32659:6493":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:4108:10237":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"25:1177:4108":{"crate_id":25,"path":["regex_syntax","ast","print","PrinterBuilder"],"kind":"struct"},"6:1503:8618":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:1510:8620":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:14475:5719":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:40739:6901":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"25:1405:27189":{"crate_id":25,"path":["regex_syntax","ast","LiteralKind"],"kind":"enum"},"5:4423:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13899:5612":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"21:207:36651":{"crate_id":21,"path":["humantime","date","Precision"],"kind":"enum"},"2:1907:792":{"crate_id":2,"path":["core","mem","forget"],"kind":"function"},"2:39158:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"32:0:3718":{"crate_id":32,"path":["anstyle_query"],"kind":"module"},"27:97:27148":{"crate_id":27,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:6417:9172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"23:0:2117":{"crate_id":23,"path":["env_filter"],"kind":"module"},"6:5031:8892":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:39920:33179":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:5146:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:4867:10251":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:10661:5245":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:5039:8896":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:33256:15619":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"29:92:27244":{"crate_id":29,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"2:43678:7003":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:45296:7117":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:14386:5699":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:12345:1794":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:6813:6438":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"24:2565:5082":{"crate_id":24,"path":["regex","re_unicode","Matches"],"kind":"struct"},"2:39977:6874":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"11:1887:3535":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:43225:7060":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:15931:5467":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"16:6098:22902":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:42476:33718":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:5895:3132":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"24:213:37119":{"crate_id":24,"path":["regex","dfa","InstPtrs"],"kind":"struct"},"25:2578:4785":{"crate_id":25,"path":["regex_syntax","utf8","Utf8Range"],"kind":"struct"},"1:8582:9731":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:3648:3628":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:15418:5992":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:22957:6976":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:41570:3203":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:12341:862":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12201:5381":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:7014:22908":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:13173:5466":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:10439:4145":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:3348:3150":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"26:1487:4732":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask128"],"kind":"struct"},"17:15569:6045":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:46232:7220":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:8118:6631":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:5225:8941":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:5390:9010":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:43483:5084":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:13526:5529":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:9241:3135":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"29:298:4060":{"crate_id":29,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"29:26:27246":{"crate_id":29,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"5:826:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:737:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"28:341:4064":{"crate_id":28,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"2:40121:7009":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:1588:6826":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"26:1579:4747":{"crate_id":26,"path":["aho_corasick","prefilter","PrefilterObj"],"kind":"struct"},"2:45751:7157":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"20:358:2239":{"crate_id":20,"path":["log","SetLoggerError"],"kind":"struct"},"17:12454:5405":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"11:1883:3628":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:12175:5376":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:42033:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"27:706:4620":{"crate_id":27,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:7339:9415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11510:5295":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:7910:22913":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"25:1720:27192":{"crate_id":25,"path":["regex_syntax","ast","ClassSetBinaryOpKind"],"kind":"enum"},"17:12597:5418":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:2039:15649":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"22:360:3915":{"crate_id":22,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"2:22876:10205":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"5:6164:3020":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:11209:27611":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:9254:4521":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:7485:9466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"24:931:4976":{"crate_id":24,"path":["regex","re_bytes","Captures"],"kind":"struct"},"28:420:4608":{"crate_id":28,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"17:13774:5592":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:41836:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:5160:8916":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:6219:27859":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:44147:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:6385:6378":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:6478:9200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12238:5384":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:22382:10434":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:45945:7181":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:21473:34475":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"25:2475:4104":{"crate_id":25,"path":["regex_syntax","parser","ParserBuilder"],"kind":"struct"},"16:6895:6452":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"24:1911:37080":{"crate_id":24,"path":["regex","pikevm","FollowEpsilon"],"kind":"enum"},"5:7480:3535":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:6636:9285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11227:5271":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:12328:15688":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:3250:36096":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:7397:36611":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:45702:7154":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:43797:7087":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:1496:3535":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:41797:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"28:99:27238":{"crate_id":28,"path":["anstream","stream","RawStream"],"kind":"trait"},"16:7528:6569":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:42230:3013":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:7973:2262":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:7366:9425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"11:1160:6742":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:1976:1312":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"11:396:36581":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:3104:2965":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:553:8589":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:12323:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"26:1635:4100":{"crate_id":26,"path":["aho_corasick","prefilter","RareByteOffset"],"kind":"struct"},"1:2432:2478":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:33798:15624":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:860:6223":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:31996:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:5802:22900":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"26:1681:4767":{"crate_id":26,"path":["aho_corasick","prefilter","StartBytesTwo"],"kind":"struct"},"5:7452:4347":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:43761:15507":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:13664:6951":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:2508:6237":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11354:5287":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:872:5116":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:12111:27856":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:7467:9456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:4438:35014":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"26:923:10205":{"crate_id":26,"path":["aho_corasick","state_id","private","Sealed"],"kind":"trait"},"17:14012:5628":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"29:137:4705":{"crate_id":29,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"6:523:8572":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:14575:4178":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14311:5687":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"12:0:2814":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:13455:5515":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:586:8606":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:5677:9141":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:7597:6857":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11898:5335":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"25:1569:4873":{"crate_id":25,"path":["regex_syntax","ast","ClassUnicode"],"kind":"struct"},"16:6398:4268":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:6066:6334":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:1978:763":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:12337:887":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"24:1895:4539":{"crate_id":24,"path":["regex","pikevm","Cache"],"kind":"struct"},"2:2865:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:6060:15930":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:10897:9732":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"24:1994:5074":{"crate_id":24,"path":["regex","prog","InstEmptyLook"],"kind":"struct"},"1:2989:4696":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:11256:5275":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"25:2064:4806":{"crate_id":25,"path":["regex_syntax","hir","print","Printer"],"kind":"struct"},"24:2462:5082":{"crate_id":24,"path":["regex","re_trait","Matches"],"kind":"struct"},"25:1470:4844":{"crate_id":25,"path":["regex_syntax","ast","Class"],"kind":"enum"},"6:6657:9297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:5020:8887":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7648:6576":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:5400:9016":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:11812:5328":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:8328:9568":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"26:1566:37837":{"crate_id":26,"path":["aho_corasick","prefilter","Candidate"],"kind":"enum"},"25:2254:4873":{"crate_id":25,"path":["regex_syntax","hir","ClassUnicode"],"kind":"struct"},"6:8341:9572":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:4050:10232":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:8515:3045":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:7910:27853":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:46625:7245":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:44293:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:2940:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:23012:6981":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"16:6634:4276":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:8162:4531":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:3608:3031":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"11:2151:6738":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:570:8597":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:11831:7283":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:41612:3090":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:22474:10423":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:39992:15557":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:5385:4143":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"25:1316:4842":{"crate_id":25,"path":["regex_syntax","ast","Comment"],"kind":"struct"},"17:13272:5495":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:3305:4770":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13292:4185":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:14298:5686":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:8150:7327":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:3661:3629":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"0:247:142":{"crate_id":0,"path":["env_logger","fmt","Formatter"],"kind":"struct"},"2:22824:9718":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:15176:5931":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"26:1331:4093":{"crate_id":26,"path":["aho_corasick","packed","api","Config"],"kind":"struct"},"6:1671:8726":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:3196:6228":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:7389:9443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:15944:5481":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"24:1869:5059":{"crate_id":24,"path":["regex","literal","imp","SingleByteSet"],"kind":"struct"},"2:43125:7053":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:43194:7057":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:4352:6272":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:542:4222":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:4102:10236":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"25:1816:27188":{"crate_id":25,"path":["regex_syntax","ast","RepetitionRange"],"kind":"enum"},"1:10315:7413":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:2788:6250":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:9265:3261":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"11:2383:3628":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"0:401:2364":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Millis"],"kind":"variant"},"17:14038:5631":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11214:5270":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8206:4518":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:3245:4884":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:6035:6882":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:5052:10283":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:8145:2237":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:532:8578":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:7695:6578":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:6597:9271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:4273:10258":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:6729:9319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:643:7270":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:6491:9209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"0:128:780":{"crate_id":0,"path":["env_logger","fmt"],"kind":"module"},"6:5653:9129":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:10155:4143":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:31997:3153":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:6542:9234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:6648:6402":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:15010:5899":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:1605:4885":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:30836:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:39143:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:3741:35015":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:2878:6254":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"24:1656:5027":{"crate_id":24,"path":["regex","exec","ExecReadOnly"],"kind":"struct"},"6:6460:9190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4965:8858":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:9220:10316":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:5102:8911":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:7537:9506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:123:4301":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"26:1166:4696":{"crate_id":26,"path":["aho_corasick","dfa","Repr"],"kind":"struct"},"5:6039:3080":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:2728:6247":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:43355:7071":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:33315:15621":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:4281:10259":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:42111:3131":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:42449:9649":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"24:1510:4539":{"crate_id":24,"path":["regex","dfa","Cache"],"kind":"struct"},"2:39218:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"26:1642:4758":{"crate_id":26,"path":["aho_corasick","prefilter","RareBytesOne"],"kind":"struct"},"26:1052:4081":{"crate_id":26,"path":["aho_corasick","ahocorasick","AhoCorasickBuilder"],"kind":"struct"},"17:11324:5283":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:39082:15479":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:21558:10205":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:10092:22974":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:41695:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:11899:30194":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:16269:5505":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:11887:4538":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"25:1057:4786":{"crate_id":25,"path":["regex_syntax","utf8","ScalarRange"],"kind":"struct"},"17:13437:5507":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:5489:9065":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:6398:7301":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:41670:3628":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:15463:6002":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:3473:5130":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:6295:6950":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:5181:8918":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:1939:651":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"18:531:4617":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:39126:10163":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:11189:5268":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:10710:5246":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"25:2544:27228":{"crate_id":25,"path":["regex_syntax","utf8","Utf8Sequence"],"kind":"enum"},"2:44109:9726":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:912:6743":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:12353:5398":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"24:1792:5050":{"crate_id":24,"path":["regex","input","ByteInput"],"kind":"struct"},"5:1536:6743":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:12344:1788":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:40:7772":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:44378:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:31998:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:0:543":{"crate_id":2,"path":["core"],"kind":"module"},"2:21578:4101":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"22:303:4136":{"crate_id":22,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"27:114:27149":{"crate_id":27,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:45480:7134":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:2249:6870":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:8163:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"25:1518:4862":{"crate_id":25,"path":["regex_syntax","ast","ClassAscii"],"kind":"struct"},"1:9205:10314":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"26:1013:4676":{"crate_id":26,"path":["aho_corasick","ahocorasick","StreamFindIter"],"kind":"struct"},"16:6433:4272":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:13502:6946":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:5407:1218":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:15624:6064":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10905:5249":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:7590:4283":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:2128:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"22:372:3916":{"crate_id":22,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"6:4959:8856":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:45670:7152":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"24:2241:5089":{"crate_id":24,"path":["regex","re_bytes","SubCaptureMatches"],"kind":"struct"},"23:85:3520":{"crate_id":23,"path":["env_filter","directive","Directive"],"kind":"struct"},"16:8226:22914":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:15383:5984":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"9:482:21889":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"9:178:4322":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:3792:3057":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:4360:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:13509:5521":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:14788:5794":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:3533:3028":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"18:589:4620":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"25:1502:27193":{"crate_id":25,"path":["regex_syntax","ast","ClassPerlKind"],"kind":"enum"},"1:2680:27850":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"14:220:6729":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:12289:5388":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:5112:8912":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11537:5297":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:45428:7131":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:883:4335":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"27:797:4641":{"crate_id":27,"path":["memchr","memmem","Finder"],"kind":"struct"},"26:1526:4738":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask128"],"kind":"struct"},"6:7461:9455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"26:1085:4655":{"crate_id":26,"path":["aho_corasick","classes","ByteClasses"],"kind":"struct"},"17:11595:4171":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:5266:8960":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:4823:10284":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"27:823:4644":{"crate_id":27,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:15456:6000":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:7538:10148":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"21:99:2728":{"crate_id":21,"path":["humantime","date","format_rfc3339_seconds"],"kind":"function"},"2:40103:10177":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:12695:5424":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"16:3475:6264":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:13674:5554":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"11:710:4336":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"25:1785:4893":{"crate_id":25,"path":["regex_syntax","ast","RepetitionOp"],"kind":"struct"},"17:12388:5400":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:4142:10238":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:2868:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:43671:6939":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:8126:15610":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:45687:7153":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"31:21:2754":{"crate_id":31,"path":["colorchoice","ColorChoice"],"kind":"enum"},"16:6927:6456":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:3636:2968":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:10187:7040":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:12900:4184":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:22762:33168":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:2808:6251":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:15333:5969":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:42970:6919":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:14372:5697":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:5108:10288":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:46534:7234":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"26:1519:4737":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddyFat2Mask256"],"kind":"struct"},"17:12683:5423":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:7689:4042":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:10317:4168":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"24:1780:5049":{"crate_id":24,"path":["regex","input","CharInput"],"kind":"struct"},"6:1535:8634":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:7444:32068":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"24:2593:4981":{"crate_id":24,"path":["regex","sparse","SparseSet"],"kind":"struct"},"17:13015:4178":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"25:2148:3058":{"crate_id":25,"path":["regex_syntax","hir","ErrorKind"],"kind":"enum"},"20:0:2118":{"crate_id":20,"path":["log"],"kind":"module"},"2:3559:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"25:1647:27185":{"crate_id":25,"path":["regex_syntax","ast","ClassSetItem"],"kind":"enum"},"5:142:2906":{"crate_id":5,"path":["alloc","boxed"],"kind":"module"},"17:12399:5401":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:15168:5928":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"26:1499:4734":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddyFat1Mask256"],"kind":"struct"},"26:1270:2262":{"crate_id":26,"path":["aho_corasick","nfa","Builder"],"kind":"struct"},"6:7575:9525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"24:2183:4975":{"crate_id":24,"path":["regex","re_bytes","Regex"],"kind":"struct"},"2:3319:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:3301:15478":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:22746:6956":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"27:776:4634":{"crate_id":27,"path":["memchr","memmem","FindIter"],"kind":"struct"},"15:394:22004":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:12818:4663":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:5617:9116":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"26:1224:4705":{"crate_id":26,"path":["aho_corasick","nfa","State"],"kind":"struct"},"2:45990:7182":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:10950:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"18:563:4074":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"0:0:2114":{"crate_id":0,"path":["env_logger"],"kind":"module"},"6:5436:9036":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"26:1280:4664":{"crate_id":26,"path":["aho_corasick","nfa","Compiler"],"kind":"struct"},"2:33971:6502":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:4156:10240":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:10672:2774":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:1942:7275":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:5546:9082":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:44297:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"25:2135:136":{"crate_id":25,"path":["regex_syntax","hir","Error"],"kind":"struct"},"17:10954:22984":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:3810:6267":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:1075:6742":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:5922:6744":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:2062:6867":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:11016:5258":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:4424:6273":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:12350:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:12969:5438":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:7955:3278":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:3782:10216":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:16212:6212":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:40300:6889":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:8448:3069":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:41953:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:12330:1638":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:5540:7297":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"24:1804:4959":{"crate_id":24,"path":["regex","input","Char"],"kind":"struct"},"2:43214:7059":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1465:3628":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:11665:7318":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:5306:8979":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:43547:7076":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:10759:4148":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:8631:15608":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:10573:36626":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:6853:9717":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:12348:1861":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:8136:6632":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:6665:22906":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:3279:4883":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12863:5435":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:4747:10237":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:11610:7435":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:6619:3138":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:624:7267":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:11730:5316":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:10828:36627":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"16:4560:6277":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:648:10132":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:14079:5637":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:37888:15628":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:9088:7402":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:1526:8628":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:39899:6995":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:15769:6104":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:8172:7329":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:8309:4530":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:732:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:4952:8853":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:870:4334":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"24:178:4953":{"crate_id":24,"path":["regex","compile","ByteClassSet"],"kind":"struct"},"6:8029:9549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"24:1543:225":{"crate_id":24,"path":["regex","dfa","Result"],"kind":"enum"},"2:43828:7091":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4932:8844":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:14147:5647":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13146:5458":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:8258:3151":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:5006:6291":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:6763:35015":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:10893:10205":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:9916:22970":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:8294:9561":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:5756:6303":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:5217:3080":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:12338:869":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"9:392:21891":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:8216:6640":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:3238:3628":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:3162:3102":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"7:0:1851":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:21560:10342":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"24:2107:5080":{"crate_id":24,"path":["regex","re_builder","unicode","RegexBuilder"],"kind":"struct"},"2:2856:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:6543:6391":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"21:227:3120":{"crate_id":21,"path":["humantime","date","Rfc3339Timestamp"],"kind":"struct"},"24:1719:5044":{"crate_id":24,"path":["regex","exec","ProgramCacheInner"],"kind":"struct"},"6:1621:8696":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:15760:6100":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"28:144:27239":{"crate_id":28,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"17:11026:22986":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:5385:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:46488:7230":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:40357:4631":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:10903:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"9:0:2811":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"11:742:4337":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"14:165:21975":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:7527:6853":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:43365:3044":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:44369:7111":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:4094:10235":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:0:2818":{"crate_id":17,"path":["object"],"kind":"module"},"11:2569:6853":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:43903:6942":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:11647:5309":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:14463:5718":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:32054:3489":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:1888:3657":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:12408:4177":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:4718:6281":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:2526:9576":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:6427:4270":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:12342:1800":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"18:96:27148":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:12297:10137":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:6874:9359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:2450:10197":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:41686:3535":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:3599:2966":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:45413:7130":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:39958:7001":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"24:1954:4990":{"crate_id":24,"path":["regex","prog","Inst"],"kind":"enum"},"6:1585:8667":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"22:315:4137":{"crate_id":22,"path":["anstyle","color","NullFormatter"],"kind":"struct"},"17:13412:5505":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:41992:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:45878:7178":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:7473:4232":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"25:2300:4936":{"crate_id":25,"path":["regex_syntax","hir","ClassBytesIter"],"kind":"struct"},"24:1473:4126":{"crate_id":24,"path":["regex","compile","SuffixCacheEntry"],"kind":"struct"},"2:10266:3011":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"26:1309:4717":{"crate_id":26,"path":["aho_corasick","nfa","AllBytesIter"],"kind":"struct"},"2:11290:6925":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:3029:9579":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:22341:33207":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"24:2527:5084":{"crate_id":24,"path":["regex","re_unicode","SplitN"],"kind":"struct"},"22:211:2619":{"crate_id":22,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"16:5897:4244":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:2197:3257":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:32053:3154":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"24:2035:5078":{"crate_id":24,"path":["regex","prog","InstRanges"],"kind":"struct"},"18:113:27149":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:40256:7021":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"25:1602:27196":{"crate_id":25,"path":["regex_syntax","ast","ClassUnicodeOpKind"],"kind":"enum"},"17:12030:5367":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:14868:5856":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:7730:6863":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:12590:6938":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:32085:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:5247:954":{"crate_id":2,"path":["core","iter"],"kind":"module"},"26:985:4634":{"crate_id":26,"path":["aho_corasick","ahocorasick","FindIter"],"kind":"struct"},"25:1737:4787":{"crate_id":25,"path":["regex_syntax","ast","Assertion"],"kind":"struct"},"1:11270:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:16:2919":{"crate_id":2,"path":["core","writeln"],"kind":"macro"},"6:5329:8987":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:7379:36615":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:12886:15501":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:42488:4906":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"25:2122:4113":{"crate_id":25,"path":["regex_syntax","hir","translate","Flags"],"kind":"struct"},"1:8061:3662":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10137:22950":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:11097:3045":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:560:3264":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:1490:8612":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:8844:7400":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"25:2390:4845":{"crate_id":25,"path":["regex_syntax","hir","Repetition"],"kind":"struct"},"1:12346:1776":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:7741:4290":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"24:1726:5047":{"crate_id":24,"path":["regex","expand","CaptureRef"],"kind":"struct"},"17:12808:5433":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"9:330:8531":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"25:1187:2241":{"crate_id":25,"path":["regex_syntax","ast","print","Writer"],"kind":"struct"},"2:39258:10142":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:40011:7005":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"24:1601:4135":{"crate_id":24,"path":["regex","dfa","StateFlags"],"kind":"struct"},"6:5483:9063":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:42736:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:2289:36444":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"24:1526:4954":{"crate_id":24,"path":["regex","dfa","Transitions"],"kind":"struct"},"6:6678:9303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"0:405:2370":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Nanos"],"kind":"variant"},"26:1060:27231":{"crate_id":26,"path":["aho_corasick","ahocorasick","MatchKind"],"kind":"enum"},"17:11825:5330":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:32845:15618":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:6519:9221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"21:0:1936":{"crate_id":21,"path":["humantime"],"kind":"module"},"2:43583:5082":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"24:2430:5095":{"crate_id":24,"path":["regex","re_set","bytes","SetMatchesIntoIter"],"kind":"struct"},"27:760:4616":{"crate_id":27,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"25:2068:2241":{"crate_id":25,"path":["regex_syntax","hir","print","Writer"],"kind":"struct"},"16:6991:36608":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:581:3501":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"26:1376:4634":{"crate_id":26,"path":["aho_corasick","packed","api","FindIter"],"kind":"struct"},"5:2114:6829":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"5:6957:15527":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:4979:8866":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:4062:6271":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"13:110:36597":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"20:253:2987":{"crate_id":20,"path":["log","MaybeStaticStr"],"kind":"enum"},"5:4468:3020":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:2872:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:5046:8898":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"11:2403:3629":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"5:7392:6744":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:5376:9002":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"25:1868:4901":{"crate_id":25,"path":["regex_syntax","ast","CaptureName"],"kind":"struct"},"2:39130:6988":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:10068:22956":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:10221:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:8228:3055":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:31987:2384":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:726:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:43306:7066":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:3337:3089":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"11:856:6733":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"24:2215:5084":{"crate_id":24,"path":["regex","re_bytes","SplitN"],"kind":"struct"},"24:2224:5087":{"crate_id":24,"path":["regex","re_bytes","CaptureNames"],"kind":"struct"},"1:11185:4519":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:12833:15495":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"25:2342:4890":{"crate_id":25,"path":["regex_syntax","hir","WordBoundary"],"kind":"enum"},"17:2175:23031":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:9386:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:23034:6983":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"24:2435:5096":{"crate_id":24,"path":["regex","re_set","bytes","SetMatchesIter"],"kind":"struct"},"1:3244:32265":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"24:2423:5093":{"crate_id":24,"path":["regex","re_set","bytes","SetMatches"],"kind":"struct"},"24:1468:5006":{"crate_id":24,"path":["regex","compile","SuffixCache"],"kind":"struct"},"1:896:6744":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:8351:9574":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:13581:5548":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:9259:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:22674:4348":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:11063:5262":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"25:1081:27205":{"crate_id":25,"path":["regex_syntax","ast","parse","Primitive"],"kind":"enum"},"16:2902:22040":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:43965:7094":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:6947:15526":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:7168:7410":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:7295:9813":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:43687:6874":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:7823:22912":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11493:5293":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:931:10149":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:9292:3205":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:13046:5445":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:5075:6293":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:7422:36097":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:5591:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"26:1303:4716":{"crate_id":26,"path":["aho_corasick","nfa","QueuedSet"],"kind":"struct"},"1:5560:7298":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:11089:5263":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:12127:5374":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:5227:7295":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:22396:15639":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"5:2089:3057":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:13972:5340":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"25:1368:4802":{"crate_id":25,"path":["regex_syntax","ast","Alternation"],"kind":"struct"},"16:150:4216":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:13877:5611":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:507:4616":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:9427:2724":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:44182:15733":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:8130:15609":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6588:6392":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:7595:15612":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:22291:10430":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:6658:6884":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:3899:6269":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"24:2503:4975":{"crate_id":24,"path":["regex","re_unicode","Regex"],"kind":"struct"},"17:15368:5980":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:3337:2771":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:22343:15639":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"5:6007:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"23:19:2262":{"crate_id":23,"path":["env_filter","filter","Builder"],"kind":"struct"},"25:1380:4846":{"crate_id":25,"path":["regex_syntax","ast","Concat"],"kind":"struct"},"20:287:2238":{"crate_id":20,"path":["log","Record"],"kind":"struct"},"25:1706:4882":{"crate_id":25,"path":["regex_syntax","ast","ClassSetBinaryOp"],"kind":"struct"},"2:6149:4358":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:14968:5892":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:8587:10261":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"11:774:4334":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"10:44:4306":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"22:0:2116":{"crate_id":22,"path":["anstyle"],"kind":"module"},"16:8093:6629":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:2458:6235":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:680:4641":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:5717:15525":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:42459:3001":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:39481:3481":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:10989:3662":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:46380:7224":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"21:192:136":{"crate_id":21,"path":["humantime","date","Error"],"kind":"enum"},"25:254:37132":{"crate_id":25,"path":["regex_syntax","ast","visitor","ClassFrame"],"kind":"enum"},"17:1098:5122":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:4986:5138":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"26:1210:4656":{"crate_id":26,"path":["aho_corasick","nfa","NFA"],"kind":"struct"},"2:23001:6980":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"24:2028:5077":{"crate_id":24,"path":["regex","prog","InstChar"],"kind":"struct"},"1:1812:675":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:1191:36385":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:6746:9322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:30482:3001":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"23:41:2459":{"crate_id":23,"path":["env_filter","filter","Filter"],"kind":"struct"},"2:40530:6897":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:13252:5485":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:5846:6309":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:3339:3063":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:917:4336":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:2612:6242":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:6976:4280":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:6727:3141":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:40332:4360":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:8313:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:4876:8817":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:5929:3134":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"25:1917:27191":{"crate_id":25,"path":["regex_syntax","ast","FlagsItemKind"],"kind":"enum"},"11:1025:6737":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:8220:7331":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"27:768:4616":{"crate_id":27,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:613:36632":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:41457:7284":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13325:4191":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"5:3037:34980":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:10887:36619":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:2859:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:12707:5425":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:16235:6217":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:7321:3203":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:6606:6399":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"26:1447:4718":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","Teddy"],"kind":"struct"},"26:1550:4744":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","Mask128"],"kind":"struct"},"27:556:5114":{"crate_id":27,"path":["memchr","cow","Imp"],"kind":"enum"},"1:1043:6483":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:37833:15627":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"23:97:3521":{"crate_id":23,"path":["env_filter","op","FilterOp"],"kind":"struct"},"17:9984:22972":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"24:2452:5098":{"crate_id":24,"path":["regex","re_trait","SubCapturesPosIter"],"kind":"struct"},"16:2528:6238":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:7363:3098":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"25:1631:27199":{"crate_id":25,"path":["regex_syntax","ast","ClassSet"],"kind":"enum"},"1:9401:3145":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:11583:5304":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:6763:9330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:14271:5683":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:4402:15542":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"26:1042:37838":{"crate_id":26,"path":["aho_corasick","ahocorasick","StreamChunk"],"kind":"enum"},"6:4811:8771":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:15342:5970":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"26:929:27232":{"crate_id":26,"path":["aho_corasick","state_id","StateID"],"kind":"trait"},"2:46409:7225":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"11:2304:6483":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:9700:27729":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:4759:9438":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:6456:22905":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:11048:3628":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:45509:7136":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:10669:2771":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:10260:3013":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:3949:7283":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"26:1411:4719":{"crate_id":26,"path":["aho_corasick","packed","rabinkarp","RabinKarp"],"kind":"struct"},"2:10264:3010":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:40081:7008":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:46477:7229":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:12464:23097":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:13797:5597":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6278:4250":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:8026:10135":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:5557:9088":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"24:1688:37086":{"crate_id":24,"path":["regex","exec","MatchLiteralType"],"kind":"enum"},"5:4502:35014":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"0:399:2361":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Seconds"],"kind":"variant"},"2:21984:4369":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:5064:3020":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"26:1628:4669":{"crate_id":26,"path":["aho_corasick","prefilter","RareByteOffsets"],"kind":"struct"},"27:730:36632":{"crate_id":27,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"11:1603:6746":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:5974:3146":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:14260:5682":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:4080:10234":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6300:6366":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"14:160:6725":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:1356:6742":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:7714:6826":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"9:424:21892":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:10185:4164":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:2660:6244":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:43277:7063":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:13723:5579":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:3844:7281":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:2338:6229":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:45442:7132":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:10931:4531":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:2768:6249":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"25:2307:4119":{"crate_id":25,"path":["regex_syntax","hir","ClassBytesRange"],"kind":"struct"},"2:1765:2589":{"crate_id":2,"path":["core","mem"],"kind":"module"},"2:8176:3152":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:16079:6179":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"24:2508:5087":{"crate_id":24,"path":["regex","re_unicode","CaptureNames"],"kind":"struct"},"2:2992:6871":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"26:1187:2262":{"crate_id":26,"path":["aho_corasick","dfa","Builder"],"kind":"struct"},"1:3502:3020":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:13922:5617":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"25:1582:27195":{"crate_id":25,"path":["regex_syntax","ast","ClassUnicodeKind"],"kind":"enum"},"1:10607:27870":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:13473:5516":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:11072:3629":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:43447:7074":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:11242:5273":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"28:61:27244":{"crate_id":28,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"1:9374:3136":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:578:8602":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:9105:4519":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11547:5186":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:4885:8822":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"25:2265:4935":{"crate_id":25,"path":["regex_syntax","hir","ClassUnicodeIter"],"kind":"struct"},"17:13424:5506":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:8259:9553":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:10671:36621":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:2203:5125":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:4940:6289":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"24:2556:5083":{"crate_id":24,"path":["regex","re_unicode","CaptureMatches"],"kind":"struct"},"17:15376:5983":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:15092:5911":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:10960:3039":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:8202:4294":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"25:2222:4779":{"crate_id":25,"path":["regex_syntax","hir","Literal"],"kind":"enum"},"29:285:4059":{"crate_id":29,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"17:13308:4189":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:11153:5247":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:5347:6296":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:4239:3020":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:22117:10344":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:1480:3629":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:3192:15477":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"26:1455:5022":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","Exec"],"kind":"enum"},"24:2042:5079":{"crate_id":24,"path":["regex","prog","InstBytes"],"kind":"struct"},"25:2012:4917":{"crate_id":25,"path":["regex_syntax","hir","interval","IntervalSet"],"kind":"struct"},"26:1093:4688":{"crate_id":26,"path":["aho_corasick","classes","ByteClassRepresentatives"],"kind":"struct"},"2:12574:6937":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:4921:7291":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:7569:6854":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:9118:7403":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:12339:875":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:14723:5743":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:5643:9128":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:1057:6737":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:2631:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"25:1694:4880":{"crate_id":25,"path":["regex_syntax","ast","ClassSetUnion"],"kind":"struct"},"6:1496:8615":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:14752:5763":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"11:2469:6826":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:21456:34481":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"30:23:21927":{"crate_id":30,"path":["utf8parse","types","Action"],"kind":"enum"},"27:698:3501":{"crate_id":27,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"18:726:4079":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"25:1281:4504":{"crate_id":25,"path":["regex_syntax","ast","Span"],"kind":"struct"},"25:1106:4104":{"crate_id":25,"path":["regex_syntax","ast","parse","ParserBuilder"],"kind":"struct"},"21:101:2725":{"crate_id":21,"path":["humantime","date","format_rfc3339_micros"],"kind":"function"},"28:501:3721":{"crate_id":28,"path":["anstream","strip","StripStream"],"kind":"struct"},"17:14414:5705":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:11373:6928":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"22:405:2617":{"crate_id":22,"path":["anstyle","style","Style"],"kind":"struct"},"2:5862:3020":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:9326:27610":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:9131:4520":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:44394:7112":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"20:194:2590":{"crate_id":20,"path":["log","Level"],"kind":"enum"},"2:41611:3091":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:5774:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:670:4640":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:6784:3148":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:9094:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"25:2038:4775":{"crate_id":25,"path":["regex_syntax","hir","literal","Literals"],"kind":"struct"},"16:6480:4273":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:10564:7402":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:22946:6975":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:4346:7285":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:2748:6248":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:11086:27855":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"25:2403:27187":{"crate_id":25,"path":["regex_syntax","hir","RepetitionKind"],"kind":"enum"},"2:43811:7090":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:12584:5247":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:517:8569":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:41311:10215":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:3284:36099":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:564:8594":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:41622:3092":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:6435:9185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"24:2445:5097":{"crate_id":24,"path":["regex","re_trait","Locations"],"kind":"struct"},"2:41545:3628":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:6447:9189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:6505:9220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:7857:6588":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"24:2254:5090":{"crate_id":24,"path":["regex","re_bytes","ReplacerRef"],"kind":"struct"},"1:4243:32073":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:9272:27598":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:11407:6801":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:16223:6214":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:1599:4884":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:6342:36614":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:3271:4885":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:11637:7315":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:44405:3096":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:46277:7221":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"21:100:2726":{"crate_id":21,"path":["humantime","date","format_rfc3339_millis"],"kind":"function"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:3544:15630":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:5064:8909":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:2854:6253":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:417:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:5995:6321":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:8492:3042":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:925:6730":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:43876:7092":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:41719:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"26:1386:4724":{"crate_id":26,"path":["aho_corasick","packed","pattern","Patterns"],"kind":"struct"},"16:2303:22013":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:3146:3485":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:2434:10192":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:2510:15639":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:43338:7070":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11467:5292":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"25:1531:27194":{"crate_id":25,"path":["regex_syntax","ast","ClassAsciiKind"],"kind":"enum"},"17:12342:5394":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11341:5286":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:9737:22951":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"18:623:36633":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:39180:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:43286:7064":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:8236:3057":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:33452:15622":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:12318:5132":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"18:608:4627":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"21:102:2727":{"crate_id":21,"path":["humantime","date","format_rfc3339_nanos"],"kind":"function"},"25:1328:27184":{"crate_id":25,"path":["regex_syntax","ast","Ast"],"kind":"enum"},"17:13187:5467":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:12089:5372":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6442:6381":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:4614:6279":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:12328:5390":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:16138:6192":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:11651:7316":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:9527:3657":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:7380:6850":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:40309:6890":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:5927:6312":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:3472:3068":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:6600:35015":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"24:1559:4705":{"crate_id":24,"path":["regex","dfa","State"],"kind":"struct"},"2:43325:7067":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"14:7:6725":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:6756:9329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:4:1231":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:4622:2950":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"25:2442:4939":{"crate_id":25,"path":["regex_syntax","hir","HirInfo"],"kind":"struct"},"2:45605:7149":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:1663:8725":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:2496:652":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:2701:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"21:180:2592":{"crate_id":21,"path":["humantime","wrapper","Timestamp"],"kind":"struct"},"11:1066:21968":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"25:2186:27210":{"crate_id":25,"path":["regex_syntax","hir","HirKind"],"kind":"enum"},"5:7094:35024":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:12433:4178":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:8460:3039":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:13594:5549":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:14986:5897":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:21566:10345":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:734:10218":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:6821:9348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:12543:5417":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:12340:881":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:14876:5857":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:16198:6208":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:43379:3045":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"11:1676:36583":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:30210:10217":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:12326:1822":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"11:2554:36589":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:22738:6955":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"15:288:21994":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:40037:7006":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:3725:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:4531:6276":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:10982:22985":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"26:1340:37836":{"crate_id":26,"path":["aho_corasick","packed","api","ForceAlgorithm"],"kind":"enum"},"16:4771:6283":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:12325:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"25:1955:27208":{"crate_id":25,"path":["regex_syntax","either","Either"],"kind":"enum"},"2:22441:10424":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:4916:8840":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:2041:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:11443:5291":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:5167:34660":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:15214:5939":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:22724:33190":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:8265:9554":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:7306:9392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:1327:6738":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:2572:6240":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:7686:6577":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:8788:10305":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:43176:7054":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"8:0:2810":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"18:651:4616":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"26:961:4670":{"crate_id":26,"path":["aho_corasick","ahocorasick","AhoCorasick"],"kind":"struct"},"2:21996:34471":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:5200:8930":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"11:1582:6745":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:15313:5962":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:46057:7185":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:31980:2958":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:11674:5311":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11688:5312":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:5415:6297":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:40209:4356":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:13046:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:15116:5913":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:7851:7438":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:9402:4663":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:14131:5642":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:706:4644":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"11:1566:21969":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:15197:5936":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:1311:6483":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"27:638:27159":{"crate_id":27,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:44290:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:7882:3067":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"25:2500:4944":{"crate_id":25,"path":["regex_syntax","unicode","CaseFoldError"],"kind":"struct"},"2:43429:7073":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:39238:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:4686:2957":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:7710:15604":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12824:22976":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"25:2089:27224":{"crate_id":25,"path":["regex_syntax","hir","translate","HirFrame"],"kind":"enum"},"2:41497:6913":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"25:268:37133":{"crate_id":25,"path":["regex_syntax","ast","visitor","ClassInduct"],"kind":"enum"},"2:33079:2941":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12659:5421":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"22:330:2628":{"crate_id":22,"path":["anstyle","effect","Effects"],"kind":"struct"},"5:3807:6828":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:15701:6085":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:1565:8653":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"25:2505:4945":{"crate_id":25,"path":["regex_syntax","unicode","UnicodeWordError"],"kind":"struct"},"1:3206:1292":{"crate_id":1,"path":["std","io","prelude"],"kind":"module"},"17:12530:5416":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:11715:5314":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"24:1617:5021":{"crate_id":24,"path":["regex","dfa","StateMap"],"kind":"struct"},"1:11075:3917":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:5014:8884":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:7984:9537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:14111:5641":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:1653:8719":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:6698:9311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:21507:10346":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"0:398:2112":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision"],"kind":"enum"},"17:16105:6185":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:7998:3267":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:41914:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:8539:10214":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"11:832:6743":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:14994:5898":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:41678:3629":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:41423:33164":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"7:78:21883":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:12812:4769":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:4501:7287":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:1580:8665":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11605:4172":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:10471:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:11571:3279":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"2:45343:7122":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:15445:5999":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:1517:8623":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:437:5119":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:13235:5482":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:8669:4136":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:10683:34556":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:14503:5723":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:14449:5717":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"25:2081:4919":{"crate_id":25,"path":["regex_syntax","hir","translate","Translator"],"kind":"struct"},"24:1637:5022":{"crate_id":24,"path":["regex","exec","Exec"],"kind":"struct"},"17:10170:4144":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:22831:6968":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:6689:9305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:3184:15475":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"17:16032:5485":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:4612:10262":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"25:1130:4798":{"crate_id":25,"path":["regex_syntax","ast","parse","ParserI"],"kind":"struct"},"17:15748:6098":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:7452:9452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:45620:7150":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"11:811:6826":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:5914:4249":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:6847:6891":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:12347:943":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:3247:9765":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"25:2272:4118":{"crate_id":25,"path":["regex_syntax","hir","ClassUnicodeRange"],"kind":"struct"},"2:3571:15539":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"28:490:37855":{"crate_id":28,"path":["anstream","auto","StreamInner"],"kind":"enum"},"17:15836:6116":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:40506:3043":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:3187:15476":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"11:0:2813":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:9190:10315":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6532:6390":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"26:1696:4685":{"crate_id":26,"path":["aho_corasick","Match"],"kind":"struct"},"25:1932:4906":{"crate_id":25,"path":["regex_syntax","ast","Flag"],"kind":"enum"},"1:3429:3050":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:2044:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:1547:8643":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:33138:3103":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:46322:7222":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:12329:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:2443:6744":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:46523:7233":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:5453:4846":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:9382:3020":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:44129:4368":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:40341:6892":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:45281:7114":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"16:4468:6274":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:16259:5500":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"25:1489:4858":{"crate_id":25,"path":["regex_syntax","ast","ClassPerl"],"kind":"struct"},"2:4696:2958":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:8301:6647":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"11:430:36595":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"18:515:4614":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:4882:6287":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"28:451:4705":{"crate_id":28,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"2:39909:6996":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:9905:33930":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:7942:2947":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:2708:6246":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:3635:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:3026:2943":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:5852:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:13485:5519":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"24:2263:5091":{"crate_id":24,"path":["regex","re_bytes","NoExpand"],"kind":"struct"},"26:1542:4740":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddyFat3Mask256"],"kind":"struct"},"17:10284:4167":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:7446:9450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"11:2542:8524":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:1449:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:15596:6057":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"11:1896:6826":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:8750:4705":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:4712:10280":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:11906:7319":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:10419:4170":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:9313:7410":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"25:2049:4779":{"crate_id":25,"path":["regex_syntax","hir","literal","Literal"],"kind":"struct"},"14:31:6725":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:40050:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:10969:27617":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:4909:8836":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:12213:5382":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"24:2157:5081":{"crate_id":24,"path":["regex","re_builder","set_unicode","RegexSetBuilder"],"kind":"struct"},"17:14436:5716":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:11497:27866":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"5:5457:15482":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:6768:9331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:40381:7026":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:4149:3629":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:43529:7075":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:12107:4148":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:7594:15611":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"28:114:3050":{"crate_id":28,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"2:41295:6910":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"24:1531:5014":{"crate_id":24,"path":["regex","dfa","Fsm"],"kind":"struct"},"1:11747:27728":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:7509:6561":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:44125:9730":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"24:1579:4130":{"crate_id":24,"path":["regex","dfa","EmptyFlags"],"kind":"struct"},"2:6858:2593":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:6311:27854":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:41536:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:32083:3488":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:41279:6908":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:10941:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"6:5528:9071":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:45734:7156":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"21:134:136":{"crate_id":21,"path":["humantime","duration","Error"],"kind":"enum"},"16:6263:6364":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"26:1023:4677":{"crate_id":26,"path":["aho_corasick","ahocorasick","StreamChunkIter"],"kind":"struct"},"17:15390:5985":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:15249:5945":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:8259:6540":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:4913:6288":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4800:8763":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:4265:10257":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:37778:15626":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:942:6733":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"24:1516:5009":{"crate_id":24,"path":["regex","dfa","CacheInner"],"kind":"struct"},"16:6335:4235":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:40200:4353":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"24:2543:5089":{"crate_id":24,"path":["regex","re_unicode","SubCaptureMatches"],"kind":"struct"},"2:10715:33815":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:8593:7382":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"25:2058:4108":{"crate_id":25,"path":["regex_syntax","hir","print","PrinterBuilder"],"kind":"struct"},"17:15273:5953":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:12485:23098":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"25:1797:27187":{"crate_id":25,"path":["regex_syntax","ast","RepetitionKind"],"kind":"enum"},"6:7602:9531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"18:80:27147":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:6948:4278":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:4985:8868":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"11:687:3629":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:4750:2960":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:473:8541":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"11:2562:8528":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:15039:5907":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:7549:6572":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:13756:3097":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:6880:9360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:14091:5638":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:10920:7427":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:5409:35015":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:1428:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"24:2206:3045":{"crate_id":24,"path":["regex","re_bytes","Split"],"kind":"struct"},"2:3332:2967":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11841:5332":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:839:3628":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"26:1493:4733":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask256"],"kind":"struct"},"24:2001:5003":{"crate_id":24,"path":["regex","prog","EmptyLook"],"kind":"enum"},"2:22855:10231":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:2670:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:3872:6826":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:5526:7296":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:5361:8994":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:2037:5124":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:15289:5955":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:7633:36609":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:21441:34468":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:21684:10343":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4942:8850":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10612:5244":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:10252:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"25:1183:4806":{"crate_id":25,"path":["regex_syntax","ast","print","Printer"],"kind":"struct"},"2:40772:6904":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:40723:6900":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:45538:7138":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:16249:6218":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:7048:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:830:6820":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:2838:6252":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:7799:4292":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:1171:34985":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:3355:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:5781:7301":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:14587:5734":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:7582:15679":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"25:2524:37131":{"crate_id":25,"path":["regex_syntax","unicode","CanonicalClassQuery"],"kind":"enum"},"1:2506:2234":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:7978:3268":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"11:883:6736":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:7306:36613":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:45719:7155":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:11140:6921":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:1935:2777":{"crate_id":2,"path":["core","mem","take"],"kind":"function"},"17:15426:5994":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:7584:9528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:5083:8910":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:4976:6290":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"24:1770:5048":{"crate_id":24,"path":["regex","input","InputAt"],"kind":"struct"},"17:15102:5912":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:6026:4218":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:559:8592":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:10534:36623":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:11764:5321":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:11102:5264":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:10350:4169":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13959:5621":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:6721:9318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:11932:15490":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:1066:6738":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:15222:5941":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:6788:9339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12647:5420":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"28:326:4606":{"crate_id":28,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:479:8544":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"24:2132:5081":{"crate_id":24,"path":["regex","re_builder","set_bytes","RegexSetBuilder"],"kind":"struct"},"17:9671:22952":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:5002:8878":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12478:5407":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:14855:5849":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:10254:3005":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:21458:34477":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:45588:7148":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:6379:9145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:40247:6881":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:40158:7016":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"29:198:21927":{"crate_id":29,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"1:5038:10282":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"17:12851:4181":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:5700:6255":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:11042:5259":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:12324:1149":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:5283:8971":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:5958:3020":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:7359:9421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4787:8754":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"11:800:6744":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:44417:7113":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"28:292:4061":{"crate_id":28,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"24:1433:37083":{"crate_id":24,"path":["regex","compile","MaybeInst"],"kind":"enum"},"2:43349:6933":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"25:2324:4933":{"crate_id":25,"path":["regex_syntax","hir","Anchor"],"kind":"enum"},"2:12772:2991":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:45649:7151":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"25:2001:142":{"crate_id":25,"path":["regex_syntax","error","Formatter"],"kind":"struct"},"17:403:5117":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:5645:7300":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:13089:5449":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:6749:6424":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:10218:4165":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"24:307:4956":{"crate_id":24,"path":["regex","dfa","TransitionsRow"],"kind":"struct"},"24:1491:4128":{"crate_id":24,"path":["regex","compile","SuffixCacheKey"],"kind":"struct"},"2:46602:7244":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"11:299:9711":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:22713:6954":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:4502:6275":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"25:1143:27206":{"crate_id":25,"path":["regex_syntax","ast","parse","GroupState"],"kind":"enum"},"2:43653:7079":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:46040:7184":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"22:350:4139":{"crate_id":22,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"24:1666:37081":{"crate_id":24,"path":["regex","exec","MatchType"],"kind":"enum"},"2:21419:3501":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:4741:2959":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:4634:10263":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:7338:27857":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13568:5544":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:44101:9724":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:7659:33192":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:13450:33555":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:22253:10429":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:1577:3628":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:9293:4774":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"31:40:4006":{"crate_id":31,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"1:5713:9346":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"18:481:4615":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:6402:10435":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:6670:9301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:11345:6926":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:3014:22042":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4924:8842":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:8188:6639":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"20:223:2235":{"crate_id":20,"path":["log","LevelFilter"],"kind":"enum"},"17:10622:36624":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:2707:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"26:1602:4752":{"crate_id":26,"path":["aho_corasick","prefilter","Packed"],"kind":"struct"},"2:1863:3020":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"16:6120:22903":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:4469:2969":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:43264:7062":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:3029:5141":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:9781:22967":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13785:5595":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:5453:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:40716:6899":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:11345:7433":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"5:1546:4336":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:8528:7376":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:3590:2630":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:10915:36620":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:6353:4265":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"26:1666:4765":{"crate_id":26,"path":["aho_corasick","prefilter","StartBytesBuilder"],"kind":"struct"},"1:8630:9425":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"25:2289:4921":{"crate_id":25,"path":["regex_syntax","hir","ClassBytes"],"kind":"struct"},"1:9155:3535":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:513:5120":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:40151:3071":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:15324:5966":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"0:403:2367":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Micros"],"kind":"variant"},"16:2998:6262":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"26:1236:4708":{"crate_id":26,"path":["aho_corasick","nfa","Dense"],"kind":"struct"},"6:8271:9555":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:15410:5991":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:45328:7121":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"23:90:3523":{"crate_id":23,"path":["env_filter","filtered_log","FilteredLog"],"kind":"struct"},"2:46468:7228":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:2103:6828":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"15:0:2816":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:921:4337":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:11252:6924":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"27:725:4627":{"crate_id":27,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:40178:7018":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:12621:5419":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"27:690:4616":{"crate_id":27,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12251:5385":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:545:8584":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:8828:7292":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:46572:7242":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:4613:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"25:1749:27190":{"crate_id":25,"path":["regex_syntax","ast","AssertionKind"],"kind":"enum"},"7:31:21876":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:45818:7160":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:3847:7282":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8685:10292":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:42719:4506":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:2665:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:4336:6875":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:10313:2293":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"27:632:4614":{"crate_id":27,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:948:6735":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:11092:27847":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:1890:3658":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:1581:3535":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"11:1917:4885":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:41875:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:11676:9735":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"26:1594:2262":{"crate_id":26,"path":["aho_corasick","prefilter","Builder"],"kind":"struct"},"2:2862:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:40730:3137":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:44006:6943":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"18:0:2819":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:45463:7133":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:5205:3070":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:44093:9722":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"26:1609:4753":{"crate_id":26,"path":["aho_corasick","prefilter","RareBytesBuilder"],"kind":"struct"},"21:164:130":{"crate_id":21,"path":["humantime","wrapper","Duration"],"kind":"struct"},"24:1405:37085":{"crate_id":24,"path":["regex","backtrack","Job"],"kind":"enum"},"13:0:2808":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:12328:1269":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:7954:10205":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:671:6819":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:42072:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:1518:4334":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:2280:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"24:2418:5092":{"crate_id":24,"path":["regex","re_set","bytes","RegexSet"],"kind":"struct"},"17:15058:4199":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:10050:3002":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:110:307":{"crate_id":5,"path":["alloc","alloc","alloc"],"kind":"function"},"25:0:3514":{"crate_id":25,"path":["regex_syntax"],"kind":"module"},"6:6775:9332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"9:502:6804":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:42711:3733":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:40228:4357":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"26:1505:4735":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask128"],"kind":"struct"},"16:7132:6482":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:2355:4208":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:1699:8739":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:22797:33173":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12278:5387":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:46430:7226":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"29:109:4017":{"crate_id":29,"path":["anstyle_parse","params","Params"],"kind":"struct"},"2:43643:7078":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:2835:10205":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:926:10151":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:46155:7219":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:8012:9540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12508:5412":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:1559:8651":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"24:1231:4979":{"crate_id":24,"path":["regex","re_unicode","CapturesDebug"],"kind":"struct"},"18:718:4648":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"24:2162:4685":{"crate_id":24,"path":["regex","re_bytes","Match"],"kind":"struct"},"1:11198:7403":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"11:351:36585":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:8314:3058":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:4044:10233":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:506:3257":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:5565:9090":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4971:8861":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:5630:9122":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:40754:7030":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:9409:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:1707:8743":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:7081:10340":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:13644:6950":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"25:1166:4805":{"crate_id":25,"path":["regex_syntax","ast","parse","NestLimiter"],"kind":"struct"},"2:43501:6926":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13986:5625":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:11235:2724":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:30467:3858":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:7769:6579":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:11419:4148":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:5817:4240":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"27:882:27158":{"crate_id":27,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"24:1702:37064":{"crate_id":24,"path":["regex","exec","MatchNfaType"],"kind":"enum"},"22:429:4140":{"crate_id":22,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"1:4761:9440":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:3111:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"25:1193:136":{"crate_id":25,"path":["regex_syntax","ast","Error"],"kind":"struct"},"16:6962:4279":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:6160:22012":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"24:1213:4976":{"crate_id":24,"path":["regex","re_unicode","Captures"],"kind":"struct"},"5:4925:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:4835:780":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:3287:3061":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:1628:8700":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:15957:6134":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:1342:6737":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"25:2422:27188":{"crate_id":25,"path":["regex_syntax","hir","RepetitionRange"],"kind":"enum"},"11:2498:21964":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:6509:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:21957:10205":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"20:334:2989":{"crate_id":20,"path":["log","MetadataBuilder"],"kind":"struct"},"6:8253:9552":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:22427:10205":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:7085:6475":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"27:806:4643":{"crate_id":27,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:8155:6635":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:2609:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"24:1936:4963":{"crate_id":24,"path":["regex","prog","Program"],"kind":"struct"},"2:1946:3854":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:4802:6284":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:536:3262":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"24:2344:5095":{"crate_id":24,"path":["regex","re_set","unicode","SetMatchesIntoIter"],"kind":"struct"},"6:5515:9070":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:13387:5500":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:11359:6927":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:8534:7378":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:3584:34799":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:2636:6243":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"26:1512:4736":{"crate_id":26,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask256"],"kind":"struct"},"17:13999:5626":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:41601:3204":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"28:377:4607":{"crate_id":28,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"1:1971:10174":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:22:795":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:1827:3642":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:16165:6201":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:3027:34979":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:3106:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:3382:3060":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:12572:4148":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:7655:6861":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:12331:1672":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:5472:9060":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:3965:3535":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:3832:6744":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"5:3209:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:4821:5137":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"17:3597:5131":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"24:2482:4685":{"crate_id":24,"path":["regex","re_unicode","Match"],"kind":"struct"},"2:43988:7102":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"24:1885:5014":{"crate_id":24,"path":["regex","pikevm","Fsm"],"kind":"struct"},"5:1557:4337":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5457:9051":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"27:648:4617":{"crate_id":27,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:598:36630":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"28:436:4069":{"crate_id":28,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"1:5273:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"13:229:4300":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:1207:5123":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"3:0:485":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:11770:7281":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:4104:35015":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:12276:7441":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:4797:2962":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6412:22904":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:13024:22978":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:5134:8914":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"25:1155:27207":{"crate_id":25,"path":["regex_syntax","ast","parse","ClassState"],"kind":"enum"},"17:15646:6069":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:22844:6969":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"24:949:4979":{"crate_id":24,"path":["regex","re_bytes","CapturesDebug"],"kind":"struct"},"2:40093:3044":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:15301:5961":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:3925:6270":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:46019:7183":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"11:2140:6737":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:5250:8951":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:6620:6401":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:13211:5481":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"24:0:1937":{"crate_id":24,"path":["regex"],"kind":"module"},"26:1688:4768":{"crate_id":26,"path":["aho_corasick","prefilter","StartBytesThree"],"kind":"struct"},"17:15473:6007":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"26:1404:4663":{"crate_id":26,"path":["aho_corasick","packed","pattern","Pattern"],"kind":"struct"},"26:1427:4664":{"crate_id":26,"path":["aho_corasick","packed","teddy","compile","Compiler"],"kind":"struct"},"1:0:1664":{"crate_id":1,"path":["std"],"kind":"module"},"1:11914:7319":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"24:1746:2958":{"crate_id":24,"path":["regex","expand","Ref"],"kind":"enum"},"2:10247:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:5314:8983":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:10044:22973":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:42966:9721":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:12768:22954":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:1593:8672":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:0:2809":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:2448:10196":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:12993:22977":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:5960:6319":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:39295:6993":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:41479:6911":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:42766:4508":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:2741:3056":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:10720:36625":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:16050:5495":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:11497:5294":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:8522:3041":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:8317:9567":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:4500:2970":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:30461:3857":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:3554:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:39893:6874":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:41561:3535":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:4856:6286":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"25:1454:27198":{"crate_id":25,"path":["regex_syntax","ast","HexLiteralKind"],"kind":"enum"},"22:184:3912":{"crate_id":22,"path":["anstyle","color","Color"],"kind":"enum"},"27:680:4074":{"crate_id":27,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:365:3277":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:14599:5741":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:40288:7024":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:12362:5399":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"11:875:6735":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:2285:3893":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:12344:6931":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"26:1420:2262":{"crate_id":26,"path":["aho_corasick","packed","teddy","compile","Builder"],"kind":"struct"},"17:15521:6044":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:15356:5977":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:7444:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:41339:4504":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:9139:3628":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"28:313:4063":{"crate_id":28,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"1:2282:7279":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:6738:9321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:43782:7082":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:2666:3054":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:44105:9725":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:7604:4284":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:673:3628":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:9723:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:40745:3068":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:6609:9276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:15608:6060":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:40322:7025":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"14:0:2815":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:3551:3030":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:11604:4528":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"}},"external_crates":{"31":{"name":"colorchoice","html_root_url":null},"28":{"name":"anstream","html_root_url":null},"25":{"name":"regex_syntax","html_root_url":null},"22":{"name":"anstyle","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"anstyle_query","html_root_url":null},"29":{"name":"anstyle_parse","html_root_url":null},"26":{"name":"aho_corasick","html_root_url":null},"23":{"name":"env_filter","html_root_url":null},"20":{"name":"log","html_root_url":"https://docs.rs/log/0.4.21/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"utf8parse","html_root_url":null},"27":{"name":"memchr","html_root_url":null},"24":{"name":"regex","html_root_url":null},"21":{"name":"humantime","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}