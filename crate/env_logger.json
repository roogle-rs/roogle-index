{"root":"0:0:1962","crate_version":"0.11.1","includes_private":false,"index":{"0:379:790":{"id":"0:379:790","crate_id":0,"name":"hash","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,33],"end":[12,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10211:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12854:34521":{"id":"2:12854:34521","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:2263":{"id":"0:116:2263","crate_id":0,"name":"try_init","span":{"filename":"src/logger.rs","begin":[846,0],"end":[848,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"log::SetLoggerError","id":"20:352:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12959:34538":{"id":"2:12959:34538","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:4691"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:2878":{"id":"5:5554:2878","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:32665":{"id":"2:12875:32665","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12876:32697"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44599:7056","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12912:28055":{"id":"2:12912:28055","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:4691","str::rsplitn":"2:12915:28057"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44429:5000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32928:2963-0:365:1961":{"id":"a:2:32928:2963-0:365:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32928:2963","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:54:2256":{"id":"0:54:2256","crate_id":0,"name":"is_test","span":{"filename":"src/logger.rs","begin":[442,4],"end":[445,5]},"visibility":"public","docs":"Sets whether or not the logger will be used in unit tests.\n\nIf `is_test` is `true` then the logger will allow the testing framework to\ncapture log records rather than printing them to the terminal directly.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["is_test",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:365:1961":{"id":"b:5:687-0:365:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2751","5:690:2346","5:691:3399"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3560-0:324:2109":{"id":"b:2:3560-0:324:2109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:412:726":{"id":"0:412:726","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[61,22],"end":[61,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9962:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9943:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:34537":{"id":"2:12956:34537","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:4691"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:254-0:60:2277":{"id":"a:2:2966:254-0:60:2277","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[793,0],"end":[800,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:105:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:360:1765":{"id":"0:360:1765","crate_id":0,"name":"0","span":{"filename":"src/fmt/writer/target.rs","begin":[11,9],"end":[11,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Box","id":"5:281:2188","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"std::io::Write","id":"1:3548:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}}}},"0:151:2205":{"id":"0:151:2205","crate_id":0,"name":"timestamp","span":{"filename":"src/fmt/humantime.rs","begin":[30,4],"end":[35,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC.\n\n# Examples\n\nInclude the current timestamp with the log record:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    let ts = buf.timestamp();\n\n    writeln!(buf, \"{}: {}: {}\", ts, record.level(), record.args())\n});\n```\n\n[`Timestamp`]: struct.Timestamp.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:156:2410":{"id":"b:2:2759-0:156:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12906:34525":{"id":"2:12906:34525","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12541:4691","str::split":"2:12897:2498","prim@char":"1:12106:458","`DoubleEndedIterator`":"2:7934:128","str::rsplit_terminator":"2:12909:34526"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44375:7050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12850:34520":{"id":"2:12850:34520","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12848:34519"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:324:2109":{"id":"b:2:2444-0:324:2109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:2431"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:83:2110":{"id":"0:83:2110","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[706,4],"end":[713,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["filter_env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:355:256":{"id":"b:2:2444-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:2431"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42554:2902-0:365:1961":{"id":"a:2:42554:2902-0:365:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42554:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:691:3399":{"id":"5:691:3399","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:404:2214":{"id":"0:404:2214","crate_id":0,"name":"Micros","span":{"filename":"src/fmt/mod.rs","begin":[68,4],"end":[68,10]},"visibility":"default","docs":"Microsecond precision (6 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2444-0:336:2140":{"id":"b:2:2444-0:336:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2446:2431"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[61,15],"end":[61,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:410:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:117:2272":{"id":"0:117:2272","crate_id":0,"name":"init","span":{"filename":"src/logger.rs","begin":[859,0],"end":[861,1]},"visibility":"public","docs":"Initializes the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:28060":{"id":"2:12921:28060","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32928:2963-0:399:1960":{"id":"a:2:32928:2963-0:399:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32928:2963","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12866:34523":{"id":"2:12866:34523","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12112:1548","crate::ops::IndexMut":"2:3222:10070","str::slice_unchecked":"2:12865:34522"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:28064":{"id":"2:12953:28064","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:4691"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:156:2410":{"id":"b:2:2754-0:156:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:363:2583":{"id":"0:363:2583","crate_id":0,"name":"Stderr","span":{"filename":"src/fmt/writer/target.rs","begin":[9,4],"end":[9,10]},"visibility":"default","docs":"Logs will be sent to standard error.","links":{},"attrs":["#[default]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:82:1048":{"id":"0:82:1048","crate_id":0,"name":"new","span":{"filename":"src/logger.rs","begin":[701,4],"end":[703,5]},"visibility":"public","docs":"Get a default set of environment variables.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:2487":{"id":"0:153:2487","crate_id":0,"name":"timestamp_millis","span":{"filename":"src/fmt/humantime.rs","begin":[48,4],"end":[53,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmillisecond precision.","links":{"`Timestamp`":"0:156:2410"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:254-0:247:141":{"id":"a:2:2966:254-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:32928:2963-0:247:141":{"id":"a:2:32928:2963-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32928:2963","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32846:244-0:324:2109":{"id":"a:2:32846:244-0:324:2109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12857:2338":{"id":"2:12857:2338","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42427:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42553:2903-0:156:2410":{"id":"a:2:42553:2903-0:156:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42553:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12977:10038":{"id":"2:12977:10038","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4740:10038"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44633:6876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12856:28021":{"id":"2:12856:28021","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12123:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245":{"id":"0:245","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[74,0],"end":[78,1]},"visibility":"default","docs":"The default timestamp precision is seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:246:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12883:28062":{"id":"2:12883:28062","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:4691"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2156":{"id":"0:50:2156","crate_id":0,"name":"parse_filters","span":{"filename":"src/logger.rs","begin":[380,4],"end":[383,5]},"visibility":"public","docs":"Parses the directives string in the same form as the `RUST_LOG`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["filters",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/target.rs","begin":[14,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:212:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:241-0:365:1961":{"id":"0:241-0:365:1961","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[52,0],"end":[52,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::writer::WriteStyle","name":"WriteStyle","id":"0:365:1961","glob":false}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[784,0],"end":[791,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::borrow::Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:102:753"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:124:2141":{"id":"0:124:2141","crate_id":0,"name":"builder","span":{"filename":"src/logger.rs","begin":[937,0],"end":[939,1]},"visibility":"public","docs":"Create a new builder with the default environment variables.\n\nThe builder can be configured before being initialized.\nThis is a convenient way of calling [`Builder::from_default_env`].\n\n[`Builder::from_default_env`]: struct.Builder.html#method.from_default_env","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:247:141":{"id":"b:2:2759-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2762:135":{"id":"2:2762:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32776:8496","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2748-0:365:1961":{"id":"b:2:2748-0:365:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5536":{"id":"5:5536","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5537:35226","5:5538:2453","5:5541:35227","5:5544:35228","5:5552:35229","5:5553:35230","5:5554:2878","5:5555:27824","5:5556:27825"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2759-0:60:2277":{"id":"b:2:2759-0:60:2277","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:356:2580":{"id":"0:356:2580","crate_id":0,"name":"Stdout","span":{"filename":"src/fmt/writer/target.rs","begin":[6,4],"end":[6,10]},"visibility":"default","docs":"Logs will be sent to standard output.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:2966:254-0:156:2410":{"id":"a:2:2966:254-0:156:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:29:2142":{"id":"0:29:2142","crate_id":0,"name":"parse_env","span":{"filename":"src/logger.rs","begin":[149,4],"end":[164,5]},"visibility":"public","docs":"Applies the configuration from the environment.\n\nThis function allows a builder to be configured with default parameters,\nto be then overridden by the environment.\n\n# Examples\n\nInitialise a logger with filter level `Off`, then override the log\nfilter from an environment variable called `MY_LOG`:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger with filter level `Off`, then use the `MY_LOG`\nvariable to override filtering and `MY_LOG_STYLE` to override  whether\nor not to write styles:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["env",{"generic":"E"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:247:141":{"id":"b:2:2748-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:34:738":{"id":"0:34:738","crate_id":0,"name":"format","span":{"filename":"src/logger.rs","begin":[243,4],"end":[249,5]},"visibility":"public","docs":"Sets the format function for formatting the log output.\n\nThis function is called on each record logged and should format the\nlog record and output it to the given [`Formatter`].\n\nThe format function is expected to output the string directly to the\n`Formatter` so that implementations can use the [`std::fmt`] macros\nto format and output without intermediate heap allocations. The default\n`env_logger` formatter takes advantage of this.\n\nWhen the `color` feature is enabled, styling via ANSI escape codes is supported and the\noutput will automatically respect [`Builder::write_style`].\n\n# Examples\n\nUse a custom format to write only the log message:\n\n```\nuse std::io::Write;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}\", record.args()));\n```\n\n[`Formatter`]: fmt/struct.Formatter.html\n[`String`]: https://doc.rust-lang.org/stable/std/string/struct.String.html\n[`std::fmt`]: https://doc.rust-lang.org/std/fmt/index.html","links":{"`Builder::write_style`":"0:52:2251"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["format",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3187:138","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:277:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[604,0],"end":[673,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Log","id":"20:151:2083","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:72:2311","0:73:1966","0:77:2321"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[675,0],"end":[681,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12893:3340":{"id":"2:12893:3340","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42427:198","prim@char":"1:12106:458","self::pattern":"2:12541:4691"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2191":{"id":"0:36:2191","crate_id":0,"name":"default_format","span":{"filename":"src/logger.rs","begin":[254,4],"end":[257,5]},"visibility":"public","docs":"Use the default format.\n\nThis method will clear any custom format set on the builder.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:34528":{"id":"2:12930:34528","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12541:4691","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::rmatch_indices":"2:12933:34529"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44475:7052","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:2210":{"id":"0:43:2210","crate_id":0,"name":"format_timestamp_millis","span":{"filename":"src/logger.rs","begin":[296,4],"end":[298,5]},"visibility":"public","docs":"Configures the timestamp to use millisecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:324:2109":{"id":"b:2:2759-0:324:2109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2966:254-0:365:1961":{"id":"a:2:2966:254-0:365:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:102:753":{"id":"0:102:753","crate_id":0,"name":"from","span":{"filename":"src/logger.rs","begin":[788,4],"end":[790,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["filter_env",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:2365":{"id":"0:121:2365","crate_id":0,"name":"init_from_env","span":{"filename":"src/logger.rs","begin":[923,0],"end":[929,1]},"visibility":"public","docs":"Initializes the global logger with an env logger from the given environment\nvariables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::init_from_env(env);\n```\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:156:2410":{"id":"b:2:2744-0:156:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2154"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2744-0:399:1960":{"id":"b:2:2744-0:399:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2154"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[10,0],"end":[72,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::fmt::Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:2205","0:152:2486","0:153:2487","0:154:2488","0:155:2489"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12876:32697":{"id":"2:12876:32697","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12875:32665"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44608:7057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3560-0:156:2410":{"id":"b:2:3560-0:156:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:125:2137":{"id":"0:125:2137","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[948,0],"end":[953,1]},"visibility":"public","docs":"Create a builder from the given environment variables.\n\nThe builder can be configured before being initialized.","links":{},"attrs":["#[deprecated(since = \"0.8.0\", note =\n\"Prefer `env_logger::Builder::from_env()` instead.\")]"],"deprecation":{"since":"0.8.0","note":"Prefer `env_logger::Builder::from_env()` instead."},"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3560-0:247:141":{"id":"b:2:3560-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:1962":{"id":"0:0:1962","crate_id":0,"name":"env_logger","span":{"filename":"src/lib.rs","begin":[7,0],"end":[283,24]},"visibility":"public","docs":"A simple logger that can be configured via environment variables, for use\nwith the logging facade exposed by the [`log` crate][log-crate-url].\n\nDespite having \"env\" in its name, **`env_logger`** can also be configured by\nother means besides environment variables. See [the examples][gh-repo-examples]\nin the source repository for more approaches.\n\nBy default, `env_logger` writes logs to `stderr`, but can be configured to\ninstead write them to `stdout`.\n\n## Example\n\n```\nuse log::{debug, error, log_enabled, info, Level};\n\nenv_logger::init();\n\ndebug!(\"this is a debug {}\", \"message\");\nerror!(\"this is printed by default\");\n\nif log_enabled!(Level::Info) {\n    let x = 3 * 4; // expensive computation\n    info!(\"the answer was: {}\", x);\n}\n```\n\nAssumes the binary is `main`:\n\n```{.bash}\n$ RUST_LOG=error ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n```\n\n```{.bash}\n$ RUST_LOG=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\n```{.bash}\n$ RUST_LOG=debug ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nYou can also set the log level on a per module basis:\n\n```{.bash}\n$ RUST_LOG=main=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nAnd enable all logging:\n\n```{.bash}\n$ RUST_LOG=main ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nIf the binary name contains hyphens, you will need to replace\nthem with underscores:\n\n```{.bash}\n$ RUST_LOG=my_app ./my-app\n[2017-11-09T02:12:24Z DEBUG my_app] this is a debug message\n[2017-11-09T02:12:24Z ERROR my_app] this is printed by default\n[2017-11-09T02:12:24Z INFO my_app] the answer was: 12\n```\n\nThis is because Rust modules and crates cannot contain hyphens\nin their name, although `cargo` continues to accept them.\n\nSee the documentation for the [`log` crate][log-crate-url] for more\ninformation about its API.\n\n## Enabling logging\n\n**By default all logging is disabled except for the `error` level**\n\nThe **`RUST_LOG`** environment variable controls logging with the syntax:\n```text\nRUST_LOG=[target][=][level][,...]\n```\nOr in other words, its a comma-separated list of directives.\nDirectives can filter by **target**, by **level**, or both (using `=`).\n\nFor example,\n```text\nRUST_LOG=data=debug,hardware=debug\n```\n\n**target** is typically the path of the module the message\nin question originated from, though it can be overridden.\nThe path is rooted in the name of the crate it was compiled for, so if\nyour program is in a file called, for example, `hello.rs`, the path would\nsimply be `hello`.\n\nFurthermore, the log can be filtered using prefix-search based on the\nspecified log target.\n\nFor example, `RUST_LOG=example` would match the following targets:\n- `example`\n- `example::test`\n- `example::test::module::submodule`\n- `examples::and_more_examples`\n\nWhen providing the crate name or a module path, explicitly specifying the\nlog level is optional. If omitted, all logging for the item will be\nenabled.\n\n**level** is the maximum [`log::Level`][level-enum] to be shown and includes:\n- `error`\n- `warn`\n- `info`\n- `debug`\n- `trace`\n- `off` (pseudo level to disable all logging for the target)\n\nLogging level names are case-insensitive; e.g.,\n`debug`, `DEBUG`, and `dEbuG` all represent the same logging level. For\nconsistency, our convention is to use the lower case names. Where our docs\ndo use other forms, they do so in the context of specific examples, so you\nwon't be surprised if you see similar usage in the wild.\n\nSome examples of valid values of `RUST_LOG` are:\n\n- `RUST_LOG=hello` turns on all logging for the `hello` module\n- `RUST_LOG=trace` turns on all logging for the application, regardless of its name\n- `RUST_LOG=TRACE` turns on all logging for the application, regardless of its name (same as previous)\n- `RUST_LOG=info` turns on all info logging\n- `RUST_LOG=INFO` turns on all info logging (same as previous)\n- `RUST_LOG=hello=debug` turns on debug logging for `hello`\n- `RUST_LOG=hello=DEBUG` turns on debug logging for `hello` (same as previous)\n- `RUST_LOG=hello,std::option` turns on `hello`, and std's option logging\n- `RUST_LOG=error,hello=warn` turn on global error logging and also warn for `hello`\n- `RUST_LOG=error,hello=off`  turn on global error logging, but turn off logging for `hello`\n- `RUST_LOG=off` turns off all logging for the application\n- `RUST_LOG=OFF` turns off all logging for the application (same as previous)\n\n## Filtering results\n\nA `RUST_LOG` directive may include a regex filter. The syntax is to append `/`\nfollowed by a regex. Each message is checked against the regex, and is only\nlogged if it matches. Note that the matching is done after formatting the\nlog string but before adding any logging meta-data. There is a single filter\nfor all modules.\n\nSome examples:\n\n* `hello/foo` turns on all logging for the 'hello' module where the log\n  message includes 'foo'.\n* `info/f.o` turns on all info logging where the log message includes 'foo',\n  'f1o', 'fao', etc.\n* `hello=debug/foo*foo` turns on debug logging for 'hello' where the log\n  message includes 'foofoo' or 'fofoo' or 'fooooooofoo', etc.\n* `error,hello=warn/[0-9]scopes` turn on global error logging and also\n  warn for hello. In both cases the log message must include a single digit\n  number followed by 'scopes'.\n\n## Capturing logs in tests\n\nRecords logged during `cargo test` will not be captured by the test harness by default.\nThe [`Builder::is_test`] method can be used in unit tests to ensure logs will be captured:\n\n```\n#[cfg(test)]\nmod tests {\n    use log::info;\n\n    fn init() {\n        let _ = env_logger::builder().is_test(true).try_init();\n    }\n\n    #[test]\n    fn it_works() {\n        init();\n\n        info!(\"This record will be captured by `cargo test`\");\n\n        assert_eq!(2, 1 + 1);\n    }\n}\n```\n\nEnabling test capturing comes at the expense of color and other style support\nand may have performance implications.\n\n## Disabling colors\n\nColors and other styles can be configured with the `RUST_LOG_STYLE`\nenvironment variable. It accepts the following values:\n\n* `auto` (default) will attempt to print style characters, but don't force the issue.\nIf the console isn't available on Windows, or if TERM=dumb, for example, then don't print colors.\n* `always` will always print style characters even if they aren't supported by the terminal.\nThis includes emitting ANSI colors on Windows if the console API is unavailable.\n* `never` will never print style characters.\n\n## Tweaking the default format\n\nParts of the default format can be excluded from the log output using the [`Builder`].\nThe following example excludes the timestamp from the log output:\n\n```\nenv_logger::builder()\n    .format_timestamp(None)\n    .init();\n```\n\n### Stability of the default format\n\nThe default format won't optimise for long-term stability, and explicitly makes no\nguarantees about the stability of its output across major, minor or patch version\nbumps during `0.x`.\n\nIf you want to capture or interpret the output of `env_logger` programmatically\nthen you should use a custom format.\n\n### Using a custom format\n\nCustom formats can be provided as closures to the [`Builder`].\nThese closures take a [`Formatter`][crate::fmt::Formatter] and `log::Record` as arguments:\n\n```\nuse std::io::Write;\n\nenv_logger::builder()\n    .format(|buf, record| {\n        writeln!(buf, \"{}: {}\", record.level(), record.args())\n    })\n    .init();\n```\n\nSee the [`fmt`] module for more details about custom formats.\n\n## Specifying defaults for environment variables\n\n`env_logger` can read configuration from environment variables.\nIf these variables aren't present, the default value to use can be tweaked with the [`Env`] type.\nThe following example defaults to log `warn` and above if the `RUST_LOG` environment variable\nisn't set:\n\n```\nuse env_logger::Env;\n\nenv_logger::Builder::from_env(Env::default().default_filter_or(\"warn\")).init();\n```\n\n[gh-repo-examples]: https://github.com/rust-cli/env_logger/tree/main/examples\n[level-enum]: https://docs.rs/log/latest/log/enum.Level.html\n[log-crate-url]: https://docs.rs/log\n[`Builder`]: struct.Builder.html\n[`Builder::is_test`]: struct.Builder.html#method.is_test\n[`Env`]: struct.Env.html\n[`fmt`]: fmt/index.html","links":{"crate::fmt::Formatter":"0:247:141"},"attrs":["#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/static/images/favicon.ico\")]","#![deny(missing_debug_implementations, missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:128:726","0:320-0:355:256","0:321-0:399:1960","0:322-0:365:1961","0:323-0:3:1959"],"is_stripped":false}}},"0:386:2559":{"id":"0:386:2559","crate_id":0,"name":"Auto","span":{"filename":"src/fmt/writer/mod.rs","begin":[16,4],"end":[16,8]},"visibility":"default","docs":"Try to print styles, but don't force the issue.","links":{},"attrs":["#[default]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:32846:244-0:399:1960":{"id":"a:2:32846:244-0:399:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:38:2196":{"id":"0:38:2196","crate_id":0,"name":"format_module_path","span":{"filename":"src/logger.rs","begin":[266,4],"end":[269,5]},"visibility":"public","docs":"Whether or not to write the module path in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12855:340":{"id":"2:12855:340","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12856:28021","`u8`":"1:12123:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:247:141":{"id":"b:2:2754-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12918:28059":{"id":"2:12918:28059","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:726":{"id":"0:212:726","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/writer/target.rs","begin":[15,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9962:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9943:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5544:35228":{"id":"5:5544:35228","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371:462":{"id":"0:371:462","crate_id":0,"name":"clone","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[128,0],"end":[147,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:256:2434"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12863:28020":{"id":"2:12863:28020","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:156:2410":{"id":"b:2:2748-0:156:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12943:34534":{"id":"2:12943:34534","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12969:2790":{"id":"2:12969:2790","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2213":{"id":"0:44:2213","crate_id":0,"name":"format_timestamp_micros","span":{"filename":"src/logger.rs","begin":[301,4],"end":[303,5]},"visibility":"public","docs":"Configures the timestamp to use microsecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:2110":{"id":"0:49:2110","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[371,4],"end":[374,5]},"visibility":"public","docs":"Adds filters to the logger.\n\nThe given module (if any) will log at most the specified level provided.\nIf no module is provided then the filter will apply to all log messages.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter(Some(\"path::to::module\"), LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["module",{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:219:2082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2747:2154":{"id":"2:2747:2154","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2721:142"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32846:244-0:156:2410":{"id":"a:2:32846:244-0:156:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:51:1573":{"id":"0:51:1573","crate_id":0,"name":"target","span":{"filename":"src/logger.rs","begin":[403,4],"end":[406,5]},"visibility":"public","docs":"Sets the target for the log output.\n\nEnv logger can log to either stdout, stderr or a custom pipe. The default is stderr.\n\nThe custom pipe can be used to send the log messages to a custom sink (for example a file).\nDo note that direct writes to a file can become a bottleneck due to IO operation times.\n\n# Examples\n\nWrite log message to `stdout`:\n\n```\nuse env_logger::{Builder, Target};\n\nlet mut builder = Builder::new();\n\nbuilder.target(Target::Stdout);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"resolved_path":{"name":"fmt::Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240-0:355:256":{"id":"0:240-0:355:256","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[51,0],"end":[51,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::writer::Target","name":"Target","id":"0:355:256","glob":false}}},"2:12865:34522":{"id":"2:12865:34522","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12112:1548","str::slice_mut_unchecked":"2:12866:34523","crate::ops::Index":"2:40008:10069"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[159,0],"end":[167,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:261:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:238-23:0:1964":{"id":"0:238-23:0:1964","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[47,0],"end":[47,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"import":{"source":"anstyle","name":"style","id":"23:0:1964","glob":false}}},"0:41:2204":{"id":"0:41:2204","crate_id":0,"name":"format_timestamp","span":{"filename":"src/logger.rs","begin":[285,4],"end":[288,5]},"visibility":"public","docs":"Configures if timestamp should be included and in what precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["timestamp",{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"fmt::TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[693,9],"end":[693,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:342:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:687-0:399:1960":{"id":"b:5:687-0:399:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2751","5:690:2346","5:691:3399"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2441-0:324:2109":{"id":"b:2:2441-0:324:2109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2079"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2444-0:365:1961":{"id":"b:2:2444-0:365:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:2431"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,16],"end":[12,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2961:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72:2311":{"id":"0:72:2311","crate_id":0,"name":"enabled","span":{"filename":"src/logger.rs","begin":[605,4],"end":[607,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:296:2084","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:60:2277":{"id":"b:2:2748-0:60:2277","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:69:2110":{"id":"0:69:2110","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[594,4],"end":[596,5]},"visibility":"public","docs":"Returns the maximum `LevelFilter` that this env logger instance is\nconfigured to output.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LevelFilter","id":"20:219:2082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42554:2902-0:156:2410":{"id":"a:2:42554:2902-0:156:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42554:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2441-0:156:2410":{"id":"b:2:2441-0:156:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2079"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:154:2488":{"id":"0:154:2488","crate_id":0,"name":"timestamp_micros","span":{"filename":"src/fmt/humantime.rs","begin":[57,4],"end":[62,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmicrosecond precision.","links":{"`Timestamp`":"0:156:2410"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:358:2585":{"id":"0:358:2585","crate_id":0,"name":"Pipe","span":{"filename":"src/fmt/writer/target.rs","begin":[11,4],"end":[11,50]},"visibility":"default","docs":"Logs will be sent to a custom pipe.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:360:1765"]},"discriminant":null}}},"b:2:2441-0:247:141":{"id":"b:2:2441-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2079"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:59:726":{"id":"0:59:726","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[500,4],"end":[509,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9962:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9943:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32846:244-0:247:141":{"id":"a:2:32846:244-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:342:726":{"id":"0:342:726","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[693,9],"end":[693,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9962:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9943:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[149,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","by_ref","write_vectored","write_all_vectored","write_all","write_fmt"],"trait":{"name":"Write","id":"1:3548:2448","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:258:2194","0:259:2321"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42554:2902-0:247:141":{"id":"a:2:42554:2902-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42554:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:32928:2963-0:324:2109":{"id":"a:2:32928:2963-0:324:2109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32928:2963","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12848:34519":{"id":"2:12848:34519","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12877:3699":{"id":"2:12877:3699","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44579:2854","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2137":{"id":"0:26:2137","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[104,4],"end":[111,5]},"visibility":"public","docs":"Initializes the log builder from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nInitialise a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::from_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:321-0:399:1960":{"id":"0:321-0:399:1960","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[282,28],"end":[282,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::TimestampPrecision","name":"TimestampPrecision","id":"0:399:1960","glob":false}}},"2:12878:34524":{"id":"2:12878:34524","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44589:7055","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12903:28053":{"id":"2:12903:28053","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12541:4691","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::split":"2:12897:2498"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44343:6923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12962:34539":{"id":"2:12962:34539","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:4691"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:60:2277":{"id":"b:2:2754-0:60:2277","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32846:244-0:365:1961":{"id":"a:2:32846:244-0:365:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12868:28045":{"id":"2:12868:28045","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12867:28044","str::split_at_mut_checked":"2:12870:28049"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12936:34530":{"id":"2:12936:34530","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:371:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12973:29209":{"id":"2:12973:29209","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:37813"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32928:2963-0:156:2410":{"id":"a:2:32928:2963-0:156:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32928:2963","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12859:28018":{"id":"2:12859:28018","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42427:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:690:2346":{"id":"5:690:2346","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:34529":{"id":"2:12933:34529","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12541:4691","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::match_indices":"2:12930:34528"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44493:7053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:34536":{"id":"2:12947:34536","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:4691"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42554:2902-0:60:2277":{"id":"a:2:42554:2902-0:60:2277","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42554:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:42554:2902-0:336:2140":{"id":"a:2:42554:2902-0:336:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42554:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2444-0:156:2410":{"id":"b:2:2444-0:156:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:2431"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5555:27824":{"id":"5:5555:27824","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12970:27826"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:410:462":{"id":"0:410:462","crate_id":0,"name":"clone","span":{"filename":"src/fmt/mod.rs","begin":[61,15],"end":[61,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324:2109":{"id":"0:324:2109","crate_id":0,"name":"Builder","span":{"filename":"src/logger.rs","begin":[38,0],"end":[43,1]},"visibility":"public","docs":"`Builder` acts as builder for initializing a `Logger`.\n\nIt can be used to customize the log format, change the environment variable used\nto provide the logging directives and also set the default log level filter.\n\n# Examples\n\n```\n# use std::io::Write;\nuse env_logger::Builder;\nuse log::{LevelFilter, error, info};\n\nlet mut builder = Builder::from_default_env();\n\nbuilder\n    .format(|buf, record| writeln!(buf, \"{} - {}\", record.level(), record.args()))\n    .filter(None, LevelFilter::Info)\n    .init();\n\nerror!(\"error message\");\ninfo!(\"info message\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:24","a:2:32928:2963-0:324:2109","a:2:42553:2903-0:324:2109","a:2:2966:254-0:324:2109","a:2:42554:2902-0:324:2109","a:2:32846:244-0:324:2109","b:2:2444-0:324:2109","b:2:2748-0:324:2109","b:2:2754-0:324:2109","b:2:3560-0:324:2109","b:2:2759-0:324:2109","b:2:2441-0:324:2109","b:2:2744-0:324:2109","0:329","0:58"]}}},"b:2:2444-0:399:1960":{"id":"b:2:2444-0:399:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:2431"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3560-0:365:1961":{"id":"b:2:3560-0:365:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2763:1629":{"id":"2:2763:1629","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336:2140":{"id":"0:336:2140","crate_id":0,"name":"Env","span":{"filename":"src/logger.rs","begin":[694,0],"end":[697,1]},"visibility":"public","docs":"Set of environment variables to configure from.\n\n# Default environment variables\n\nBy default, the `Env` will read the following environment variables:\n\n- `RUST_LOG`: the level filter\n- `RUST_LOG_STYLE`: whether or not to print styles with records.\n\nThese sources can be configured using the builder methods on `Env`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:80","a:2:32928:2963-0:336:2140","a:2:42553:2903-0:336:2140","a:2:2966:254-0:336:2140","a:2:42554:2902-0:336:2140","a:2:32846:244-0:336:2140","b:2:2444-0:336:2140","b:2:2748-0:336:2140","b:2:2754-0:336:2140","b:2:3560-0:336:2140","b:2:2759-0:336:2140","b:2:2441-0:336:2140","b:2:2744-0:336:2140","0:103","0:340","0:99"]}}},"b:2:2444-0:247:141":{"id":"b:2:2444-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:2431"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:32:2165":{"id":"0:32:2165","crate_id":0,"name":"from_default_env","span":{"filename":"src/logger.rs","begin":[184,4],"end":[186,5]},"visibility":"public","docs":"Initializes the log builder from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger using the default environment variables:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12974:29210":{"id":"2:12974:29210","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:37813"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,22],"end":[12,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12846:3341":{"id":"2:12846:3341","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:60":{"id":"0:105:60","crate_id":0,"name":"default","span":{"filename":"src/logger.rs","begin":[794,4],"end":[799,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12880:28061":{"id":"2:12880:28061","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:4691"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:726":{"id":"0:160:726","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/humantime.rs","begin":[87,4],"end":[100,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9962:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9943:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42554:2902-0:399:1960":{"id":"a:2:42554:2902-0:399:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42554:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12861:28019":{"id":"2:12861:28019","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:322-0:365:1961":{"id":"0:322-0:365:1961","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[282,48],"end":[282,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::WriteStyle","name":"WriteStyle","id":"0:365:1961","glob":false}}},"b:2:2759-0:336:2140":{"id":"b:2:2759-0:336:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2762:135","2:2763:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:411":{"id":"0:411","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[61,22],"end":[61,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:412:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2744-0:247:141":{"id":"b:2:2744-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2154"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5556:27825":{"id":"5:5556:27825","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12971:27827"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2264":{"id":"0:57:2264","crate_id":0,"name":"build","span":{"filename":"src/logger.rs","begin":[487,4],"end":[496,5]},"visibility":"public","docs":"Build an env logger.\n\nThe returned logger implements the `Log` trait and can be installed manually\nor nested within another logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2137":{"id":"0:65:2137","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[564,4],"end":[569,5]},"visibility":"public","docs":"Creates the logger from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nCreate a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_env(\"MY_LOG\");\n```\n\nCreate a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Logger, Env};\n\nlet env = Env::new().filter_or(\"MY_LOG\", \"info\").write_style_or(\"MY_LOG_STYLE\", \"always\");\n\nlet logger = Logger::from_env(env);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3560-0:60:2277":{"id":"b:2:3560-0:60:2277","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:261:726":{"id":"0:261:726","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[160,4],"end":[166,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9962:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9943:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:60":{"id":"0:246:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/mod.rs","begin":[75,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:34531":{"id":"2:12938:34531","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12968:29205":{"id":"2:12968:29205","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40377:28000","Self::is_ascii":"2:12967:27822"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40377:28000","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12972:29208":{"id":"2:12972:29208","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:37813"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42553:2903-0:365:1961":{"id":"a:2:42553:2903-0:365:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42553:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:47:2224":{"id":"0:47:2224","crate_id":0,"name":"filter_module","span":{"filename":"src/logger.rs","begin":[330,4],"end":[333,5]},"visibility":"public","docs":"Adds a directive to the filter for a specific module.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_module(\"path::to::module\", LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["module",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:219:2082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1048":{"id":"0:25:1048","crate_id":0,"name":"new","span":{"filename":"src/logger.rs","begin":[72,4],"end":[74,5]},"visibility":"public","docs":"Initializes the log builder with defaults.\n\n**NOTE:** This method won't read from any environment variables.\nUse the [`filter`] and [`write_style`] methods to configure the builder\nor use [`from_env`] or [`from_default_env`] instead.\n\n# Examples\n\nCreate a new builder and configure filters and style:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder\n    .filter(None, LevelFilter::Info)\n    .write_style(WriteStyle::Always)\n    .init();\n```\n\n[`filter`]: #method.filter\n[`write_style`]: #method.write_style\n[`from_env`]: #method.from_env\n[`from_default_env`]: #method.from_default_env","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32848:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[86,0],"end":[101,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12944:34535":{"id":"2:12944:34535","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:4691"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12566:15388","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12869:28048":{"id":"2:12869:28048","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12870:28049"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:35230":{"id":"5:5553:35230","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2188","`String`":"5:7544:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2188","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:324:2109":{"id":"b:2:2754-0:324:2109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:223:753":{"id":"0:223:753","crate_id":0,"name":"from","span":{"filename":"src/fmt/writer/mod.rs","begin":[37,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["choice",{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12845:883":{"id":"2:12845:883","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12106:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:365:1961":{"id":"b:2:2441-0:365:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2079"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32928:2963-0:60:2277":{"id":"a:2:32928:2963-0:60:2277","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32928:2963","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32846:244-0:336:2140":{"id":"a:2:32846:244-0:336:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:399:1960":{"id":"0:399:1960","crate_id":0,"name":"TimestampPrecision","span":{"filename":"src/fmt/mod.rs","begin":[62,0],"end":[71,1]},"visibility":"public","docs":"Formatting precision of timestamps.\n\nSeconds give precision of full seconds, milliseconds give thousands of a\nsecond (3 decimal digits), microseconds are millionth of a second (6 decimal\ndigits) and nanoseconds are billionth of a second (9 decimal digits).","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:400:2208","0:402:2211","0:404:2214","0:406:2217"],"impls":["a:2:32928:2963-0:399:1960","a:2:42553:2903-0:399:1960","a:2:2966:254-0:399:1960","a:2:42554:2902-0:399:1960","a:2:32846:244-0:399:1960","b:2:2444-0:399:1960","b:2:2748-0:399:1960","b:2:2754-0:399:1960","b:2:3560-0:399:1960","b:2:2759-0:399:1960","b:2:2441-0:399:1960","b:2:2744-0:399:1960","b:5:687-0:399:1960","0:409","0:411","0:408","0:245"]}}},"2:12965:2238":{"id":"2:12965:2238","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12502:134","`FromStr`":"2:12501:2804"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12501:2804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12501:2804","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:258:2194":{"id":"0:258:2194","crate_id":0,"name":"write","span":{"filename":"src/fmt/mod.rs","begin":[150,4],"end":[152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:362:60":{"id":"0:362:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/writer/target.rs","begin":[3,9],"end":[3,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[24,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ColorChoice","id":"32:21:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:221:753"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42553:2903-0:399:1960":{"id":"a:2:42553:2903-0:399:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42553:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12975:34540":{"id":"2:12975:34540","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4739:34540"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44624:6988","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2758:1631":{"id":"2:2758:1631","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:355:256":{"id":"b:2:2748-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2750:753":{"id":"2:2750:753","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[61,9],"end":[61,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2961:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2744-0:355:256":{"id":"b:2:2744-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2154"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:23:2094":{"id":"0:23:2094","crate_id":0,"name":"DEFAULT_WRITE_STYLE_ENV","span":{"filename":"src/logger.rs","begin":[13,0],"end":[13,59]},"visibility":"public","docs":"The default name for the environment variable to read style preferences from.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"expr":"\"RUST_LOG_STYLE\"","value":null,"is_literal":true}}},"0:128:726":{"id":"0:128:726","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[1,0],"end":[714,1]},"visibility":"public","docs":"Formatting for log records.\n\nThis module contains a [`Formatter`] that can be used to format log records\ninto without needing temporary allocations. Usually you won't need to worry\nabout the contents of this module and can use the `Formatter` like an ordinary\n[`Write`].\n\n# Formatting log records\n\nThe format used to print log records can be customised using the [`Builder::format`]\nmethod.\nCustom formats can apply different color and weight to printed values using\n[`Style`] builders.\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    writeln!(buf, \"{}: {}\",\n        record.level(),\n        record.args())\n});\n```\n\n[`Formatter`]: struct.Formatter.html\n[`Style`]: struct.Style.html\n[`Builder::format`]: ../struct.Builder.html#method.format\n[`Write`]: https://doc.rust-lang.org/stable/std/io/trait.Write.html","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:238-23:0:1964","0:239-0:156:2410","0:240-0:355:256","0:241-0:365:1961","0:399:1960","0:247:141"],"is_stripped":false}}},"0:40:2201":{"id":"0:40:2201","crate_id":0,"name":"format_indent","span":{"filename":"src/logger.rs","begin":[279,4],"end":[282,5]},"visibility":"public","docs":"Configures the amount of spaces to use to indent multiline log records.\nA value of `None` disables any kind of indentation.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["indent",{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:324:2109":{"id":"b:2:2748-0:324:2109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12909:34526":{"id":"2:12909:34526","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12541:4691","str::split":"2:12897:2498","prim@char":"1:12106:458","str::split_terminator":"2:12906:34525"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44393:7051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:2453":{"id":"5:5538:2453","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3:1959":{"id":"0:3:1959","crate_id":0,"name":"logger","span":{"filename":"src/logger.rs","begin":[1,0],"end":[1017,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:2091","0:23:2094","0:324:2109","0:60:2277","0:336:2140","0:116:2263","0:117:2272","0:118:2350","0:121:2365","0:124:2141","0:125:2137"],"is_stripped":true}}},"0:256:2434":{"id":"0:256:2434","crate_id":0,"name":"default_level_style","span":{"filename":"src/fmt/mod.rs","begin":[132,4],"end":[146,5]},"visibility":"public","docs":"Get the default [`style::Style`] for the given level.\n\nThe style can be used to print other values besides the level.","links":{"`style::Style`":"23:397:2435"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"Level","id":"20:198:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"style::Style","id":"23:397:2435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:254-0:324:2109":{"id":"a:2:2966:254-0:324:2109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:2966:254-0:355:256":{"id":"a:2:2966:254-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:400:2208":{"id":"0:400:2208","crate_id":0,"name":"Seconds","span":{"filename":"src/fmt/mod.rs","begin":[64,4],"end":[64,11]},"visibility":"default","docs":"Full second precision (0 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:330:60":{"id":"0:330:60","crate_id":0,"name":"default","span":{"filename":"src/logger.rs","begin":[37,9],"end":[37,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:355:256":{"id":"b:2:2754-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42554:2902-0:324:2109":{"id":"a:2:42554:2902-0:324:2109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42554:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:320-0:355:256":{"id":"0:320-0:355:256","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[282,20],"end":[282,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::Target","name":"Target","id":"0:355:256","glob":false}}},"2:12867:28044":{"id":"2:12867:28044","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:12869:28048","str::split_at_mut":"2:12868:28045"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3560-0:399:1960":{"id":"b:2:3560-0:399:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12967:27822":{"id":"2:12967:27822","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:27826":{"id":"2:12970:27826","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42553:2903-0:355:256":{"id":"a:2:42553:2903-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42553:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2748-0:336:2140":{"id":"b:2:2748-0:336:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2750:753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2443:2079":{"id":"2:2443:2079","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:247:141":{"id":"0:247:141","crate_id":0,"name":"Formatter","span":{"filename":"src/fmt/mod.rs","begin":[101,0],"end":[104,1]},"visibility":"public","docs":"A formatter to write logs into.\n\n`Formatter` implements the standard [`Write`] trait for writing log records.\nIt also supports terminal colors, through the [`style`] method.\n\n# Examples\n\nUse the [`writeln`] macro to format a log record.\nAn instance of a `Formatter` is passed to an `env_logger` format as `buf`:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}: {}\", record.level(), record.args()));\n```\n\n[`Write`]: https://doc.rust-lang.org/stable/std/io/trait.Write.html\n[`writeln`]: https://doc.rust-lang.org/stable/std/macro.writeln.html\n[`style`]: #method.style","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:150","0:255","a:2:32928:2963-0:247:141","a:2:42553:2903-0:247:141","a:2:2966:254-0:247:141","a:2:42554:2902-0:247:141","a:2:32846:244-0:247:141","b:2:2444-0:247:141","b:2:2748-0:247:141","b:2:2754-0:247:141","b:2:3560-0:247:141","b:2:2759-0:247:141","b:2:2441-0:247:141","b:2:2744-0:247:141","0:257","0:260"]}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[537,0],"end":[602,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:2137","0:68:2165","0:69:2110","0:70:2309"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:79:726":{"id":"0:79:726","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[676,4],"end":[680,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9962:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9943:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:2333":{"id":"0:85:2333","crate_id":0,"name":"filter_or","span":{"filename":"src/logger.rs","begin":[718,4],"end":[726,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["filter_env",{"generic":"E"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2216":{"id":"0:45:2216","crate_id":0,"name":"format_timestamp_nanos","span":{"filename":"src/logger.rs","begin":[306,4],"end":[308,5]},"visibility":"public","docs":"Configures the timestamp to use nanosecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2229":{"id":"0:48:2229","crate_id":0,"name":"filter_level","span":{"filename":"src/logger.rs","begin":[349,4],"end":[352,5]},"visibility":"public","docs":"Adds a directive to the filter for all modules.\n\n# Examples\n\nOnly include messages for info and above for logs globally:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:219:2082","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42553:2903-0:324:2109":{"id":"a:2:42553:2903-0:324:2109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42553:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:55:2263":{"id":"0:55:2263","crate_id":0,"name":"try_init","span":{"filename":"src/logger.rs","begin":[456,4],"end":[467,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"SetLoggerError","id":"20:352:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:365:1961":{"id":"0:365:1961","crate_id":0,"name":"WriteStyle","span":{"filename":"src/fmt/writer/mod.rs","begin":[13,0],"end":[21,1]},"visibility":"public","docs":"Whether or not to print styles to the target.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:386:2559","0:366:2561","0:368:2436"],"impls":["a:2:32928:2963-0:365:1961","a:2:42553:2903-0:365:1961","a:2:2966:254-0:365:1961","a:2:42554:2902-0:365:1961","a:2:32846:244-0:365:1961","b:2:2444-0:365:1961","b:2:2748-0:365:1961","b:2:2754-0:365:1961","b:2:3560-0:365:1961","b:2:2759-0:365:1961","b:2:2441-0:365:1961","b:2:2744-0:365:1961","b:5:687-0:365:1961","0:222","0:370","0:375","0:220","0:372","0:381","0:378","0:382","0:384","0:373","0:376"]}}},"b:2:2441-0:355:256":{"id":"b:2:2441-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2079"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/target.rs","begin":[3,9],"end":[3,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:362:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:402:2211":{"id":"0:402:2211","crate_id":0,"name":"Millis","span":{"filename":"src/fmt/mod.rs","begin":[66,4],"end":[66,10]},"visibility":"default","docs":"Millisecond precision (3 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:2446:2431":{"id":"2:2446:2431","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,29],"end":[12,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:32873:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:374:726":{"id":"0:374:726","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,22],"end":[12,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9962:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9943:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2158":{"id":"0:53:2158","crate_id":0,"name":"parse_write_style","span":{"filename":"src/logger.rs","begin":[433,4],"end":[436,5]},"visibility":"public","docs":"Parses whether or not to write styles in the same form as the `RUST_LOG_STYLE`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write_style",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2489":{"id":"0:155:2489","crate_id":0,"name":"timestamp_nanos","span":{"filename":"src/fmt/humantime.rs","begin":[66,4],"end":[71,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nnanosecond precision.","links":{"`Timestamp`":"0:156:2410"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12942:34533":{"id":"2:12942:34533","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2350":{"id":"0:118:2350","crate_id":0,"name":"try_init_from_env","span":{"filename":"src/logger.rs","begin":[891,0],"end":[898,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger from the given\nenvironment variables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\n# fn run() -> Result<(), Box<dyn ::std::error::Error>> {\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::try_init_from_env(env)?;\n\nOk(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"log::SetLoggerError","id":"20:352:2086","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42553:2903-0:60:2277":{"id":"a:2:42553:2903-0:60:2277","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42553:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12940:34532":{"id":"2:12940:34532","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32846:244-0:60:2277":{"id":"a:2:32846:244-0:60:2277","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:259:2321":{"id":"0:259:2321","crate_id":0,"name":"flush","span":{"filename":"src/fmt/mod.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32928:2963-0:336:2140":{"id":"a:2:32928:2963-0:336:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32928:2963","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12950:26938":{"id":"2:12950:26938","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:4691"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:385:60":{"id":"0:385:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,50],"end":[12,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12844":{"id":"2:12844","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12845:883","2:12846:3341","2:12847:34518","2:12848:34519","2:12850:34520","2:12853:2508","2:12854:34521","2:12855:340","2:12856:28021","2:12857:2338","2:12859:28018","2:12861:28019","2:12863:28020","2:12865:34522","2:12866:34523","2:12867:28044","2:12868:28045","2:12869:28048","2:12870:28049","2:12872:6939","2:12873:7066","2:12874:3707","2:12875:32665","2:12876:32697","2:12877:3699","2:12878:34524","2:12879:32715","2:12880:28061","2:12883:28062","2:12886:28063","2:12889:3379","2:12893:3340","2:12897:2498","2:12900:28051","2:12903:28053","2:12906:34525","2:12909:34526","2:12912:28055","2:12915:28057","2:12918:28059","2:12921:28060","2:12924:2309","2:12927:34527","2:12930:34528","2:12933:34529","2:12936:34530","2:12938:34531","2:12940:34532","2:12942:34533","2:12943:34534","2:12944:34535","2:12947:34536","2:12950:26938","2:12953:28064","2:12956:34537","2:12959:34538","2:12962:34539","2:12965:2238","2:12967:27822","2:12968:29205","2:12969:2790","2:12970:27826","2:12971:27827","2:12972:29208","2:12973:29209","2:12974:29210","2:12975:34540","2:12977:10038","2:12978:26576"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2744-0:324:2109":{"id":"b:2:2744-0:324:2109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2154"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2444-0:60:2277":{"id":"b:2:2444-0:60:2277","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:2431"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:239-0:156:2410":{"id":"0:239-0:156:2410","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[50,0],"end":[50,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"humantime\")]"],"deprecation":null,"inner":{"import":{"source":"self::humantime::Timestamp","name":"Timestamp","id":"0:156:2410","glob":false}}},"2:12872:6939":{"id":"2:12872:6939","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12106:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44295:6932","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42553:2903-0:247:141":{"id":"a:2:42553:2903-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42553:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:169:726":{"id":"0:169:726","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/humantime.rs","begin":[104,4],"end":[113,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9962:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9943:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:28051":{"id":"2:12900:28051","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:4691"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12357:6920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:2091":{"id":"0:22:2091","crate_id":0,"name":"DEFAULT_FILTER_ENV","span":{"filename":"src/logger.rs","begin":[10,0],"end":[10,48]},"visibility":"public","docs":"The default name for the environment variable to read filters from.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"expr":"\"RUST_LOG\"","value":null,"is_literal":true}}},"0:46:2219":{"id":"0:46:2219","crate_id":0,"name":"format_suffix","span":{"filename":"src/logger.rs","begin":[311,4],"end":[314,5]},"visibility":"public","docs":"Configures the end of line suffix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["suffix",{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:7066":{"id":"2:12873:7066","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12106:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44301:7048","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:2207":{"id":"0:42:2207","crate_id":0,"name":"format_timestamp_secs","span":{"filename":"src/logger.rs","begin":[291,4],"end":[293,5]},"visibility":"public","docs":"Configures the timestamp to use second precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:2171":{"id":"0:33:2171","crate_id":0,"name":"parse_default_env","span":{"filename":"src/logger.rs","begin":[210,4],"end":[212,5]},"visibility":"public","docs":"Applies the configuration from the environment using default variable names.\n\nThis method is a convenient way to call `parse_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger with filter level `Off`, then configure it using the\ndefault environment variables:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:2498":{"id":"2:12897:2498","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12541:4691","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::split_whitespace":"2:12875:32665","str::rsplit":"2:12903:28053"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44325:2858","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:406:2217":{"id":"0:406:2217","crate_id":0,"name":"Nanos","span":{"filename":"src/fmt/mod.rs","begin":[70,4],"end":[70,9]},"visibility":"default","docs":"Nanosecond precision (9 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:39:2198":{"id":"0:39:2198","crate_id":0,"name":"format_target","span":{"filename":"src/logger.rs","begin":[272,4],"end":[275,5]},"visibility":"public","docs":"Whether or not to write the target in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:2272":{"id":"0:56:2272","crate_id":0,"name":"init","span":{"filename":"src/logger.rs","begin":[478,4],"end":[481,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[499,0],"end":[510,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:88:2337":{"id":"0:88:2337","crate_id":0,"name":"default_filter_or","span":{"filename":"src/logger.rs","begin":[731,4],"end":[738,5]},"visibility":"public","docs":"Use the default environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:254-0:336:2140":{"id":"a:2:2966:254-0:336:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2748-0:399:1960":{"id":"b:2:2748-0:399:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2757:135":{"id":"2:2757:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:5:5810-0:156:2410":{"id":"b:5:5810-0:156:2410","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9992:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5808:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5812:1606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3562:1644":{"id":"2:3562:1644","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40190:6978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:60:2277":{"id":"b:2:2441-0:60:2277","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2079"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:378":{"id":"0:378","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,33],"end":[12,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10203:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:379:790"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2759-0:399:1960":{"id":"b:2:2759-0:399:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32846:244-0:355:256":{"id":"a:2:32846:244-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12889:3379":{"id":"2:12889:3379","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42427:198","prim@char":"1:12106:458","self::pattern":"2:12541:4691"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:2193":{"id":"0:37:2193","crate_id":0,"name":"format_level","span":{"filename":"src/logger.rs","begin":[260,4],"end":[263,5]},"visibility":"public","docs":"Whether or not to write the level in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:34527":{"id":"2:12927:34527","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12541:4691","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::matches":"2:12924:2309"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44547:7054","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12874:3707":{"id":"2:12874:3707","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44311:2857","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:35226":{"id":"5:5537:35226","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2188","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2188","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[103,0],"end":[114,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9992:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:169:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2441-0:336:2140":{"id":"b:2:2441-0:336:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2443:2079"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2744-0:60:2277":{"id":"b:2:2744-0:60:2277","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2154"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:52:2251":{"id":"0:52:2251","crate_id":0,"name":"write_style","span":{"filename":"src/logger.rs","begin":[424,4],"end":[427,5]},"visibility":"public","docs":"Sets whether or not styles will be written.\n\nThis can be useful in environments that don't support control characters\nfor setting colors.\n\n# Examples\n\nNever attempt to write styles:\n\n```\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder.write_style(WriteStyle::Never);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write_style",{"resolved_path":{"name":"fmt::WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:368:2436":{"id":"0:368:2436","crate_id":0,"name":"Never","span":{"filename":"src/fmt/writer/mod.rs","begin":[20,4],"end":[20,9]},"visibility":"default","docs":"Never print styles.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12847:34518":{"id":"2:12847:34518","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3560-0:355:256":{"id":"b:2:3560-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42553:2903-0:336:2140":{"id":"a:2:42553:2903-0:336:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42553:2903","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:376":{"id":"0:376","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,29],"end":[12,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2509:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73:1966":{"id":"0:73:1966","crate_id":0,"name":"log","span":{"filename":"src/logger.rs","begin":[609,4],"end":[670,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["record",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:277:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3560-0:336:2140":{"id":"b:2:3560-0:336:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3562:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:93:2341":{"id":"0:93:2341","crate_id":0,"name":"write_style_or","span":{"filename":"src/logger.rs","begin":[757,4],"end":[765,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["write_style_env",{"generic":"E"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[699,0],"end":[782,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:82:1048","0:83:2110","0:85:2333","0:88:2337","0:91:2251","0:93:2341","0:96:2343"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2759-0:355:256":{"id":"b:2:2759-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:221:753":{"id":"0:221:753","crate_id":0,"name":"from","span":{"filename":"src/fmt/writer/mod.rs","begin":[25,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["choice",{"resolved_path":{"name":"anstream::ColorChoice","id":"32:21:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:384":{"id":"0:384","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,50],"end":[12,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:385:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:323-0:3:1959":{"id":"0:323-0:3:1959","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[283,0],"end":[283,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::logger","name":"logger","id":"0:3:1959","glob":true}}},"0:152:2486":{"id":"0:152:2486","crate_id":0,"name":"timestamp_seconds","span":{"filename":"src/fmt/humantime.rs","begin":[39,4],"end":[44,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with full\nsecond precision.","links":{"`Timestamp`":"0:156:2410"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:28049":{"id":"2:12870:28049","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12869:28048"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12879:32715":{"id":"2:12879:32715","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44617:6938","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:28057":{"id":"2:12915:28057","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12106:458","str::splitn":"2:12912:28055","self::pattern":"2:12541:4691"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44447:6925","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:365:1961":{"id":"b:2:2759-0:365:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:68:2165":{"id":"0:68:2165","crate_id":0,"name":"from_default_env","span":{"filename":"src/logger.rs","begin":[588,4],"end":[590,5]},"visibility":"public","docs":"Creates the logger from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The logger will use the\n[default environment variables].\n\n# Examples\n\nCreates a logger using the default environment variables:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_default_env();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:2410":{"id":"0:156:2410","crate_id":0,"name":"Timestamp","span":{"filename":"src/fmt/humantime.rs","begin":[81,0],"end":[84,1]},"visibility":"public","docs":"An [RFC3339] formatted timestamp.\n\nThe timestamp implements [`Display`] and can be written to a [`Formatter`].\n\n[RFC3339]: https://www.ietf.org/rfc/rfc3339.txt\n[`Display`]: https://doc.rust-lang.org/stable/std/fmt/trait.Display.html\n[`Formatter`]: struct.Formatter.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32928:2963-0:156:2410","a:2:42553:2903-0:156:2410","a:2:2966:254-0:156:2410","a:2:42554:2902-0:156:2410","a:2:32846:244-0:156:2410","b:2:2444-0:156:2410","b:2:2748-0:156:2410","b:2:2754-0:156:2410","b:2:3560-0:156:2410","b:2:2759-0:156:2410","b:2:2441-0:156:2410","b:2:2744-0:156:2410","b:5:5810-0:156:2410","0:159","0:168"]}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[37,9],"end":[37,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:330:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77:2321":{"id":"0:77:2321","crate_id":0,"name":"flush","span":{"filename":"src/logger.rs","begin":[672,4],"end":[672,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:336:2140":{"id":"b:2:2744-0:336:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2747:2154"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42554:2902-0:355:256":{"id":"a:2:42554:2902-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42554:2902","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:366:2561":{"id":"0:366:2561","crate_id":0,"name":"Always","span":{"filename":"src/fmt/writer/mod.rs","begin":[18,4],"end":[18,10]},"visibility":"default","docs":"Try very hard to print styles.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:382":{"id":"0:382","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2504:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:383:669"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12853:2508":{"id":"2:12853:2508","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12096:2507"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2343":{"id":"0:96:2343","crate_id":0,"name":"default_write_style_or","span":{"filename":"src/logger.rs","begin":[770,4],"end":[777,5]},"visibility":"public","docs":"Use the default environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:689:2751":{"id":"5:689:2751","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12886:28063":{"id":"2:12886:28063","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:4691"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:15389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12971:27827":{"id":"2:12971:27827","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2277":{"id":"0:60:2277","crate_id":0,"name":"Logger","span":{"filename":"src/logger.rs","begin":[531,0],"end":[535,1]},"visibility":"public","docs":"The env logger.\n\nThis struct implements the `Log` trait from the [`log` crate][log-crate-url],\nwhich allows it to act as a logger.\n\nThe [`init()`], [`try_init()`], [`Builder::init()`] and [`Builder::try_init()`]\nmethods will each construct a `Logger` and immediately initialize it as the\ndefault global logger.\n\nIf you'd instead need access to the constructed `Logger`, you can use\nthe associated [`Builder`] and install it with the\n[`log` crate][log-crate-url] directly.\n\n[log-crate-url]: https://docs.rs/log\n[`init()`]: fn.init.html\n[`try_init()`]: fn.try_init.html\n[`Builder::init()`]: struct.Builder.html#method.init\n[`Builder::try_init()`]: struct.Builder.html#method.try_init\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:64","a:2:32928:2963-0:60:2277","a:2:42553:2903-0:60:2277","a:2:2966:254-0:60:2277","a:2:42554:2902-0:60:2277","a:2:32846:244-0:60:2277","b:2:2444-0:60:2277","b:2:2748-0:60:2277","b:2:2754-0:60:2277","b:2:3560-0:60:2277","b:2:2759-0:60:2277","b:2:2441-0:60:2277","b:2:2744-0:60:2277","0:71","0:78"]}}},"b:2:2744-0:365:1961":{"id":"b:2:2744-0:365:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:2154"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5541:35227":{"id":"5:5541:35227","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222":{"id":"0:222","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[36,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"anstream::ColorChoice","id":"32:21:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:223:753"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5812:1606":{"id":"5:5812:1606","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:219-0:355:256":{"id":"0:219-0:355:256","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[9,0],"end":[9,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"target::Target","name":"Target","id":"0:355:256","glob":false}}},"b:2:2441-0:399:1960":{"id":"b:2:2441-0:399:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2962","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2079"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[45,0],"end":[497,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:324:2109","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:25:1048","0:26:2137","0:29:2142","0:32:2165","0:33:2171","0:34:738","0:36:2191","0:37:2193","0:38:2196","0:39:2198","0:40:2201","0:41:2204","0:42:2207","0:43:2210","0:44:2213","0:45:2216","0:46:2219","0:47:2224","0:48:2229","0:49:2110","0:50:2156","0:51:1573","0:52:2251","0:53:2158","0:54:2256","0:55:2263","0:56:2272","0:57:2264"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:383:669":{"id":"0:383:669","crate_id":0,"name":"eq","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2251":{"id":"0:91:2251","crate_id":0,"name":"write_style","span":{"filename":"src/logger.rs","begin":[745,4],"end":[752,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["write_style_env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:35229":{"id":"5:5552:35229","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:254-0:399:1960":{"id":"a:2:2966:254-0:399:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2754-0:336:2140":{"id":"b:2:2754-0:336:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2757:135","2:2758:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70:2309":{"id":"0:70:2309","crate_id":0,"name":"matches","span":{"filename":"src/logger.rs","begin":[599,4],"end":[601,5]},"visibility":"public","docs":"Checks if this record matches the configured filter.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["record",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:277:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:2309":{"id":"2:12924:2309","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12541:4691","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::rmatches":"2:12927:34527"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44529:4998","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:4589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:355:256":{"id":"0:355:256","crate_id":0,"name":"Target","span":{"filename":"src/fmt/writer/target.rs","begin":[4,0],"end":[12,1]},"visibility":"public","docs":"Log target, either `stdout`, `stderr` or a custom pipe.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:356:2580","0:363:2583","0:358:2585"],"impls":["a:2:32928:2963-0:355:256","a:2:42553:2903-0:355:256","a:2:2966:254-0:355:256","a:2:42554:2902-0:355:256","a:2:32846:244-0:355:256","b:2:2444-0:355:256","b:2:2748-0:355:256","b:2:2754-0:355:256","b:2:3560-0:355:256","b:2:2759-0:355:256","b:2:2441-0:355:256","b:2:2744-0:355:256","0:361","0:211"]}}},"2:12978:26576":{"id":"2:12978:26576","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4737:26576"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44642:6987","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:399:1960":{"id":"b:2:2754-0:399:1960","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32928:2963-0:355:256":{"id":"a:2:32928:2963-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32928:2963","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2754-0:365:1961":{"id":"b:2:2754-0:365:1961","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1961","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"2:2721:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"11:2383:3437":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:15645:6000":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:48657:7194":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:43919:6918":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"25:1780:4965":{"crate_id":25,"path":["regex","input","InputAt"],"kind":"struct"},"27:1201:2871":{"crate_id":27,"path":["aho_corasick","error","ErrorKind"],"kind":"enum"},"2:10880:6920":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:533:3072":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:3738:2870":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"26:1588:4790":{"crate_id":26,"path":["regex_syntax","ast","ClassUnicode"],"kind":"struct"},"5:1439:3438":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:13026:5363":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:10109:2140":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"25:2268:5006":{"crate_id":25,"path":["regex","re_bytes","ReplacerRef"],"kind":"struct"},"2:47417:7145":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"27:1422:2109":{"crate_id":27,"path":["aho_corasick","packed","teddy","compile","Builder"],"kind":"struct"},"17:11945:5277":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"26:1932:3905":{"crate_id":26,"path":["regex_syntax","ast","Flags"],"kind":"struct"},"2:41170:4416":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"27:1281:4590":{"crate_id":27,"path":["aho_corasick","nfa","Compiler"],"kind":"struct"},"17:15125:5848":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13182:5404":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11563:5219":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4364:8729":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:6560:3920":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"25:1814:4876":{"crate_id":25,"path":["regex","input","Char"],"kind":"struct"},"2:48771:7202":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:15671:6009":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"27:971:5028":{"crate_id":27,"path":["aho_corasick","ahocorasick","Imp"],"kind":"enum"},"26:1335:26543":{"crate_id":26,"path":["regex_syntax","ast","Ast"],"kind":"enum"},"20:241:2799":{"crate_id":20,"path":["log","MaybeStaticStr"],"kind":"enum"},"17:14896:5806":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:1063:6643":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:7669:4032":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:3019:2914":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:3460:2833":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"27:1157:4620":{"crate_id":27,"path":["aho_corasick","dfa","PremultipliedByteClass"],"kind":"struct"},"2:1760:737":{"crate_id":2,"path":["core","mem","forget"],"kind":"function"},"1:8974:10214":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"25:1802:4967":{"crate_id":25,"path":["regex","input","ByteInput"],"kind":"struct"},"17:13491:5457":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4745:8884":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:7477:6741":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:15747:6025":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:6837:9377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:9646:33724":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:15903:6073":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:7708:4358":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"11:710:4398":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:599:35775":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"28:753:4559":{"crate_id":28,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"25:1922:36202":{"crate_id":25,"path":["regex","pikevm","FollowEpsilon"],"kind":"enum"},"1:12112:1548":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:2907:6162":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"18:80:26506":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13961:5542":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:12118:807":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:15108:5845":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:10455:4005":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:4705:9351":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:14455:5636":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:11679:31596":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:4473:8802":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:44343:6923":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:903:3966":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:42362:7224":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:33349:6402":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:41156:7000":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:574:8560":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:4212:2833":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"31:89:4088":{"crate_id":31,"path":["utf8parse","Parser"],"kind":"struct"},"28:726:4553":{"crate_id":28,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"25:2197:4893":{"crate_id":25,"path":["regex","re_bytes","Regex"],"kind":"struct"},"29:432:4534":{"crate_id":29,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"28:114:26508":{"crate_id":28,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:6868:9403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:4344:6180":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:6401:4341":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:3566:2844":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:3399:15431":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:261:5030":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:15224:5871":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12872:5347":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:25:666":{"crate_id":2,"path":["core","env"],"kind":"macro"},"17:12850:5046":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:44137:7034":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:7534:6169":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:928:10057":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:4870:8945":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"28:691:4542":{"crate_id":28,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:9813:22379":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:5117:9074":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:6222:9270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:1664:8685":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:363:3087":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:44207:7039":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"28:707:4546":{"crate_id":28,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"25:1732:4964":{"crate_id":25,"path":["regex","expand","CaptureRef"],"kind":"struct"},"5:2183:4400":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:4710:8881":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:11667:4464":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:6532:2956":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:43423:32686":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:21321:32391":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11690:5234":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:31030:3665":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:10374:7334":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"28:648:4543":{"crate_id":28,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:4808:8915":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:12356:5314":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:4884:8950":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"24:85:3329":{"crate_id":24,"path":["env_filter","directive","Directive"],"kind":"struct"},"17:10716:5157":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:4972:10180":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"11:1142:6646":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:5121:6202":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:6120:9246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:10884:3472":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:4893:8953":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:6798:9361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4789:8907":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:45040:9635":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"26:1779:26549":{"crate_id":26,"path":["regex_syntax","ast","AssertionKind"],"kind":"enum"},"2:41058:6995":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:2472:6144":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:40908:15449":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"11:1903:4801":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:12459:4230":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:10957:6922":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:10915:5168":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:14426:5633":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11345:5200":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"24:19:2109":{"crate_id":24,"path":["env_filter","filter","Builder"],"kind":"struct"},"2:42543:3014":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:40882:15448":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:15301:5894":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:42554:2902":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:15980:6087":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:4535:10155":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:3581:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:5941:9154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:43451:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"26:2029:135":{"crate_id":26,"path":["regex_syntax","error","Error"],"kind":"enum"},"28:844:4152":{"crate_id":28,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:1703:8702":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"26:2510:4856":{"crate_id":26,"path":["regex_syntax","hir","HirInfo"],"kind":"struct"},"6:5859:9115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:40807:32728":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"20:219:2082":{"crate_id":20,"path":["log","LevelFilter"],"kind":"enum"},"29:507:36929":{"crate_id":29,"path":["anstream","auto","StreamInner"],"kind":"enum"},"17:11617:5223":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:12115:5291":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:8277:2857":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"26:2560:135":{"crate_id":26,"path":["regex_syntax","unicode","Error"],"kind":"enum"},"2:45241:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:2881:6161":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:3888:6177":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:26433:273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"5:4366:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:15384:5916":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:4977:9001":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:3798:7221":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:2032:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:45262:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:48666:7195":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:15725:6019":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:4573:2767":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:12953:5354":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:4947:8980":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:4703:9349":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:14887:5805":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:2722:6154":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:6963:4027":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"15:327:4364":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:4824:8923":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:15235:5875":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:41280:7005":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"14:0:2624":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:42196:6911":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"26:1467:26557":{"crate_id":26,"path":["regex_syntax","ast","HexLiteralKind"],"kind":"enum"},"16:6318:6286":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:8361:15499":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"25:2047:4994":{"crate_id":25,"path":["regex","prog","InstRanges"],"kind":"struct"},"5:1424:3437":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"11:1582:6649":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"26:2649:4705":{"crate_id":26,"path":["regex_syntax","utf8","Utf8Range"],"kind":"struct"},"27:1060:26590":{"crate_id":27,"path":["aho_corasick","ahocorasick","MatchKind"],"kind":"enum"},"1:1887:3468":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:10925:22394":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:6901:4346":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:14359:5626":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"25:2524:5003":{"crate_id":25,"path":["regex","re_unicode","CaptureNames"],"kind":"struct"},"2:11598:6928":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"26:2109:4181":{"crate_id":26,"path":["regex_syntax","hir","print","PrinterBuilder"],"kind":"struct"},"11:0:2622":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"16:7462:6466":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:1718:8709":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4434:8781":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:10476:2874":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"25:1289:26534":{"crate_id":25,"path":["regex","re_unicode","Replacer"],"kind":"trait"},"2:10992:6923":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"26:1958:26550":{"crate_id":26,"path":["regex_syntax","ast","FlagsItemKind"],"kind":"enum"},"0:400:2208":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Seconds"],"kind":"variant"},"25:1405:36198":{"crate_id":25,"path":["regex","backtrack","Job"],"kind":"enum"},"2:4334:2779":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:7610:7369":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:15087:5840":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:5682:2833":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"26:2132:4837":{"crate_id":26,"path":["regex_syntax","hir","translate","Translator"],"kind":"struct"},"2:22328:32600":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:7905:2961":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"28:665:150":{"crate_id":28,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:5955:9165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:2492:2081":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:10813:35765":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:23800:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"26:1766:3908":{"crate_id":26,"path":["regex_syntax","ast","Assertion"],"kind":"struct"},"1:3903:7223":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:15612:5994":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:2110:6753":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:10265:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:10102:4235":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:4527:6184":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11767:5243":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:2676:15453":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"0:402:2211":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Millis"],"kind":"variant"},"17:401:5031":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"27:1596:2109":{"crate_id":27,"path":["aho_corasick","prefilter","Builder"],"kind":"struct"},"2:44168:7037":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:11173:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"12:0:2623":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:7657:9477":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:33535:6399":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:13684:5501":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"25:2248:5004":{"crate_id":25,"path":["regex","re_bytes","CaptureLocations"],"kind":"struct"},"1:7714:3088":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:15192:5863":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"30:255:4088":{"crate_id":30,"path":["anstyle_parse","Parser"],"kind":"struct"},"2:3029:6403":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:12220:5046":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:11523:4227":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:212:3931":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:11611:7223":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:39961:15374":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:4806:10142":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:10907:26945":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:13334:5415":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:7935:7261":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"11:1066:21379":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:46863:7116":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:14698:5703":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:2436:10104":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"22:209:35793":{"crate_id":22,"path":["humantime","date","Precision"],"kind":"enum"},"6:4738:8883":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:3388:261":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:7862:6497":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:11727:5239":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"9:450:21301":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:22238:10328":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"26:1284:4433":{"crate_id":26,"path":["regex_syntax","ast","Span"],"kind":"struct"},"2:2504:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"28:81:26506":{"crate_id":28,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:9651:4419":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:9084:4695":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"16:4921:6196":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:621:7209":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:4182:2833":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:46462:7096":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"22:100:2534":{"crate_id":22,"path":["humantime","date","format_rfc3339_millis"],"kind":"function"},"25:2496:4611":{"crate_id":25,"path":["regex","re_unicode","Match"],"kind":"struct"},"17:12255:5307":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:7277:2910":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:13273:5405":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:22330:15530":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:7808:3471":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:9169:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:536:4290":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:7987:2960":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"27:1195:135":{"crate_id":27,"path":["aho_corasick","error","Error"],"kind":"struct"},"1:3736:10123":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:42425:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:3818:3966":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:5403:4213":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"27:1581:4669":{"crate_id":27,"path":["aho_corasick","prefilter","PrefilterObj"],"kind":"struct"},"27:1406:4589":{"crate_id":27,"path":["aho_corasick","packed","pattern","Pattern"],"kind":"struct"},"17:14324:5614":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10035:4213":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:3405:15430":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:45360:7089":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:5140:9081":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:10852:22392":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:9791:2815":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:11274:7365":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:10417:4034":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:2703:9494":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:42938:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:7520:6746":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:41221:7004":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:475:4718":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:47183:7126":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:15557:5978":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"29:417:4140":{"crate_id":29,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"2:43707:4436":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:4691:10131":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:7389:33040":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:8167:6544":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:14181:5592":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:4986:6198":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11088:5178":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"25:1647:4942":{"crate_id":25,"path":["regex","exec","ExecNoSync"],"kind":"struct"},"22:134:135":{"crate_id":22,"path":["humantime","duration","Error"],"kind":"enum"},"2:42899:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:9962:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:12283:6935":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:2548:6147":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:12113:1634":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:588:8568":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:6086:9230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:14041:5551":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:110:314":{"crate_id":5,"path":["alloc","alloc","alloc"],"kind":"function"},"2:3187:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:7692:9486":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:14399:5629":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:1024:3933":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4455:8790":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:40974:6993":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"29:61:26603":{"crate_id":29,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"17:11590:5221":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:6929:4348":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:13584:5463":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:1697:8701":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"23:0:1964":{"crate_id":23,"path":["anstyle"],"kind":"module"},"2:21953:10112":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:4616:8866":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13097:5376":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:13695:5504":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11978:5280":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"23:422:4210":{"crate_id":23,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"16:6386:6290":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:22544:6947":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12166:5295":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:12117:702":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:7503:6168":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:46939:7118":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"23:309:2446":{"crate_id":23,"path":["anstyle","effect","Effects"],"kind":"struct"},"1:10766:2852":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:10051:4214":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11399:5203":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"27:1611:4675":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesBuilder"],"kind":"struct"},"6:4902:8959":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:7533:2899":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"18:574:4542":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:44147:7035":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:41199:6890":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:6700:9327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:859:3344":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:939:6638":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:2548:8494":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"11:2231:4370":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:22464:10322":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"5:5345:3933":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:951:6641":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:12129:1708":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:2718:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:8270:2856":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:8362:7314":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:3607:3438":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:5363:6204":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:588:10037":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"0:0:1962":{"crate_id":0,"path":["env_logger"],"kind":"module"},"25:1574:4851":{"crate_id":25,"path":["regex","dfa","Byte"],"kind":"struct"},"2:46717:7106":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:7610:9467":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:9104:7342":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:31058:32720":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:4252:3437":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"25:2534:2858":{"crate_id":25,"path":["regex","re_unicode","Split"],"kind":"struct"},"30:139:4629":{"crate_id":30,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"17:10432:35769":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"28:655:4145":{"crate_id":28,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:7651:9476":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:11294:5198":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:6228:9271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:44220:7040":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"5:2154:6726":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:7360:35760":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:41671:6905":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:46652:7104":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:1094:5036":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"27:1514:4658":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask256"],"kind":"struct"},"2:22666:4406":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8990:10213":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:40107:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:4454:2758":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"29:114:2863":{"crate_id":29,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"6:654:16262":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"26:268:36228":{"crate_id":26,"path":["regex_syntax","ast","visitor","ClassInduct"],"kind":"enum"},"5:1486:4397":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:13383:5425":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:7671:2755":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:7343:9451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:45120:2918":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:1203:5037":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:13121:5390":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"11:1007:6389":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"23:274:3720":{"crate_id":23,"path":["anstyle","color","RgbColor"],"kind":"struct"},"4:0:2618":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:2420:10099":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"27:1449:4640":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Teddy"],"kind":"struct"},"9:330:8500":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:10925:4449":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:8422:7228":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:3065:5055":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:10090:3461":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"11:687:3438":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:7768:4360":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"30:201:21338":{"crate_id":30,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"1:357:3086":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:14786:5766":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:10191:8301":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:8076:4457":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:14934:5813":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"26:2330:4189":{"crate_id":26,"path":["regex_syntax","hir","ClassUnicodeRange"],"kind":"struct"},"16:6361:6287":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:7713:10112":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:14145:5587":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"26:1156:26566":{"crate_id":26,"path":["regex_syntax","ast","parse","ClassState"],"kind":"enum"},"11:1676:3927":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:11527:4040":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:4054:10130":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8296:7308":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:4806:15442":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:12345:5313":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:10137:4236":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:7582:4353":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4647:8876":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"27:1429:4590":{"crate_id":27,"path":["aho_corasick","packed","teddy","compile","Compiler"],"kind":"struct"},"2:48185:7184":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:7913:7259":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:42553:2903":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:507:4542":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11800:5244":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"14:40:5391":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"25:1661:4944":{"crate_id":25,"path":["regex","exec","ExecReadOnly"],"kind":"struct"},"1:11462:9649":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:34132:15510":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:14194:5594":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:1040:6389":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:8195:6545":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:44899:15402":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"7:0:1698":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:9054:3071":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:555:8550":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"25:2590:5006":{"crate_id":25,"path":["regex","re_unicode","ReplacerRef"],"kind":"struct"},"5:1286:6643":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:2339:4278":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:4246:10153":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:6171:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:8632:7333":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:4676:8878":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:15527:5972":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:34191:15512":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:1674:8691":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:12110:339":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"26:1706:4797":{"crate_id":26,"path":["regex_syntax","ast","ClassSetRange"],"kind":"struct"},"16:6456:6296":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:7598:9465":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:5088:6201":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:6071:9228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:48794:7203":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:14757:5755":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:4745:6190":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:1505:4398":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"26:1802:3910":{"crate_id":26,"path":["regex_syntax","ast","Repetition"],"kind":"struct"},"17:13322:5414":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:3010:3293":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:7633:9473":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:48703:7198":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:4955:8985":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:15267:5886":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11113:5180":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:4095:2833":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11194:22412":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:922:6635":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:6159:9256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:2972:2751":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:13365:5424":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:12718:22384":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:46593:7101":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"27:961:4596":{"crate_id":27,"path":["aho_corasick","ahocorasick","AhoCorasick"],"kind":"struct"},"17:12921:4248":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:40875:6988":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:6968:22317":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"25:1433:36204":{"crate_id":25,"path":["regex","compile","MaybeInst"],"kind":"enum"},"1:2035:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13145:5391":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:6346:4338":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"11:811:3966":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:44756:7067":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:10440:4000":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:9996:2817":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"26:2140:26583":{"crate_id":26,"path":["regex_syntax","hir","translate","HirFrame"],"kind":"enum"},"1:9029:2947":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4549:8834":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:266:3933":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:22107:10243":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13787:5520":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"11:2326:6642":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:32812:6969":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:14822:5795":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:10559:5155":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:6687:6330":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:7444:10056":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:1537:8594":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:8260:2855":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:7892:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:12230:5299":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:10355:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:43900:7029":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:9624:22358":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:3159:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:43915:9634":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"25:2358:5011":{"crate_id":25,"path":["regex","re_set","unicode","SetMatchesIntoIter"],"kind":"struct"},"17:9968:22382":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:12066:15590":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:909:6648":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"25:713:4877":{"crate_id":25,"path":["regex","pool","Pool"],"kind":"struct"},"25:949:4897":{"crate_id":25,"path":["regex","re_bytes","CapturesDebug"],"kind":"struct"},"11:875:6640":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:3051:15523":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:4303:2778":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"11:1896:3966":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:6243:6277":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"29:403:4133":{"crate_id":29,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"0:406:2217":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Nanos"],"kind":"variant"},"9:426:21303":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"26:2200:2871":{"crate_id":26,"path":["regex_syntax","hir","ErrorKind"],"kind":"enum"},"17:15184:5862":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:40065:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:7884:22322":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:3797:6175":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:7948:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:44325:2858":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"10:36:8499":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"27:1107:4597":{"crate_id":27,"path":["aho_corasick","dfa","DFA"],"kind":"enum"},"2:13336:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"26:0:3323":{"crate_id":26,"path":["regex_syntax"],"kind":"module"},"2:4582:2768":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:42385:6912":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:8352:3439":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:46338:7091":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:23060:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:4922:8969":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:41415:6897":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:10803:5159":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:32776:8496":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:23242:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:3557:31573":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:3830:6176":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"11:2498:21375":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:1632:8662":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:9118:26960":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:40795:6981":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:7340:3344":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:2644:6151":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"25:1528:4871":{"crate_id":25,"path":["regex","dfa","Transitions"],"kind":"struct"},"2:40204:6979":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11449:5097":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:6576:6892":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:7128:7342":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:2197:5039":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:13676:5499":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:42615:3437":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:9234:3089":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"6:6248:9285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8302:7310":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"26:1830:26546":{"crate_id":26,"path":["regex_syntax","ast","RepetitionKind"],"kind":"enum"},"2:47007:7121":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:6969:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:40041:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:6107:9242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"27:1659:4685":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesThree"],"kind":"struct"},"1:11890:4044":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:15244:5878":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:1650:8674":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"28:699:3307":{"crate_id":28,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:5891:2955":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:10746:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"27:1501:4656":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddyFat1Mask256"],"kind":"struct"},"16:7318:6426":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"25:1605:4206":{"crate_id":25,"path":["regex","dfa","StateFlags"],"kind":"struct"},"17:11604:5222":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:31046:2814":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"31:53:4629":{"crate_id":31,"path":["utf8parse","types","State"],"kind":"enum"},"17:16016:6094":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:6212:4010":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11666:5230":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:1495:6648":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:14122:5586":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:16180:5414":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:12128:858":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:10633:10112":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:43676:3535":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:5389:3913":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:44301:7048":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:9179:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:4988:33353":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:44429:5000":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:6606:2952":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:3230:35447":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:7365:9452":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"11:673:3437":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:3192:1180":{"crate_id":1,"path":["std","io","prelude"],"kind":"module"},"5:2979:34137":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"29:329:4532":{"crate_id":29,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"26:1309:4756":{"crate_id":26,"path":["regex_syntax","ast","WithComments"],"kind":"struct"},"27:1052:4154":{"crate_id":27,"path":["aho_corasick","ahocorasick","AhoCorasickBuilder"],"kind":"struct"},"5:903:3437":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:44157:7036":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:5075:9049":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"25:2169:4997":{"crate_id":25,"path":["regex","re_builder","set_unicode","RegexSetBuilder"],"kind":"struct"},"27:1683:4689":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesTwo"],"kind":"struct"},"27:1359:4570":{"crate_id":27,"path":["aho_corasick","packed","api","Searcher"],"kind":"struct"},"14:221:6634":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"11:2562:8497":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:45056:9639":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13504:5458":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"26:1107:4177":{"crate_id":26,"path":["regex_syntax","ast","parse","ParserBuilder"],"kind":"struct"},"6:1576:8619":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"26:2385:4850":{"crate_id":26,"path":["regex_syntax","hir","Anchor"],"kind":"enum"},"11:2443:3952":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:41663:6903":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:4528:2766":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"9:52:4372":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:9790:22378":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:44920:7075":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:10837:2858":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:32928:2963":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:6315:4024":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"26:1442:26556":{"crate_id":26,"path":["regex_syntax","ast","SpecialLiteralKind"],"kind":"enum"},"16:2359:6139":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13742:5510":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:36723:6409":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:10357:3997":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:8912:4449":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:3014:2748":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:15003:5820":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:5419:4214":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:3251:5043":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:42501:3344":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:6676:2958":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:48435:7187":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:15345:5904":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:44885:7070":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:10006:2824":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8356:10154":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"25:1842:36193":{"crate_id":25,"path":["regex","literal","imp","Matcher"],"kind":"enum"},"11:1107:6645":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:6053:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:43395:9563":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:47387:7144":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:3193:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:5049:6200":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:48756:7201":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4428:8780":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"31:23:21338":{"crate_id":31,"path":["utf8parse","types","Action"],"kind":"enum"},"17:16146:6126":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"5:1270:6389":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:6666:9308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:41031:6994":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:1558:8609":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:637:7210":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:21306:32381":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:41622:6901":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:2675:10112":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:1708:2833":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:7356:4405":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:5155:2893":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:3433:2775":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:11469:5209":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:45048:9637":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11817:22480":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"26:2348:4839":{"crate_id":26,"path":["regex_syntax","hir","ClassBytes"],"kind":"struct"},"1:2271:3700":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:8621:7332":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:10482:2583":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"5:7558:6747":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"20:357:2802":{"crate_id":20,"path":["log","ParseLevelError"],"kind":"struct"},"1:918:4399":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4783:8904":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"27:1271:2109":{"crate_id":27,"path":["aho_corasick","nfa","Builder"],"kind":"struct"},"2:1634:2407":{"crate_id":2,"path":["core","mem"],"kind":"module"},"11:2369:6653":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:6467:6297":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"22:101:2533":{"crate_id":22,"path":["humantime","date","format_rfc3339_micros"],"kind":"function"},"30:304:4133":{"crate_id":30,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"2:30990:2901":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"11:800:3952":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:12119:804":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"29:144:26598":{"crate_id":29,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"16:4806:6192":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:15631:5998":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:501:8515":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:21568:4174":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:33955:2749":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"27:0:3324":{"crate_id":27,"path":["aho_corasick"],"kind":"module"},"1:2977:4016":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:2536:3911":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:8563:10204":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:4094:10132":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"26:1081:26564":{"crate_id":26,"path":["regex_syntax","ast","parse","Primitive"],"kind":"enum"},"16:2696:6153":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:10973:3723":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:44239:7042":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"27:1102:4617":{"crate_id":27,"path":["aho_corasick","classes","ByteClassBuilder"],"kind":"struct"},"29:385:4533":{"crate_id":29,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"2:43697:4629":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6753:6344":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:15689:6015":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:8072:6534":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"28:546:4541":{"crate_id":28,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11269:4230":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"15:0:2625":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:6363:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"23:202:2437":{"crate_id":23,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"2:44617:6938":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:14843:5800":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:45076:4424":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:48581:7190":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"27:985:4560":{"crate_id":27,"path":["aho_corasick","ahocorasick","FindIter"],"kind":"struct"},"22:102:2535":{"crate_id":22,"path":["humantime","date","format_rfc3339_nanos"],"kind":"function"},"14:215:6633":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:766:26517":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:46961:7119":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"25:1693:36201":{"crate_id":25,"path":["regex","exec","MatchLiteralType"],"kind":"enum"},"2:43162:2818":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:9091:4453":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:22857:10125":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:8081:2871":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:3509:2843":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:2438:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:43685:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:42493:3438":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:21677:4174":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:16087:6115":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"29:99:26597":{"crate_id":29,"path":["anstream","stream","RawStream"],"kind":"trait"},"17:16134:6123":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:31024:3664":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"7:31:21287":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:7053:9708":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:30759:10124":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:7651:6482":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:4377:2756":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:1528:8589":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:22384:15530":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:11755:5242":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:2973:34277":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"14:7:6630":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:7622:9469":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:34674:15515":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:7441:15495":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:5004:9019":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"25:0:1779":{"crate_id":25,"path":["regex"],"kind":"module"},"2:9987:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"25:1790:4966":{"crate_id":25,"path":["regex","input","CharInput"],"kind":"struct"},"11:1923:4692":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"25:1213:4894":{"crate_id":25,"path":["regex","re_unicode","Captures"],"kind":"struct"},"5:6868:3976":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:44269:7044":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:4830:8926":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:5566:7237":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"27:1677:4688":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesOne"],"kind":"struct"},"6:5052:9041":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:7569:6748":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:3594:3437":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"15:306:21405":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:4104:10133":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:12126:1652":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:23610:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:10682:7354":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:45072:9643":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:12380:5316":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:45254:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:8239:2853":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:3032:6170":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:3307:2876":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"30:85:26601":{"crate_id":30,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"2:44624:6988":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10016:22359":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"26:1416:26548":{"crate_id":26,"path":["regex_syntax","ast","LiteralKind"],"kind":"enum"},"17:14251:5601":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:2048:2870":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:24031:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:5760:22311":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:47499:7146":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:11381:4455":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:7038:3985":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7694:4356":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:736:26516":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11027:5137":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"27:998:4599":{"crate_id":27,"path":["aho_corasick","ahocorasick","FindOverlappingIter"],"kind":"struct"},"2:21340:32388":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:2933:21450":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:42564:2904":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:9985:7017":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:13285:5408":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:6391:6886":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:22831:6963":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"27:1137:4618":{"crate_id":27,"path":["aho_corasick","dfa","ByteClass"],"kind":"struct"},"2:7324:15502":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"18:707:4570":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:48833:7204":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:22650:4426":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:563:8555":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:43460:2814":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4628:8875":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:14099:5577":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:542:8544":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:5085:9054":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"25:2609:4899":{"crate_id":25,"path":["regex","sparse","SparseSet"],"kind":"struct"},"25:1417:4912":{"crate_id":25,"path":["regex","compile","Patch"],"kind":"struct"},"27:1668:4687":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesBuilder"],"kind":"struct"},"17:11675:5231":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:32846:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"18:515:4540":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:45305:7085":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:48373:7186":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:4808:10144":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:5982:9172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:15855:5390":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:4810:10145":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:22301:10112":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:9759:22377":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:22415:10112":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"5:0:314":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:5194:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4860:8942":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"11:123:3921":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:5067:864":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:44579:2854":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"18:624:35773":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:8884:4448":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:12131:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:33721:15509":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"26:2569:4861":{"crate_id":26,"path":["regex_syntax","unicode","CaseFoldError"],"kind":"struct"},"16:8134:6540":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:1054:6642":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:11083:4448":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"25:2054:4995":{"crate_id":25,"path":["regex","prog","InstBytes"],"kind":"struct"},"2:42572:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10510:5154":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"25:1725:4961":{"crate_id":25,"path":["regex","exec","ProgramCacheInner"],"kind":"struct"},"17:10618:35770":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"27:1247:4871":{"crate_id":27,"path":["aho_corasick","nfa","Transitions"],"kind":"enum"},"16:5712:4308":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"25:2543:5000":{"crate_id":25,"path":["regex","re_unicode","SplitN"],"kind":"struct"},"17:9918:22381":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:4218:15372":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:1793:2453":{"crate_id":2,"path":["core","mem","replace"],"kind":"function"},"17:10569:35764":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"25:2459:5013":{"crate_id":25,"path":["regex","re_trait","Locations"],"kind":"struct"},"6:6961:9445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:3801:3344":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:6878:3977":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:42242:4433":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:2351:15530":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"5:5005:2833":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6332:4336":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:13463:5447":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:4774:6191":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:41188:7003":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"27:1333:4166":{"crate_id":27,"path":["aho_corasick","packed","api","Config"],"kind":"struct"},"2:1802:3661":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"11:2304:6389":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:2428:6142":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:5017:6199":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:15294:5893":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:15177:5861":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"11:1891:3952":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:40847:6986":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:1591:8631":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:32873:251":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:16062:6107":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:6352:10334":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:4092:3438":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:7544:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11549:5218":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:4440:8783":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2509:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:5015:9022":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:6819:9367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"27:1042:36910":{"crate_id":27,"path":["aho_corasick","ahocorasick","StreamChunk"],"kind":"enum"},"25:1622:4939":{"crate_id":25,"path":["regex","dfa","StateMap"],"kind":"struct"},"25:2552:5004":{"crate_id":25,"path":["regex","re_unicode","CaptureLocations"],"kind":"struct"},"16:6485:4342":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:5705:7238":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:40867:6876":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:6014:15825":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:645:10040":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:16170:5409":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:1832:1199":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:15367:5909":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:3764:6174":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:8283:2858":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:12091:5289":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:10251:3534":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:7286:3344":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:12310:4247":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:4866:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"25:2211:4999":{"crate_id":25,"path":["regex","re_bytes","CaptureMatches"],"kind":"struct"},"18:521:26518":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4496:8810":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:2766:6156":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:45347:2908":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:46985:7120":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:7385:3344":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:12140:5293":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:11321:4218":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:7597:35757":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:47129:7124":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:4417:6181":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:3915:6178":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"26:1208:2871":{"crate_id":26,"path":["regex_syntax","ast","ErrorKind"],"kind":"enum"},"25:1707:36190":{"crate_id":25,"path":["regex","exec","MatchNfaType"],"kind":"enum"},"6:4998:9016":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:0:2626":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:41653:3995":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:6688:3933":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:1939:7217":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"25:2449:5012":{"crate_id":25,"path":["regex","re_set","bytes","SetMatchesIter"],"kind":"struct"},"17:11645:5226":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"28:761:4542":{"crate_id":28,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"16:7067:6386":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"27:1457:4940":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Exec"],"kind":"enum"},"2:2966:254":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:8239:6446":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6893:4304":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"11:1603:6650":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:14485:4248":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:12612:15395":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11743:5241":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:4989:9010":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:4195:31310":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"26:1184:4722":{"crate_id":26,"path":["regex_syntax","ast","print","Printer"],"kind":"struct"},"11:1025:6642":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:3222:10070":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:5853:6884":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:7645:9475":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:21983:4425":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:42979:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:12758:5344":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:2983:34138":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:0:2627":{"crate_id":17,"path":["object"],"kind":"module"},"2:4171:6877":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"25:931:4894":{"crate_id":25,"path":["regex","re_bytes","Captures"],"kind":"struct"},"6:5885:9130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"22:194:135":{"crate_id":22,"path":["humantime","date","Error"],"kind":"enum"},"26:2311:4790":{"crate_id":26,"path":["regex_syntax","hir","ClassUnicode"],"kind":"struct"},"6:4566:8844":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"18:582:3307":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6352:4340":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:12121:806":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:1734:8714":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"8:0:2619":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11444:7250":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:11014:5175":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:48677:7196":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:2712:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:8396:7317":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:4375:8737":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"11:434:35741":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:12335:4248":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:5306:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"26:1535:4779":{"crate_id":26,"path":["regex_syntax","ast","ClassAscii"],"kind":"struct"},"17:11991:5281":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13297:5409":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:700:3344":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:4046:10129":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:11779:4244":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4854:8939":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:12103:5290":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"27:1368:36913":{"crate_id":27,"path":["aho_corasick","packed","api","SearchKind"],"kind":"enum"},"25:2174:4611":{"crate_id":25,"path":["regex","re_bytes","Match"],"kind":"struct"},"11:742:4399":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:3225:4801":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:41638:6902":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:1639:8666":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"27:1630:4595":{"crate_id":27,"path":["aho_corasick","prefilter","RareByteOffsets"],"kind":"struct"},"17:16109:6117":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:11243:5195":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:2959:2774":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:14969:4269":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"25:213:36205":{"crate_id":25,"path":["regex","dfa","InstPtrs"],"kind":"struct"},"16:5982:6242":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"5:3191:4802":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:8455:10191":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:5009:9021":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:652:4542":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13347:5416":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7792:22321":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:5993:2893":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"11:2352:6643":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"25:1965:4908":{"crate_id":25,"path":["regex","prog","Inst"],"kind":"enum"},"5:634:6721":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"25:2351:5009":{"crate_id":25,"path":["regex","re_set","unicode","SetMatches"],"kind":"struct"},"27:1225:4629":{"crate_id":27,"path":["aho_corasick","nfa","State"],"kind":"struct"},"2:40823:6984":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:6606:3344":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:8071:7264":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:8351:9644":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:13935:5538":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4847:8937":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:2457:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:13056:5367":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:7492:6474":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:8216:2882":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"27:1086:4581":{"crate_id":27,"path":["aho_corasick","classes","ByteClasses"],"kind":"struct"},"30:109:4090":{"crate_id":30,"path":["anstyle_parse","params","Params"],"kind":"struct"},"1:2266:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:13254:4268":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:62:15851":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"22:0:1778":{"crate_id":22,"path":["humantime"],"kind":"module"},"17:9730:22376":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:5651:3964":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4698:8880":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"26:2160:4841":{"crate_id":26,"path":["regex_syntax","hir","translate","TranslatorI"],"kind":"struct"},"6:123:15906":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"11:787:4397":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:14235:5599":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:8615:3437":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:14087:5575":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:1477:4396":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"27:1388:4646":{"crate_id":27,"path":["aho_corasick","packed","pattern","Patterns"],"kind":"struct"},"2:7896:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"26:1194:135":{"crate_id":26,"path":["regex_syntax","ast","Error"],"kind":"struct"},"2:46815:7115":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"22:181:2410":{"crate_id":22,"path":["humantime","wrapper","Timestamp"],"kind":"struct"},"2:32816:6446":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"16:5830:6220":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"25:2466:5014":{"crate_id":25,"path":["regex","re_trait","SubCapturesPosIter"],"kind":"struct"},"27:1013:4602":{"crate_id":27,"path":["aho_corasick","ahocorasick","StreamFindIter"],"kind":"struct"},"5:7628:3966":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:10990:4037":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:7554:4351":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:43715:4437":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:2728:264":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:10784:26947":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:45335:7088":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"20:151:2083":{"crate_id":20,"path":["log","Log"],"kind":"trait"},"26:254:36227":{"crate_id":26,"path":["regex_syntax","ast","visitor","ClassFrame"],"kind":"enum"},"1:5447:7233":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:15589:5993":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:7722:4359":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:38599:15516":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:5967:4415":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:3753:6725":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:15013:5821":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"28:97:26507":{"crate_id":28,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:2228:5042":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:3041:15521":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"26:1322:4757":{"crate_id":26,"path":["regex_syntax","ast","Comment"],"kind":"struct"},"1:3432:2881":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"25:1671:36194":{"crate_id":25,"path":["regex","exec","MatchType"],"kind":"enum"},"17:13989:5546":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"26:2125:4183":{"crate_id":26,"path":["regex_syntax","hir","translate","TranslatorBuilder"],"kind":"struct"},"27:1521:4659":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddyFat2Mask256"],"kind":"struct"},"32:41:4079":{"crate_id":32,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"16:6268:35761":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:45064:9641":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:10520:35771":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:43155:2817":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"26:2227:3915":{"crate_id":26,"path":["regex_syntax","hir","Hir"],"kind":"struct"},"5:1455:3344":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13309:5412":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:7828:6493":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"20:155:2791":{"crate_id":20,"path":["log","NopLogger"],"kind":"struct"},"5:1315:6647":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"27:1507:4657":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask128"],"kind":"struct"},"26:2579:26584":{"crate_id":26,"path":["regex_syntax","unicode","ClassQuery"],"kind":"enum"},"2:3558:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"18:699:4150":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:32830:2766":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"25:2040:4993":{"crate_id":25,"path":["regex","prog","InstChar"],"kind":"struct"},"2:47082:7123":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:7679:9482":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"13:110:35747":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:4002:10126":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:22105:10112":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:7855:15501":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:44311:2857":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:12109:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:10246:3533":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:3229:9678":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:3801:7222":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:2406:6141":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:22718:32656":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:11456:9648":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:15710:6018":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:40988:10084":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:10706:9647":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"26:1376:3912":{"crate_id":26,"path":["regex_syntax","ast","Alternation"],"kind":"struct"},"25:1533:4932":{"crate_id":25,"path":["regex","dfa","Fsm"],"kind":"struct"},"2:47031:7122":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:614:35772":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:46615:7102":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:46384:7093":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:44773:7068":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:40927:6991":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:4411:2833":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:22682:4427":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"26:2574:4862":{"crate_id":26,"path":["regex_syntax","unicode","UnicodeWordError"],"kind":"struct"},"2:44848:6941":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:7668:9481":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:23151:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"11:1160:6647":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:8227:2852":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:5104:9068":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:1387:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:3460:5044":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:2434:10103":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:3378:15524":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"25:1998:4987":{"crate_id":25,"path":["regex","prog","InstSplit"],"kind":"struct"},"2:43660:3536":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:9994:2818":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:11395:5202":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:7090:6388":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:44705:15401":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:8281:6552":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"9:393:21302":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:40:3929":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"27:1698:4611":{"crate_id":27,"path":["aho_corasick","Match"],"kind":"struct"},"1:7985:7263":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:13633:5488":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:5846:2946":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:7802:10044":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:4557:10156":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:4889:6195":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:507:8518":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:1862:3461":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:4516:8819":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:10479:2580":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:14633:5652":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:4444:3959":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:4635:10173":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"27:1237:4632":{"crate_id":27,"path":["aho_corasick","nfa","Dense"],"kind":"struct"},"17:12684:5117":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:4506:8816":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:9464:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5044:9039":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"27:1528:4660":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask128"],"kind":"struct"},"16:7006:6377":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:9678:22365":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10471:35766":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:44742:7064":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"27:1413:4641":{"crate_id":27,"path":["aho_corasick","packed","rabinkarp","RabinKarp"],"kind":"struct"},"1:3232:9679":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:11412:5204":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:755:4580":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:2728:2869":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:45095:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:22795:32689":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:8115:6537":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"28:556:5028":{"crate_id":28,"path":["memchr","cow","Imp"],"kind":"enum"},"26:1178:4181":{"crate_id":26,"path":["regex_syntax","ast","print","PrinterBuilder"],"kind":"struct"},"1:8378:7315":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11426:5205":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:10423:3999":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:4841:8934":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"27:1489:4654":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask128"],"kind":"struct"},"2:42821:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:22597:6948":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:42704:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:3315:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:15287:5892":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:48619:7191":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4578:8850":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:42623:3438":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:13922:5537":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10775:5158":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:12120:805":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"11:2542:8493":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:12116:700":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:44475:7052":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:10667:35768":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:45068:9642":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:11226:5192":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:11117:4424":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:3226:31847":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:504:3067":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:12566:15388":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:6261:4303":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:21555:10244":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:3343:3966":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"27:1552:4666":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Mask128"],"kind":"struct"},"17:14001:5547":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:4217:10150":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"25:307:4873":{"crate_id":25,"path":["regex","dfa","TransitionsRow"],"kind":"struct"},"26:2593:36226":{"crate_id":26,"path":["regex_syntax","unicode","CanonicalClassQuery"],"kind":"enum"},"17:12387:22506":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"25:1938:3916":{"crate_id":25,"path":["regex","pool","PoolGuard"],"kind":"struct"},"6:6813:9366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:45060:9640":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12548:5330":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"13:0:2617":{"crate_id":13,"path":["std_detect"],"kind":"module"},"30:26:26605":{"crate_id":30,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"16:2526:6146":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:8001:2870":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:8866:7334":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:23515:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:6844:6358":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:7738:3078":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:43500:2816":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"28:769:4542":{"crate_id":28,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"26:1057:4706":{"crate_id":26,"path":["regex_syntax","utf8","ScalarRange"],"kind":"struct"},"16:6696:6331":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:6531:3933":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:21294:32381":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:5033:9033":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:5808:258":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4724:8882":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:3315:6171":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:12366:22505":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:14439:5634":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"26:2240:26569":{"crate_id":26,"path":["regex_syntax","hir","HirKind"],"kind":"enum"},"11:396:3925":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:6934:9439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13162:5394":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:12096:2507":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:13448:5441":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"25:2572:4999":{"crate_id":25,"path":["regex","re_unicode","CaptureMatches"],"kind":"struct"},"25:1991:4985":{"crate_id":25,"path":["regex","prog","InstSave"],"kind":"struct"},"6:1682:8692":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"23:366:3723":{"crate_id":23,"path":["anstyle","reset","Reset"],"kind":"struct"},"29:466:4629":{"crate_id":29,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"2:2435:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4480:8806":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"5:7013:3982":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:4050:3933":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:1795:642":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4595:8858":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:548:8547":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:3344:2583":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:1809:666":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:11686:7251":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"26:2489:26547":{"crate_id":26,"path":["regex_syntax","hir","RepetitionRange"],"kind":"enum"},"2:46633:7103":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:7976:4446":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"11:1051:6643":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:9320:3467":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"27:1544:4662":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddyFat3Mask256"],"kind":"struct"},"1:5637:10209":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:11576:5220":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:15480:5954":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:4195:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:6079:9229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13754:5512":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:6662:2957":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:8400:9336":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:6915:4347":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:40025:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:7316:3944":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4755:8891":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:14921:5808":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:9559:22360":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"25:1422:3941":{"crate_id":25,"path":["regex","compile","Hole"],"kind":"enum"},"2:4518:2765":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11497:4241":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:12306:6936":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:8399:4207":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"16:5939:4286":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:15049:5826":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:7377:3344":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:483:8510":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:42860:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:44589:7055":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:4032:10128":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:1607:4692":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"18:531:4543":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:1826:3453":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:12244:5303":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:42404:6913":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"27:923:10112":{"crate_id":27,"path":["aho_corasick","state_id","private","Sealed"],"kind":"trait"},"29:292:4134":{"crate_id":29,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"6:5146:9083":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:4776:8903":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:44295:6932":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:14156:5589":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:6263:9296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:5374:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:6818:6357":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:6587:2411":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:21494:10112":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:15990:6088":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:5461:7234":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"26:2469:26546":{"crate_id":26,"path":["regex_syntax","hir","RepetitionKind"],"kind":"enum"},"2:40008:10069":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"26:1871:3911":{"crate_id":26,"path":["regex_syntax","ast","Group"],"kind":"struct"},"6:0:888":{"crate_id":6,"path":["libc"],"kind":"module"},"25:2444:5011":{"crate_id":25,"path":["regex","re_set","bytes","SetMatchesIntoIter"],"kind":"struct"},"17:14509:5650":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"14:31:6630":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:2275:2842":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:46532:7099":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"26:1945:4822":{"crate_id":26,"path":["regex_syntax","ast","FlagsItem"],"kind":"struct"},"22:230:2932":{"crate_id":22,"path":["humantime","date","Rfc3339Timestamp"],"kind":"struct"},"1:8605:7229":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:3393:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:3418:33049":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:580:8563":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:4602:2769":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:142:2715":{"crate_id":5,"path":["alloc","boxed"],"kind":"module"},"17:12410:5321":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5023:9027":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:22706:6949":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:22779:32714":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:12052:5284":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"28:853:26516":{"crate_id":28,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:6128:9248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"27:1211:4582":{"crate_id":27,"path":["aho_corasick","nfa","NFA"],"kind":"struct"},"16:6204:4318":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:4949:6197":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:6582:9630":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:13882:5249":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:7677:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:12898:22385":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:12125:1651":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:5648:6211":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:914:4398":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"9:237:4629":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"18:609:4553":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11001:5174":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:6742:6343":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:21666:10112":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:41109:4413":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:1590:4801":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"26:2059:4835":{"crate_id":26,"path":["regex_syntax","hir","interval","IntervalSet"],"kind":"struct"},"17:13083:5375":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:3172:2776":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:12111:1515":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:4864:4017":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:1446:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:3183:2959":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:2380:6140":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:32848:252":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:1072:6647":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:5921:9143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:15566:5980":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"25:1512:4465":{"crate_id":25,"path":["regex","dfa","Cache"],"kind":"struct"},"17:15133:5850":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:12106:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:10242:4239":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:11154:8305":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:5867:9117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:44119:7031":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:2574:6148":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:3576:2847":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:44194:6995":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"24:0:1965":{"crate_id":24,"path":["env_filter"],"kind":"module"},"2:48741:7200":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:41629:2948":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:1521:8586":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6169:9259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"27:1378:4560":{"crate_id":27,"path":["aho_corasick","packed","api","FindIter"],"kind":"struct"},"2:13145:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:46763:7113":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:7474:6467":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:47160:7125":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:6423:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:4908:8961":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:7326:34273":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:44229:7041":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:21547:10112":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:113:26508":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:11672:15385":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:6136:4019":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:11429:7248":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:12546:4589":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:38709:15518":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"18:636:4559":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13832:5526":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:4556:8837":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"11:351:35736":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:3655:5060":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:14989:5817":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:8043:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:7918:7260":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:7908:2084":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:8936:3344":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:6545:6307":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:2256:4403":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:9139:4461":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"26:1115:4088":{"crate_id":26,"path":["regex_syntax","ast","parse","Parser"],"kind":"struct"},"2:12555:4570":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:31592:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:4351:8720":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:1585:3966":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:2584:2866":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:21323:32376":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:41270:6895":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:44910:7071":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:12322:6937":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:10896:5166":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"0:128:726":{"crate_id":0,"path":["env_logger","fmt"],"kind":"module"},"1:11334:6704":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:8307:10121":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"11:2403:3438":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:8961:7338":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"18:590:4546":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:2236:34274":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:40151:10050":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"26:1919:4821":{"crate_id":26,"path":["regex_syntax","ast","SetFlags"],"kind":"struct"},"2:12246:6933":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:3491:2841":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:11414:7247":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:32959:3294":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:3461:6172":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"26:1518:26552":{"crate_id":26,"path":["regex_syntax","ast","ClassPerlKind"],"kind":"enum"},"17:12486:5327":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:23990:6967":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:2450:6143":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:4835:6193":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:41118:6998":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:40778:6876":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"23:297:4207":{"crate_id":23,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"25:2346:5008":{"crate_id":25,"path":["regex","re_set","unicode","RegexSet"],"kind":"struct"},"16:5661:6216":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:22741:6951":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"23:253:3719":{"crate_id":23,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"0:247:141":{"crate_id":0,"path":["env_logger","fmt","Formatter"],"kind":"struct"},"2:22277:10329":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:13765:5513":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:11204:9572":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"29:244:31573":{"crate_id":29,"path":["anstream","fmt","Adapter"],"kind":"struct"},"9:507:6707":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:1990:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"25:2277:5007":{"crate_id":25,"path":["regex","re_bytes","NoExpand"],"kind":"struct"},"17:15374:5911":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:15311:5897":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"29:501:2581":{"crate_id":29,"path":["anstream","auto","AutoStream"],"kind":"struct"},"30:0:3518":{"crate_id":30,"path":["anstyle_parse"],"kind":"module"},"2:42631:3344":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:10988:5173":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"27:1304:4638":{"crate_id":27,"path":["aho_corasick","nfa","QueuedSet"],"kind":"struct"},"5:3155:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:42555:3422":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"25:2476:4998":{"crate_id":25,"path":["regex","re_trait","Matches"],"kind":"struct"},"27:1351:2109":{"crate_id":27,"path":["aho_corasick","packed","api","Builder"],"kind":"struct"},"16:6583:6308":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"11:328:9627":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11932:5276":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:7391:22319":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:5777:2833":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:13441:2909":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6792:6356":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"28:716:35775":{"crate_id":28,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"25:2599:5007":{"crate_id":25,"path":["regex","re_unicode","NoExpand"],"kind":"struct"},"26:2048:141":{"crate_id":26,"path":["regex_syntax","error","Formatter"],"kind":"struct"},"6:4603:8862":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:2832:6159":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:40183:6977":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:11126:5181":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:6960:6366":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:11693:7251":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:4462:6182":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:22:740":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:4233:10152":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:41147:6883":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"25:1628:135":{"crate_id":25,"path":["regex","error","Error"],"kind":"enum"},"2:46430:7095":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:2806:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:22459:10324":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"11:2469:3966":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"28:638:26518":{"crate_id":28,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:16049:6101":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:7971:4447":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:4610:8864":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:11136:2532":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:11507:4242":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:1968:10080":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"25:2519:4893":{"crate_id":25,"path":["regex","re_unicode","Regex"],"kind":"struct"},"2:22845:6964":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:16004:6092":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:13648:5492":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:1570:8617":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:14385:5628":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:2031:5038":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:6877:10239":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:41078:6997":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:4237:15433":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:22430:10323":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:12701:5342":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"20:277:2085":{"crate_id":20,"path":["log","Record"],"kind":"struct"},"6:4529:8824":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:6415:6293":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:6845:3964":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:12107:1669":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:4613:6187":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:6485:3952":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:7660:6483":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7736:6484":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:832:6648":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"26:1733:4800":{"crate_id":26,"path":["regex_syntax","ast","ClassSetBinaryOp"],"kind":"struct"},"17:12972:5357":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"9:177:4387":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:21496:10245":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:43478:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:2504:6145":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"28:741:35773":{"crate_id":28,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:47653:7149":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"26:1640:4796":{"crate_id":26,"path":["regex_syntax","ast","ClassBracketed"],"kind":"struct"},"1:9217:2913":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:4497:6183":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6279:4333":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:4719:6189":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:9943:233":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"27:1437:4174":{"crate_id":27,"path":["aho_corasick","packed","teddy","compile","Mask"],"kind":"struct"},"28:624:4542":{"crate_id":28,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:2305:21449":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"11:1087:35746":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:6041:22313":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"25:2220:2858":{"crate_id":25,"path":["regex","re_bytes","Split"],"kind":"struct"},"2:31620:3307":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"21:0:2619":{"crate_id":21,"path":["cfg_if"],"kind":"module"},"6:4932:8975":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:10950:5170":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:44642:6987":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:44283:7047":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:12127:5292":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:40901:6990":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:44249:7043":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:12501:2804":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:15519:5969":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:14266:5605":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:7513:6477":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"29:450:4142":{"crate_id":29,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"16:2596:6149":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"26:2294:3909":{"crate_id":26,"path":["regex_syntax","hir","Class"],"kind":"enum"},"2:42349:7020":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:40377:28000":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:7639:9474":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:8154:6541":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:7993:2868":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"28:883:26517":{"crate_id":28,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6156:6269":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:790:3936":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:7015:6380":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:15432:5953":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:10881:22393":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:9992:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:6376:22314":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"28:807:4569":{"crate_id":28,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:9031:3015":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:11071:5000":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:12396:5318":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"30:290:4132":{"crate_id":30,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"2:2353:15531":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"5:6118:2833":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:5117:7232":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6499:4343":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:31116:32713":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:48718:7199":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"23:330:4208":{"crate_id":23,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"16:5743:6217":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:48692:7197":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:3389:2863":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:10974:4230":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"20:296:2084":{"crate_id":20,"path":["log","Metadata"],"kind":"struct"},"6:1604:8638":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:6569:4344":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:47687:7150":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:39922:3441":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"33:0:3521":{"crate_id":33,"path":["anstyle_query"],"kind":"module"},"2:12772:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:11065:5177":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:836:3437":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:9061:26939":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:9006:10215":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:45044:9636":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:22758:32674":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:12596:5334":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:15027:5822":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7284:3013":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:41128:4414":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"11:2423:3344":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"25:2202:4998":{"crate_id":25,"path":["regex","re_bytes","Matches"],"kind":"struct"},"2:10643:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:14878:5801":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:15253:5879":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:14021:5550":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:48043:7183":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:10203:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:15:2194":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:4225:10151":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:10701:9645":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"28:816:4150":{"crate_id":28,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:671:4566":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:11085:6925":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"26:1974:4824":{"crate_id":26,"path":["regex_syntax","ast","Flag"],"kind":"enum"},"2:42476:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"26:1188:2088":{"crate_id":26,"path":["regex_syntax","ast","print","Writer"],"kind":"struct"},"30:92:26603":{"crate_id":30,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"5:5393:15377":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"26:2078:4836":{"crate_id":26,"path":["regex_syntax","hir","interval","IntervalSetIter"],"kind":"struct"},"2:41644:2881":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4878:8949":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:16032:6099":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:45244:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:13478:5453":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:6136:9250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:1824:3452":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:4773:5051":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:44608:7057":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:569:8558":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"31:0:3519":{"crate_id":31,"path":["utf8parse"],"kind":"module"},"2:44633:6876":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:14470:5640":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"27:1310:4639":{"crate_id":27,"path":["aho_corasick","nfa","AllBytesIter"],"kind":"struct"},"1:1602:4803":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:10736:4458":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:495:8302":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"26:1484:3909":{"crate_id":26,"path":["regex_syntax","ast","Class"],"kind":"enum"},"1:6492:2948":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:12153:5294":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:32961:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:43435:4824":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"27:1536:4661":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask256"],"kind":"struct"},"17:12009:4218":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"25:2144:4997":{"crate_id":25,"path":["regex","re_builder","set_bytes","RegexSetBuilder"],"kind":"struct"},"1:11550:7221":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"11:1887:3344":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"25:1947:4881":{"crate_id":25,"path":["regex","prog","Program"],"kind":"struct"},"27:1261:4634":{"crate_id":27,"path":["aho_corasick","nfa","IterTransitionsMut"],"kind":"struct"},"2:7934:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"25:1231:4897":{"crate_id":25,"path":["regex","re_unicode","CapturesDebug"],"kind":"struct"},"25:1833:4968":{"crate_id":25,"path":["regex","literal","imp","LiteralSearcher"],"kind":"struct"},"5:7644:3970":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"26:1654:26558":{"crate_id":26,"path":["regex_syntax","ast","ClassSet"],"kind":"enum"},"5:886:3941":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:7348:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:15659:6007":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4584:8853":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"14:202:15403":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12584:5333":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:11701:5235":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"26:2360:4853":{"crate_id":26,"path":["regex_syntax","hir","ClassBytesIter"],"kind":"struct"},"26:1905:4819":{"crate_id":26,"path":["regex_syntax","ast","CaptureName"],"kind":"struct"},"17:14373:5627":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:14497:5643":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:4641:6188":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"24:90:3332":{"crate_id":24,"path":["env_filter","filtered_log","FilteredLog"],"kind":"struct"},"2:47577:7147":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12301:5310":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:2652:2867":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:8097:6536":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"26:2099:3906":{"crate_id":26,"path":["regex_syntax","hir","literal","Literal"],"kind":"struct"},"20:198:2408":{"crate_id":20,"path":["log","Level"],"kind":"enum"},"26:2173:3905":{"crate_id":26,"path":["regex_syntax","hir","translate","Flags"],"kind":"struct"},"26:1389:3913":{"crate_id":26,"path":["regex_syntax","ast","Concat"],"kind":"struct"},"27:1560:4667":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Mask256"],"kind":"struct"},"17:12536:5329":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:6710:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:1885:3467":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:12105:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:11113:6927":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:21284:3307":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:3687:3933":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:32823:6970":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:10756:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:13896:5534":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"29:315:4136":{"crate_id":29,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"17:12930:22386":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:15507:5966":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:7460:3079":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:2474:9490":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"20:290:2800":{"crate_id":20,"path":["log","RecordBuilder"],"kind":"struct"},"17:13218:4259":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:10775:26962":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:5905:6229":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:21958:10247":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:40958:32696":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:43668:4435":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:15321:5900":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:13194:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:6531:6305":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:12797:4254":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:12418:5323":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:10315:4240":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:1546:8600":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:3184:3437":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"10:44:4371":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"18:0:2628":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:3049:21452":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:2268:7220":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:6943:9442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:11256:5196":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:1115:35312":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:44068:7030":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:15733:6022":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"26:1748:26551":{"crate_id":26,"path":["regex_syntax","ast","ClassSetBinaryOpKind"],"kind":"enum"},"2:38654:15517":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:5148:7232":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"15:394:21414":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"27:1127:4158":{"crate_id":27,"path":["aho_corasick","dfa","Standard"],"kind":"struct"},"26:2544:4177":{"crate_id":26,"path":["regex_syntax","parser","ParserBuilder"],"kind":"struct"},"2:2546:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:6898:9420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:7436:4300":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"29:0:1963":{"crate_id":29,"path":["anstream"],"kind":"module"},"2:42179:6909":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:533:8538":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"27:1167:4016":{"crate_id":27,"path":["aho_corasick","dfa","Repr"],"kind":"struct"},"2:45297:7083":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"25:1380:4817":{"crate_id":25,"path":["regex","backtrack","Bounded"],"kind":"struct"},"6:1514:8584":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:44393:7051":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:10919:6921":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:7787:10043":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:10111:7345":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:5634:6207":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"28:798:4567":{"crate_id":28,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:10000:2826":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:48497:7188":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:9256:27754":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"14:160:6630":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:15493:5960":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"18:491:5028":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:11476:4370":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:11030:6924":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:3267:2875":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:40894:6989":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:5897:9134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:6764:9355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:7611:2880":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:5:1719":{"crate_id":5,"path":["alloc","vec"],"kind":"macro"},"6:1710:8705":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"25:1914:4981":{"crate_id":25,"path":["regex","pikevm","Threads"],"kind":"struct"},"18:96:26507":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:6226:6274":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:12082:6930":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:45132:15629":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:7219:3352":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7269:35762":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:47341:7143":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:5435:6205":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:13856:5527":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:538:4145":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:10422:5153":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:10067:4234":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:6913:9427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:46408:7094":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:22824:9631":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:8872:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:1536:6724":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:43057:2943":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:11485:5213":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"25:1896:4932":{"crate_id":25,"path":["regex","pikevm","Fsm"],"kind":"struct"},"25:1861:36200":{"crate_id":25,"path":["regex","literal","imp","LiteralIter"],"kind":"enum"},"25:2255:5005":{"crate_id":25,"path":["regex","re_bytes","SubCaptureMatches"],"kind":"struct"},"18:727:4152":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10207:4238":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:4377:7226":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:42743:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:6100:9241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:32847:2962":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:3141:15373":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:11536:5217":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:12130:1258":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:5691:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"25:1880:4976":{"crate_id":25,"path":["regex","literal","imp","SingleByteSet"],"kind":"struct"},"1:849:3438":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:1507:8581":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"20:326:2801":{"crate_id":20,"path":["log","MetadataBuilder"],"kind":"struct"},"6:4968:8995":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:32837:6971":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:44953:6942":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:14170:5591":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:4686:8879":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:40784:6980":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"11:102:9623":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"9:0:2620":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"11:430:35745":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:34014:2915":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:6741:9354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:12072:4465":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:5673:6164":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"25:1468:4924":{"crate_id":25,"path":["regex","compile","SuffixCache"],"kind":"struct"},"17:15356:5908":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:5634:9257":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:7342:35759":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:3996:10127":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:1574:3437":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:4585:6186":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:22370:10333":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:7054:6383":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:14413:5632":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:11097:7335":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:7759:3077":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"26:1817:4811":{"crate_id":26,"path":["regex_syntax","ast","RepetitionOp"],"kind":"struct"},"32:0:3520":{"crate_id":32,"path":["colorchoice"],"kind":"module"},"6:4535:8827":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:12541:4691":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:893:3952":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:11141:5182":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"27:1292:4636":{"crate_id":27,"path":["aho_corasick","nfa","fill_failure_transitions_leftmost","QueuedState"],"kind":"struct"},"17:15535:5973":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:12614:22383":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:13869:5530":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:435:5033":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:11109:26954":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:2618:6150":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:4020:3952":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12510:5328":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:6513:6298":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:42156:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"28:632:4540":{"crate_id":28,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:3470:2777":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12784:4252":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"25:1654:4943":{"crate_id":25,"path":["regex","exec","ExecNoSyncStr"],"kind":"struct"},"1:12104:408":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"9:486:21300":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:14904:5807":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"11:2151:6643":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:4543:8832":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"0:404:2214":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Micros"],"kind":"variant"},"25:2432:5008":{"crate_id":25,"path":["regex","re_set","bytes","RegexSet"],"kind":"struct"},"2:43176:2826":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:11099:6926":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:41100:4411":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6059:9221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:4449:2757":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:15842:5376":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:9891:22361":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"25:2487:4999":{"crate_id":25,"path":["regex","re_trait","CaptureMatches"],"kind":"struct"},"5:2975:9493":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12432:5325":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"6:6047:9216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:9174:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:6879:6362":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"18:660:4560":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:3217:4803":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:6944:35756":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5152:9086":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:14057:5556":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:8207:2880":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:6228:4023":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:3190:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"11:883:6641":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:5574:4307":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:23895:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"20:0:1966":{"crate_id":20,"path":["log"],"kind":"module"},"28:681:4147":{"crate_id":28,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12600:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"22:99:2536":{"crate_id":22,"path":["humantime","date","format_rfc3339_seconds"],"kind":"function"},"17:12077:5285":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"29:518:3524":{"crate_id":29,"path":["anstream","strip","StripStream"],"kind":"struct"},"5:683:257":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"28:731:35772":{"crate_id":28,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:4449:8788":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6682:9320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:8050:6533":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:10724:7359":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:1791:2586":{"crate_id":2,"path":["core","mem","take"],"kind":"function"},"1:3305:2580":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:4777:726":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:12077:10045":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:7782:6485":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"26:2087:4696":{"crate_id":26,"path":["regex_syntax","hir","literal","Literals"],"kind":"struct"},"2:48637:7192":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:10812:3438":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"25:1492:4199":{"crate_id":25,"path":["regex","compile","SuffixCacheKey"],"kind":"struct"},"1:4981:10181":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:5512:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:47263:7127":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:5696:22310":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:42782:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"26:2423:3911":{"crate_id":26,"path":["regex_syntax","hir","Group"],"kind":"struct"},"25:1545:233":{"crate_id":25,"path":["regex","dfa","Result"],"kind":"enum"},"1:2666:4000":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:4053:6179":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:4887:10141":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"26:1167:4721":{"crate_id":26,"path":["regex_syntax","ast","parse","NestLimiter"],"kind":"struct"},"2:2540:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:44128:7032":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:41405:2856":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:16098:6116":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:15329:5901":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:3600:6173":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"27:1147:4619":{"crate_id":27,"path":["aho_corasick","dfa","Premultiplied"],"kind":"struct"},"6:4488:8808":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:8344:7224":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:45052:9638":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:5995:4292":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:34328:15513":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:4800:8911":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:5026:2883":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:3196:35446":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:10941:5169":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:8546:7327":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"26:1720:4798":{"crate_id":26,"path":["regex_syntax","ast","ClassSetUnion"],"kind":"struct"},"29:346:4137":{"crate_id":29,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"17:14765:5758":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:44375:7050":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:945:6640":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:40190:6978":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:15037:5823":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:1501:8578":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"28:0:2628":{"crate_id":28,"path":["memchr"],"kind":"module"},"2:40837:6985":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:23705:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:0:540":{"crate_id":2,"path":["core"],"kind":"module"},"2:42510:3013":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"26:1296:4695":{"crate_id":26,"path":["regex_syntax","ast","Position"],"kind":"struct"},"6:596:8572":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"22:164:129":{"crate_id":22,"path":["humantime","wrapper","Duration"],"kind":"struct"},"18:719:4574":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:2569:6740":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:482:4012":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12202:22504":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"15:288:21404":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:46793:7114":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:1151:35313":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:5992:9179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:13976:5545":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:8181:4362":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:5962:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:6889:9417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:14282:5606":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:13347:4010":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12180:5296":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:48295:7185":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"11:299:9624":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"26:2115:4722":{"crate_id":26,"path":["regex_syntax","hir","print","Printer"],"kind":"struct"},"26:2277:3906":{"crate_id":26,"path":["regex_syntax","hir","Literal"],"kind":"enum"},"1:12124:1650":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:5322:6203":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"25:2096:4996":{"crate_id":25,"path":["regex","re_builder","bytes","RegexBuilder"],"kind":"struct"},"2:2715:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:6804:9363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"27:1586:4543":{"crate_id":27,"path":["aho_corasick","prefilter","PrefilterState"],"kind":"struct"},"18:690:4569":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4523:8822":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:5798:4312":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:11387:7366":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4814:8917":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:10788:3437":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:4445:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:10657:4218":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:21352:32385":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:2321:6137":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7613:6481":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"26:1549:26553":{"crate_id":26,"path":["regex_syntax","ast","ClassAsciiKind"],"kind":"enum"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:5068:9046":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:7388:9463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:9488:7259":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:3265:2874":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"27:1080:2411":{"crate_id":27,"path":["aho_corasick","buffer","Buffer"],"kind":"struct"},"10:0:2621":{"crate_id":10,"path":["adler"],"kind":"module"},"16:3232:6136":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:15212:5870":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:1975:713":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:867:4396":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:9481:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:1527:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:42665:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:14662:5672":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:527:8535":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11168:22411":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:44821:7069":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"18:681:4567":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"11:1910:4802":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:3251:4692":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:1900:15540":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:2788:6157":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:12029:5283":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:8942:7239":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:6691:9326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"0:399:1960":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision"],"kind":"enum"},"2:9944:2448":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"26:2614:26587":{"crate_id":26,"path":["regex_syntax","utf8","Utf8Sequence"],"kind":"enum"},"2:43169:2825":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:4388:8747":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:6609:2953":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:34501:15514":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:1496:8576":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:42326:32671":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:38764:15519":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:7650:4030":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:15079:5837":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"24:41:2293":{"crate_id":24,"path":["env_filter","filter","Filter"],"kind":"struct"},"25:1473:4197":{"crate_id":25,"path":["regex","compile","SuffixCacheEntry"],"kind":"struct"},"1:10282:27764":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:2284:21423":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:4967:426":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:34073:15511":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"27:929:26591":{"crate_id":27,"path":["aho_corasick","state_id","StateID"],"kind":"trait"},"26:1602:26554":{"crate_id":26,"path":["regex_syntax","ast","ClassUnicodeKind"],"kind":"enum"},"25:2062:4193":{"crate_id":25,"path":["regex","re_builder","RegexOptions"],"kind":"struct"},"23:174:3718":{"crate_id":23,"path":["anstyle","color","Color"],"kind":"enum"},"16:2744:6155":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:14208:5595":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"11:1917:4803":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"27:1651:4682":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesTwo"],"kind":"struct"},"16:4862:6194":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:41021:3989":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:7702:9488":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:3584:5045":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:40129:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:7325:15503":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"25:1452:36196":{"crate_id":25,"path":["regex","compile","InstHole"],"kind":"enum"},"17:12324:5311":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:9943:22364":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"23:388:4209":{"crate_id":23,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"1:5497:7236":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:15868:6043":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:22733:6950":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"25:2559:5005":{"crate_id":25,"path":["regex","re_unicode","SubCaptureMatches"],"kind":"struct"},"27:1315:26590":{"crate_id":27,"path":["aho_corasick","packed","api","MatchKind"],"kind":"enum"},"27:1342:36909":{"crate_id":27,"path":["aho_corasick","packed","api","ForceAlgorithm"],"kind":"enum"},"6:7371:9454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:5866:6227":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:4769:10155":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:6189:6272":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10962:5172":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:9142:4589":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:48646:7193":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:12127:1649":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"14:187:21392":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:8290:2854":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:6425:6294":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:42213:10122":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5928:9145":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:41087:2855":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:2554:35740":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:11958:5279":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:12474:4218":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"26:1623:26555":{"crate_id":26,"path":["regex_syntax","ast","ClassUnicodeOpKind"],"kind":"enum"},"27:1644:4680":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesOne"],"kind":"struct"},"27:1637:4173":{"crate_id":27,"path":["aho_corasick","prefilter","RareByteOffset"],"kind":"struct"},"13:226:4368":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:15160:5854":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"32:21:2563":{"crate_id":32,"path":["colorchoice","ColorChoice"],"kind":"enum"},"6:4401:8757":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:21549:10241":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:1596:4802":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:6781:9356":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:7294:6739":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:10211:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"25:2229:5000":{"crate_id":25,"path":["regex","re_bytes","SplitN"],"kind":"struct"},"17:13809:5521":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:13167:33430":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:31222:32693":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:13235:4261":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"26:1671:26544":{"crate_id":26,"path":["regex_syntax","ast","ClassSetItem"],"kind":"enum"},"25:987:26534":{"crate_id":25,"path":["regex","re_bytes","Replacer"],"kind":"trait"},"1:7925:4458":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:6496:2949":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:21675:10242":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:7604:9466":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:13386:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:5588:6163":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"27:1604:4674":{"crate_id":27,"path":["aho_corasick","prefilter","Packed"],"kind":"struct"},"1:8898:7335":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:7621:22320":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:10984:4036":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:1131:34279":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"25:2581:4998":{"crate_id":25,"path":["regex","re_unicode","Matches"],"kind":"struct"},"6:4914:8964":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"27:1568:36912":{"crate_id":27,"path":["aho_corasick","prefilter","Candidate"],"kind":"enum"},"9:357:21316":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:47623:7148":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"11:774:4396":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:48543:7189":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"7:78:21294":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:8928:7337":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"23:353:3722":{"crate_id":23,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"1:12122:802":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"25:2238:5003":{"crate_id":25,"path":["regex","re_bytes","CaptureNames"],"kind":"struct"},"2:46362:7092":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:12123:1653":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"27:1495:4655":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask256"],"kind":"struct"},"17:10726:35763":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:40085:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:2670:6152":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:14296:5608":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"27:1094:4613":{"crate_id":27,"path":["aho_corasick","classes","ByteClassRepresentatives"],"kind":"struct"},"1:4766:10182":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:44547:7054":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:4381:3959":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:2724:265":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:5727:4311":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12264:5308":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"26:2186:135":{"crate_id":26,"path":["regex_syntax","hir","Error"],"kind":"struct"},"16:5963:6235":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:5030:10187":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:10002:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:46563:7100":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"26:2323:4852":{"crate_id":26,"path":["regex_syntax","hir","ClassUnicodeIter"],"kind":"struct"},"2:41208:6891":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:10004:2823":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:4666:8877":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:9096:4459":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:15680:6013":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"26:1504:4775":{"crate_id":26,"path":["regex_syntax","ast","ClassPerl"],"kind":"struct"},"1:0:1540":{"crate_id":1,"path":["std"],"kind":"module"},"2:21995:32389":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"24:97:3330":{"crate_id":24,"path":["env_filter","op","FilterOp"],"kind":"struct"},"17:15200:5864":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:7306:3952":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:9493:4033":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:595:5035":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:3667:3952":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"11:844:10057":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"25:2437:5009":{"crate_id":25,"path":["regex","re_set","bytes","SetMatches"],"kind":"struct"},"23:340:3721":{"crate_id":23,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"6:5111:9071":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:16160:6127":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:1914:9497":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:12055:7372":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"28:824:4570":{"crate_id":28,"path":["memchr","memmem","Searcher"],"kind":"struct"},"11:1566:21380":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:41138:2293":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:8355:3440":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:15546:5977":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:880:4397":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:42640:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:5812:2944":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:1913:17254":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:6083:21422":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"18:564:4147":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:511:5034":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"28:788:4566":{"crate_id":28,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13516:5461":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:1789:3966":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:14312:5612":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:8370:7308":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:3003:3291":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:6114:9243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:46318:7090":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"27:1622:4594":{"crate_id":27,"path":["aho_corasick","prefilter","ByteSet"],"kind":"struct"},"2:41179:6885":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"25:1518:4927":{"crate_id":25,"path":["regex","dfa","CacheInner"],"kind":"struct"},"17:12290:5309":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:44727:7059":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:4060:10131":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:5698:4024":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"26:2404:4808":{"crate_id":26,"path":["regex_syntax","hir","WordBoundary"],"kind":"enum"},"25:1906:4465":{"crate_id":25,"path":["regex","pikevm","Cache"],"kind":"struct"},"1:1578:3344":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"18:481:4541":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"28:777:4560":{"crate_id":28,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11215:5190":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:6012:9195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:7450:4115":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:5816:4317":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:281:2188":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:5974:9167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"29:181:10112":{"crate_id":29,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"26:2119:2088":{"crate_id":26,"path":["regex_syntax","hir","print","Writer"],"kind":"struct"},"2:32929:3295":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:9048:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:42485:3437":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:22316:10332":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"11:364:3923":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"11:2140:6642":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:44933:7079":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:256:5029":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:10711:7260":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:41051:2884":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:11364:4038":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:4297:7225":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"14:165:21385":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:7568:4352":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:46670:7105":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:22193:10327":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:7556:9464":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:41231:4417":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:13407:5429":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:16076:6110":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"26:2455:3910":{"crate_id":26,"path":["regex_syntax","hir","Repetition"],"kind":"struct"},"17:13909:5535":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:3046:15522":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:5130:9080":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:7616:9468":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"22:157:2927":{"crate_id":22,"path":["humantime","duration","FormattedDuration"],"kind":"struct"},"1:6037:4024":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:12561:15389":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:7965:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:3346:2873":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13663:5497":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:7859:15500":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"28:872:4580":{"crate_id":28,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:14221:5596":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4939:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:2847:6754":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:11632:5225":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:4449:7227":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:10892:7237":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:11631:6929":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"25:2363:5012":{"crate_id":25,"path":["regex","re_set","unicode","SetMatchesIter"],"kind":"struct"},"25:1754:2766":{"crate_id":25,"path":["regex","expand","Ref"],"kind":"enum"},"2:23424:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:13419:5430":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:44493:7053":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:46492:7097":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:15337:5903":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"25:1582:4201":{"crate_id":25,"path":["regex","dfa","EmptyFlags"],"kind":"struct"},"17:12445:5326":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:13202:4255":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:3012:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:13219:6945":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:13724:5509":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:12572:5332":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:9043:4450":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:11369:5201":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"26:1885:26545":{"crate_id":26,"path":["regex_syntax","ast","GroupKind"],"kind":"enum"},"26:1402:3906":{"crate_id":26,"path":["regex_syntax","ast","Literal"],"kind":"struct"},"2:45318:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:5910:9135":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"26:2553:4088":{"crate_id":26,"path":["regex_syntax","parser","Parser"],"kind":"struct"},"5:7491:32696":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:46909:7117":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"20:352:2086":{"crate_id":20,"path":["log","SetLoggerError"],"kind":"struct"},"17:15117:5846":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:3548:2448":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:11459:5208":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:1691:8698":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:7102:22318":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:12273:5345":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"25:1561:4629":{"crate_id":25,"path":["regex","dfa","State"],"kind":"struct"},"2:39343:15520":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:2062:6725":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:12659:22362":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:15062:5832":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:830:3939":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:1581:3952":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:856:6638":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6017:22312":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:9164:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:2961:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:14778:5765":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:12088:26956":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:2971:2773":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:1923:6750":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:9651:22375":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:43018:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11041:4218":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:4629:2770":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"25:178:4870":{"crate_id":25,"path":["regex","compile","ByteClassSet"],"kind":"struct"},"5:2144:3067":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:11307:5199":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10293:2857":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"26:1850:26547":{"crate_id":26,"path":["regex_syntax","ast","RepetitionRange"],"kind":"enum"},"17:11155:5184":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:7824:3472":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:6927:9436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:15101:5843":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"23:397:2435":{"crate_id":23,"path":["anstyle","style","Style"],"kind":"struct"},"2:40946:6992":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:2341:643":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4461:8793":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"29:486:2411":{"crate_id":29,"path":["anstream","buffer","Buffer"],"kind":"struct"},"17:11052:5157":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:15943:5394":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"11:1883:3437":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"26:2665:4868":{"crate_id":26,"path":["regex_syntax","utf8","Utf8Sequences"],"kind":"struct"},"1:8920:3437":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"27:1399:4651":{"crate_id":27,"path":["aho_corasick","packed","pattern","PatternIter"],"kind":"struct"},"2:41256:4557":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:557:3074":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:12999:5358":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:1685:3933":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:7206:31307":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:12828:5345":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:41429:6898":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"25:1642:4940":{"crate_id":25,"path":["regex","exec","Exec"],"kind":"struct"},"2:43405:2814":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:6600:22315":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:2169:22439":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:4108:10134":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:7507:6744":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:22969:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:1516:4399":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5969:9166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"28:836:4574":{"crate_id":28,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13707:5506":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:2418:2312":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:7599:5035":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:119:15905":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"17:14346:5625":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:13395:5428":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:44529:4998":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:7432:6740":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:9459:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:8523:4629":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:41240:6893":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:4701:9347":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:4183:6878":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:15279:5889":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:6718:9336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:1301:6642":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:7041:6381":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:6711:9332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"11:2124:6389":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:14950:5816":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:3010:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9198:2532":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:3082:6404":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:5878:3952":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:46514:7098":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:12191:5297":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:11657:5229":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"3:0:485":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"26:2367:4190":{"crate_id":26,"path":["regex_syntax","hir","ClassBytesRange"],"kind":"struct"},"17:10337:4215":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"29:370:4139":{"crate_id":29,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"1:2688:2859":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"27:1023:4603":{"crate_id":27,"path":["aho_corasick","ahocorasick","StreamChunkIter"],"kind":"struct"},"6:5829:9090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:5612:6165":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"27:1690:4690":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesThree"],"kind":"struct"},"17:12746:4251":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:8205:22323":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"26:2436:26545":{"crate_id":26,"path":["regex_syntax","hir","GroupKind"],"kind":"enum"},"17:10608:5156":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:21338:32379":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"25:2005:4990":{"crate_id":25,"path":["regex","prog","InstEmptyLook"],"kind":"struct"},"1:8473:7324":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"26:1998:26567":{"crate_id":26,"path":["regex_syntax","either","Either"],"kind":"enum"},"17:9860:22380":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:16123:6121":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:6658:9303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:4557:6185":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:7733:2109":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:11590:7222":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:40941:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:2810:6158":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:149:3918":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"25:1398:4465":{"crate_id":25,"path":["regex","backtrack","Cache"],"kind":"struct"},"17:13948:5540":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:5384:22309":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"11:837:6635":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:41615:6900":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:47837:7151":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10785:35767":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:5819:2945":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:2446:10109":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:2969:21451":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:23333:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:2864:6160":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"26:1131:4716":{"crate_id":26,"path":["regex_syntax","ast","parse","ParserI"],"kind":"struct"},"17:15961:5404":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:44599:7056":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:7544:6479":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"25:2012:4921":{"crate_id":25,"path":["regex","prog","EmptyLook"],"kind":"enum"},"1:10522:3077":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:5481:7235":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:4928:5052":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:12357:6920":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:6260:4454":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:34847:6408":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"25:1889:4973":{"crate_id":25,"path":["regex","literal","imp","Memmem"],"kind":"struct"},"17:11714:5237":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:9998:2825":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:44447:6925":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5123:9077":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:7096:4028":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"26:1144:26565":{"crate_id":26,"path":["regex_syntax","ast","parse","GroupState"],"kind":"enum"},"1:640:7212":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:5891:9133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:644:4542":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6721:22316":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:11439:5206":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:10172:4237":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:4116:10136":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13436:5438":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:489:8513":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4764:8896":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:7523:6478":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:40859:6987":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"25:2119:4996":{"crate_id":25,"path":["regex","re_builder","unicode","RegexBuilder"],"kind":"struct"},"6:1596:8633":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12560:5331":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:2795:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:40012:6973":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"27:1188:2109":{"crate_id":27,"path":["aho_corasick","dfa","Builder"],"kind":"struct"}},"external_crates":{"31":{"name":"utf8parse","html_root_url":null},"28":{"name":"memchr","html_root_url":null},"25":{"name":"regex","html_root_url":null},"22":{"name":"humantime","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"colorchoice","html_root_url":null},"29":{"name":"anstream","html_root_url":null},"26":{"name":"regex_syntax","html_root_url":null},"23":{"name":"anstyle","html_root_url":null},"20":{"name":"log","html_root_url":"https://docs.rs/log/0.4.17/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"anstyle_query","html_root_url":null},"30":{"name":"anstyle_parse","html_root_url":null},"27":{"name":"aho_corasick","html_root_url":null},"24":{"name":"env_filter","html_root_url":null},"21":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}