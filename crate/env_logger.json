{"root":"0:0:2042","crate_version":"0.11.2","includes_private":false,"index":{"5:5613:2951":{"id":"5:5613:2951","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2385-0:355:248":{"id":"b:2:2385-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2387:2155"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:407":{"id":"0:407","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[65,9],"end":[65,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2878:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12989:35002":{"id":"2:12989:35002","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:380":{"id":"0:380","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31761:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:405:2293":{"id":"0:405:2293","crate_id":0,"name":"Nanos","span":{"filename":"src/fmt/mod.rs","begin":[74,4],"end":[74,9]},"visibility":"default","docs":"Nanosecond precision (9 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2385-0:324:2185":{"id":"b:2:2385-0:324:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2387:2155"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:68:2241":{"id":"0:68:2241","crate_id":0,"name":"from_default_env","span":{"filename":"src/logger.rs","begin":[588,4],"end":[590,5]},"visibility":"public","docs":"Creates the logger from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The logger will use the\n[default environment variables].\n\n# Examples\n\nCreates a logger using the default environment variables:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_default_env();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[793,0],"end":[800,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:105:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:411:757":{"id":"0:411:757","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[65,22],"end":[65,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2660-0:398:2040":{"id":"b:2:2660-0:398:2040","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2663:2230"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13002:27832":{"id":"2:13002:27832","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:4670"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:15423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:1109":{"id":"0:82:1109","crate_id":0,"name":"new","span":{"filename":"src/logger.rs","begin":[701,4],"end":[703,5]},"visibility":"public","docs":"Get a default set of environment variables.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2385-0:365:2041":{"id":"b:2:2385-0:365:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2387:2155"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:57:2340":{"id":"0:57:2340","crate_id":0,"name":"build","span":{"filename":"src/logger.rs","begin":[487,4],"end":[496,5]},"visibility":"public","docs":"Build an env logger.\n\nThe returned logger implements the `Log` trait and can be installed manually\nor nested within another logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12908:27785":{"id":"2:12908:27785","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41272:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:27830":{"id":"2:12935:27830","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:4670"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:15423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13021:27704":{"id":"2:13021:27704","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:41326"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2385-0:156:2490":{"id":"b:2:2385-0:156:2490","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2387:2155"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:93:2418":{"id":"0:93:2418","crate_id":0,"name":"write_style_or","span":{"filename":"src/logger.rs","begin":[757,4],"end":[765,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["write_style_env",{"generic":"E"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2660-0:336:2216":{"id":"b:2:2660-0:336:2216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2663:2230"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:83:2186":{"id":"0:83:2186","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[706,4],"end":[713,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["filter_env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:385:2633":{"id":"0:385:2633","crate_id":0,"name":"Auto","span":{"filename":"src/fmt/writer/mod.rs","begin":[16,4],"end":[16,8]},"visibility":"default","docs":"Try to print styles, but don't force the issue.","links":{},"attrs":["#[default]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:2883:246-0:365:2041":{"id":"a:2:2883:246-0:365:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:247:144":{"id":"0:247:144","crate_id":0,"name":"Formatter","span":{"filename":"src/fmt/mod.rs","begin":[104,0],"end":[107,1]},"visibility":"public","docs":"A formatter to write logs into.\n\n`Formatter` implements the standard [`Write`] trait for writing log records.\nIt also supports terminal styling using ANSI escape codes.\n\n# Examples\n\nUse the [`writeln`] macro to format a log record.\nAn instance of a `Formatter` is passed to an `env_logger` format as `buf`:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}: {}\", record.level(), record.args()));\n```\n\n[`Write`]: std::io::Write\n[`writeln`]: std::writeln","links":{"std::io::Write":"1:3575:2528","std::writeln":"2:16:2802"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:150","0:255","a:2:2883:246-0:247:144","a:2:41395:2975-0:247:144","a:2:31816:3039-0:247:144","a:2:31759:237-0:247:144","a:2:41394:2976-0:247:144","b:2:2670-0:247:144","b:2:2675-0:247:144","b:2:2385-0:247:144","b:2:2388-0:247:144","b:2:2664-0:247:144","b:2:3496-0:247:144","b:2:2660-0:247:144","0:257","0:260"]}}},"2:12923:3796":{"id":"2:12923:3796","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43139:2930","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12893":{"id":"2:12893","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12894:943","2:12895:3422","2:12896:34988","2:12897:34989","2:12899:34990","2:12902:2583","2:12903:34991","2:12904:334","2:12905:27788","2:12906:2415","2:12908:27785","2:12910:27786","2:12912:27787","2:12914:34992","2:12915:34993","2:12916:27811","2:12917:27812","2:12918:27815","2:12919:27816","2:12921:6841","2:12922:6979","2:12923:3796","2:12924:33636","2:12925:33642","2:12926:3788","2:12927:34994","2:12928:33634","2:12929:27828","2:12932:27829","2:12935:27830","2:12938:3460","2:12942:3421","2:12946:2573","2:12949:27818","2:12952:27820","2:12955:34995","2:12958:34996","2:12961:27822","2:12964:27824","2:12967:27826","2:12970:27827","2:12973:2386","2:12976:34997","2:12979:34998","2:12982:34999","2:12985:35000","2:12987:35001","2:12989:35002","2:12991:35003","2:12992:35004","2:12993:35005","2:12996:35006","2:12999:27831","2:13002:27832","2:13005:35007","2:13008:35008","2:13011:35009","2:13014:2314","2:13016:27514","2:13017:27701","2:13018:2863","2:13019:27511","2:13020:27510","2:13021:27704","2:13022:27705","2:13023:27706","2:13024:35010","2:13026:10055","2:13027:27138"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102:786":{"id":"0:102:786","crate_id":0,"name":"from","span":{"filename":"src/logger.rs","begin":[788,4],"end":[790,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["filter_env",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2670-0:336:2216":{"id":"b:2:2670-0:336:2216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2673:138","2:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41394:2976-0:365:2041":{"id":"a:2:41394:2976-0:365:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41394:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:398:2040":{"id":"b:5:725-0:398:2040","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:2825","5:728:2423","5:729:3480"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12902:2583":{"id":"2:12902:2583","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12132:2582"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223:786":{"id":"0:223:786","crate_id":0,"name":"from","span":{"filename":"src/fmt/writer/mod.rs","begin":[37,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["choice",{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2675-0:324:2185":{"id":"b:2:2675-0:324:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2678:138","2:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31816:3039-0:398:2040":{"id":"a:2:31816:3039-0:398:2040","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31816:3039","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:77:2398":{"id":"0:77:2398","crate_id":0,"name":"flush","span":{"filename":"src/logger.rs","begin":[672,4],"end":[672,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245":{"id":"0:245","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[78,0],"end":[82,1]},"visibility":"default","docs":"The default timestamp precision is seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:246:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:121:2442":{"id":"0:121:2442","crate_id":0,"name":"init_from_env","span":{"filename":"src/logger.rs","begin":[923,0],"end":[929,1]},"visibility":"public","docs":"Initializes the global logger with an env logger from the given environment\nvariables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::init_from_env(env);\n```\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/target.rs","begin":[14,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:212:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12970:27827":{"id":"2:12970:27827","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:15423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[784,0],"end":[791,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::borrow::Cow","id":"5:730:120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:102:786"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:336:2216":{"id":"0:336:2216","crate_id":0,"name":"Env","span":{"filename":"src/logger.rs","begin":[694,0],"end":[697,1]},"visibility":"public","docs":"Set of environment variables to configure from.\n\n# Default environment variables\n\nBy default, the `Env` will read the following environment variables:\n\n- `RUST_LOG`: the level filter\n- `RUST_LOG_STYLE`: whether or not to print styles with records.\n\nThese sources can be configured using the builder methods on `Env`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:80","a:2:2883:246-0:336:2216","a:2:41395:2975-0:336:2216","a:2:31816:3039-0:336:2216","a:2:31759:237-0:336:2216","a:2:41394:2976-0:336:2216","b:2:2670-0:336:2216","b:2:2675-0:336:2216","b:2:2385-0:336:2216","b:2:2388-0:336:2216","b:2:2664-0:336:2216","b:2:3496-0:336:2216","b:2:2660-0:336:2216","0:340","0:99","0:103"]}}},"b:2:2388-0:398:2040":{"id":"b:2:2388-0:398:2040","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2390:2510"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12925:33642":{"id":"2:12925:33642","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12924:33636"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43436:6970","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2660-0:247:144":{"id":"b:2:2660-0:247:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2663:2230"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12942:3421":{"id":"2:12942:3421","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41272:191","prim@char":"1:12254:455","self::pattern":"2:12584:4670"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:15423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2564":{"id":"0:155:2564","crate_id":0,"name":"timestamp_nanos","span":{"filename":"src/fmt/humantime.rs","begin":[64,4],"end":[69,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nnanosecond precision.","links":{"`Timestamp`":"0:156:2490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[675,0],"end":[681,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[604,0],"end":[673,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Log","id":"20:151:2159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:72:2388","0:73:2046","0:77:2398"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31759:237-0:336:2216":{"id":"a:2:31759:237-0:336:2216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:153:2562":{"id":"0:153:2562","crate_id":0,"name":"timestamp_millis","span":{"filename":"src/fmt/humantime.rs","begin":[46,4],"end":[51,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmillisecond precision.","links":{"`Timestamp`":"0:156:2490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12928:33634":{"id":"2:12928:33634","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43445:6840","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2660-0:365:2041":{"id":"b:2:2660-0:365:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2663:2230"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:169:757":{"id":"0:169:757","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/humantime.rs","begin":[101,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:3460":{"id":"2:12938:3460","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41272:191","prim@char":"1:12254:455","self::pattern":"2:12584:4670"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[10,0],"end":[70,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::fmt::Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:2281","0:152:2561","0:153:2562","0:154:2563","0:155:2564"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31759:237-0:324:2185":{"id":"a:2:31759:237-0:324:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:33:2247":{"id":"0:33:2247","crate_id":0,"name":"parse_default_env","span":{"filename":"src/logger.rs","begin":[210,4],"end":[212,5]},"visibility":"public","docs":"Applies the configuration from the environment using default variable names.\n\nThis method is a convenient way to call `parse_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger with filter level `Off`, then configure it using the\ndefault environment variables:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31759:237-0:247:144":{"id":"a:2:31759:237-0:247:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:31759:237-0:60:2353":{"id":"a:2:31759:237-0:60:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12912:27787":{"id":"2:12912:27787","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2292":{"id":"0:45:2292","crate_id":0,"name":"format_timestamp_nanos","span":{"filename":"src/logger.rs","begin":[306,4],"end":[308,5]},"visibility":"public","docs":"Configures the timestamp to use nanosecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41394:2976-0:355:248":{"id":"a:2:41394:2976-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41394:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12992:35004":{"id":"2:12992:35004","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:365:2041":{"id":"b:5:725-0:365:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:2825","5:728:2423","5:729:3480"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13018:2863":{"id":"2:13018:2863","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2674:1692":{"id":"2:2674:1692","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2327":{"id":"0:91:2327","crate_id":0,"name":"write_style","span":{"filename":"src/logger.rs","begin":[745,4],"end":[752,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["write_style_env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:27513":{"id":"5:5614:27513","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13019:27511"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:2327":{"id":"0:52:2327","crate_id":0,"name":"write_style","span":{"filename":"src/logger.rs","begin":[424,4],"end":[427,5]},"visibility":"public","docs":"Sets whether or not styles will be written.\n\nThis can be useful in environments that don't support control characters\nfor setting colors.\n\n# Examples\n\nNever attempt to write styles:\n\n```\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder.write_style(WriteStyle::Never);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write_style",{"resolved_path":{"name":"fmt::WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2305":{"id":"0:48:2305","crate_id":0,"name":"filter_level","span":{"filename":"src/logger.rs","begin":[349,4],"end":[352,5]},"visibility":"public","docs":"Adds a directive to the filter for all modules.\n\n# Examples\n\nOnly include messages for info and above for logs globally:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:218:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2675-0:365:2041":{"id":"b:2:2675-0:365:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2678:138","2:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3496-0:355:248":{"id":"b:2:3496-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:50:2232":{"id":"0:50:2232","crate_id":0,"name":"parse_filters","span":{"filename":"src/logger.rs","begin":[380,4],"end":[383,5]},"visibility":"public","docs":"Parses the directives string in the same form as the `RUST_LOG`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["filters",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[131,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:256:2514"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13019:27511":{"id":"2:13019:27511","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2675-0:247:144":{"id":"b:2:2675-0:247:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2678:138","2:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3496-0:398:2040":{"id":"b:2:3496-0:398:2040","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41395:2975-0:60:2353":{"id":"a:2:41395:2975-0:60:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41395:2975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2660-0:355:248":{"id":"b:2:2660-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2663:2230"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:41:2280":{"id":"0:41:2280","crate_id":0,"name":"format_timestamp","span":{"filename":"src/logger.rs","begin":[285,4],"end":[288,5]},"visibility":"public","docs":"Configures if timestamp should be included and in what precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["timestamp",{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"fmt::TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2675-0:398:2040":{"id":"b:2:2675-0:398:2040","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2678:138","2:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41395:2975-0:247:144":{"id":"a:2:41395:2975-0:247:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41395:2975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:13024:35010":{"id":"2:13024:35010","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4680:35010"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43452:6893","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5595":{"id":"5:5595","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5596:35704","5:5597:2533","5:5600:35705","5:5603:35706","5:5611:35707","5:5612:35708","5:5613:2951","5:5614:27513","5:5615:27512"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:79:757":{"id":"0:79:757","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[676,4],"end":[680,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:729:3480":{"id":"5:729:3480","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[164,0],"end":[172,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:261:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12910:27786":{"id":"2:12910:27786","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[693,9],"end":[693,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:342:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13022:27705":{"id":"2:13022:27705","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:41326"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[154,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","by_ref","write_vectored","write_all","write_all_vectored","write_fmt"],"trait":{"name":"Write","id":"1:3575:2528","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:258:2270","0:259:2398"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,16],"end":[12,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2878:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:49:2186":{"id":"0:49:2186","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[371,4],"end":[374,5]},"visibility":"public","docs":"Adds filters to the logger.\n\nThe given module (if any) will log at most the specified level provided.\nIf no module is provided then the filter will apply to all log messages.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter(Some(\"path::to::module\"), LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["module",{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:218:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44:2289":{"id":"0:44:2289","crate_id":0,"name":"format_timestamp_micros","span":{"filename":"src/logger.rs","begin":[301,4],"end":[303,5]},"visibility":"public","docs":"Configures the timestamp to use microsecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2666:786":{"id":"2:2666:786","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2387:2155":{"id":"2:2387:2155","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2427":{"id":"0:118:2427","crate_id":0,"name":"try_init_from_env","span":{"filename":"src/logger.rs","begin":[891,0],"end":[898,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger from the given\nenvironment variables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\n# fn run() -> Result<(), Box<dyn ::std::error::Error>> {\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::try_init_from_env(env)?;\n\nOk(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"log::SetLoggerError","id":"20:344:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41395:2975-0:355:248":{"id":"a:2:41395:2975-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41395:2975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:322-0:365:2041":{"id":"0:322-0:365:2041","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[274,48],"end":[274,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::WriteStyle","name":"WriteStyle","id":"0:365:2041","glob":false}}},"0:65:2213":{"id":"0:65:2213","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[564,4],"end":[569,5]},"visibility":"public","docs":"Creates the logger from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nCreate a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_env(\"MY_LOG\");\n```\n\nCreate a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Logger, Env};\n\nlet env = Env::new().filter_or(\"MY_LOG\", \"info\").write_style_or(\"MY_LOG_STYLE\", \"always\");\n\nlet logger = Logger::from_env(env);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2670-0:247:144":{"id":"b:2:2670-0:247:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2673:138","2:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:128:757":{"id":"0:128:757","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[1,0],"end":[714,1]},"visibility":"public","docs":"Formatting for log records.\n\nThis module contains a [`Formatter`] that can be used to format log records\ninto without needing temporary allocations. Usually you won't need to worry\nabout the contents of this module and can use the `Formatter` like an ordinary\n[`Write`].\n\n# Formatting log records\n\nThe format used to print log records can be customised using the [`Builder::format`]\nmethod.\n\nTerminal styling is done through ANSI escape codes and will be adapted to the capabilities of\nthe target stream.\nFor example, you could use one of:\n- [anstyle](https://docs.rs/anstyle) is a minimal, runtime string styling API and is re-exported as [`style`]\n- [owo-colors](https://docs.rs/owo-colors) is a feature rich runtime string styling API\n- [color-print](https://docs.rs/color-print) for feature-rich compile-time styling API\nSee also [`Formatter::default_level_style`]\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    writeln!(buf, \"{}: {}\",\n        record.level(),\n        record.args())\n});\n```\n\n[`Builder::format`]: crate::Builder::format\n[`Write`]: std::io::Write","links":{"`Formatter`":"0:247:144","crate::Builder::format":"0:34:770","std::io::Write":"1:3575:2528","`style`":"23:0:2044","`Formatter::default_level_style`":"0:256:2514"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:238-23:0:2044","0:239-0:156:2490","0:240-0:355:248","0:241-0:365:2041","0:398:2040","0:247:144"],"is_stripped":false}}},"a:2:41394:2976-0:60:2353":{"id":"a:2:41394:2976-0:60:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41394:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12903:34991":{"id":"2:12903:34991","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,33],"end":[12,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10236:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:378:824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:371:459":{"id":"0:371:459","crate_id":0,"name":"clone","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41394:2976-0:324:2185":{"id":"a:2:41394:2976-0:324:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41394:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2670-0:355:248":{"id":"b:2:2670-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2673:138","2:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:2490":{"id":"0:156:2490","crate_id":0,"name":"Timestamp","span":{"filename":"src/fmt/humantime.rs","begin":[78,0],"end":[81,1]},"visibility":"public","docs":"An [RFC3339] formatted timestamp.\n\nThe timestamp implements [`Display`] and can be written to a [`Formatter`].\n\n[RFC3339]: https://www.ietf.org/rfc/rfc3339.txt\n[`Display`]: std::fmt::Display","links":{"`Formatter`":"0:247:144","std::fmt::Display":"2:10025:130"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:2883:246-0:156:2490","a:2:41395:2975-0:156:2490","a:2:31816:3039-0:156:2490","a:2:31759:237-0:156:2490","a:2:41394:2976-0:156:2490","b:2:2670-0:156:2490","b:2:2675-0:156:2490","b:2:2385-0:156:2490","b:2:2388-0:156:2490","b:2:2664-0:156:2490","b:2:3496-0:156:2490","b:2:2660-0:156:2490","b:5:5844-0:156:2490","0:159","0:168"]}}},"0:151:2281":{"id":"0:151:2281","crate_id":0,"name":"timestamp","span":{"filename":"src/fmt/humantime.rs","begin":[28,4],"end":[33,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC.\n\n# Examples\n\nInclude the current timestamp with the log record:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    let ts = buf.timestamp();\n\n    writeln!(buf, \"{}: {}: {}\", ts, record.level(), record.args())\n});\n```","links":{"`Timestamp`":"0:156:2490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:2286":{"id":"0:43:2286","crate_id":0,"name":"format_timestamp_millis","span":{"filename":"src/logger.rs","begin":[296,4],"end":[298,5]},"visibility":"public","docs":"Configures the timestamp to use millisecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12906:2415":{"id":"2:12906:2415","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41272:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31816:3039-0:60:2353":{"id":"a:2:31816:3039-0:60:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31816:3039","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41395:2975-0:365:2041":{"id":"a:2:41395:2975-0:365:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41395:2975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:371:459"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:154:2563":{"id":"0:154:2563","crate_id":0,"name":"timestamp_micros","span":{"filename":"src/fmt/humantime.rs","begin":[55,4],"end":[60,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmicrosecond precision.","links":{"`Timestamp`":"0:156:2490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13017:27701":{"id":"2:13017:27701","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39243:3371","Self::is_ascii":"2:13016:27514"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39243:3371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31816:3039-0:156:2490":{"id":"a:2:31816:3039-0:156:2490","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31816:3039","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13026:10055":{"id":"2:13026:10055","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4681:10055"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43461:6775","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5596:35704":{"id":"5:5596:35704","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:2264","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:2295":{"id":"0:46:2295","crate_id":0,"name":"format_suffix","span":{"filename":"src/logger.rs","begin":[311,4],"end":[314,5]},"visibility":"public","docs":"Configures the end of line suffix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["suffix",{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2664-0:365:2041":{"id":"b:2:2664-0:365:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:321-0:398:2040":{"id":"0:321-0:398:2040","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[274,28],"end":[274,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::TimestampPrecision","name":"TimestampPrecision","id":"0:398:2040","glob":false}}},"0:0:2042":{"id":"0:0:2042","crate_id":0,"name":"env_logger","span":{"filename":"src/lib.rs","begin":[7,0],"end":[275,24]},"visibility":"public","docs":"A simple logger that can be configured via environment variables, for use\nwith the logging facade exposed by the [`log` crate][log-crate-url].\n\nDespite having \"env\" in its name, **`env_logger`** can also be configured by\nother means besides environment variables. See [the examples][gh-repo-examples]\nin the source repository for more approaches.\n\nBy default, `env_logger` writes logs to `stderr`, but can be configured to\ninstead write them to `stdout`.\n\n## Example\n\n```\nuse log::{debug, error, log_enabled, info, Level};\n\nenv_logger::init();\n\ndebug!(\"this is a debug {}\", \"message\");\nerror!(\"this is printed by default\");\n\nif log_enabled!(Level::Info) {\n    let x = 3 * 4; // expensive computation\n    info!(\"the answer was: {}\", x);\n}\n```\n\nAssumes the binary is `main`:\n\n```{.bash}\n$ RUST_LOG=error ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n```\n\n```{.bash}\n$ RUST_LOG=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\n```{.bash}\n$ RUST_LOG=debug ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nYou can also set the log level on a per module basis:\n\n```{.bash}\n$ RUST_LOG=main=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nAnd enable all logging:\n\n```{.bash}\n$ RUST_LOG=main ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nIf the binary name contains hyphens, you will need to replace\nthem with underscores:\n\n```{.bash}\n$ RUST_LOG=my_app ./my-app\n[2017-11-09T02:12:24Z DEBUG my_app] this is a debug message\n[2017-11-09T02:12:24Z ERROR my_app] this is printed by default\n[2017-11-09T02:12:24Z INFO my_app] the answer was: 12\n```\n\nThis is because Rust modules and crates cannot contain hyphens\nin their name, although `cargo` continues to accept them.\n\nSee the documentation for the [`log` crate][log-crate-url] for more\ninformation about its API.\n\n## Enabling logging\n\n**By default all logging is disabled except for the `error` level**\n\nThe **`RUST_LOG`** environment variable controls logging with the syntax:\n```text\nRUST_LOG=[target][=][level][,...]\n```\nOr in other words, its a comma-separated list of directives.\nDirectives can filter by **target**, by **level**, or both (using `=`).\n\nFor example,\n```text\nRUST_LOG=data=debug,hardware=debug\n```\n\n**target** is typically the path of the module the message\nin question originated from, though it can be overridden.\nThe path is rooted in the name of the crate it was compiled for, so if\nyour program is in a file called, for example, `hello.rs`, the path would\nsimply be `hello`.\n\nFurthermore, the log can be filtered using prefix-search based on the\nspecified log target.\n\nFor example, `RUST_LOG=example` would match the following targets:\n- `example`\n- `example::test`\n- `example::test::module::submodule`\n- `examples::and_more_examples`\n\nWhen providing the crate name or a module path, explicitly specifying the\nlog level is optional. If omitted, all logging for the item will be\nenabled.\n\n**level** is the maximum [`log::Level`][level-enum] to be shown and includes:\n- `error`\n- `warn`\n- `info`\n- `debug`\n- `trace`\n- `off` (pseudo level to disable all logging for the target)\n\nLogging level names are case-insensitive; e.g.,\n`debug`, `DEBUG`, and `dEbuG` all represent the same logging level. For\nconsistency, our convention is to use the lower case names. Where our docs\ndo use other forms, they do so in the context of specific examples, so you\nwon't be surprised if you see similar usage in the wild.\n\nSome examples of valid values of `RUST_LOG` are:\n\n- `RUST_LOG=hello` turns on all logging for the `hello` module\n- `RUST_LOG=trace` turns on all logging for the application, regardless of its name\n- `RUST_LOG=TRACE` turns on all logging for the application, regardless of its name (same as previous)\n- `RUST_LOG=info` turns on all info logging\n- `RUST_LOG=INFO` turns on all info logging (same as previous)\n- `RUST_LOG=hello=debug` turns on debug logging for `hello`\n- `RUST_LOG=hello=DEBUG` turns on debug logging for `hello` (same as previous)\n- `RUST_LOG=hello,std::option` turns on `hello`, and std's option logging\n- `RUST_LOG=error,hello=warn` turn on global error logging and also warn for `hello`\n- `RUST_LOG=error,hello=off`  turn on global error logging, but turn off logging for `hello`\n- `RUST_LOG=off` turns off all logging for the application\n- `RUST_LOG=OFF` turns off all logging for the application (same as previous)\n\n## Filtering results\n\nA `RUST_LOG` directive may include a regex filter. The syntax is to append `/`\nfollowed by a regex. Each message is checked against the regex, and is only\nlogged if it matches. Note that the matching is done after formatting the\nlog string but before adding any logging meta-data. There is a single filter\nfor all modules.\n\nSome examples:\n\n* `hello/foo` turns on all logging for the 'hello' module where the log\n  message includes 'foo'.\n* `info/f.o` turns on all info logging where the log message includes 'foo',\n  'f1o', 'fao', etc.\n* `hello=debug/foo*foo` turns on debug logging for 'hello' where the log\n  message includes 'foofoo' or 'fofoo' or 'fooooooofoo', etc.\n* `error,hello=warn/[0-9]scopes` turn on global error logging and also\n  warn for hello. In both cases the log message must include a single digit\n  number followed by 'scopes'.\n\n## Capturing logs in tests\n\nRecords logged during `cargo test` will not be captured by the test harness by default.\nThe [`Builder::is_test`] method can be used in unit tests to ensure logs will be captured:\n\n```\n#[cfg(test)]\nmod tests {\n    use log::info;\n\n    fn init() {\n        let _ = env_logger::builder().is_test(true).try_init();\n    }\n\n    #[test]\n    fn it_works() {\n        init();\n\n        info!(\"This record will be captured by `cargo test`\");\n\n        assert_eq!(2, 1 + 1);\n    }\n}\n```\n\nEnabling test capturing comes at the expense of color and other style support\nand may have performance implications.\n\n## Disabling colors\n\nColors and other styles can be configured with the `RUST_LOG_STYLE`\nenvironment variable. It accepts the following values:\n\n* `auto` (default) will attempt to print style characters, but don't force the issue.\nIf the console isn't available on Windows, or if TERM=dumb, for example, then don't print colors.\n* `always` will always print style characters even if they aren't supported by the terminal.\nThis includes emitting ANSI colors on Windows if the console API is unavailable.\n* `never` will never print style characters.\n\n## Tweaking the default format\n\nParts of the default format can be excluded from the log output using the [`Builder`].\nThe following example excludes the timestamp from the log output:\n\n```\nenv_logger::builder()\n    .format_timestamp(None)\n    .init();\n```\n\n### Stability of the default format\n\nThe default format won't optimise for long-term stability, and explicitly makes no\nguarantees about the stability of its output across major, minor or patch version\nbumps during `0.x`.\n\nIf you want to capture or interpret the output of `env_logger` programmatically\nthen you should use a custom format.\n\n### Using a custom format\n\nCustom formats can be provided as closures to the [`Builder`].\nThese closures take a [`Formatter`][crate::fmt::Formatter] and `log::Record` as arguments:\n\n```\nuse std::io::Write;\n\nenv_logger::builder()\n    .format(|buf, record| {\n        writeln!(buf, \"{}: {}\", record.level(), record.args())\n    })\n    .init();\n```\n\nSee the [`fmt`] module for more details about custom formats.\n\n## Specifying defaults for environment variables\n\n`env_logger` can read configuration from environment variables.\nIf these variables aren't present, the default value to use can be tweaked with the [`Env`] type.\nThe following example defaults to log `warn` and above if the `RUST_LOG` environment variable\nisn't set:\n\n```\nuse env_logger::Env;\n\nenv_logger::Builder::from_env(Env::default().default_filter_or(\"warn\")).init();\n```\n\n[gh-repo-examples]: https://github.com/rust-cli/env_logger/tree/main/examples\n[level-enum]: https://docs.rs/log/latest/log/enum.Level.html\n[log-crate-url]: https://docs.rs/log","links":{"`Builder`":"0:324:2185","`Env`":"0:336:2216","`Builder::is_test`":"0:54:2332","`fmt`":"0:128:757","crate::fmt::Formatter":"0:247:144"},"attrs":["#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/static/images/favicon.ico\")]","#![deny(missing_debug_implementations, missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:128:757","0:320-0:355:248","0:321-0:398:2040","0:322-0:365:2041","0:323-0:3:2039"],"is_stripped":false}}},"0:240-0:355:248":{"id":"0:240-0:355:248","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[55,0],"end":[55,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::writer::Target","name":"Target","id":"0:355:248","glob":false}}},"2:13014:2314":{"id":"2:13014:2314","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12545:137","`FromStr`":"2:12544:2877"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12544:2877","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12544:2877","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2388-0:324:2185":{"id":"b:2:2388-0:324:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2390:2510"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31816:3039-0:247:144":{"id":"a:2:31816:3039-0:247:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31816:3039","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:88:2414":{"id":"0:88:2414","crate_id":0,"name":"default_filter_or","span":{"filename":"src/logger.rs","begin":[731,4],"end":[738,5]},"visibility":"public","docs":"Use the default environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12904:334":{"id":"2:12904:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12905:27788","`u8`":"1:12271:1734"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356:2654":{"id":"0:356:2654","crate_id":0,"name":"Stdout","span":{"filename":"src/fmt/writer/target.rs","begin":[6,4],"end":[6,10]},"visibility":"default","docs":"Logs will be sent to standard output.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12973:2386":{"id":"2:12973:2386","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12584:4670","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::rmatches":"2:12976:34997"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43357:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:35706":{"id":"5:5603:35706","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2388-0:60:2353":{"id":"b:2:2388-0:60:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2390:2510"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:403:2290":{"id":"0:403:2290","crate_id":0,"name":"Micros","span":{"filename":"src/fmt/mod.rs","begin":[72,4],"end":[72,10]},"visibility":"default","docs":"Microsecond precision (6 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:3496-0:365:2041":{"id":"b:2:3496-0:365:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2388-0:336:2216":{"id":"b:2:2388-0:336:2216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2390:2510"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:23:2170":{"id":"0:23:2170","crate_id":0,"name":"DEFAULT_WRITE_STYLE_ENV","span":{"filename":"src/logger.rs","begin":[13,0],"end":[13,59]},"visibility":"public","docs":"The default name for the environment variable to read style preferences from.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"expr":"\"RUST_LOG_STYLE\"","value":null,"is_literal":true}}},"5:5611:35707":{"id":"5:5611:35707","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31816:3039-0:365:2041":{"id":"a:2:31816:3039-0:365:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31816:3039","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3496-0:324:2185":{"id":"b:2:3496-0:324:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:69:2186":{"id":"0:69:2186","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[594,4],"end":[596,5]},"visibility":"public","docs":"Returns the maximum `LevelFilter` that this env logger instance is\nconfigured to output.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LevelFilter","id":"20:218:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2385-0:398:2040":{"id":"b:2:2385-0:398:2040","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2387:2155"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12922:6979":{"id":"2:12922:6979","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12254:455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43129:6961","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2420":{"id":"0:96:2420","crate_id":0,"name":"default_write_style_or","span":{"filename":"src/logger.rs","begin":[770,4],"end":[777,5]},"visibility":"public","docs":"Use the default environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:2167":{"id":"0:22:2167","crate_id":0,"name":"DEFAULT_FILTER_ENV","span":{"filename":"src/logger.rs","begin":[10,0],"end":[10,48]},"visibility":"public","docs":"The default name for the environment variable to read filters from.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"expr":"\"RUST_LOG\"","value":null,"is_literal":true}}},"a:2:31759:237-0:156:2490":{"id":"a:2:31759:237-0:156:2490","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2664-0:398:2040":{"id":"b:2:2664-0:398:2040","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3496-0:156:2490":{"id":"b:2:3496-0:156:2490","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,22],"end":[12,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:399:2284":{"id":"0:399:2284","crate_id":0,"name":"Seconds","span":{"filename":"src/fmt/mod.rs","begin":[68,4],"end":[68,11]},"visibility":"default","docs":"Full second precision (0 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:105:60":{"id":"0:105:60","crate_id":0,"name":"default","span":{"filename":"src/logger.rs","begin":[794,4],"end":[799,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2213":{"id":"0:26:2213","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[104,4],"end":[111,5]},"visibility":"public","docs":"Initializes the log builder from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nInitialise a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::from_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3:2039":{"id":"0:3:2039","crate_id":0,"name":"logger","span":{"filename":"src/logger.rs","begin":[1,0],"end":[1017,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:2167","0:23:2170","0:324:2185","0:60:2353","0:336:2216","0:116:2339","0:117:2348","0:118:2427","0:121:2442","0:124:2217","0:125:2213"],"is_stripped":true}}},"b:5:5844-0:156:2490":{"id":"b:5:5844-0:156:2490","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5842:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5846:1667"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31759:237-0:398:2040":{"id":"a:2:31759:237-0:398:2040","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12914:34992":{"id":"2:12914:34992","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12260:1609","str::slice_mut_unchecked":"2:12915:34993","crate::ops::Index":"2:38889:10088"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:33636":{"id":"2:12924:33636","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12925:33642"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43427:6969","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2883:246-0:60:2353":{"id":"a:2:2883:246-0:60:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12991:35003":{"id":"2:12991:35003","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5597:2533":{"id":"5:5597:2533","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2388-0:355:248":{"id":"b:2:2388-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2390:2510"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:259:2398":{"id":"0:259:2398","crate_id":0,"name":"flush","span":{"filename":"src/fmt/mod.rs","begin":[159,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3018:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2670-0:398:2040":{"id":"b:2:2670-0:398:2040","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2673:138","2:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12894:943":{"id":"2:12894:943","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12254:455"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31816:3039-0:324:2185":{"id":"a:2:31816:3039-0:324:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31816:3039","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2388-0:247:144":{"id":"b:2:2388-0:247:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2390:2510"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:34:770":{"id":"0:34:770","crate_id":0,"name":"format","span":{"filename":"src/logger.rs","begin":[243,4],"end":[249,5]},"visibility":"public","docs":"Sets the format function for formatting the log output.\n\nThis function is called on each record logged and should format the\nlog record and output it to the given [`Formatter`].\n\nThe format function is expected to output the string directly to the\n`Formatter` so that implementations can use the [`std::fmt`] macros\nto format and output without intermediate heap allocations. The default\n`env_logger` formatter takes advantage of this.\n\nWhen the `color` feature is enabled, styling via ANSI escape codes is supported and the\noutput will automatically respect [`Builder::write_style`].\n\n# Examples\n\nUse a custom format to write only the log message:\n\n```\nuse std::io::Write;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}\", record.args()));\n```\n\n[`Formatter`]: fmt/struct.Formatter.html\n[`String`]: https://doc.rust-lang.org/stable/std/string/struct.String.html\n[`std::fmt`]: https://doc.rust-lang.org/std/fmt/index.html","links":{"`Builder::write_style`":"0:52:2327"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["format",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3123:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:273:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:3018:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2339":{"id":"0:55:2339","crate_id":0,"name":"try_init","span":{"filename":"src/logger.rs","begin":[456,4],"end":[467,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"SetLoggerError","id":"20:344:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5846:1667":{"id":"5:5846:1667","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:60":{"id":"0:246:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/mod.rs","begin":[79,4],"end":[81,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2353":{"id":"0:60:2353","crate_id":0,"name":"Logger","span":{"filename":"src/logger.rs","begin":[531,0],"end":[535,1]},"visibility":"public","docs":"The env logger.\n\nThis struct implements the `Log` trait from the [`log` crate][log-crate-url],\nwhich allows it to act as a logger.\n\nThe [`init()`], [`try_init()`], [`Builder::init()`] and [`Builder::try_init()`]\nmethods will each construct a `Logger` and immediately initialize it as the\ndefault global logger.\n\nIf you'd instead need access to the constructed `Logger`, you can use\nthe associated [`Builder`] and install it with the\n[`log` crate][log-crate-url] directly.\n\n[log-crate-url]: https://docs.rs/log\n[`init()`]: fn.init.html\n[`try_init()`]: fn.try_init.html\n[`Builder::init()`]: struct.Builder.html#method.init\n[`Builder::try_init()`]: struct.Builder.html#method.try_init\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:64","a:2:2883:246-0:60:2353","a:2:41395:2975-0:60:2353","a:2:31816:3039-0:60:2353","a:2:31759:237-0:60:2353","a:2:41394:2976-0:60:2353","b:2:2670-0:60:2353","b:2:2675-0:60:2353","b:2:2385-0:60:2353","b:2:2388-0:60:2353","b:2:2664-0:60:2353","b:2:3496-0:60:2353","b:2:2660-0:60:2353","0:78","0:71"]}}},"2:12896:34988":{"id":"2:12896:34988","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:34994":{"id":"2:12927:34994","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43417:6968","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360:1851":{"id":"0:360:1851","crate_id":0,"name":"0","span":{"filename":"src/fmt/writer/target.rs","begin":[11,9],"end":[11,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Box","id":"5:294:2264","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"std::io::Write","id":"1:3575:2528","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}}}},"5:727:2825":{"id":"5:727:2825","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:261:757":{"id":"0:261:757","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[165,4],"end":[171,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12946:2573":{"id":"2:12946:2573","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12584:4670","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::split_whitespace":"2:12924:33636","str::rsplit":"2:12952:27820"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43153:2931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12961:27822":{"id":"2:12961:27822","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:4670","str::rsplitn":"2:12964:27824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43257:4985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:27826":{"id":"2:12967:27826","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41395:2975-0:336:2216":{"id":"a:2:41395:2975-0:336:2216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41395:2975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2435:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:382:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31816:3039-0:336:2216":{"id":"a:2:31816:3039-0:336:2216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31816:3039","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[83,0],"end":[98,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:241-0:365:2041":{"id":"0:241-0:365:2041","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[56,0],"end":[56,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::writer::WriteStyle","name":"WriteStyle","id":"0:365:2041","glob":false}}},"a:2:41395:2975-0:398:2040":{"id":"a:2:41395:2975-0:398:2040","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41395:2975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12976:34997":{"id":"2:12976:34997","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12584:4670","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::matches":"2:12973:2386"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43375:6967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:15423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13008:35008":{"id":"2:13008:35008","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:4670"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:27512":{"id":"5:5615:27512","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13020:27510"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:365:2041":{"id":"0:365:2041","crate_id":0,"name":"WriteStyle","span":{"filename":"src/fmt/writer/mod.rs","begin":[13,0],"end":[21,1]},"visibility":"public","docs":"Whether or not to print styles to the target.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:385:2633","0:366:2635","0:368:2516"],"impls":["a:2:2883:246-0:365:2041","a:2:41395:2975-0:365:2041","a:2:31816:3039-0:365:2041","a:2:31759:237-0:365:2041","a:2:41394:2976-0:365:2041","b:2:2670-0:365:2041","b:2:2675-0:365:2041","b:2:2385-0:365:2041","b:2:2388-0:365:2041","b:2:2664-0:365:2041","b:2:3496-0:365:2041","b:2:2660-0:365:2041","b:5:725-0:365:2041","0:222","0:383","0:373","0:372","0:220","0:381","0:380","0:377","0:375","0:370"]}}},"b:2:2388-0:365:2041":{"id":"b:2:2388-0:365:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2390:2510"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5612:35708":{"id":"5:5612:35708","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:2264","`String`":"5:7608:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2264","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13027:27138":{"id":"2:13027:27138","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4678:27138"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43470:6892","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2675-0:156:2490":{"id":"b:2:2675-0:156:2490","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2678:138","2:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12926:3788":{"id":"2:12926:3788","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43407:2927","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2332":{"id":"0:54:2332","crate_id":0,"name":"is_test","span":{"filename":"src/logger.rs","begin":[442,4],"end":[445,5]},"visibility":"public","docs":"Sets whether or not the logger will be used in unit tests.\n\nIf `is_test` is `true` then the logger will allow the testing framework to\ncapture log records rather than printing them to the terminal directly.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["is_test",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:2241":{"id":"0:32:2241","crate_id":0,"name":"from_default_env","span":{"filename":"src/logger.rs","begin":[184,4],"end":[186,5]},"visibility":"public","docs":"Initializes the log builder from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger using the default environment variables:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2883:246-0:156:2490":{"id":"a:2:2883:246-0:156:2490","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:31759:237-0:355:248":{"id":"a:2:31759:237-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:324:2185":{"id":"0:324:2185","crate_id":0,"name":"Builder","span":{"filename":"src/logger.rs","begin":[38,0],"end":[43,1]},"visibility":"public","docs":"`Builder` acts as builder for initializing a `Logger`.\n\nIt can be used to customize the log format, change the environment variable used\nto provide the logging directives and also set the default log level filter.\n\n# Examples\n\n```\n# use std::io::Write;\nuse env_logger::Builder;\nuse log::{LevelFilter, error, info};\n\nlet mut builder = Builder::from_default_env();\n\nbuilder\n    .format(|buf, record| writeln!(buf, \"{} - {}\", record.level(), record.args()))\n    .filter(None, LevelFilter::Info)\n    .init();\n\nerror!(\"error message\");\ninfo!(\"info message\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:24","a:2:2883:246-0:324:2185","a:2:41395:2975-0:324:2185","a:2:31816:3039-0:324:2185","a:2:31759:237-0:324:2185","a:2:41394:2976-0:324:2185","b:2:2670-0:324:2185","b:2:2675-0:324:2185","b:2:2385-0:324:2185","b:2:2388-0:324:2185","b:2:2664-0:324:2185","b:2:3496-0:324:2185","b:2:2660-0:324:2185","0:58","0:329"]}}},"0:72:2388":{"id":"0:72:2388","crate_id":0,"name":"enabled","span":{"filename":"src/logger.rs","begin":[605,4],"end":[607,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:292:2160","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:362:60":{"id":"0:362:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/writer/target.rs","begin":[3,9],"end":[3,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:409:459":{"id":"0:409:459","crate_id":0,"name":"clone","span":{"filename":"src/fmt/mod.rs","begin":[65,15],"end":[65,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[24,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ColorChoice","id":"32:21:2637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:221:786"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2675-0:336:2216":{"id":"b:2:2675-0:336:2216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2678:138","2:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12987:35001":{"id":"2:12987:35001","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2883:246-0:324:2185":{"id":"a:2:2883:246-0:324:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:368:2516":{"id":"0:368:2516","crate_id":0,"name":"Never","span":{"filename":"src/fmt/writer/mod.rs","begin":[20,4],"end":[20,9]},"visibility":"default","docs":"Never print styles.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:238-23:0:2044":{"id":"0:238-23:0:2044","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[51,0],"end":[51,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"import":{"source":"anstyle","name":"style","id":"23:0:2044","glob":false}}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[65,15],"end":[65,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2401:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:409:459"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:323-0:3:2039":{"id":"0:323-0:3:2039","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[275,0],"end":[275,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::logger","name":"logger","id":"0:3:2039","glob":true}}},"a:2:41394:2976-0:156:2490":{"id":"a:2:41394:2976-0:156:2490","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41394:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12921:6841":{"id":"2:12921:6841","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12254:455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43123:6834","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31816:3039-0:355:248":{"id":"a:2:31816:3039-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:31816:3039","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12932:27829":{"id":"2:12932:27829","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:4670"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41395:2975-0:156:2490":{"id":"a:2:41395:2975-0:156:2490","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41395:2975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12919:27816":{"id":"2:12919:27816","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12918:27815"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2670-0:60:2353":{"id":"b:2:2670-0:60:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2673:138","2:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:330:60":{"id":"0:330:60","crate_id":0,"name":"default","span":{"filename":"src/logger.rs","begin":[37,9],"end":[37,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:382:668":{"id":"0:382:668","crate_id":0,"name":"eq","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2670-0:365:2041":{"id":"b:2:2670-0:365:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2673:138","2:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12895:3422":{"id":"2:12895:3422","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:2300":{"id":"0:47:2300","crate_id":0,"name":"filter_module","span":{"filename":"src/logger.rs","begin":[330,4],"end":[333,5]},"visibility":"public","docs":"Adds a directive to the filter for a specific module.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_module(\"path::to::module\", LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["module",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:218:2158","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:2272":{"id":"0:38:2272","crate_id":0,"name":"format_module_path","span":{"filename":"src/logger.rs","begin":[266,4],"end":[269,5]},"visibility":"public","docs":"Whether or not to write the module path in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:125:2213":{"id":"0:125:2213","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[948,0],"end":[953,1]},"visibility":"public","docs":"Create a builder from the given environment variables.\n\nThe builder can be configured before being initialized.","links":{},"attrs":["#[deprecated(since = \"0.8.0\", note =\n\"Prefer `env_logger::Builder::from_env()` instead.\")]"],"deprecation":{"since":"0.8.0","note":"Prefer `env_logger::Builder::from_env()` instead."},"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320-0:355:248":{"id":"0:320-0:355:248","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[274,20],"end":[274,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::Target","name":"Target","id":"0:355:248","glob":false}}},"b:2:2385-0:336:2216":{"id":"b:2:2385-0:336:2216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2387:2155"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:39:2274":{"id":"0:39:2274","crate_id":0,"name":"format_target","span":{"filename":"src/logger.rs","begin":[272,4],"end":[275,5]},"visibility":"public","docs":"Whether or not to write the target in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3496-0:60:2353":{"id":"b:2:3496-0:60:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31759:237-0:365:2041":{"id":"a:2:31759:237-0:365:2041","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31759:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41395:2975-0:324:2185":{"id":"a:2:41395:2975-0:324:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41395:2975","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:212:757":{"id":"0:212:757","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/writer/target.rs","begin":[15,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:728:2423":{"id":"5:728:2423","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2664-0:324:2185":{"id":"b:2:2664-0:324:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[537,0],"end":[602,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:2213","0:68:2241","0:69:2186","0:70:2386"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:366:2635":{"id":"0:366:2635","crate_id":0,"name":"Always","span":{"filename":"src/fmt/writer/mod.rs","begin":[18,4],"end":[18,10]},"visibility":"default","docs":"Try very hard to print styles.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:2883:246-0:398:2040":{"id":"a:2:2883:246-0:398:2040","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:398:2040":{"id":"0:398:2040","crate_id":0,"name":"TimestampPrecision","span":{"filename":"src/fmt/mod.rs","begin":[66,0],"end":[75,1]},"visibility":"public","docs":"Formatting precision of timestamps.\n\nSeconds give precision of full seconds, milliseconds give thousands of a\nsecond (3 decimal digits), microseconds are millionth of a second (6 decimal\ndigits) and nanoseconds are billionth of a second (9 decimal digits).","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:399:2284","0:401:2287","0:403:2290","0:405:2293"],"impls":["a:2:2883:246-0:398:2040","a:2:41395:2975-0:398:2040","a:2:31816:3039-0:398:2040","a:2:31759:237-0:398:2040","a:2:41394:2976-0:398:2040","b:2:2670-0:398:2040","b:2:2675-0:398:2040","b:2:2385-0:398:2040","b:2:2388-0:398:2040","b:2:2664-0:398:2040","b:2:3496-0:398:2040","b:2:2660-0:398:2040","b:5:725-0:398:2040","0:410","0:408","0:245","0:407"]}}},"0:42:2283":{"id":"0:42:2283","crate_id":0,"name":"format_timestamp_secs","span":{"filename":"src/logger.rs","begin":[291,4],"end":[293,5]},"visibility":"public","docs":"Configures the timestamp to use second precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:363:2657":{"id":"0:363:2657","crate_id":0,"name":"Stderr","span":{"filename":"src/fmt/writer/target.rs","begin":[9,4],"end":[9,10]},"visibility":"default","docs":"Logs will be sent to standard error.","links":{},"attrs":["#[default]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:3496-0:247:144":{"id":"b:2:3496-0:247:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41394:2976-0:398:2040":{"id":"a:2:41394:2976-0:398:2040","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41394:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/target.rs","begin":[3,9],"end":[3,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:362:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2664-0:355:248":{"id":"b:2:2664-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,29],"end":[12,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2440:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12985:35000":{"id":"2:12985:35000","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3496-0:336:2216":{"id":"b:2:3496-0:336:2216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3494:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3498:1705"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3498:1705":{"id":"2:3498:1705","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39057:6883","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2390:2510":{"id":"2:2390:2510","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:2217":{"id":"0:124:2217","crate_id":0,"name":"builder","span":{"filename":"src/logger.rs","begin":[937,0],"end":[939,1]},"visibility":"public","docs":"Create a new builder with the default environment variables.\n\nThe builder can be configured before being initialized.\nThis is a convenient way of calling [`Builder::from_default_env`].\n\n[`Builder::from_default_env`]: struct.Builder.html#method.from_default_env","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2670-0:156:2490":{"id":"b:2:2670-0:156:2490","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2673:138","2:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:256:2514":{"id":"0:256:2514","crate_id":0,"name":"default_level_style","span":{"filename":"src/fmt/mod.rs","begin":[137,4],"end":[151,5]},"visibility":"public","docs":"Get the default [`style::Style`] for the given level.\n\nThe style can be used to print other values besides the level.\n\nSee [`style`] for how to adapt it to the styling crate of your choice","links":{"`style`":"23:0:2044","`style::Style`":"23:405:2515"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"Level","id":"20:198:2488","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"style::Style","id":"23:405:2515","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2046":{"id":"0:73:2046","crate_id":0,"name":"log","span":{"filename":"src/logger.rs","begin":[609,4],"end":[670,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["record",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:273:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41394:2976-0:247:144":{"id":"a:2:41394:2976-0:247:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41394:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12916:27811":{"id":"2:12916:27811","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12918:27815","str::split_at_mut":"2:12917:27812"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12964:27824":{"id":"2:12964:27824","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12254:455","str::splitn":"2:12961:27822","self::pattern":"2:12584:4670"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43275:6827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:15423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2664-0:156:2490":{"id":"b:2:2664-0:156:2490","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:358:2659":{"id":"0:358:2659","crate_id":0,"name":"Pipe","span":{"filename":"src/fmt/writer/target.rs","begin":[11,4],"end":[11,50]},"visibility":"default","docs":"Logs will be sent to a custom pipe.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:360:1851"]},"discriminant":null}}},"0:355:248":{"id":"0:355:248","crate_id":0,"name":"Target","span":{"filename":"src/fmt/writer/target.rs","begin":[4,0],"end":[12,1]},"visibility":"public","docs":"Log target, either `stdout`, `stderr` or a custom pipe.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:356:2654","0:363:2657","0:358:2659"],"impls":["a:2:2883:246-0:355:248","a:2:41395:2975-0:355:248","a:2:31816:3039-0:355:248","a:2:31759:237-0:355:248","a:2:41394:2976-0:355:248","b:2:2670-0:355:248","b:2:2675-0:355:248","b:2:2385-0:355:248","b:2:2388-0:355:248","b:2:2664-0:355:248","b:2:3496-0:355:248","b:2:2660-0:355:248","0:211","0:361"]}}},"a:2:2883:246-0:247:144":{"id":"a:2:2883:246-0:247:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2664-0:336:2216":{"id":"b:2:2664-0:336:2216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12958:34996":{"id":"2:12958:34996","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12584:4670","str::split":"2:12946:2573","prim@char":"1:12254:455","str::split_terminator":"2:12955:34995"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43221:6964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:15423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12982:34999":{"id":"2:12982:34999","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12584:4670","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::match_indices":"2:12979:34998"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43321:6966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:15423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12999:27831":{"id":"2:12999:27831","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:4670"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:2410":{"id":"0:85:2410","crate_id":0,"name":"filter_or","span":{"filename":"src/logger.rs","begin":[718,4],"end":[726,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["filter_env",{"generic":"E"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:730:120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374:757":{"id":"0:374:757","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,22],"end":[12,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:27812":{"id":"2:12917:27812","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12916:27811","str::split_at_mut_checked":"2:12919:27816"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2675-0:60:2353":{"id":"b:2:2675-0:60:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2678:138","2:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,50],"end":[12,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:384:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5600:35705":{"id":"5:5600:35705","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2660-0:324:2185":{"id":"b:2:2660-0:324:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2663:2230"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2679:1690":{"id":"2:2679:1690","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[499,0],"end":[510,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:219-0:355:248":{"id":"0:219-0:355:248","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[9,0],"end":[9,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"target::Target","name":"Target","id":"0:355:248","glob":false}}},"2:13016:27514":{"id":"2:13016:27514","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:342:757":{"id":"0:342:757","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[693,9],"end":[693,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:2561":{"id":"0:152:2561","crate_id":0,"name":"timestamp_seconds","span":{"filename":"src/fmt/humantime.rs","begin":[37,4],"end":[42,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with full\nsecond precision.","links":{"`Timestamp`":"0:156:2490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41394:2976-0:336:2216":{"id":"a:2:41394:2976-0:336:2216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41394:2976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2664-0:60:2353":{"id":"b:2:2664-0:60:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2660-0:156:2490":{"id":"b:2:2660-0:156:2490","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2663:2230"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12955:34995":{"id":"2:12955:34995","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12584:4670","str::split":"2:12946:2573","prim@char":"1:12254:455","`DoubleEndedIterator`":"2:7966:131","str::rsplit_terminator":"2:12958:34996"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43203:6963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[100,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10025:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:169:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:160:757":{"id":"0:160:757","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/humantime.rs","begin":[84,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12905:27788":{"id":"2:12905:27788","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12271:1734"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2673:138":{"id":"2:2673:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:25:1109":{"id":"0:25:1109","crate_id":0,"name":"new","span":{"filename":"src/logger.rs","begin":[72,4],"end":[74,5]},"visibility":"public","docs":"Initializes the log builder with defaults.\n\n**NOTE:** This method won't read from any environment variables.\nUse the [`filter`] and [`write_style`] methods to configure the builder\nor use [`from_env`] or [`from_default_env`] instead.\n\n# Examples\n\nCreate a new builder and configure filters and style:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder\n    .filter(None, LevelFilter::Info)\n    .write_style(WriteStyle::Always)\n    .init();\n```\n\n[`filter`]: #method.filter\n[`write_style`]: #method.write_style\n[`from_env`]: #method.from_env\n[`from_default_env`]: #method.from_default_env","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2883:246-0:336:2216":{"id":"a:2:2883:246-0:336:2216","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12949:27818":{"id":"2:12949:27818","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:4670"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12400:6822","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2660-0:60:2353":{"id":"b:2:2660-0:60:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2663:2230"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2883:246-0:355:248":{"id":"a:2:2883:246-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2883:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:2:2388-0:156:2490":{"id":"b:2:2388-0:156:2490","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2382:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2390:2510"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2675-0:355:248":{"id":"b:2:2675-0:355:248","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2678:138","2:2679:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:401:2287":{"id":"0:401:2287","crate_id":0,"name":"Millis","span":{"filename":"src/fmt/mod.rs","begin":[70,4],"end":[70,10]},"visibility":"default","docs":"Millisecond precision (3 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12899:34990":{"id":"2:12899:34990","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12897:34989"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2218":{"id":"0:29:2218","crate_id":0,"name":"parse_env","span":{"filename":"src/logger.rs","begin":[149,4],"end":[164,5]},"visibility":"public","docs":"Applies the configuration from the environment.\n\nThis function allows a builder to be configured with default parameters,\nto be then overridden by the environment.\n\n# Examples\n\nInitialise a logger with filter level `Off`, then override the log\nfilter from an environment variable called `MY_LOG`:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger with filter level `Off`, then use the `MY_LOG`\nvariable to override filtering and `MY_LOG_STYLE` to override  whether\nor not to write styles:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["env",{"generic":"E"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2634:163","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[699,0],"end":[782,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Env","id":"0:336:2216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:82:1109","0:83:2186","0:85:2410","0:88:2414","0:91:2327","0:93:2418","0:96:2420"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:258:2270":{"id":"0:258:2270","crate_id":0,"name":"write","span":{"filename":"src/fmt/mod.rs","begin":[155,4],"end":[157,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:3018:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2385-0:247:144":{"id":"b:2:2385-0:247:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2387:2155"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2664-0:247:144":{"id":"b:2:2664-0:247:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2666:786"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12979:34998":{"id":"2:12979:34998","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12584:4670","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::rmatch_indices":"2:12982:34999"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43303:6965","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13005:35007":{"id":"2:13005:35007","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:4670"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:15423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:2267":{"id":"0:36:2267","crate_id":0,"name":"default_format","span":{"filename":"src/logger.rs","begin":[254,4],"end":[257,5]},"visibility":"public","docs":"Use the default format.\n\nThis method will clear any custom format set on the builder.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13011:35009":{"id":"2:13011:35009","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:4670"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:15423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:2348":{"id":"0:117:2348","crate_id":0,"name":"init","span":{"filename":"src/logger.rs","begin":[859,0],"end":[861,1]},"visibility":"public","docs":"Initializes the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:2277":{"id":"0:40:2277","crate_id":0,"name":"format_indent","span":{"filename":"src/logger.rs","begin":[279,4],"end":[282,5]},"visibility":"public","docs":"Configures the amount of spaces to use to indent multiline log records.\nA value of `None` disables any kind of indentation.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["indent",{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2670-0:324:2185":{"id":"b:2:2670-0:324:2185","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2644:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2640:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2673:138","2:2674:1692"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2663:2230":{"id":"2:2663:2230","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2637:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:2386":{"id":"0:70:2386","crate_id":0,"name":"matches","span":{"filename":"src/logger.rs","begin":[599,4],"end":[601,5]},"visibility":"public","docs":"Checks if this record matches the configured filter.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["record",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:273:2161","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2385-0:60:2353":{"id":"b:2:2385-0:60:2353","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31760:3038","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2379:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2387:2155"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[37,9],"end":[37,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2712:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:330:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:384:60":{"id":"0:384:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,50],"end":[12,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221:786":{"id":"0:221:786","crate_id":0,"name":"from","span":{"filename":"src/fmt/writer/mod.rs","begin":[25,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["choice",{"resolved_path":{"name":"anstream::ColorChoice","id":"32:21:2637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12996:35006":{"id":"2:12996:35006","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:4670"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918:27815":{"id":"2:12918:27815","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12919:27816"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2678:138":{"id":"2:2678:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31687:8468","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:59:757":{"id":"0:59:757","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[500,4],"end":[509,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9995:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9976:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1634":{"id":"0:51:1634","crate_id":0,"name":"target","span":{"filename":"src/logger.rs","begin":[403,4],"end":[406,5]},"visibility":"public","docs":"Sets the target for the log output.\n\nEnv logger can log to either stdout, stderr or a custom pipe. The default is stderr.\n\nThe custom pipe can be used to send the log messages to a custom sink (for example a file).\nDo note that direct writes to a file can become a bottleneck due to IO operation times.\n\n# Examples\n\nWrite log message to `stdout`:\n\n```\nuse env_logger::{Builder, Target};\n\nlet mut builder = Builder::new();\n\nbuilder.target(Target::Stdout);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"resolved_path":{"name":"fmt::Target","id":"0:355:248","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:34993":{"id":"2:12915:34993","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12260:1609","crate::ops::IndexMut":"2:3158:10089","str::slice_unchecked":"2:12914:34992"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12993:35005":{"id":"2:12993:35005","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:4670"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12610:15422","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:2269":{"id":"0:37:2269","crate_id":0,"name":"format_level","span":{"filename":"src/logger.rs","begin":[260,4],"end":[263,5]},"visibility":"public","docs":"Whether or not to write the level in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222":{"id":"0:222","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[36,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2637:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"WriteStyle","id":"0:365:2041","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"anstream::ColorChoice","id":"32:21:2637","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:223:786"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:239-0:156:2490":{"id":"0:239-0:156:2490","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[54,0],"end":[54,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"humantime\")]"],"deprecation":null,"inner":{"import":{"source":"self::humantime::Timestamp","name":"Timestamp","id":"0:156:2490","glob":false}}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[65,22],"end":[65,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10020:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:398:2040","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:411:757"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[45,0],"end":[497,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:324:2185","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:25:1109","0:26:2213","0:29:2218","0:32:2241","0:33:2247","0:34:770","0:36:2267","0:37:2269","0:38:2272","0:39:2274","0:40:2277","0:41:2280","0:42:2283","0:43:2286","0:44:2289","0:45:2292","0:46:2295","0:47:2300","0:48:2305","0:49:2186","0:50:2232","0:51:1634","0:52:2327","0:53:2234","0:54:2332","0:55:2339","0:56:2348","0:57:2340"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13023:27706":{"id":"2:13023:27706","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:41326"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2234":{"id":"0:53:2234","crate_id":0,"name":"parse_write_style","span":{"filename":"src/logger.rs","begin":[433,4],"end":[436,5]},"visibility":"public","docs":"Parses whether or not to write styles in the same form as the `RUST_LOG_STYLE`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write_style",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:34989":{"id":"2:12897:34989","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12952:27820":{"id":"2:12952:27820","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12584:4670","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::split":"2:12946:2573"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43171:6825","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:15423","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13020:27510":{"id":"2:13020:27510","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:2348":{"id":"0:56:2348","crate_id":0,"name":"init","span":{"filename":"src/logger.rs","begin":[478,4],"end":[481,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:2339":{"id":"0:116:2339","crate_id":0,"name":"try_init","span":{"filename":"src/logger.rs","begin":[846,0],"end":[848,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"log::SetLoggerError","id":"20:344:2162","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378:824":{"id":"0:378:824","crate_id":0,"name":"hash","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,33],"end":[12,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10244:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:27828":{"id":"2:12929:27828","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:4670"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:4564","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:7461:9393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:45277:7026":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"26:2360:4701":{"crate_id":26,"path":["regex_syntax","hir","Group"],"kind":"struct"},"1:867:4235":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:43470:6892":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"25:1927:4969":{"crate_id":25,"path":["regex","pool","PoolGuard"],"kind":"struct"},"1:10866:4432":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:3536:2916":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"27:1349:2185":{"crate_id":27,"path":["aho_corasick","packed","api","Builder"],"kind":"struct"},"1:3323:2949":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:1929:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"28:665:153":{"crate_id":28,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:8704:4606":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:6650:9234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5483:9001":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:9059:4420":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:44124:6998":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:45128:7013":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:38905:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"25:2536:4989":{"crate_id":25,"path":["regex","re_unicode","CaptureLocations"],"kind":"struct"},"17:13412:5406":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:3406:2850":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:5112:8850":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4932:8782":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:11061:6826":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:2723:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:5736:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:43054:6953":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"26:2265:4836":{"crate_id":26,"path":["regex_syntax","hir","ClassUnicodeIter"],"kind":"struct"},"30:0:3606":{"crate_id":30,"path":["anstyle_parse"],"kind":"module"},"6:5636:9063":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:43221:6964":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:4747:15479":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"27:1314:27152":{"crate_id":27,"path":["aho_corasick","packed","api","MatchKind"],"kind":"enum"},"25:1231:4880":{"crate_id":25,"path":["regex","re_unicode","CapturesDebug"],"kind":"struct"},"5:1153:35965":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:4093:10162":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"25:2337:4994":{"crate_id":25,"path":["regex","re_set","unicode","SetMatches"],"kind":"struct"},"27:1386:4625":{"crate_id":27,"path":["aho_corasick","packed","pattern","Patterns"],"kind":"struct"},"16:6317:6270":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:11662:6831":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:5212:8875":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"25:2263:4992":{"crate_id":25,"path":["regex","re_bytes","NoExpand"],"kind":"struct"},"1:10842:7218":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"25:2482:4586":{"crate_id":25,"path":["regex","re_unicode","Match"],"kind":"struct"},"2:16:2802":{"crate_id":2,"path":["core","writeln"],"kind":"macro"},"6:7359:9359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:5675:9284":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:7706:6764":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"11:2151:6639":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"31:53:4606":{"crate_id":31,"path":["utf8parse","types","State"],"kind":"enum"},"1:2271:7169":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:2876:2847":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:5382:8943":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:10315:8055":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:9622:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"27:1657:4664":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesThree"],"kind":"struct"},"2:22049:10359":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"25:2188:4983":{"crate_id":25,"path":["regex","re_bytes","Matches"],"kind":"struct"},"2:46090:7112":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:8190:2943":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:5191:8863":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:6714:9255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:14560:5632":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:16198:6109":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:12422:5303":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"14:0:2698":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:46045:7111":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:11130:6828":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:16069:6079":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"11:1582:6646":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"11:2352:6639":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:39962:4257":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"23:384:3813":{"crate_id":23,"path":["anstyle","reset","Reset"],"kind":"struct"},"17:15281:5855":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"16:6300:6267":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:45696:7070":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:45356:7038":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"25:1531:4915":{"crate_id":25,"path":["regex","dfa","Fsm"],"kind":"struct"},"1:9350:3029":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:43554:6972":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"28:715:36514":{"crate_id":28,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:45758:7072":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"22:134:138":{"crate_id":22,"path":["humantime","duration","Error"],"kind":"enum"},"6:4811:8709":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:16032:5386":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:9399:2986":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:3829:7171":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"15:288:21915":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:6880:9298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:40483:3022":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:3810:6168":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:1463:3520":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:6614:9654":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"14:40:5383":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:1910:4785":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:14788:5695":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:4386:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11128:5127":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:5344:8927":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:31736:6875":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:553:8527":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"25:2157:4982":{"crate_id":25,"path":["regex","re_builder","set_unicode","RegexSetBuilder"],"kind":"struct"},"27:1620:4569":{"crate_id":27,"path":["aho_corasick","prefilter","ByteSet"],"kind":"struct"},"17:14402:5604":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:5565:9028":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:1581:6645":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:21278:10130":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:10406:29528":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:39661:6885":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:1692:8674":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:42259:33244":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:5671:9076":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"25:2473:4984":{"crate_id":25,"path":["regex","re_trait","CaptureMatches"],"kind":"struct"},"1:5607:7190":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"5:7412:3425":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"28:768:4517":{"crate_id":28,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:43897:9667":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:12272:1716":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"11:102:9647":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:8136:6533":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"26:1618:4779":{"crate_id":26,"path":["regex_syntax","ast","ClassBracketed"],"kind":"struct"},"25:1491:4029":{"crate_id":25,"path":["regex","compile","SuffixCacheKey"],"kind":"struct"},"2:45335:7037":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"27:1052:3983":{"crate_id":27,"path":["aho_corasick","ahocorasick","AhoCorasickBuilder"],"kind":"struct"},"6:7516:9430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:8202:4195":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:10710:5146":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:13344:4099":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:11595:7208":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:46370:7134":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:7366:9363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:15635:5969":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"26:2186:27131":{"crate_id":26,"path":["regex_syntax","hir","HirKind"],"kind":"enum"},"2:3119:3035":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:5588:9035":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:1340:6638":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"11:2554:36476":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:12278:1320":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:12056:5271":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"27:1397:4630":{"crate_id":27,"path":["aho_corasick","packed","pattern","PatternIter"],"kind":"struct"},"1:11027:32665":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:13400:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:16093:6084":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:14847:5747":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"25:1649:4927":{"crate_id":25,"path":["regex","exec","ExecNoSyncStr"],"kind":"struct"},"1:1590:4784":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"26:2524:37005":{"crate_id":26,"path":["regex_syntax","unicode","CanonicalClassQuery"],"kind":"enum"},"1:8792:3520":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:6574:4176":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"11:1923:4671":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"26:1155:27128":{"crate_id":26,"path":["regex_syntax","ast","parse","ClassState"],"kind":"enum"},"11:1883:3520":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:4266:10183":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"26:1304:4742":{"crate_id":26,"path":["regex_syntax","ast","WithComments"],"kind":"struct"},"28:648:4518":{"crate_id":28,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12454:5306":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:41775:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:2307:4243":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:5006:6192":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:9300:4436":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:523:8510":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:6689:9243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:32960:15549":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:4258:10182":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:1686:8673":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:6689:3026":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:4952:8791":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:8529:7174":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:15058:4100":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"32:21:2637":{"crate_id":32,"path":["colorchoice","ColorChoice"],"kind":"enum"},"6:6379:9083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:6360:7191":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"25:2452:4999":{"crate_id":25,"path":["regex","re_trait","SubCapturesPosIter"],"kind":"struct"},"1:3279:2947":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:6480:4174":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"27:1594:2185":{"crate_id":27,"path":["aho_corasick","prefilter","Builder"],"kind":"struct"},"2:43063:6954":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:4590:10187":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:6698:9249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:40498:2954":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:45787:7073":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:7467:9394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:8402:2955":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:7823:22833":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:42296:2887":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:43427:6969":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:41270:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:279:36111":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"16:7857:6489":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:6621:9221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:6257:6851":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"26:1582:27116":{"crate_id":26,"path":["regex_syntax","ast","ClassUnicodeKind"],"kind":"enum"},"1:4668:10204":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:11574:4206":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:14284:5586":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"11:856:6634":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:9381:2607":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"27:1558:4646":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Mask256"],"kind":"struct"},"1:8446:2928":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:39070:6884":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11702:5214":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:1535:8572":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"25:1885:4915":{"crate_id":25,"path":["regex","pikevm","Fsm"],"kind":"struct"},"1:2188:130":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"17:12251:5286":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:33078:15550":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:43600:6981":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:7356:6751":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:22140:10363":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:13497:5421":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:9064:3091":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:3791:2943":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:8306:9501":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"25:2583:4992":{"crate_id":25,"path":["regex","re_unicode","NoExpand"],"kind":"struct"},"16:2303:21934":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:2281:642":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"20:344:2162":{"crate_id":20,"path":["log","SetLoggerError"],"kind":"struct"},"17:11242:5174":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"28:97:27069":{"crate_id":28,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:14449:5618":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:2985:4597":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:5914:4150":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:42902:6943":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:45292:7027":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"25:1936:4864":{"crate_id":25,"path":["regex","prog","Program"],"kind":"struct"},"26:1114:3917":{"crate_id":26,"path":["regex_syntax","ast","parse","Parser"],"kind":"struct"},"26:1720:27113":{"crate_id":26,"path":["regex_syntax","ast","ClassSetBinaryOpKind"],"kind":"enum"},"17:15301:5862":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:45586:7050":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6442:6282":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:7537:9444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:5927:6213":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"28:806:4544":{"crate_id":28,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:2961:15405":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:3647:3520":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:5415:8959":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:10419:4071":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:31816:3039":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:12683:5324":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"6:5277:8906":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:5912:6645":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"25:1780:4950":{"crate_id":25,"path":["regex","input","CharInput"],"kind":"struct"},"6:5536:9014":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:11354:5188":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:31817:3379":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6456:22826":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:46236:7118":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:8387:3523":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:6874:9297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5423:8964":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:5290:8911":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:41176:33377":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:43901:4269":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:43357:4983":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:41469:3425":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:16269:5406":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:13753:5489":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:11510:5196":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:4531:6177":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:2764:6772":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"27:1042:37683":{"crate_id":27,"path":["aho_corasick","ahocorasick","StreamChunk"],"kind":"enum"},"17:14933:5792":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:39243:3371":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:12572:4049":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:945:6636":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:4771:6184":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:5677:9079":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:10025:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:914:4237":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4787:8692":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:5407:1173":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:21202:33607":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"18:643:4517":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:9886:22890":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:22417:4271":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"25:1516:4910":{"crate_id":25,"path":["regex","dfa","CacheInner"],"kind":"struct"},"2:42313:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:4922:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"26:1130:4699":{"crate_id":26,"path":["regex_syntax","ast","parse","ParserI"],"kind":"struct"},"14:160:6626":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"18:581:3391":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:2572:6141":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:7686:6478":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:4966:2956":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:12400:6822":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:11788:5226":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:4395:2832":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"26:1430:27118":{"crate_id":26,"path":["regex_syntax","ast","SpecialLiteralKind"],"kind":"enum"},"1:11540:7324":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"11:837:6631":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"25:1804:4860":{"crate_id":25,"path":["regex","input","Char"],"kind":"struct"},"2:43417:6968":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:10279:3621":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:10720:36507":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:7503:6754":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:5415:6198":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"29:484:2655":{"crate_id":29,"path":["anstream","auto","AutoStream"],"kind":"struct"},"17:13116:5355":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"25:1987:4972":{"crate_id":25,"path":["regex","prog","InstSplit"],"kind":"struct"},"1:11700:7171":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"29:490:37702":{"crate_id":29,"path":["anstream","auto","StreamInner"],"kind":"enum"},"27:1136:4594":{"crate_id":27,"path":["aho_corasick","dfa","ByteClass"],"kind":"struct"},"5:1534:6644":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"25:2162:4586":{"crate_id":25,"path":["regex","re_bytes","Match"],"kind":"struct"},"25:1468:4907":{"crate_id":25,"path":["regex","compile","SuffixCache"],"kind":"struct"},"17:16223:6115":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"11:364:36466":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"28:0:2702":{"crate_id":28,"path":["memchr"],"kind":"module"},"16:6648:6303":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11841:5233":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:2902:21961":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:6524:9160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:21214:33607":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:11706:15419":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:8015:3555":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:924:10076":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:2878:6155":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:46219:7117":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:3575:2528":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:5515:9008":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:4843:10176":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:41064:10140":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:45502:7046":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:10244:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"23:211:2517":{"crate_id":23,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"17:11730:5217":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"25:1656:4928":{"crate_id":25,"path":["regex","exec","ExecReadOnly"],"kind":"struct"},"2:43203:6963":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:41855:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"27:1435:4003":{"crate_id":27,"path":["aho_corasick","packed","teddy","compile","Mask"],"kind":"struct"},"27:1166:4597":{"crate_id":27,"path":["aho_corasick","dfa","Repr"],"kind":"struct"},"2:21447:10130":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:868:10075":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:9267:7300":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:5064:8847":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:7602:9469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:9497:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:2471:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:37651:15557":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:10676:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"9:502:6705":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:1885:3550":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:11812:5229":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"15:327:4197":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:44075:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"25:307:4857":{"crate_id":25,"path":["regex","dfa","TransitionsRow"],"kind":"struct"},"1:8476:2927":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:41336:3521":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"18:706:4545":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"11:700:3425":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:765:27079":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:40032:6784":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:9995:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:10035:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:11042:5159":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"26:2074:4012":{"crate_id":26,"path":["regex_syntax","hir","translate","TranslatorBuilder"],"kind":"struct"},"5:5211:2966":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:5842:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7006:6361":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:6305:4426":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:39844:6898":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:7388:6753":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:578:8540":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:14986:5798":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:12257:1223":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:14868:5757":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:7633:36489":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:12271:1734":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:40053:6790":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:256:5015":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:9208:4422":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"26:2372:27107":{"crate_id":26,"path":["regex_syntax","hir","GroupKind"],"kind":"enum"},"2:38230:15558":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:6900:9312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:3020:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:5436:8974":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:12107:4049":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:7420:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:1732:2533":{"crate_id":2,"path":["core","mem","replace"],"kind":"function"},"16:6532:6291":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:12516:5315":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:2612:6143":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4876:8755":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:4568:10186":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:15176:5832":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:15624:5965":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:6082:7191":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:1828:6727":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:10218:4066":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:12808:5334":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"27:0:3405":{"crate_id":27,"path":["aho_corasick"],"kind":"module"},"2:10033:2899":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:4736:9376":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"27:1628:4570":{"crate_id":27,"path":["aho_corasick","prefilter","RareByteOffsets"],"kind":"struct"},"17:14994:5799":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:22185:10130":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"16:7590:4184":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:608:4528":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:45455:7043":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"25:2423:4994":{"crate_id":25,"path":["regex","re_set","bytes","SetMatches"],"kind":"struct"},"17:15190:5835":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:1724:36111":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:10121:6930":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:46291:7123":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:38920:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:22555:33238":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"28:835:4549":{"crate_id":28,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"20:218:2158":{"crate_id":20,"path":["log","LevelFilter"],"kind":"enum"},"1:2443:10122":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:14414:5606":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:12286:6835":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:6667:3425":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"25:1510:4440":{"crate_id":25,"path":["regex","dfa","Cache"],"kind":"struct"},"0:128:757":{"crate_id":0,"path":["env_logger","fmt"],"kind":"module"},"2:33388:15552":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:3126:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"26:2135:138":{"crate_id":26,"path":["regex_syntax","hir","Error"],"kind":"struct"},"2:39884:6905":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"25:1980:4970":{"crate_id":25,"path":["regex","prog","InstSave"],"kind":"struct"},"27:1519:4638":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddyFat2Mask256"],"kind":"struct"},"16:5802:22821":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"25:1666:36955":{"crate_id":25,"path":["regex","exec","MatchType"],"kind":"enum"},"2:46355:7133":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:7485:9404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"27:1340:37685":{"crate_id":27,"path":["aho_corasick","packed","api","ForceAlgorithm"],"kind":"enum"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:10769:36500":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:43881:9663":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:16121:6091":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:2441:10121":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"14:187:21903":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:11142:4049":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"27:1696:4586":{"crate_id":27,"path":["aho_corasick","Match"],"kind":"struct"},"26:1932:4807":{"crate_id":26,"path":["regex_syntax","ast","Flag"],"kind":"enum"},"26:2403:27108":{"crate_id":26,"path":["regex_syntax","hir","RepetitionKind"],"kind":"enum"},"2:2634:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:14575:4079":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:6927:6357":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:1325:6639":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:7509:6462":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"11:1917:4786":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:2736:2942":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:13252:5386":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:15760:6001":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"18:113:27070":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"28:638:27080":{"crate_id":28,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:6409:9108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:2944:6398":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:14111:5542":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:8282:9497":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:11170:2607":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"31:0:3607":{"crate_id":31,"path":["utf8parse"],"kind":"module"},"29:363:3968":{"crate_id":29,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"5:6153:2906":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:1621:8634":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:4738:9378":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:31725:6874":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:3304:4671":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:41736:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:40094:6793":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"27:1635:4002":{"crate_id":27,"path":["aho_corasick","prefilter","RareByteOffset"],"kind":"struct"},"2:43445:6840":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:4410:7176":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"25:1637:4923":{"crate_id":25,"path":["regex","exec","Exec"],"kind":"struct"},"5:3740:36111":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:15434:5896":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:6335:4136":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:41395:2975":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:7389:9381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:22613:10156":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:517:8507":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:6435:9123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:1887:3551":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:7446:9388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13064:5349":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:6948:4179":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:4942:8788":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:21260:33603":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:15023:5805":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:12818:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:1098:5022":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:7549:6473":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:43083:6956":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"25:2241:4990":{"crate_id":25,"path":["regex","re_bytes","SubCaptureMatches"],"kind":"struct"},"20:349:2875":{"crate_id":20,"path":["log","ParseLevelError"],"kind":"struct"},"25:2418:4993":{"crate_id":25,"path":["regex","re_set","bytes","RegexSet"],"kind":"struct"},"28:690:4517":{"crate_id":28,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:13553:5439":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12076:5272":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:491:5014":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:7379:36498":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:16138:6093":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:8116:4432":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:1040:6384":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:11567:5201":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"25:2001:4904":{"crate_id":25,"path":["regex","prog","EmptyLook"],"kind":"enum"},"6:8341:9510":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:21231:33613":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"26:1797:27108":{"crate_id":26,"path":["regex_syntax","ast","RepetitionKind"],"kind":"enum"},"2:45713:7071":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"11:875:6636":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"28:776:4535":{"crate_id":28,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12318:5032":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:8809:7291":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"26:1771:4746":{"crate_id":26,"path":["regex_syntax","ast","Repetition"],"kind":"struct"},"2:12346:6838":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"25:1380:4800":{"crate_id":25,"path":["regex","backtrack","Bounded"],"kind":"struct"},"5:2195:3143":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:12584:4670":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:5260:8895":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:5623:2906":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:45825:7075":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:4390:2831":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:7799:4193":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:5102:8849":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:43407:2927":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:13899:5513":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"25:1850:36951":{"crate_id":25,"path":["regex","literal","imp","LiteralIter"],"kind":"enum"},"17:12043:5269":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:21758:4270":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:11493:5194":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:5296:8914":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:6532:9165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12408:4078":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:23064:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:5329:8925":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"27:1649:4661":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesTwo"],"kind":"struct"},"17:13292:4086":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"14:165:21896":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:12949:5032":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:41319:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"28:787:4541":{"crate_id":28,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"26:2422:27109":{"crate_id":26,"path":["regex_syntax","hir","RepetitionRange"],"kind":"enum"},"17:14489:5621":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:4976:6191":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:13211:5382":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:7585:6760":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:586:8544":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:8384:3522":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"25:1422:10076":{"crate_id":25,"path":["regex","compile","Hole"],"kind":"enum"},"25:2206:2931":{"crate_id":25,"path":["regex","re_bytes","Split"],"kind":"struct"},"2:44116:6996":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"27:1291:4614":{"crate_id":27,"path":["aho_corasick","nfa","fill_failure_transitions_leftmost","QueuedState"],"kind":"struct"},"6:1503:8556":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:6026:4119":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"26:1316:4743":{"crate_id":26,"path":["regex_syntax","ast","Comment"],"kind":"struct"},"2:9824:2888":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"27:1224:4606":{"crate_id":27,"path":["aho_corasick","nfa","State"],"kind":"struct"},"5:4422:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:10895:2925":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:43139:2930":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:11537:5198":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:1730:2660":{"crate_id":2,"path":["core","mem","take"],"kind":"function"},"2:43073:6955":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:15814:6011":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:14189:5569":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:1555:4238":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:1840:15578":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:42971:6947":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:7891:15538":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:44137:7001":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:2748:6149":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:12127:5275":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:3871:6727":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:39698:6889":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:5643:9066":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"18:651:4517":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:1680:8670":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"11:351:36460":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:1824:3535":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:32842:2823":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:7306:9330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11524:5197":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:8216:6541":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:4437:36131":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:22471:6855":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:5750:7192":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:41198:6933":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:22101:15568":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"1:11534:4429":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:2888:2846":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"11:1066:21889":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:7927:2185":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:38845:15408":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"25:2197:4984":{"crate_id":25,"path":["regex","re_bytes","CaptureMatches"],"kind":"struct"},"29:501:3612":{"crate_id":29,"path":["anstream","strip","StripStream"],"kind":"struct"},"17:9671:22873":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:21246:33611":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:6543:6292":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:46198:7116":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:4502:6176":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"26:0:3404":{"crate_id":26,"path":["regex_syntax"],"kind":"module"},"25:2445:4998":{"crate_id":25,"path":["regex","re_trait","Locations"],"kind":"struct"},"16:6098:22823":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:32608:15547":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:13473:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:11016:5158":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:7100:36149":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:15206:5838":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"11:774:4235":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:39767:6894":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"25:2234:4989":{"crate_id":25,"path":["regex","re_bytes","CaptureLocations"],"kind":"struct"},"5:7378:6752":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"12:0:2697":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:2854:6154":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:6398:4169":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:14079:5538":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:46265:7121":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:5995:6222":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:15569:5946":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:294:2264":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:30218:3753":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"20:151:2159":{"crate_id":20,"path":["log","Log"],"kind":"trait"},"17:12300:23017":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:5415:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:31729:6441":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:11629:6830":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"5:3244:4785":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"29:99:27159":{"crate_id":29,"path":["anstream","stream","RawStream"],"kind":"trait"},"27:1602:4653":{"crate_id":27,"path":["aho_corasick","prefilter","Packed"],"kind":"struct"},"1:5347:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:15608:5961":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:8109:7218":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:2203:5025":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"15:306:21916":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:45438:7042":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:11367:4061":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:6388:10364":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:5014:8822":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:43569:6977":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"25:2042:4980":{"crate_id":25,"path":["regex","prog","InstBytes"],"kind":"struct"},"16:5742:6200":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:11205:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"27:1023:4578":{"crate_id":27,"path":["aho_corasick","ahocorasick","StreamChunkIter"],"kind":"struct"},"6:8317:9505":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:5857:3017":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"26:2064:4707":{"crate_id":26,"path":["regex_syntax","hir","print","Printer"],"kind":"struct"},"5:4500:36131":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:1478:3521":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:14271:5584":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:6353:4166":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:42242:2887":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"0:247:144":{"crate_id":0,"path":["env_logger","fmt","Formatter"],"kind":"struct"},"17:14212:5578":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:43257:4985":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:39904:2957":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:362:3163":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"25:178:4854":{"crate_id":25,"path":["regex","compile","ByteClassSet"],"kind":"struct"},"1:2427:10117":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:2878:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:1575:6726":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:6412:22825":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:2998:6163":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:8541:10185":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:39991:2370":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"28:680:3976":{"crate_id":28,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"25:1623:138":{"crate_id":25,"path":["regex","error","Error"],"kind":"enum"},"1:12277:1794":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:3364:2657":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:15418:5893":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"9:357:21826":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"13:226:4201":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:4734:9374":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"30:298:3962":{"crate_id":30,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"20:0:2046":{"crate_id":20,"path":["log"],"kind":"module"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:5686:4140":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:8019:3036":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:4920:10172":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:7908:10130":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:15822:6014":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:7741:4191":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:2477:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11392:5190":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:1809:665":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:5370:8938":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:6606:6300":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"11:2383:3520":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:2033:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"25:1559:4606":{"crate_id":25,"path":["regex","dfa","State"],"kind":"struct"},"32:0:3608":{"crate_id":32,"path":["colorchoice"],"kind":"module"},"1:12237:30192":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:12226:10062":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:16151:6099":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:37486:15554":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:10236:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"28:871:4555":{"crate_id":28,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"20:155:2864":{"crate_id":20,"path":["log","NopLogger"],"kind":"struct"},"2:22073:10130":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:6768:9269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:5653:9067":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:15342:5871":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"24:97:3411":{"crate_id":24,"path":["env_filter","op","FilterOp"],"kind":"struct"},"2:22199:10353":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:8288:9498":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:7339:9353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"11:1603:6647":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:1574:3520":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"16:4062:6172":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"30:85:27163":{"crate_id":30,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"5:828:6721":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:4469:2840":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:1526:8566":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"11:2403:3521":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:12969:5339":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"23:261:3809":{"crate_id":23,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"6:1663:8663":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:44185:7003":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"18:754:4555":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:5708:15453":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:41413:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:860:6124":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"10:0:2695":{"crate_id":10,"path":["adler"],"kind":"module"},"27:1331:3995":{"crate_id":27,"path":["aho_corasick","packed","api","Config"],"kind":"struct"},"18:698:3979":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"28:823:4545":{"crate_id":28,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:7132:6383":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:8012:9478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:588:10054":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:5244:8887":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:42531:4606":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:2956:15404":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"28:624:4517":{"crate_id":28,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:14012:5529":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"11:328:9651":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:22154:15568":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"26:2342:4791":{"crate_id":26,"path":["regex_syntax","hir","WordBoundary"],"kind":"enum"},"21:0:2693":{"crate_id":21,"path":["cfg_if"],"kind":"module"},"17:14386:5600":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:3806:6729":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:12089:5273":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:5031:8830":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:6617:3032":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:6417:9110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:7864:32681":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:9072:7293":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"18:735:27078":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:2049:6771":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13424:5407":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8727:7285":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"26:1836:4701":{"crate_id":26,"path":["regex_syntax","ast","Group"],"kind":"struct"},"25:2215:4985":{"crate_id":25,"path":["regex","re_bytes","SplitN"],"kind":"struct"},"18:96:27069":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:5181:8856":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:13674:5455":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:6098:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"27:1455:4923":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Exec"],"kind":"enum"},"6:6678:9241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"29:292:3963":{"crate_id":29,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"1:3456:2954":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:2929:2822":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:3129:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:13089:5350":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:9916:22891":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:6588:6293":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"5:5061:2906":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"27:1270:2185":{"crate_id":27,"path":["aho_corasick","nfa","Builder"],"kind":"struct"},"2:45049:7004":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"26:268:37007":{"crate_id":26,"path":["regex_syntax","ast","visitor","ClassInduct"],"kind":"enum"},"27:1303:4617":{"crate_id":27,"path":["aho_corasick","nfa","QueuedSet"],"kind":"struct"},"1:5538:7189":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:6657:9235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:2469:6727":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:35610:6404":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"27:1681:4668":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesTwo"],"kind":"struct"},"4:0:2692":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:5719:2906":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:10603:2654":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:951:6637":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:13418:6851":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"11:687:3521":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8263:4431":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:4802:6185":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:4242:2851":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"9:238:4606":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1639:8646":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:33561:15553":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:928:10074":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"25:1702:36950":{"crate_id":25,"path":["regex","exec","MatchNfaType"],"kind":"enum"},"14:202:15437":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"20:239:2872":{"crate_id":20,"path":["log","MaybeStaticStr"],"kind":"enum"},"17:15799:6010":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:40259:2929":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"25:2028:4978":{"crate_id":25,"path":["regex","prog","InstChar"],"kind":"struct"},"18:515:4515":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:5219:8876":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"26:2174:4833":{"crate_id":26,"path":["regex_syntax","hir","Hir"],"kind":"struct"},"2:42502:4407":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:4127:10163":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:2696:2932":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:0:948":{"crate_id":6,"path":["libc"],"kind":"module"},"6:4870:8753":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:7397:36497":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:10843:3521":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:41396:3504":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:3494:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"27:1357:4545":{"crate_id":27,"path":["aho_corasick","packed","api","Searcher"],"kind":"struct"},"2:41478:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:7306:36495":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:39020:10067":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:7421:33474":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"25:1289:27096":{"crate_id":25,"path":["regex","re_unicode","Replacer"],"kind":"trait"},"25:2430:4996":{"crate_id":25,"path":["regex","re_set","bytes","SetMatchesIntoIter"],"kind":"struct"},"2:46177:7115":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:5630:9060":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"6:485:8056":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:7448:3425":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:513:5020":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:4482:7177":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:12254:455":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"11:2369:6650":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:3925:6171":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:3036:35790":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"26:2081:4820":{"crate_id":26,"path":["regex_syntax","hir","translate","Translator"],"kind":"struct"},"2:41353:3089":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"25:931:4877":{"crate_id":25,"path":["regex","re_bytes","Captures"],"kind":"struct"},"17:11324:5184":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:6620:6302":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:5557:9026":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"26:1816:27109":{"crate_id":26,"path":["regex_syntax","ast","RepetitionRange"],"kind":"enum"},"1:9355:3030":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:31760:3038":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"25:2435:4997":{"crate_id":25,"path":["regex","re_set","bytes","SetMatchesIter"],"kind":"struct"},"1:849:3521":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:11120:4420":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"25:2107:4981":{"crate_id":25,"path":["regex","re_builder","unicode","RegexBuilder"],"kind":"struct"},"5:7621:6761":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:5:1805":{"crate_id":5,"path":["alloc","vec"],"kind":"macro"},"25:949:4880":{"crate_id":25,"path":["regex","re_bytes","CapturesDebug"],"kind":"struct"},"2:21729:10130":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:30224:3754":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:41999:2891":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:15748:5999":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:43712:6983":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:2440:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4891:8762":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:43760:6992":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:33734:6403":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:9684:4263":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:12255:1755":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:12264:5287":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11605:4073":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"20:320:2874":{"crate_id":20,"path":["log","MetadataBuilder"],"kind":"struct"},"17:11898:5236":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"25:1417:4895":{"crate_id":25,"path":["regex","compile","Patch"],"kind":"struct"},"29:420:4509":{"crate_id":29,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"27:1447:4619":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Teddy"],"kind":"struct"},"1:9336:2906":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:42753:6820":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:8328:9506":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:4799:10213":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:2528:6139":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"26:1647:27106":{"crate_id":26,"path":["regex_syntax","ast","ClassSetItem"],"kind":"enum"},"27:1642:4659":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesOne"],"kind":"struct"},"16:6263:6265":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"25:2344:4996":{"crate_id":25,"path":["regex","re_set","unicode","SetMatchesIntoIter"],"kind":"struct"},"1:640:7160":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:2382:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:11764:5222":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"27:1505:4636":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask128"],"kind":"struct"},"2:42541:4408":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:10350:4070":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13986:5526":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:13723:5480":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:2674:32679":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:45196:7021":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:4856:6187":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"25:1911:36963":{"crate_id":25,"path":["regex","pikevm","FollowEpsilon"],"kind":"enum"},"1:8099:2160":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"26:2593:4852":{"crate_id":26,"path":["regex_syntax","utf8","Utf8Sequences"],"kind":"struct"},"17:12328:5291":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:6408:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:3473:5030":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"26:1868:4802":{"crate_id":26,"path":["regex_syntax","ast","CaptureName"],"kind":"struct"},"24:0:2045":{"crate_id":24,"path":["env_filter"],"kind":"module"},"2:41453:3520":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:7937:3037":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:2323:21960":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:4279:10184":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:6181:32667":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"11:2423:3425":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"28:725:4528":{"crate_id":28,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:14876:5758":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"13:109:36478":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:6278:4151":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:6636:9223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:41010:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:5376:8940":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"25:2527:4985":{"crate_id":25,"path":["regex","re_unicode","SplitN"],"kind":"struct"},"6:1485:8548":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:9984:22893":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:559:8530":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:10389:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:7221:32669":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:11621:4058":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:4885:8760":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:39672:6886":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:2660:6145":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13877:5512":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"11:0:2696":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"11:673:3520":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:7604:4185":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:45306:7028":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:8182:2941":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:42494:3624":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:8639:10221":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:12274:1728":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:4864:8752":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:6940:15455":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:564:8532":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"26:1292:4675":{"crate_id":26,"path":["regex_syntax","ast","Position"],"kind":"struct"},"25:2349:4997":{"crate_id":25,"path":["regex","re_set","unicode","SetMatchesIter"],"kind":"struct"},"2:39774:6895":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:9093:3520":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:31846:3378":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:40507:6920":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"26:1905:4805":{"crate_id":26,"path":["regex_syntax","ast","FlagsItem"],"kind":"struct"},"16:4424:6174":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:14372:5598":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:3025:2825":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:1496:8553":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"5:6749:36111":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11825:5231":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:13999:5527":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"29:470:2491":{"crate_id":29,"path":["anstream","buffer","Buffer"],"kind":"struct"},"1:6577:3022":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:11419:4049":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:3366:2946":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:9175:4564":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:1863:6768":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:4073:6645":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:6049:15855":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:9492:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:7497:6461":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:15010:5800":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:14968:5793":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:30599:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:13509:5422":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:503:3143":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:5678:10239":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:8555:7266":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:6991:36491":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:3597:5031":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:39953:4254":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"5:3278:4784":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"11:1887:3425":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:11581:7206":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:5781:6157":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:10868:2931":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"25:1571:4835":{"crate_id":25,"path":["regex","dfa","Byte"],"kind":"struct"},"26:254:37006":{"crate_id":26,"path":["regex_syntax","ast","visitor","ClassFrame"],"kind":"enum"},"1:9323:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:7075:36140":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:5005:10211":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"26:1502:27114":{"crate_id":26,"path":["regex_syntax","ast","ClassPerlKind"],"kind":"enum"},"1:4839:10173":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:40134:6916":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:7690:6727":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:29788:10142":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:1975:744":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:2453:10127":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:42991:6949":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:5347:6197":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:42287:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:4:1186":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:4830:6186":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:6447:9127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:22099:33388":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"17:261:5016":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:14475:5620":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:45470:7044":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"19:0:1203":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:42749:9658":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:12443:5305":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:12599:4545":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:2401:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:7932:3154":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:22602:6870":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:39800:6896":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"29:0:2043":{"crate_id":29,"path":["anstream"],"kind":"module"},"6:545:8522":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:41502:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:9755:22870":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:434:36468":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:13959:5522":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"29:326:4507":{"crate_id":29,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"17:10954:22905":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"11:2498:21885":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:43375:6967":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:5235:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:32422:6394":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:9679:34755":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"27:1404:4564":{"crate_id":27,"path":["aho_corasick","packed","pattern","Pattern"],"kind":"struct"},"6:5160:8854":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"25:2050:4023":{"crate_id":25,"path":["regex","re_builder","RegexOptions"],"kind":"struct"},"16:5700:6156":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:6872:6352":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:4148:3521":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:8488:7268":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"25:2084:4981":{"crate_id":25,"path":["regex","re_builder","bytes","RegexBuilder"],"kind":"struct"},"1:8154:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:16249:6119":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:13399:5404":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:21331:10130":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:718:4549":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:1903:4784":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"24:90:3413":{"crate_id":24,"path":["env_filter","filtered_log","FilteredLog"],"kind":"struct"},"27:1534:4640":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask256"],"kind":"struct"},"2:45373:7039":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13606:5453":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:3095:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:38889:10088":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:6478:9138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:5796:6783":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:15646:5970":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6782:22828":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:5864:3018":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:15368:5881":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:10399:2930":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:10606:2657":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:8259:9491":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:39740:6775":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:16165:6102":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:0:2700":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:6907:15453":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:893:6645":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:5189:7185":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:6746:9260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:10915:36503":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:1826:3536":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:12399:5302":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:1494:3425":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:38960:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:7580:6475":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"27:1688:4669":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesThree"],"kind":"struct"},"1:9042:7292":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:8482:7266":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"29:393:3962":{"crate_id":29,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"5:7368:6645":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:43747:6988":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:7952:3153":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"27:1427:4565":{"crate_id":27,"path":["aho_corasick","packed","teddy","compile","Compiler"],"kind":"struct"},"17:15957:6035":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:5891:3019":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:21248:33614":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:42271:4807":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:21280:10275":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:7559:6474":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:10456:33558":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:4120:6777":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:11688:5213":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:8431:4037":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:7805:7327":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"26:2222:4680":{"crate_id":26,"path":["regex_syntax","hir","Literal"],"kind":"enum"},"1:10913:32483":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"28:815:3979":{"crate_id":28,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:9634:29530":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"29:144:27160":{"crate_id":29,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"6:5502:9007":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:11715:5215":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:45487:7045":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:13276:6847":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:2934:2987":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:7061:6375":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:13855:5505":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12150:5276":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:6562:9188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:9280:30194":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:42953:6944":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"26:1183:4707":{"crate_id":26,"path":["regex_syntax","ast","print","Printer"],"kind":"struct"},"2:22364:6854":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:7561:9454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"26:2484:3917":{"crate_id":26,"path":["regex_syntax","parser","Parser"],"kind":"struct"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"27:1550:4645":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Mask128"],"kind":"struct"},"2:43885:9664":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:41658:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13832:5502":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10170:4045":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"23:330:2526":{"crate_id":23,"path":["anstyle","effect","Effects"],"kind":"struct"},"6:6811:9283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:43099:6957":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:10390:15626":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:6028:2966":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:7031:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:6273:32640":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"27:1366:37684":{"crate_id":27,"path":["aho_corasick","packed","api","SearchKind"],"kind":"enum"},"5:3032:35787":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:8247:9489":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:13568:5445":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:14177:5567":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:10837:9671":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:10759:4049":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:43778:6844":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:10249:7303":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:41048:6811":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"26:1955:27129":{"crate_id":26,"path":["regex_syntax","either","Either"],"kind":"enum"},"2:46302:7124":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:5488:7186":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:7348:9354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:859:3425":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"11:396:36464":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:12584:5147":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:21351:4003":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:4103:36111":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:7608:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:12259:1577":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:8271:9493":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:43943:2991":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:42981:6948":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:1939:7165":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:40517:6803":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"26:2578:4686":{"crate_id":26,"path":["regex_syntax","utf8","Utf8Range"],"kind":"struct"},"27:1526:4639":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask128"],"kind":"struct"},"17:14025:5530":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:6763:9268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:12530:5317":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:39683:33234":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"26:1177:4010":{"crate_id":26,"path":["regex_syntax","ast","print","PrinterBuilder"],"kind":"struct"},"16:7098:6378":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10439:4046":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5250:8889":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:31848:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:10228:3544":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:8006:9476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:13797:5498":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"26:2289:4822":{"crate_id":26,"path":["regex_syntax","hir","ClassBytes"],"kind":"struct"},"2:39829:33370":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:39931:6908":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:5314:8921":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:4149:10167":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:2234:4240":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:7356:15540":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:5174:8855":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"25:1617:4922":{"crate_id":25,"path":["regex","dfa","StateMap"],"kind":"struct"},"1:9048:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"30:92:27165":{"crate_id":30,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"17:15138:5818":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:15383:5885":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"24:85:3410":{"crate_id":24,"path":["env_filter","directive","Directive"],"kind":"struct"},"2:39971:6909":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:10885:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:10622:36502":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:15289:5856":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"25:713:4861":{"crate_id":25,"path":["regex","pool","Pool"],"kind":"struct"},"1:12273:1722":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:2918:3375":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:46148:7114":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"22:207:36532":{"crate_id":22,"path":["humantime","date","Precision"],"kind":"enum"},"17:12238:5285":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:5831:4144":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:43737:6984":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"23:360:3811":{"crate_id":23,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"11:2326:6638":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:13251:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"27:1013:4577":{"crate_id":27,"path":["aho_corasick","ahocorasick","StreamFindIter"],"kind":"struct"},"17:15400:5889":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:9115:7193":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:43028:6906":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"27:1512:4637":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask256"],"kind":"struct"},"2:9976:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:10534:36501":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:7085:6376":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:10092:22895":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:39818:6897":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5266:8898":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:10185:4065":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:4029:10158":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"29:61:27165":{"crate_id":29,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"6:1723:8686":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:39655:6775":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:1510:8558":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"27:1579:4648":{"crate_id":27,"path":["aho_corasick","prefilter","PrefilterObj"],"kind":"struct"},"2:21333:10271":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:9345:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12695:5325":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"11:2231:4206":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:4108:6776":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:40476:6801":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:43533:15435":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"10:44:4207":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:3669:5046":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"26:1380:4747":{"crate_id":26,"path":["regex_syntax","ast","Concat"],"kind":"struct"},"16:6160:21933":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:2374:6132":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:45548:7048":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:15655:5972":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"27:1194:138":{"crate_id":27,"path":["aho_corasick","error","Error"],"kind":"struct"},"1:7980:10060":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:14131:5543":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:31687:8468":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:4031:2906":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"26:1631:27120":{"crate_id":26,"path":["regex_syntax","ast","ClassSet"],"kind":"enum"},"17:15078:5809":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:45064:7007":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:45601:7051":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"28:730:36513":{"crate_id":28,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:8104:7217":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:11187:8059":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"5:143:2789":{"crate_id":5,"path":["alloc","boxed"],"kind":"module"},"9:178:4223":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:45388:7040":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"26:1518:4763":{"crate_id":26,"path":["regex_syntax","ast","ClassAscii"],"kind":"struct"},"16:7528:6470":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:43954:15659":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"28:556:5014":{"crate_id":28,"path":["memchr","cow","Imp"],"kind":"enum"},"16:4468:6175":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:5070:10217":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"27:1156:4596":{"crate_id":27,"path":["aho_corasick","dfa","PremultipliedByteClass"],"kind":"struct"},"6:5002:8816":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:8301:6548":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:4882:6188":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:2140:6638":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:557:3150":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:7321:3089":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"9:0:2694":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:2708:6147":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:4316:2830":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:7514:10073":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:15445:5900":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:4833:757":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:7984:9475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"11:2124:6384":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:6120:22824":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:403:5017":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"11:844:10074":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:3603:2920":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:941:3520":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"28:698:3391":{"crate_id":28,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:8414:2925":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:6494:6288":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:6815:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:41092:4405":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"22:100:2609":{"crate_id":22,"path":["humantime","date","format_rfc3339_millis"],"kind":"function"},"17:10887:36506":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6342:36496":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:3660:3521":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:12371:5337":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:7845:32673":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:40023:4260":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:10950:6823":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:15931:5368":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:12276:917":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:25464:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:742:4238":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:8536:9668":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:414:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:3329:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"29:436:3971":{"crate_id":29,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"5:3270:4786":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13581:5449":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"27:1060:27152":{"crate_id":27,"path":["aho_corasick","ahocorasick","MatchKind"],"kind":"enum"},"16:872:5016":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:11799:5227":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"7:78:21804":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:2274:3789":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:1559:8589":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:4459:2839":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:38809:3524":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:5400:4045":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:12221:4440":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:3329:6164":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"26:2254:4774":{"crate_id":26,"path":["regex_syntax","hir","ClassUnicode"],"kind":"struct"},"6:5283:8909":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:481:32675":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:22227:10354":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"5:1525:4236":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"25:1579:4031":{"crate_id":25,"path":["regex","dfa","EmptyFlags"],"kind":"struct"},"1:4250:10181":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12388:5301":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:4986:5038":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"25:2574:4991":{"crate_id":25,"path":["regex","re_unicode","ReplacerRef"],"kind":"struct"},"17:14752:5664":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:5910:4259":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13526:5430":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"23:303:4037":{"crate_id":23,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"5:669:6720":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:12265:717":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:597:5021":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:1628:8638":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"27:1187:2185":{"crate_id":27,"path":["aho_corasick","dfa","Builder"],"kind":"struct"},"26:2442:4840":{"crate_id":26,"path":["regex_syntax","hir","HirInfo"],"kind":"struct"},"27:1210:4557":{"crate_id":27,"path":["aho_corasick","nfa","NFA"],"kind":"struct"},"26:1569:4774":{"crate_id":26,"path":["regex_syntax","ast","ClassUnicode"],"kind":"struct"},"26:2001:144":{"crate_id":26,"path":["regex_syntax","error","Formatter"],"kind":"struct"},"2:21192:3391":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:2684:6146":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:4268:2906":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:8160:4419":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:12030:5268":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"11:1676:36474":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:12040:27492":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:922:6631":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:15126:5815":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:10284:3622":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:15596:5958":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:4155:15403":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:15313:5863":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:1207:5023":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"30:252:3917":{"crate_id":30,"path":["anstyle_parse","Parser"],"kind":"struct"},"17:15463:5903":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:9259:4434":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:5020:8825":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:44173:2981":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"24:19:2185":{"crate_id":24,"path":["env_filter","filter","Builder"],"kind":"struct"},"1:9226:30186":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"14:220:6630":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5046:8836":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12213:5283":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:5336:8926":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"20:273:2161":{"crate_id":20,"path":["log","Record"],"kind":"struct"},"2:2644:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"27:1146:4595":{"crate_id":27,"path":["aho_corasick","dfa","Premultiplied"],"kind":"struct"},"1:356:3162":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"26:1881:4804":{"crate_id":26,"path":["regex_syntax","ast","SetFlags"],"kind":"struct"},"17:12494:5310":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:3842:6169":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:40:7661":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"26:2238:4745":{"crate_id":26,"path":["regex_syntax","hir","Class"],"kind":"enum"},"1:4141:10165":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:3240:30081":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"25:2332:4993":{"crate_id":25,"path":["regex","re_set","unicode","RegexSet"],"kind":"struct"},"17:13594:5450":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"11:1007:6384":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:21882:10273":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"26:1193:138":{"crate_id":26,"path":["regex_syntax","ast","Error"],"kind":"struct"},"2:45417:7041":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:6760:3034":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:12323:6837":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"26:2049:4680":{"crate_id":26,"path":["regex_syntax","hir","literal","Literal"],"kind":"struct"},"2:41461:3521":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:2205:6731":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"0:399:2284":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Seconds"],"kind":"variant"},"5:5445:4747":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:40283:6798":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:12544:2877":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"28:882:27079":{"crate_id":28,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"27:1079:2491":{"crate_id":27,"path":["aho_corasick","buffer","Buffer"],"kind":"struct"},"2:2435:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"26:1681:4780":{"crate_id":26,"path":["regex_syntax","ast","ClassSetRange"],"kind":"struct"},"10:36:8471":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:12260:1609":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"29:244:32436":{"crate_id":29,"path":["anstream","fmt","Adapter"],"kind":"struct"},"16:7769:6480":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:1142:6642":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"25:1792:4951":{"crate_id":25,"path":["regex","input","ByteInput"],"kind":"struct"},"2:43877:9662":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"24:41:2370":{"crate_id":24,"path":["env_filter","filter","Filter"],"kind":"struct"},"1:903:6727":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:538:8519":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:5743:7191":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:43002:6950":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:918:4238":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:6047:6228":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:11010:3813":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:4273:2852":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:41250:6814":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:6586:36111":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"26:2148:2944":{"crate_id":26,"path":["regex_syntax","hir","ErrorKind"],"kind":"enum"},"1:11021:32639":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:111:307":{"crate_id":5,"path":["alloc","alloc","alloc"],"kind":"function"},"17:10828:36504":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:1968:10099":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:3832:7172":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:14091:5539":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:621:7157":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:7330:9347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:7573:6758":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:2525:9514":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:45569:7049":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"31:23:21848":{"crate_id":31,"path":["utf8parse","types","Action"],"kind":"enum"},"2:12362:6839":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:10068:22877":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:4907:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:542:4123":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"11:787:4236":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"28:81:27068":{"crate_id":28,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"18:538:3974":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:8393:15537":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:2394:6133":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:43865:9659":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:1490:8550":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:6749:6325":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:8093:6530":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"25:2132:4982":{"crate_id":25,"path":["regex","re_builder","set_bytes","RegexSetBuilder"],"kind":"struct"},"2:45646:7068":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"29:181:10130":{"crate_id":29,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"17:14545:5628":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4837:8729":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:14066:5537":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:8029:9487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:30186:2974":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"25:2224:4988":{"crate_id":25,"path":["regex","re_bytes","CaptureNames"],"kind":"struct"},"22:101:2608":{"crate_id":22,"path":["humantime","date","format_rfc3339_micros"],"kind":"function"},"2:46000:7110":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:5134:8852":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:3778:6167":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:12464:23018":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:4587:6179":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:33019:15548":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:42510:3623":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:7529:3155":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"26:1737:4688":{"crate_id":26,"path":["regex_syntax","ast","Assertion"],"kind":"struct"},"6:7575:9463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:2037:5024":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:5846:6210":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:8294:9499":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"26:1694:4781":{"crate_id":26,"path":["regex_syntax","ast","ClassSetUnion"],"kind":"struct"},"17:14311:5588":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:0:2701":{"crate_id":17,"path":["object"],"kind":"module"},"2:2631:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:6560:4175":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11634:5209":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:7597:2972":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:11583:5205":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:1734:641":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:8656:7282":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:11116:6827":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"11:2443:6645":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:46340:7132":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:41992:2890":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:16176:6107":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:2925:3377":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:13766:5491":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:5936:3031":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:2607:15490":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:5722:6158":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"26:1368:4703":{"crate_id":26,"path":["regex_syntax","ast","Alternation"],"kind":"struct"},"1:8798:7290":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"11:2548:8466":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"28:706:4521":{"crate_id":28,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"25:1726:4948":{"crate_id":25,"path":["regex","expand","CaptureRef"],"kind":"struct"},"1:8165:4418":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:25:665":{"crate_id":2,"path":["core","env"],"kind":"macro"},"17:10818:5147":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:6471:9136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:532:8516":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:11051:5160":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:6670:9239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"18:726:3981":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"11:2542:8465":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11865:5235":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"11:1896:6727":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:15720:5990":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:11341:5187":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:11227:5172":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:15039:5808":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:7412:9382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:13972:5241":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:9461:3550":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"18:598:36514":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"11:1566:21890":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:2478:6137":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"25:1642:4926":{"crate_id":25,"path":["regex","exec","ExecNoSync"],"kind":"struct"},"2:46393:7135":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:39981:4258":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:9328:3021":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:1671:8664":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:7546:9447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:39711:6890":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:21770:33615":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:11102:5165":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:13738:5484":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:7570:6162":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:11152:4269":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:42519:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"9:330:8472":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:22540:33229":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:3614:6166":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:3396:6727":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:40041:6914":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:12824:22897":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10671:36505":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:22232:10352":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"11:1051:6639":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:11743:5218":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:43893:9666":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:5008:923":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:1593:8610":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:11677:29531":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:4928:33581":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:21880:10130":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:41328:3520":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:7014:22829":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:44146:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:11836:7209":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"25:1954:4891":{"crate_id":25,"path":["regex","prog","Inst"],"kind":"enum"},"2:2637:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:7250:9737":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:2234:5028":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:680:4542":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:3413:2936":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:39732:6892":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:3014:21963":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"25:1452:36958":{"crate_id":25,"path":["regex","compile","InstHole"],"kind":"enum"},"7:31:21797":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"11:1107:6641":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:5367:22820":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11153:5147":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:2768:6150":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"26:1749:27111":{"crate_id":26,"path":["regex_syntax","ast","AssertionKind"],"kind":"enum"},"17:14298:5587":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:7888:6493":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"28:632:4515":{"crate_id":28,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:2355:4109":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:4800:8701":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:15734:5992":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:7355:6421":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:11026:22907":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:14325:5591":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:40075:6915":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"23:405:2515":{"crate_id":23,"path":["anstyle","style","Style"],"kind":"struct"},"5:7339:2983":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"9:392:21812":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13325:4092":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:7727:4189":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:45210:7022":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:11740:7172":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:38942:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:8547:7272":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"15:0:2699":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:10498:7292":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:4940:6190":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:6821:9286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:7618:4186":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:481:4516":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:217:6719":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:9340:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13814:5501":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:3029:5041":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:6609:9214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:5817:4141":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"11:710:4237":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:12275:1710":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:11089:5164":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:8175:6537":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"26:2510:27146":{"crate_id":26,"path":["regex_syntax","unicode","ClassQuery"],"kind":"enum"},"2:43675:6843":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:6665:22827":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:41894:3016":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:7656:22832":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:22:772":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:6756:9267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:7473:15533":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:10819:3520":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"26:1983:138":{"crate_id":26,"path":["regex_syntax","error","Error"],"kind":"enum"},"5:3237:3520":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:12258:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:7910:22834":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:41816:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:10251:4067":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:7251:3433":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:10541:32637":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"2:11144:6829":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:4087:10161":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:22582:9655":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:2591:2939":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"25:1869:4960":{"crate_id":25,"path":["regex","literal","imp","SingleByteSet"],"kind":"struct"},"2:10911:6822":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:1699:769":{"crate_id":2,"path":["core","mem","forget"],"kind":"function"},"16:8155:6536":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"11:1025:6638":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:6721:9256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:43873:9661":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:22520:33231":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"7:0:1784":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:15249:5846":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:12478:5308":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:4992:8809":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:6231:6262":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:12205:7330":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:150:4117":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:8126:7219":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:4897:7181":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:2499:2157":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:6441:9126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"9:447:21811":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"26:2324:4834":{"crate_id":26,"path":["regex_syntax","hir","Anchor"],"kind":"enum"},"2:30626:3391":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:11023:6825":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:2636:6144":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:12266:861":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:2101:6729":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"27:1236:4609":{"crate_id":27,"path":["aho_corasick","nfa","Dense"],"kind":"struct"},"17:14723:5644":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:4065:10159":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"26:2038:4676":{"crate_id":26,"path":["regex_syntax","hir","literal","Literals"],"kind":"struct"},"11:883:6637":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:15473:5908":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:10832:9669":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:6706:9252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:46256:7120":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13538:5433":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:7966:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:2297:15569":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"5:2756:9518":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:4897:8765":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"27:1675:4667":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesOne"],"kind":"struct"},"17:12621:5320":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"25:2556:4984":{"crate_id":25,"path":["regex","re_unicode","CaptureMatches"],"kind":"struct"},"6:473:8482":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"26:2272:4019":{"crate_id":26,"path":["regex_syntax","hir","ClassUnicodeRange"],"kind":"struct"},"2:39813:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:15:2270":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:3737:3425":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"27:1106:4572":{"crate_id":27,"path":["aho_corasick","dfa","DFA"],"kind":"enum"},"1:3018:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"29:406:3969":{"crate_id":29,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"6:1517:8561":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:5996:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:11497:5195":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:0:2702":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:4641:6181":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:1862:3544":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"27:1126:3987":{"crate_id":27,"path":["aho_corasick","dfa","Standard"],"kind":"struct"},"2:2379:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"26:2068:2164":{"crate_id":26,"path":["regex_syntax","hir","print","Writer"],"kind":"struct"},"25:2508:4988":{"crate_id":25,"path":["regex","re_unicode","CaptureNames"],"kind":"struct"},"17:11313:5182":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:479:8485":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"14:31:6626":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:6738:9259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:9109:3425":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:6460:9128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:15701:5986":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:46245:7119":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"26:2089:27145":{"crate_id":26,"path":["regex_syntax","hir","translate","HirFrame"],"kind":"enum"},"2:43869:9660":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:40000:6782":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:11612:9673":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:11269:22924":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"11:811:6727":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:7539:6161":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:8300:9500":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:14463:5619":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"14:214:6629":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:10044:22894":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:3251:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:8259:6441":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:4913:6189":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:3593:2917":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"5:2287:35925":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:5122:8851":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:4614:6180":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:4965:8796":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"26:2475:4006":{"crate_id":26,"path":["regex_syntax","parser","ParserBuilder"],"kind":"struct"},"2:22504:6857":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"28:797:4542":{"crate_id":28,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13473:5417":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:3264:5029":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13375:5400":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:10029:2890":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:11674:5212":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:5617:9054":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"32:40:3908":{"crate_id":32,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"26:1187:2164":{"crate_id":26,"path":["regex_syntax","ast","print","Writer"],"kind":"struct"},"25:2593:4882":{"crate_id":25,"path":["regex","sparse","SparseSet"],"kind":"struct"},"2:42549:4409":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:12264:701":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:5158:7185":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"23:350:4040":{"crate_id":23,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"16:6504:6289":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:1585:8605":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:4467:2906":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:6813:6339":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:3584:32436":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:5598:9040":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:1574:2487":{"crate_id":2,"path":["core","mem"],"kind":"module"},"11:1891:6645":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"25:2462:4983":{"crate_id":25,"path":["regex","re_trait","Matches"],"kind":"struct"},"2:7887:15539":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:11877:4075":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13235:5383":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:725:10130":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"6:6505:9158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:11102:4985":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:3108:2849":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:10027:2891":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:11843:7209":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:11557:5200":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"26:2390:4746":{"crate_id":26,"path":["regex_syntax","hir","Repetition"],"kind":"struct"},"27:1566:37680":{"crate_id":27,"path":["aho_corasick","prefilter","Candidate"],"kind":"enum"},"1:10924:3555":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:2418:6134":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11166:5168":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:12610:15422":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:15324:5867":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"11:1087:36473":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:6915:9323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:45263:7025":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:39856:10102":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:7144:22830":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"0:398:2040":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision"],"kind":"enum"},"25:0:1865":{"crate_id":25,"path":["regex"],"kind":"module"},"16:8118:6532":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:11460:3165":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"27:1487:4633":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask128"],"kind":"struct"},"2:43275:6827":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:43123:6834":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:5466:8995":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:12342:5295":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11063:5162":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"26:2029:4819":{"crate_id":26,"path":["regex_syntax","hir","interval","IntervalSetIter"],"kind":"struct"},"17:12189:5281":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:2838:6153":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:15266:5853":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:8351:9512":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:9195:3020":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"8:0:2693":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:4821:5037":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:2628:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:5665:9074":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:22087:10362":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:43321:6966":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:7168:7300":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:7052:6372":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:13202:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:11567:7205":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:11773:5223":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"27:971:5014":{"crate_id":27,"path":["aho_corasick","ahocorasick","Imp"],"kind":"enum"},"1:3486:2906":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:4959:8794":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:2425:2389":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"23:315:4038":{"crate_id":23,"path":["anstyle","color","NullFormatter"],"kind":"struct"},"17:12671:5323":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:9858:22889":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:4802:10186":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:43041:6952":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:45164:7019":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:12485:23019":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"28:843:3981":{"crate_id":28,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:13785:5496":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:6895:6353":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:533:3148":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:39721:6891":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:2592:6142":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:7813:6481":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:15116:5814":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:6542:9172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:12768:22875":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"11:123:4202":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"20:198:2488":{"crate_id":20,"path":["log","Level"],"kind":"enum"},"2:1771:1261":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:2175:22952":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"25:1831:36960":{"crate_id":25,"path":["regex","literal","imp","Matcher"],"kind":"enum"},"6:5200:8868":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"25:1213:4877":{"crate_id":25,"path":["regex","re_unicode","Captures"],"kind":"struct"},"1:1072:6643":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:7558:33370":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:5769:6209":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:8426:2926":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13844:5504":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:31759:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4979:8804":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:2508:6138":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:46276:7122":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:39755:15485":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:39748:6893":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:6930:15454":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:5477:9000":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11755:5221":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:3603:6645":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:15197:5837":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"25:1688:36965":{"crate_id":25,"path":["regex","exec","MatchLiteralType"],"kind":"enum"},"11:2536:4701":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:12605:15423":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4971:8799":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:15151:5824":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:7428:4248":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10661:5145":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"18:573:4517":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12900:4085":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:9132:7296":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:4824:8719":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:7400:31630":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"27:929:27153":{"crate_id":27,"path":["aho_corasick","state_id","StateID"],"kind":"trait"},"2:42232:9587":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13437:5408":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"0:405:2293":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Nanos"],"kind":"variant"},"17:13387:5401":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:7456:3425":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"26:2307:4020":{"crate_id":26,"path":["regex_syntax","hir","ClassBytesRange"],"kind":"struct"},"1:8606:7178":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"25:1878:4957":{"crate_id":25,"path":["regex","literal","imp","Memmem"],"kind":"struct"},"23:281:3810":{"crate_id":23,"path":["anstyle","color","RgbColor"],"kind":"struct"},"17:14503:5624":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:14147:5548":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:6634:4177":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:5472:8998":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:5225:8879":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:13173:5367":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:5385:4044":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:42334:2889":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12353:5299":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:16105:6086":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:6788:9277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"15:394:21925":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"28:760:4517":{"crate_id":28,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"2:10031:2898":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12278:5288":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"25:1433:36961":{"crate_id":25,"path":["regex","compile","MaybeInst"],"kind":"enum"},"25:213:36952":{"crate_id":25,"path":["regex","dfa","InstPtrs"],"kind":"struct"},"5:4308:3520":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:6619:2491":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:43171:6825":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:12270:836":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:32236:6397":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"28:752:4534":{"crate_id":28,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:10039:2897":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:2883:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:16187:6108":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:4352:6173":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:41697:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:9247:4675":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:12289:5289":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:43726:15436":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11115:5166":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:2788:6151":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"28:852:27078":{"crate_id":28,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11547:5086":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:4174:15470":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:40269:6797":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"26:1454:27119":{"crate_id":26,"path":["regex_syntax","ast","HexLiteralKind"],"kind":"enum"},"1:10247:2216":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:8469:2931":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"25:2543:4990":{"crate_id":25,"path":["regex","re_unicode","SubCaptureMatches"],"kind":"struct"},"2:6419:6785":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:6802:6338":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:39000:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:8782:7182":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:867:5015":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:22448:4272":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"27:1493:4634":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask256"],"kind":"struct"},"26:2491:138":{"crate_id":26,"path":["regex_syntax","unicode","Error"],"kind":"enum"},"2:10666:10130":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:9213:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:4523:2842":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:8456:2929":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:33215:15551":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:41032:6809":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"26:2012:4818":{"crate_id":26,"path":["regex_syntax","hir","interval","IntervalSet"],"kind":"struct"},"17:11467:5193":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:15778:6007":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:1741:3750":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:6079:4125":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:11235:9596":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:39057:6883":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:9807:22878":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:8197:9488":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:10600:2947":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"25:2254:4991":{"crate_id":25,"path":["regex","re_bytes","ReplacerRef"],"kind":"struct"},"16:2548:6140":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:11369:7323":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:5146:8853":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:43303:6965":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4985:8806":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:41232:6812":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:9737:22872":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"26:1405:27110":{"crate_id":26,"path":["regex_syntax","ast","LiteralKind"],"kind":"enum"},"1:11431:6702":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"26:1328:27105":{"crate_id":26,"path":["regex_syntax","ast","Ast"],"kind":"enum"},"18:670:4541":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:42734:6942":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:44083:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:836:3520":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:44062:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:7428:22831":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:465:4702":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:14855:5750":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10317:4069":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:9938:22892":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"29:341:3966":{"crate_id":29,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"17:437:5019":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"29:451:4606":{"crate_id":29,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"30:109:3919":{"crate_id":30,"path":["anstyle_parse","params","Params"],"kind":"struct"},"2:42006:2898":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12543:5318":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:1565:8591":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"26:2300:4837":{"crate_id":26,"path":["regex_syntax","hir","ClassBytesIter"],"kind":"struct"},"25:1473:4027":{"crate_id":25,"path":["regex","compile","SuffixCacheEntry"],"kind":"struct"},"16:2728:6148":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:45231:7023":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:6471:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"25:987:27096":{"crate_id":25,"path":["regex","re_bytes","Replacer"],"kind":"trait"},"17:13363:5397":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:12261:1695":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:8584:9363":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:9363:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"26:1470:4745":{"crate_id":26,"path":["regex_syntax","ast","Class"],"kind":"enum"},"17:15836:6017":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:4330:7175":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:5553:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"5:2112:6730":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:12508:5313":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"0:0:2042":{"crate_id":0,"path":["env_logger"],"kind":"module"},"26:1602:27117":{"crate_id":26,"path":["regex_syntax","ast","ClassUnicodeOpKind"],"kind":"enum"},"6:6597:9209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"27:985:4535":{"crate_id":27,"path":["aho_corasick","ahocorasick","FindIter"],"kind":"struct"},"33:0:3609":{"crate_id":33,"path":["anstyle_query"],"kind":"module"},"5:1544:4237":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:8258:7222":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:10648:3153":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:4228:31633":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12557:4061":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:1547:8581":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:11443:5192":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:12993:22898":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:1063:6639":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:6608:6792":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:15390:5886":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"25:1903:4965":{"crate_id":25,"path":["regex","pikevm","Threads"],"kind":"struct"},"0:403:2290":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Micros"],"kind":"variant"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:11256:5176":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:2640:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:15769:6005":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"27:1280:4565":{"crate_id":27,"path":["aho_corasick","nfa","Compiler"],"kind":"struct"},"16:5037:6193":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"3:0:482":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:10997:5156":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:9629:7217":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:13485:5420":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:15616:5964":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:16259:5401":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:43461:6775":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"26:1785:4794":{"crate_id":26,"path":["regex_syntax","ast","RepetitionOp"],"kind":"struct"},"2:12590:4564":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:15168:5829":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"27:1093:4589":{"crate_id":27,"path":["aho_corasick","classes","ByteClassRepresentatives"],"kind":"struct"},"27:1420:2185":{"crate_id":27,"path":["aho_corasick","packed","teddy","compile","Builder"],"kind":"struct"},"2:45519:7047":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:4570:2844":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:3243:9702":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"28:546:4516":{"crate_id":28,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:14599:5642":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"26:1166:4706":{"crate_id":26,"path":["regex_syntax","ast","parse","NestLimiter"],"kind":"struct"},"1:880:4236":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"25:2035:4979":{"crate_id":25,"path":["regex","prog","InstRanges"],"kind":"struct"},"1:5502:7187":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"16:4743:6183":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:14246:5581":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:13272:5396":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:6491:9147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:10524:5143":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:8253:9490":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:0:538":{"crate_id":2,"path":["core"],"kind":"module"},"17:15214:5840":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:45079:7008":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:40492:6802":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:30239:2887":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:3123:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11853:5234":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:1602:4786":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:15356:5878":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"26:1531:27115":{"crate_id":26,"path":["regex_syntax","ast","ClassAsciiKind"],"kind":"enum"},"2:7357:15541":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:3281:2948":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"26:1893:4014":{"crate_id":26,"path":["regex_syntax","ast","Flags"],"kind":"struct"},"11:2569:6754":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:45675:7069":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"14:7:6626":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:4543:2843":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:6433:4173":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"26:2500:4845":{"crate_id":26,"path":["regex_syntax","unicode","CaseFoldError"],"kind":"struct"},"27:1584:4518":{"crate_id":27,"path":["aho_corasick","prefilter","PrefilterState"],"kind":"struct"},"25:1601:4036":{"crate_id":25,"path":["regex","dfa","StateFlags"],"kind":"struct"},"27:1376:4535":{"crate_id":27,"path":["aho_corasick","packed","api","FindIter"],"kind":"struct"},"2:40009:6911":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:13528:2982":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:3369:2848":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"31:88:3917":{"crate_id":31,"path":["utf8parse","Parser"],"kind":"struct"},"1:8580:7275":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:4132:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"5:5449:15411":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:40124:6795":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"22:102:2610":{"crate_id":22,"path":["humantime","date","format_rfc3339_nanos"],"kind":"function"},"2:30250:33235":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"27:1101:4593":{"crate_id":27,"path":["aho_corasick","classes","ByteClassBuilder"],"kind":"struct"},"2:31743:2840":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"11:1160:6643":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:7043:10269":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:939:6634":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11144:32486":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:14038:5532":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:11517:32670":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:11214:5171":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:3934:7173":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:41344:3425":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:10905:5149":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"25:2518:2931":{"crate_id":25,"path":["regex","re_unicode","Split"],"kind":"struct"},"30:26:27167":{"crate_id":30,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"17:14587:5635":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:2966:15406":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"18:659:4535":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"22:192:138":{"crate_id":22,"path":["humantime","date","Error"],"kind":"enum"},"17:10018:22874":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11189:5169":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:15678:5985":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:4079:10160":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:14356:5597":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:12100:15615":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:41405:2977":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:15426:5895":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:5863:22822":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:13774:5493":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"23:0:2044":{"crate_id":23,"path":["anstyle"],"kind":"module"},"2:43452:6893":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:12252:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:12201:5282":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"25:1405:36962":{"crate_id":25,"path":["regex","backtrack","Job"],"kind":"enum"},"6:5306:8917":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:3475:6165":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:11075:4061":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:8000:3554":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:1585:6727":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:13046:5346":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13308:4090":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"9:482:21810":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:5361:8932":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:7643:2953":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:7994:10061":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:521:27080":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:2606:10130":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"25:1746:2840":{"crate_id":25,"path":["regex","expand","Ref"],"kind":"enum"},"6:6775:9270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:15333:5870":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:21229:33609":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"11:430:36472":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5546:9020":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:14529:5626":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"25:1822:4952":{"crate_id":25,"path":["regex","literal","imp","LiteralSearcher"],"kind":"struct"},"2:7703:2829":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:2087:2943":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:2808:6152":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"26:1392:4680":{"crate_id":26,"path":["regex_syntax","ast","Literal"],"kind":"struct"},"1:7293:29083":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:12929:5337":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:11133:7293":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:37596:15556":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:10876:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:41394:2976":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:8742:10234":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:13224:33719":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:10988:6824":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"25:1895:4440":{"crate_id":25,"path":["regex","pikevm","Cache"],"kind":"struct"},"22:0:1864":{"crate_id":22,"path":["humantime"],"kind":"module"},"16:8188:6540":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:11293:22925":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:22482:33378":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:4137:10164":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:3767:10141":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"16:6940:4137":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:11405:5191":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"26:1143:27127":{"crate_id":26,"path":["regex_syntax","ast","parse","GroupState"],"kind":"enum"},"6:1699:8677":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5457:8989":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:39050:6882":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:43919:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:40469:6800":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"26:1106:4006":{"crate_id":26,"path":["regex_syntax","ast","parse","ParserBuilder"],"kind":"struct"},"1:1596:4785":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:1516:4235":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:15102:5813":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:13024:22899":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:21339:10274":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"26:1057:4687":{"crate_id":26,"path":["regex_syntax","utf8","ScalarRange"],"kind":"struct"},"1:5014:10212":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:7909:3164":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"11:800:6645":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:15222:5842":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:1707:8681":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"22:157:3000":{"crate_id":22,"path":["humantime","duration","FormattedDuration"],"kind":"struct"},"25:1398:4440":{"crate_id":25,"path":["regex","backtrack","Cache"],"kind":"struct"},"17:16079:6080":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:44162:7002":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:12269:855":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"25:2565:4983":{"crate_id":25,"path":["regex","re_unicode","Matches"],"kind":"struct"},"17:12707:5326":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:1653:8657":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:11915:22993":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"26:1917:27112":{"crate_id":26,"path":["regex_syntax","ast","FlagsItemKind"],"kind":"enum"},"17:16050:5396":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:3246:9703":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:14341:5593":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:2295:15568":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"20:292:2160":{"crate_id":20,"path":["log","Metadata"],"kind":"struct"},"2:41580:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:8265:9492":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:2660:2940":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:9254:4425":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:46119:7113":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"25:2183:4876":{"crate_id":25,"path":["regex","re_bytes","Regex"],"kind":"struct"},"23:429:4041":{"crate_id":23,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"27:923:10130":{"crate_id":27,"path":["aho_corasick","state_id","private","Sealed"],"kind":"trait"},"17:14235:5579":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:16235:6118":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:7924:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:15521:5945":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:10037:2896":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"29:114:2936":{"crate_id":29,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"17:12851:4082":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"27:1085:4556":{"crate_id":27,"path":["aho_corasick","classes","ByteClasses"],"kind":"struct"},"2:43112:6960":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:5352:8928":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"6:7429:9383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:6466:6285":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:4560:6178":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"26:1489:4759":{"crate_id":26,"path":["regex_syntax","ast","ClassPerl"],"kind":"struct"},"17:12659:5322":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:12253:1105":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"26:2122:4014":{"crate_id":26,"path":["regex_syntax","hir","translate","Flags"],"kind":"struct"},"2:21967:10357":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:12433:4079":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:14260:5583":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12724:22896":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:41384:3090":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:6385:6279":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:635:4534":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12863:5336":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:11761:7173":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"26:2505:4846":{"crate_id":26,"path":["regex_syntax","unicode","UnicodeWordError"],"kind":"struct"},"17:14516:5625":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:726:10143":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:15456:5901":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:7755:4192":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:15410:5892":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:46317:7125":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:14436:5617":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:1578:3425":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:41541:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:6540:6645":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:13146:5359":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:6758:6326":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:9159:10243":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:15992:6065":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:41210:7174":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"22:227:3005":{"crate_id":22,"path":["humantime","date","Rfc3339Timestamp"],"kind":"struct"},"27:1609:4654":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesBuilder"],"kind":"struct"},"28:740:36512":{"crate_id":28,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:2279:2915":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:5052:8838":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13922:5518":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:7545:6755":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"27:1411:4620":{"crate_id":27,"path":["aho_corasick","packed","rabinkarp","RabinKarp"],"kind":"struct"},"16:5756:6204":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:10020:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:39874:6899":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:40062:6791":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:570:8535":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:637:7158":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:3026:35794":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"25:2503:4876":{"crate_id":25,"path":["regex","re_unicode","Regex"],"kind":"struct"},"2:32901:2988":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11647:5210":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:10473:32679":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:909:6644":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:10612:5144":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:39940:2928":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:1607:4671":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:5581:9033":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:9101:7295":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13946:5519":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:43129:6961":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:10813:7312":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:7314:9335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:6962:4180":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:43648:6982":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:5489:9003":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:6629:9222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"9:53:4208":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"26:1281:4405":{"crate_id":26,"path":["regex_syntax","ast","Span"],"kind":"struct"},"1:645:10057":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:3335:15468":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:12279:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"5:6407:10365":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"22:99:2611":{"crate_id":22,"path":["humantime","date","format_rfc3339_seconds"],"kind":"function"},"2:12658:15429":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:31750:6876":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:12268:849":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:6066:6235":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:45248:7024":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:3354:33207":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:22589:6869":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:8174:7221":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"30:285:3961":{"crate_id":30,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"25:1543:226":{"crate_id":25,"path":["regex","dfa","Result"],"kind":"enum"},"16:3899:6170":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12597:5319":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"5:5401:36111":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:7648:6477":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:8138:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:45096:7011":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:4035:10157":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10877:5148":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:4718:6182":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:6746:3033":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:10155:4044":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:6427:4171":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:3018:6399":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:39781:15486":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:43153:2931":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:2030:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:7398:35923":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:38893:6878":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"29:313:3965":{"crate_id":29,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"1:9174:10245":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:14912:5787":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:8393:2953":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"18:613:36513":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:7928:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:7473:4133":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"27:1246:4855":{"crate_id":27,"path":["aho_corasick","nfa","Transitions"],"kind":"enum"},"2:42013:2899":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"27:1260:4611":{"crate_id":27,"path":["aho_corasick","nfa","IterTransitionsMut"],"kind":"struct"},"2:45181:7020":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:16212:6113":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:14977:5797":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"11:2304:6384":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:9781:22888":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:1580:8603":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:6581:3023":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12792:5105":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:1054:6638":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"25:1719:4945":{"crate_id":25,"path":["regex","exec","ProgramCacheInner"],"kind":"struct"},"27:1666:4666":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesBuilder"],"kind":"struct"},"16:5897:4145":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:15944:5382":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"26:1849:27107":{"crate_id":26,"path":["regex_syntax","ast","GroupKind"],"kind":"enum"},"22:164:132":{"crate_id":22,"path":["humantime","wrapper","Duration"],"kind":"struct"},"17:11661:5211":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:1062:36111":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:12267:843":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"18:689:4544":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:3249:35916":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:9144:10244":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:11606:9672":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:623:36512":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:3196:6129":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:22496:6856":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:45143:7014":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:22011:10358":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:43583:6980":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:10855:7317":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"17:12647:5321":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"18:589:4521":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:5320:8922":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:7631:6762":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:22432:4249":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:1169:35792":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:5107:6195":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:4514:2841":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:21734:10277":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:21456:10272":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:3028:9517":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:10904:32485":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:4238:2906":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"11:299:9648":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:13187:5368":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:8226:22835":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"27:998:4574":{"crate_id":27,"path":["aho_corasick","ahocorasick","FindOverlappingIter"],"kind":"struct"},"2:45846:7076":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:10932:7190":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:8563:7273":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:11829:30228":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:31761:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:1189:35963":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:45111:7012":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:497:8490":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:21458:4003":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:6849:6351":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7695:6479":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:5960:6220":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:2712:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:7348:3425":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:6519:9159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"23:184:3808":{"crate_id":23,"path":["anstyle","color","Color"],"kind":"enum"},"6:7584:9466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:9977:2528":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:10573:36508":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:4841:10175":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:3314:15559":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:531:4518":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12362:5300":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:3321:2654":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"27:1309:4618":{"crate_id":27,"path":["aho_corasick","nfa","AllBytesIter"],"kind":"struct"},"2:3158:10089":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:3077:15407":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:15273:5854":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:563:3976":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"9:424:21813":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:5039:8834":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"23:372:3812":{"crate_id":23,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"17:12887:4083":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5445:8980":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:3202:1241":{"crate_id":1,"path":["std","io","prelude"],"kind":"module"},"28:655:3974":{"crate_id":28,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:11595:4072":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:10964:4421":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"5:1309:6384":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13455:5416":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"26:2058:4010":{"crate_id":26,"path":["regex_syntax","hir","print","PrinterBuilder"],"kind":"struct"},"2:8075:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:3341:15467":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:1354:6643":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:7794:5021":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"25:1994:4975":{"crate_id":25,"path":["regex","prog","InstEmptyLook"],"kind":"struct"},"26:2109:4824":{"crate_id":26,"path":["regex_syntax","hir","translate","TranslatorI"],"kind":"struct"},"30:137:4606":{"crate_id":30,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"18:80:27068":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:7452:9390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"27:1542:4641":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddyFat3Mask256"],"kind":"struct"},"27:961:4571":{"crate_id":27,"path":["aho_corasick","ahocorasick","AhoCorasick"],"kind":"struct"},"1:9219:3147":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:5075:6194":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:15092:5812":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4916:8778":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:2338:6130":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:40110:4532":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"11:2562:8469":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:1648:2906":{"crate_id":2,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"1:7645:3944":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"28:114:27070":{"crate_id":28,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:3283:35915":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"26:1706:4783":{"crate_id":26,"path":["regex_syntax","ast","ClassSetBinaryOp"],"kind":"struct"},"1:8268:2944":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:10137:22871":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:5083:8848":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:12132:2582":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:10284:4068":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:6729:9257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"6:6664:9236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:45808:7074":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:0:1601":{"crate_id":1,"path":["std"],"kind":"module"},"17:13015:4079":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4909:8774":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:38980:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:3324:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:43436:6970":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"27:1200:2944":{"crate_id":27,"path":["aho_corasick","error","ErrorKind"],"kind":"enum"},"20:286:2873":{"crate_id":20,"path":["log","RecordBuilder"],"kind":"struct"},"17:10982:22906":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"26:2544:27149":{"crate_id":26,"path":["regex_syntax","utf8","Utf8Sequence"],"kind":"enum"},"1:10947:30184":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"22:180:2490":{"crate_id":22,"path":["humantime","wrapper","Timestamp"],"kind":"struct"},"2:39911:6906":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"16:2458:6136":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"26:1081:27126":{"crate_id":26,"path":["regex_syntax","ast","parse","Primitive"],"kind":"enum"},"1:4724:10162":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:491:8487":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"18:507:4517":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:40085:4261":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"0:401:2287":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Millis"],"kind":"variant"},"6:4924:8780":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:10488:33200":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:42962:6945":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:7111:6381":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:12116:6832":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:41619:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:11482:30191":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"2:43889:9665":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"27:1499:4635":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddyFat1Mask256"],"kind":"struct"},"17:15582:5952":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:832:6644":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:22311:6853":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:11817:4439":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"25:1526:4855":{"crate_id":25,"path":["regex","dfa","Transitions"],"kind":"struct"},"2:1854:9521":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:45923:7109":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:8073:6529":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:8463:2930":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:5522:7188":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:2438:6135":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:5624:9057":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:44065:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"25:1770:4949":{"crate_id":25,"path":["regex","input","InputAt"],"kind":"struct"},"16:6976:4181":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:9085:4421":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:8493:10139":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:5390:8948":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:14051:5534":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:46432:7151":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:2936:21962":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:5307:6196":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:12175:5277":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12225:5284":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:5400:8954":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"26:1206:2944":{"crate_id":26,"path":["regex_syntax","ast","ErrorKind"],"kind":"enum"},"1:3518:2914":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"30:198:21848":{"crate_id":30,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"2:37541:15555":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"13:0:2691":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:40525:6805":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"29:377:4508":{"crate_id":29,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"6:5236:8883":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5528:9009":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:6692:3027":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:13438:6852":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:15376:5884":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"}},"external_crates":{"31":{"name":"utf8parse","html_root_url":null},"28":{"name":"memchr","html_root_url":null},"25":{"name":"regex","html_root_url":null},"22":{"name":"humantime","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"colorchoice","html_root_url":null},"29":{"name":"anstream","html_root_url":null},"26":{"name":"regex_syntax","html_root_url":null},"23":{"name":"anstyle","html_root_url":null},"20":{"name":"log","html_root_url":"https://docs.rs/log/0.4.17/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"anstyle_query","html_root_url":null},"30":{"name":"anstyle_parse","html_root_url":null},"27":{"name":"aho_corasick","html_root_url":null},"24":{"name":"env_filter","html_root_url":null},"21":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}