{"root":"0:0:1951","crate_version":"0.11.0","includes_private":false,"index":{"a:2:42130:2892-0:156:2399":{"id":"a:2:42130:2892-0:156:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:2892","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5551:35368":{"id":"5:5551:35368","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2730-0:336:2129":{"id":"b:2:2730-0:336:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5811:1596":{"id":"5:5811:1596","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:254-0:60:2266":{"id":"a:2:2948:254-0:60:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2726-0:355:256":{"id":"b:2:2726-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:2143"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:687-0:399:1949":{"id":"b:5:687-0:399:1949","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2740","5:690:2335","5:691:3388"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2426-0:156:2399":{"id":"b:2:2426-0:156:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2428:2420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32418:244-0:156:2399":{"id":"a:2:32418:244-0:156:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32418:244-0:355:256":{"id":"a:2:32418:244-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12826:34681":{"id":"2:12826:34681","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12443:4677","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::matches":"2:12823:2298"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44124:7040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:379:783":{"id":"0:379:783","crate_id":0,"name":"hash","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,33],"end":[12,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10101:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23:2083":{"id":"0:23:2083","crate_id":0,"name":"DEFAULT_WRITE_STYLE_ENV","span":{"filename":"src/logger.rs","begin":[13,0],"end":[13,59]},"visibility":"public","docs":"The default name for the environment variable to read style preferences from.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"expr":"\"RUST_LOG_STYLE\"","value":null,"is_literal":true}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[793,0],"end":[800,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2777:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:105:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:34:731":{"id":"0:34:731","crate_id":0,"name":"format","span":{"filename":"src/logger.rs","begin":[243,4],"end":[249,5]},"visibility":"public","docs":"Sets the format function for formatting the log output.\n\nThis function is called on each record logged and should format the\nlog record and output it to the given [`Formatter`].\n\nThe format function is expected to output the string directly to the\n`Formatter` so that implementations can use the [`std::fmt`] macros\nto format and output without intermediate heap allocations. The default\n`env_logger` formatter takes advantage of this.\n\nWhen the `color` feature is enabled, styling via ANSI escape codes is supported and the\noutput will automatically respect [`Builder::write_style`].\n\n# Examples\n\nUse a custom format to write only the log message:\n\n```\nuse std::io::Write;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}\", record.args()));\n```\n\n[`Formatter`]: fmt/struct.Formatter.html\n[`String`]: https://doc.rust-lang.org/stable/std/string/struct.String.html\n[`std::fmt`]: https://doc.rust-lang.org/std/fmt/index.html","links":{"`Builder::write_style`":"0:52:2240"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["format",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"2:3126:138","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:277:2074","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2741-0:336:2129":{"id":"b:2:2741-0:336:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2730-0:156:2399":{"id":"b:2:2730-0:156:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:386:2548":{"id":"0:386:2548","crate_id":0,"name":"Auto","span":{"filename":"src/fmt/writer/mod.rs","begin":[16,4],"end":[16,8]},"visibility":"default","docs":"Try to print styles, but don't force the issue.","links":{},"attrs":["#[default]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2726-0:247:141":{"id":"b:2:2726-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:2143"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:412:719":{"id":"0:412:719","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[61,22],"end":[61,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1951":{"id":"0:0:1951","crate_id":0,"name":"env_logger","span":{"filename":"src/lib.rs","begin":[7,0],"end":[283,24]},"visibility":"public","docs":"A simple logger that can be configured via environment variables, for use\nwith the logging facade exposed by the [`log` crate][log-crate-url].\n\nDespite having \"env\" in its name, **`env_logger`** can also be configured by\nother means besides environment variables. See [the examples][gh-repo-examples]\nin the source repository for more approaches.\n\nBy default, `env_logger` writes logs to `stderr`, but can be configured to\ninstead write them to `stdout`.\n\n## Example\n\n```\nuse log::{debug, error, log_enabled, info, Level};\n\nenv_logger::init();\n\ndebug!(\"this is a debug {}\", \"message\");\nerror!(\"this is printed by default\");\n\nif log_enabled!(Level::Info) {\n    let x = 3 * 4; // expensive computation\n    info!(\"the answer was: {}\", x);\n}\n```\n\nAssumes the binary is `main`:\n\n```{.bash}\n$ RUST_LOG=error ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n```\n\n```{.bash}\n$ RUST_LOG=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\n```{.bash}\n$ RUST_LOG=debug ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nYou can also set the log level on a per module basis:\n\n```{.bash}\n$ RUST_LOG=main=info ./main\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nAnd enable all logging:\n\n```{.bash}\n$ RUST_LOG=main ./main\n[2017-11-09T02:12:24Z DEBUG main] this is a debug message\n[2017-11-09T02:12:24Z ERROR main] this is printed by default\n[2017-11-09T02:12:24Z INFO main] the answer was: 12\n```\n\nIf the binary name contains hyphens, you will need to replace\nthem with underscores:\n\n```{.bash}\n$ RUST_LOG=my_app ./my-app\n[2017-11-09T02:12:24Z DEBUG my_app] this is a debug message\n[2017-11-09T02:12:24Z ERROR my_app] this is printed by default\n[2017-11-09T02:12:24Z INFO my_app] the answer was: 12\n```\n\nThis is because Rust modules and crates cannot contain hyphens\nin their name, although `cargo` continues to accept them.\n\nSee the documentation for the [`log` crate][log-crate-url] for more\ninformation about its API.\n\n## Enabling logging\n\n**By default all logging is disabled except for the `error` level**\n\nThe **`RUST_LOG`** environment variable controls logging with the syntax:\n```text\nRUST_LOG=[target][=][level][,...]\n```\nOr in other words, its a comma-separated list of directives.\nDirectives can filter by **target**, by **level**, or both (using `=`).\n\nFor example,\n```text\nRUST_LOG=data=debug,hardware=debug\n```\n\n**target** is typically the path of the module the message\nin question originated from, though it can be overridden.\nThe path is rooted in the name of the crate it was compiled for, so if\nyour program is in a file called, for example, `hello.rs`, the path would\nsimply be `hello`.\n\nFurthermore, the log can be filtered using prefix-search based on the\nspecified log target.\n\nFor example, `RUST_LOG=example` would match the following targets:\n- `example`\n- `example::test`\n- `example::test::module::submodule`\n- `examples::and_more_examples`\n\nWhen providing the crate name or a module path, explicitly specifying the\nlog level is optional. If omitted, all logging for the item will be\nenabled.\n\n**level** is the maximum [`log::Level`][level-enum] to be shown and includes:\n- `error`\n- `warn`\n- `info`\n- `debug`\n- `trace`\n- `off` (pseudo level to disable all logging for the target)\n\nLogging level names are case-insensitive; e.g.,\n`debug`, `DEBUG`, and `dEbuG` all represent the same logging level. For\nconsistency, our convention is to use the lower case names. Where our docs\ndo use other forms, they do so in the context of specific examples, so you\nwon't be surprised if you see similar usage in the wild.\n\nSome examples of valid values of `RUST_LOG` are:\n\n- `RUST_LOG=hello` turns on all logging for the `hello` module\n- `RUST_LOG=trace` turns on all logging for the application, regardless of its name\n- `RUST_LOG=TRACE` turns on all logging for the application, regardless of its name (same as previous)\n- `RUST_LOG=info` turns on all info logging\n- `RUST_LOG=INFO` turns on all info logging (same as previous)\n- `RUST_LOG=hello=debug` turns on debug logging for `hello`\n- `RUST_LOG=hello=DEBUG` turns on debug logging for `hello` (same as previous)\n- `RUST_LOG=hello,std::option` turns on `hello`, and std's option logging\n- `RUST_LOG=error,hello=warn` turn on global error logging and also warn for `hello`\n- `RUST_LOG=error,hello=off`  turn on global error logging, but turn off logging for `hello`\n- `RUST_LOG=off` turns off all logging for the application\n- `RUST_LOG=OFF` turns off all logging for the application (same as previous)\n\n## Filtering results\n\nA `RUST_LOG` directive may include a regex filter. The syntax is to append `/`\nfollowed by a regex. Each message is checked against the regex, and is only\nlogged if it matches. Note that the matching is done after formatting the\nlog string but before adding any logging meta-data. There is a single filter\nfor all modules.\n\nSome examples:\n\n* `hello/foo` turns on all logging for the 'hello' module where the log\n  message includes 'foo'.\n* `info/f.o` turns on all info logging where the log message includes 'foo',\n  'f1o', 'fao', etc.\n* `hello=debug/foo*foo` turns on debug logging for 'hello' where the log\n  message includes 'foofoo' or 'fofoo' or 'fooooooofoo', etc.\n* `error,hello=warn/[0-9]scopes` turn on global error logging and also\n  warn for hello. In both cases the log message must include a single digit\n  number followed by 'scopes'.\n\n## Capturing logs in tests\n\nRecords logged during `cargo test` will not be captured by the test harness by default.\nThe [`Builder::is_test`] method can be used in unit tests to ensure logs will be captured:\n\n```\n#[cfg(test)]\nmod tests {\n    use log::info;\n\n    fn init() {\n        let _ = env_logger::builder().is_test(true).try_init();\n    }\n\n    #[test]\n    fn it_works() {\n        init();\n\n        info!(\"This record will be captured by `cargo test`\");\n\n        assert_eq!(2, 1 + 1);\n    }\n}\n```\n\nEnabling test capturing comes at the expense of color and other style support\nand may have performance implications.\n\n## Disabling colors\n\nColors and other styles can be configured with the `RUST_LOG_STYLE`\nenvironment variable. It accepts the following values:\n\n* `auto` (default) will attempt to print style characters, but don't force the issue.\nIf the console isn't available on Windows, or if TERM=dumb, for example, then don't print colors.\n* `always` will always print style characters even if they aren't supported by the terminal.\nThis includes emitting ANSI colors on Windows if the console API is unavailable.\n* `never` will never print style characters.\n\n## Tweaking the default format\n\nParts of the default format can be excluded from the log output using the [`Builder`].\nThe following example excludes the timestamp from the log output:\n\n```\nenv_logger::builder()\n    .format_timestamp(None)\n    .init();\n```\n\n### Stability of the default format\n\nThe default format won't optimise for long-term stability, and explicitly makes no\nguarantees about the stability of its output across major, minor or patch version\nbumps during `0.x`.\n\nIf you want to capture or interpret the output of `env_logger` programmatically\nthen you should use a custom format.\n\n### Using a custom format\n\nCustom formats can be provided as closures to the [`Builder`].\nThese closures take a [`Formatter`][crate::fmt::Formatter] and `log::Record` as arguments:\n\n```\nuse std::io::Write;\n\nenv_logger::builder()\n    .format(|buf, record| {\n        writeln!(buf, \"{}: {}\", record.level(), record.args())\n    })\n    .init();\n```\n\nSee the [`fmt`] module for more details about custom formats.\n\n## Specifying defaults for environment variables\n\n`env_logger` can read configuration from environment variables.\nIf these variables aren't present, the default value to use can be tweaked with the [`Env`] type.\nThe following example defaults to log `warn` and above if the `RUST_LOG` environment variable\nisn't set:\n\n```\nuse env_logger::Env;\n\nenv_logger::Builder::from_env(Env::default().default_filter_or(\"warn\")).init();\n```\n\n[gh-repo-examples]: https://github.com/rust-cli/env_logger/tree/main/examples\n[level-enum]: https://docs.rs/log/latest/log/enum.Level.html\n[log-crate-url]: https://docs.rs/log\n[`Builder`]: struct.Builder.html\n[`Builder::is_test`]: struct.Builder.html#method.is_test\n[`Env`]: struct.Env.html\n[`fmt`]: fmt/index.html","links":{"crate::fmt::Formatter":"0:247:141"},"attrs":["#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\nhtml_favicon_url = \"https://www.rust-lang.org/static/images/favicon.ico\")]","#![deny(missing_debug_implementations, missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:128:719","0:320-0:355:256","0:321-0:399:1949","0:322-0:365:1950","0:323-0:3:1948"],"is_stripped":false}}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[61,15],"end":[61,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:410:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2741-0:399:1949":{"id":"b:2:2741-0:399:1949","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12837:34685":{"id":"2:12837:34685","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12846:34690":{"id":"2:12846:34690","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:4677"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:2245":{"id":"0:54:2245","crate_id":0,"name":"is_test","span":{"filename":"src/logger.rs","begin":[442,4],"end":[445,5]},"visibility":"public","docs":"Sets whether or not the logger will be used in unit tests.\n\nIf `is_test` is `true` then the logger will allow the testing framework to\ncapture log records rather than printing them to the terminal directly.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["is_test",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12799:29512":{"id":"2:12799:29512","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:4677"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12259:6906","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12746":{"id":"2:12746","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12747:875","2:12748:3330","2:12749:34672","2:12750:34673","2:12752:34674","2:12755:2497","2:12756:34675","2:12757:340","2:12758:29480","2:12759:2327","2:12761:29477","2:12763:29478","2:12765:29479","2:12767:34676","2:12768:34677","2:12769:29503","2:12770:29504","2:12771:6925","2:12772:7052","2:12773:3696","2:12774:33287","2:12775:33289","2:12776:3688","2:12777:34678","2:12778:33300","2:12779:29522","2:12782:28887","2:12785:28889","2:12788:3368","2:12792:3329","2:12796:2487","2:12799:29512","2:12802:29514","2:12805:34679","2:12808:34680","2:12811:29516","2:12814:29518","2:12817:29520","2:12820:29521","2:12823:2298","2:12826:34681","2:12829:34682","2:12832:34683","2:12835:34684","2:12837:34685","2:12839:34686","2:12841:34687","2:12842:34688","2:12843:34689","2:12846:34690","2:12849:26957","2:12852:29523","2:12855:34691","2:12858:34692","2:12861:34693","2:12864:2227","2:12866:28033","2:12867:29421","2:12868:2779","2:12869:28037","2:12870:28038","2:12871:29424","2:12872:29425","2:12873:29426","2:12874:34694","2:12876:10024","2:12877:26557"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12866:28033":{"id":"2:12866:28033","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:2154":{"id":"0:68:2154","crate_id":0,"name":"from_default_env","span":{"filename":"src/logger.rs","begin":[588,4],"end":[590,5]},"visibility":"public","docs":"Creates the logger from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The logger will use the\n[default environment variables].\n\n# Examples\n\nCreates a logger using the default environment variables:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_default_env();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:690:2335":{"id":"5:690:2335","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12759:2327":{"id":"2:12759:2327","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42004:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3495-0:399:1949":{"id":"b:2:3495-0:399:1949","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:52:2240":{"id":"0:52:2240","crate_id":0,"name":"write_style","span":{"filename":"src/logger.rs","begin":[424,4],"end":[427,5]},"visibility":"public","docs":"Sets whether or not styles will be written.\n\nThis can be useful in environments that don't support control characters\nfor setting colors.\n\n# Examples\n\nNever attempt to write styles:\n\n```\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder.write_style(WriteStyle::Never);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write_style",{"resolved_path":{"name":"fmt::WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32500:2952-0:156:2399":{"id":"a:2:32500:2952-0:156:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:2952","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2730-0:355:256":{"id":"b:2:2730-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:121:2354":{"id":"0:121:2354","crate_id":0,"name":"init_from_env","span":{"filename":"src/logger.rs","begin":[923,0],"end":[929,1]},"visibility":"public","docs":"Initializes the global logger with an env logger from the given environment\nvariables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::init_from_env(env);\n```\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:2867":{"id":"5:5553:2867","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2426-0:247:141":{"id":"b:2:2426-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2428:2420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:45:2205":{"id":"0:45:2205","crate_id":0,"name":"format_timestamp_nanos","span":{"filename":"src/logger.rs","begin":[306,4],"end":[308,5]},"visibility":"public","docs":"Configures the timestamp to use nanosecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12788:3368":{"id":"2:12788:3368","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42004:198","prim@char":"1:12034:452","self::pattern":"2:12443:4677"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2423-0:336:2129":{"id":"b:2:2423-0:336:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2425:2068"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:245":{"id":"0:245","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[74,0],"end":[78,1]},"visibility":"default","docs":"The default timestamp precision is seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2777:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:246:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/target.rs","begin":[14,0],"end":[26,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:212:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:82:1039":{"id":"0:82:1039","crate_id":0,"name":"new","span":{"filename":"src/logger.rs","begin":[701,4],"end":[703,5]},"visibility":"public","docs":"Get a default set of environment variables.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[784,0],"end":[791,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"std::borrow::Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:102:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3:1948":{"id":"0:3:1948","crate_id":0,"name":"logger","span":{"filename":"src/logger.rs","begin":[1,0],"end":[1017,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:22:2080","0:23:2083","0:324:2098","0:60:2266","0:336:2129","0:116:2252","0:117:2261","0:118:2339","0:121:2354","0:124:2130","0:125:2126"],"is_stripped":true}}},"2:12767:34676":{"id":"2:12767:34676","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12040:1538","str::slice_mut_unchecked":"2:12768:34677","crate::ops::Index":"2:39580:10055"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2729:2143":{"id":"2:2729:2143","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2703:142"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2745:1619":{"id":"2:2745:1619","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:324:2098":{"id":"b:2:2726-0:324:2098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:2143"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2948:254-0:156:2399":{"id":"a:2:2948:254-0:156:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:36:2180":{"id":"0:36:2180","crate_id":0,"name":"default_format","span":{"filename":"src/logger.rs","begin":[254,4],"end":[257,5]},"visibility":"public","docs":"Use the default format.\n\nThis method will clear any custom format set on the builder.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[604,0],"end":[673,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Log","id":"20:151:2072","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:72:2300","0:73:1955","0:77:2310"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[675,0],"end":[681,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:42131:2891-0:355:256":{"id":"a:2:42131:2891-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:2891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"5:691:3388":{"id":"5:691:3388","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:2261":{"id":"0:117:2261","crate_id":0,"name":"init","span":{"filename":"src/logger.rs","begin":[859,0],"end":[861,1]},"visibility":"public","docs":"Initializes the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2741-0:324:2098":{"id":"b:2:2741-0:324:2098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:404:2203":{"id":"0:404:2203","crate_id":0,"name":"Micros","span":{"filename":"src/fmt/mod.rs","begin":[68,4],"end":[68,10]},"visibility":"default","docs":"Microsecond precision (6 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2736-0:247:141":{"id":"b:2:2736-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:44:2202":{"id":"0:44:2202","crate_id":0,"name":"format_timestamp_micros","span":{"filename":"src/logger.rs","begin":[301,4],"end":[303,5]},"visibility":"public","docs":"Configures the timestamp to use microsecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32418:244-0:365:1950":{"id":"a:2:32418:244-0:365:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12842:34688":{"id":"2:12842:34688","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2426-0:355:256":{"id":"b:2:2426-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2428:2420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2425:2068":{"id":"2:2425:2068","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[10,0],"end":[72,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"crate::fmt::Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:151:2194","0:152:2475","0:153:2476","0:154:2477","0:155:2478"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:321-0:399:1949":{"id":"0:321-0:399:1949","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[282,28],"end":[282,46]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::TimestampPrecision","name":"TimestampPrecision","id":"0:399:1949","glob":false}}},"0:50:2145":{"id":"0:50:2145","crate_id":0,"name":"parse_filters","span":{"filename":"src/logger.rs","begin":[380,4],"end":[383,5]},"visibility":"public","docs":"Parses the directives string in the same form as the `RUST_LOG`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["filters",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2730-0:324:2098":{"id":"b:2:2730-0:324:2098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:60:2266":{"id":"0:60:2266","crate_id":0,"name":"Logger","span":{"filename":"src/logger.rs","begin":[531,0],"end":[535,1]},"visibility":"public","docs":"The env logger.\n\nThis struct implements the `Log` trait from the [`log` crate][log-crate-url],\nwhich allows it to act as a logger.\n\nThe [`init()`], [`try_init()`], [`Builder::init()`] and [`Builder::try_init()`]\nmethods will each construct a `Logger` and immediately initialize it as the\ndefault global logger.\n\nIf you'd instead need access to the constructed `Logger`, you can use\nthe associated [`Builder`] and install it with the\n[`log` crate][log-crate-url] directly.\n\n[log-crate-url]: https://docs.rs/log\n[`init()`]: fn.init.html\n[`try_init()`]: fn.try_init.html\n[`Builder::init()`]: struct.Builder.html#method.init\n[`Builder::try_init()`]: struct.Builder.html#method.try_init\n[`Builder`]: struct.Builder.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:64","a:2:32418:244-0:60:2266","a:2:32500:2952-0:60:2266","a:2:42130:2892-0:60:2266","a:2:42131:2891-0:60:2266","a:2:2948:254-0:60:2266","b:2:2426-0:60:2266","b:2:2741-0:60:2266","b:2:2726-0:60:2266","b:2:2736-0:60:2266","b:2:3495-0:60:2266","b:2:2730-0:60:2266","b:2:2423-0:60:2266","0:71","0:78"]}}},"0:25:1039":{"id":"0:25:1039","crate_id":0,"name":"new","span":{"filename":"src/logger.rs","begin":[72,4],"end":[74,5]},"visibility":"public","docs":"Initializes the log builder with defaults.\n\n**NOTE:** This method won't read from any environment variables.\nUse the [`filter`] and [`write_style`] methods to configure the builder\nor use [`from_env`] or [`from_default_env`] instead.\n\n# Examples\n\nCreate a new builder and configure filters and style:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, WriteStyle};\n\nlet mut builder = Builder::new();\n\nbuilder\n    .filter(None, LevelFilter::Info)\n    .write_style(WriteStyle::Always)\n    .init();\n```\n\n[`filter`]: #method.filter\n[`write_style`]: #method.write_style\n[`from_env`]: #method.from_env\n[`from_default_env`]: #method.from_default_env","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1955":{"id":"0:73:1955","crate_id":0,"name":"log","span":{"filename":"src/logger.rs","begin":[609,4],"end":[670,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["record",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:277:2074","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:360:1754":{"id":"0:360:1754","crate_id":0,"name":"0","span":{"filename":"src/fmt/writer/target.rs","begin":[11,9],"end":[11,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Box","id":"5:281:2177","args":{"angle_bracketed":{"args":[{"type":{"dyn_trait":{"traits":[{"trait":{"name":"std::io::Write","id":"1:3482:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}],"bindings":[]}}}}}},"b:2:3495-0:355:256":{"id":"b:2:3495-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12868:2779":{"id":"2:12868:2779","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12763:29478":{"id":"2:12763:29478","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:746":{"id":"0:102:746","crate_id":0,"name":"from","span":{"filename":"src/logger.rs","begin":[788,4],"end":[790,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["filter_env",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12761:29477":{"id":"2:12761:29477","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42004:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2732:746":{"id":"2:2732:746","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12772:7052":{"id":"2:12772:7052","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43878:7034","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2423-0:156:2399":{"id":"b:2:2423-0:156:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:2068"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[128,0],"end":[147,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:256:2423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12861:34693":{"id":"2:12861:34693","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:4677"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2736-0:60:2266":{"id":"b:2:2736-0:60:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2426-0:60:2266":{"id":"b:2:2426-0:60:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2428:2420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12769:29503":{"id":"2:12769:29503","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12770:29504"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12874:34694":{"id":"2:12874:34694","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4670:34694"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44201:6974","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:2322":{"id":"0:85:2322","crate_id":0,"name":"filter_or","span":{"filename":"src/logger.rs","begin":[718,4],"end":[726,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["filter_env",{"generic":"E"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12864:2227":{"id":"2:12864:2227","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12404:134","`FromStr`":"2:12403:2793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12403:2793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12403:2793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240-0:355:256":{"id":"0:240-0:355:256","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[51,0],"end":[51,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::writer::Target","name":"Target","id":"0:355:256","glob":false}}},"2:12811:29516":{"id":"2:12811:29516","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:4677","str::rsplitn":"2:12814:29518"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44006:4986","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:719":{"id":"0:79:719","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[676,4],"end":[680,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32500:2952-0:399:1949":{"id":"a:2:32500:2952-0:399:1949","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:2952","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[159,0],"end":[167,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:261:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12817:29520":{"id":"2:12817:29520","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[693,9],"end":[693,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:342:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5552:35369":{"id":"5:5552:35369","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2177","`String`":"5:7535:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2177","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2730-0:399:1949":{"id":"b:2:2730-0:399:1949","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2740:1621":{"id":"2:2740:1621","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42149:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,16],"end":[12,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2943:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[149,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_fmt","is_write_vectored","by_ref","write_vectored","write_all_vectored","write_all"],"trait":{"name":"Write","id":"1:3482:2437","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:258:2183","0:259:2310"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12774:33287":{"id":"2:12774:33287","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12775:33289"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44176:7042","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:28036":{"id":"5:5555:28036","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12870:28038"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2744:135":{"id":"2:2744:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32348:8482","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:368:2425":{"id":"0:368:2425","crate_id":0,"name":"Never","span":{"filename":"src/fmt/writer/mod.rs","begin":[20,4],"end":[20,9]},"visibility":"default","docs":"Never print styles.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:3495-0:60:2266":{"id":"b:2:3495-0:60:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2736-0:355:256":{"id":"b:2:2736-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12877:26557":{"id":"2:12877:26557","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4668:26557"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44219:6973","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:2190":{"id":"0:40:2190","crate_id":0,"name":"format_indent","span":{"filename":"src/logger.rs","begin":[279,4],"end":[282,5]},"visibility":"public","docs":"Configures the amount of spaces to use to indent multiline log records.\nA value of `None` disables any kind of indentation.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["indent",{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32500:2952-0:247:141":{"id":"a:2:32500:2952-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:2952","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:2948:254-0:336:2129":{"id":"a:2:2948:254-0:336:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32500:2952-0:324:2098":{"id":"a:2:32500:2952-0:324:2098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:2952","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2428:2420":{"id":"2:2428:2420","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2736-0:336:2129":{"id":"b:2:2736-0:336:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2736-0:399:1949":{"id":"b:2:2736-0:399:1949","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12782:28887":{"id":"2:12782:28887","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:4677"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12802:29514":{"id":"2:12802:29514","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12443:4677","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::split":"2:12796:2487"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43920:6909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:399:1949":{"id":"b:2:2726-0:399:1949","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:2143"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:156:2399":{"id":"0:156:2399","crate_id":0,"name":"Timestamp","span":{"filename":"src/fmt/humantime.rs","begin":[81,0],"end":[84,1]},"visibility":"public","docs":"An [RFC3339] formatted timestamp.\n\nThe timestamp implements [`Display`] and can be written to a [`Formatter`].\n\n[RFC3339]: https://www.ietf.org/rfc/rfc3339.txt\n[`Display`]: https://doc.rust-lang.org/stable/std/fmt/trait.Display.html\n[`Formatter`]: struct.Formatter.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32418:244-0:156:2399","a:2:32500:2952-0:156:2399","a:2:42130:2892-0:156:2399","a:2:42131:2891-0:156:2399","a:2:2948:254-0:156:2399","b:2:2426-0:156:2399","b:2:2741-0:156:2399","b:2:2726-0:156:2399","b:2:2736-0:156:2399","b:2:3495-0:156:2399","b:2:2730-0:156:2399","b:2:2423-0:156:2399","b:5:5809-0:156:2399","0:159","0:168"]}}},"0:151:2194":{"id":"0:151:2194","crate_id":0,"name":"timestamp","span":{"filename":"src/fmt/humantime.rs","begin":[30,4],"end":[35,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC.\n\n# Examples\n\nInclude the current timestamp with the log record:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    let ts = buf.timestamp();\n\n    writeln!(buf, \"{}: {}: {}\", ts, record.level(), record.args())\n});\n```\n\n[`Timestamp`]: struct.Timestamp.html","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1563":{"id":"0:51:1563","crate_id":0,"name":"target","span":{"filename":"src/logger.rs","begin":[403,4],"end":[406,5]},"visibility":"public","docs":"Sets the target for the log output.\n\nEnv logger can log to either stdout, stderr or a custom pipe. The default is stderr.\n\nThe custom pipe can be used to send the log messages to a custom sink (for example a file).\nDo note that direct writes to a file can become a bottleneck due to IO operation times.\n\n# Examples\n\nWrite log message to `stdout`:\n\n```\nuse env_logger::{Builder, Target};\n\nlet mut builder = Builder::new();\n\nbuilder.target(Target::Stdout);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["target",{"resolved_path":{"name":"fmt::Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12758:29480":{"id":"2:12758:29480","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12051:1643"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12771:6925":{"id":"2:12771:6925","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12034:452"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43872:6918","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:2099":{"id":"0:83:2099","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[706,4],"end":[713,5]},"visibility":"public","docs":"Specify an environment variable to read the filter from.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["filter_env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42130:2892-0:247:141":{"id":"a:2:42130:2892-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:2892","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:370":{"id":"0:370","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:371:456"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2741-0:355:256":{"id":"b:2:2741-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:42:2196":{"id":"0:42:2196","crate_id":0,"name":"format_timestamp_secs","span":{"filename":"src/logger.rs","begin":[291,4],"end":[293,5]},"visibility":"public","docs":"Configures the timestamp to use second precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:358:2574":{"id":"0:358:2574","crate_id":0,"name":"Pipe","span":{"filename":"src/fmt/writer/target.rs","begin":[11,4],"end":[11,50]},"visibility":"default","docs":"Logs will be sent to a custom pipe.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:360:1754"]},"discriminant":null}}},"0:223:746":{"id":"0:223:746","crate_id":0,"name":"from","span":{"filename":"src/fmt/writer/mod.rs","begin":[37,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["choice",{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42131:2891-0:324:2098":{"id":"a:2:42131:2891-0:324:2098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:2891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:169:719":{"id":"0:169:719","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/humantime.rs","begin":[104,4],"end":[113,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32500:2952-0:365:1950":{"id":"a:2:32500:2952-0:365:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:2952","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2426-0:365:1950":{"id":"b:2:2426-0:365:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2428:2420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2423-0:247:141":{"id":"b:2:2423-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:2068"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:125:2126":{"id":"0:125:2126","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[948,0],"end":[953,1]},"visibility":"public","docs":"Create a builder from the given environment variables.\n\nThe builder can be configured before being initialized.","links":{},"attrs":["#[deprecated(since = \"0.8.0\", note =\n\"Prefer `env_logger::Builder::from_env()` instead.\")]"],"deprecation":{"since":"0.8.0","note":"Prefer `env_logger::Builder::from_env()` instead."},"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12757:340":{"id":"2:12757:340","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12758:29480","`u8`":"1:12051:1643"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12785:28889":{"id":"2:12785:28889","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:4677"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336:2129":{"id":"0:336:2129","crate_id":0,"name":"Env","span":{"filename":"src/logger.rs","begin":[694,0],"end":[697,1]},"visibility":"public","docs":"Set of environment variables to configure from.\n\n# Default environment variables\n\nBy default, the `Env` will read the following environment variables:\n\n- `RUST_LOG`: the level filter\n- `RUST_LOG_STYLE`: whether or not to print styles with records.\n\nThese sources can be configured using the builder methods on `Env`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:80","a:2:32418:244-0:336:2129","a:2:32500:2952-0:336:2129","a:2:42130:2892-0:336:2129","a:2:42131:2891-0:336:2129","a:2:2948:254-0:336:2129","b:2:2426-0:336:2129","b:2:2741-0:336:2129","b:2:2726-0:336:2129","b:2:2736-0:336:2129","b:2:3495-0:336:2129","b:2:2730-0:336:2129","b:2:2423-0:336:2129","0:99","0:103","0:340"]}}},"0:53:2147":{"id":"0:53:2147","crate_id":0,"name":"parse_write_style","span":{"filename":"src/logger.rs","begin":[433,4],"end":[436,5]},"visibility":"public","docs":"Parses whether or not to write styles in the same form as the `RUST_LOG_STYLE`\nenvironment variable.\n\nSee the module documentation for more details.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write_style",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:374:719":{"id":"0:374:719","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,22],"end":[12,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43:2199":{"id":"0:43:2199","crate_id":0,"name":"format_timestamp_millis","span":{"filename":"src/logger.rs","begin":[296,4],"end":[298,5]},"visibility":"public","docs":"Configures the timestamp to use millisecond precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12876:10024":{"id":"2:12876:10024","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4671:10024"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44210:6862","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12773:3696":{"id":"2:12773:3696","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43888:2846","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:2099":{"id":"0:69:2099","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[594,4],"end":[596,5]},"visibility":"public","docs":"Returns the maximum `LevelFilter` that this env logger instance is\nconfigured to output.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LevelFilter","id":"20:219:2071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:254-0:399:1949":{"id":"a:2:2948:254-0:399:1949","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:65:2126":{"id":"0:65:2126","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[564,4],"end":[569,5]},"visibility":"public","docs":"Creates the logger from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nCreate a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Logger;\n\nlet logger = Logger::from_env(\"MY_LOG\");\n```\n\nCreate a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Logger, Env};\n\nlet env = Env::new().filter_or(\"MY_LOG\", \"info\").write_style_or(\"MY_LOG_STYLE\", \"always\");\n\nlet logger = Logger::from_env(env);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356:2569":{"id":"0:356:2569","crate_id":0,"name":"Stdout","span":{"filename":"src/fmt/writer/target.rs","begin":[6,4],"end":[6,10]},"visibility":"default","docs":"Logs will be sent to standard output.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2741-0:365:1950":{"id":"b:2:2741-0:365:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12765:29479":{"id":"2:12765:29479","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10530:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12829:34682":{"id":"2:12829:34682","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12443:4677","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::rmatch_indices":"2:12832:34683"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44052:7038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32418:244-0:336:2129":{"id":"a:2:32418:244-0:336:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:238-23:0:1953":{"id":"0:238-23:0:1953","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[47,0],"end":[47,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"import":{"source":"anstyle","name":"style","id":"23:0:1953","glob":false}}},"0:261:719":{"id":"0:261:719","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[160,4],"end":[166,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:336:2129":{"id":"b:2:2726-0:336:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2729:2143"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:365:1950":{"id":"0:365:1950","crate_id":0,"name":"WriteStyle","span":{"filename":"src/fmt/writer/mod.rs","begin":[13,0],"end":[21,1]},"visibility":"public","docs":"Whether or not to print styles to the target.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:386:2548","0:366:2550","0:368:2425"],"impls":["a:2:32418:244-0:365:1950","a:2:32500:2952-0:365:1950","a:2:42130:2892-0:365:1950","a:2:42131:2891-0:365:1950","a:2:2948:254-0:365:1950","b:2:2426-0:365:1950","b:2:2741-0:365:1950","b:2:2726-0:365:1950","b:2:2736-0:365:1950","b:2:3495-0:365:1950","b:2:2730-0:365:1950","b:2:2423-0:365:1950","b:5:687-0:365:1950","0:222","0:372","0:384","0:381","0:373","0:370","0:376","0:375","0:220","0:382","0:378"]}}},"2:12869:28037":{"id":"2:12869:28037","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:2160":{"id":"0:33:2160","crate_id":0,"name":"parse_default_env","span":{"filename":"src/logger.rs","begin":[210,4],"end":[212,5]},"visibility":"public","docs":"Applies the configuration from the environment using default variable names.\n\nThis method is a convenient way to call `parse_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger with filter level `Off`, then configure it using the\ndefault environment variables:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12778:33300":{"id":"2:12778:33300","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44194:6924","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:373":{"id":"0:373","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,22],"end":[12,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:374:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:88:2326":{"id":"0:88:2326","crate_id":0,"name":"default_filter_or","span":{"filename":"src/logger.rs","begin":[731,4],"end":[738,5]},"visibility":"public","docs":"Use the default environment variable to read the filter from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:2300":{"id":"0:72:2300","crate_id":0,"name":"enabled","span":{"filename":"src/logger.rs","begin":[605,4],"end":[607,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["metadata",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Metadata","id":"20:296:2073","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:60":{"id":"0:105:60","crate_id":0,"name":"default","span":{"filename":"src/logger.rs","begin":[794,4],"end":[799,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:365:1950":{"id":"b:2:2726-0:365:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:2143"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:153:2476":{"id":"0:153:2476","crate_id":0,"name":"timestamp_millis","span":{"filename":"src/fmt/humantime.rs","begin":[48,4],"end":[53,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmillisecond precision.","links":{"`Timestamp`":"0:156:2399"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:411":{"id":"0:411","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[61,22],"end":[61,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:412:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2741-0:60:2266":{"id":"b:2:2741-0:60:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12796:2487":{"id":"2:12796:2487","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12443:4677","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::split_whitespace":"2:12774:33287","str::rsplit":"2:12802:29514"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43902:2847","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:719":{"id":"0:160:719","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/humantime.rs","begin":[87,4],"end":[100,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:60":{"id":"0:246:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/mod.rs","begin":[75,4],"end":[77,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42131:2891-0:60:2266":{"id":"a:2:42131:2891-0:60:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:2891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12843:34689":{"id":"2:12843:34689","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:4677"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12468:15374","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2730-0:60:2266":{"id":"b:2:2730-0:60:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:124:2130":{"id":"0:124:2130","crate_id":0,"name":"builder","span":{"filename":"src/logger.rs","begin":[937,0],"end":[939,1]},"visibility":"public","docs":"Create a new builder with the default environment variables.\n\nThe builder can be configured before being initialized.\nThis is a convenient way of calling [`Builder::from_default_env`].\n\n[`Builder::from_default_env`]: struct.Builder.html#method.from_default_env","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2423-0:60:2266":{"id":"b:2:2423-0:60:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:2068"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42131:2891-0:365:1950":{"id":"a:2:42131:2891-0:365:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:2891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12779:29522":{"id":"2:12779:29522","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:4677"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2332":{"id":"0:96:2332","crate_id":0,"name":"default_write_style_or","span":{"filename":"src/logger.rs","begin":[770,4],"end":[777,5]},"visibility":"public","docs":"Use the default environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12792:3329":{"id":"2:12792:3329","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42004:198","prim@char":"1:12034:452","self::pattern":"2:12443:4677"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12814:29518":{"id":"2:12814:29518","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12034:452","str::splitn":"2:12811:29516","self::pattern":"2:12443:4677"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44024:6911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5809-0:156:2399":{"id":"b:5:5809-0:156:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:9882:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5807:258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5811:1596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32420:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[86,0],"end":[101,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:160:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:402:2200":{"id":"0:402:2200","crate_id":0,"name":"Millis","span":{"filename":"src/fmt/mod.rs","begin":[66,4],"end":[66,10]},"visibility":"default","docs":"Millisecond precision (3 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2726-0:60:2266":{"id":"b:2:2726-0:60:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:2143"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70:2298":{"id":"0:70:2298","crate_id":0,"name":"matches","span":{"filename":"src/logger.rs","begin":[599,4],"end":[601,5]},"visibility":"public","docs":"Checks if this record matches the configured filter.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["record",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Record","id":"20:277:2074","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:342:719":{"id":"0:342:719","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[693,9],"end":[693,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2730-0:365:1950":{"id":"b:2:2730-0:365:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:55:2252":{"id":"0:55:2252","crate_id":0,"name":"try_init","span":{"filename":"src/logger.rs","begin":[456,4],"end":[467,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42149:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"SetLoggerError","id":"20:352:2075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2423-0:324:2098":{"id":"b:2:2423-0:324:2098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:2068"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32418:244-0:60:2266":{"id":"a:2:32418:244-0:60:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2423-0:365:1950":{"id":"b:2:2423-0:365:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:2068"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:2339":{"id":"0:118:2339","crate_id":0,"name":"try_init_from_env","span":{"filename":"src/logger.rs","begin":[891,0],"end":[898,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger from the given\nenvironment variables.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Examples\n\nInitialise a logger using the `MY_LOG` environment variable for filters\nand `MY_LOG_STYLE` for writing colors:\n\n```\nuse env_logger::{Builder, Env};\n\n# fn run() -> Result<(), Box<dyn ::std::error::Error>> {\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nenv_logger::try_init_from_env(env)?;\n\nOk(())\n# }\n# run().unwrap();\n```\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"resolved_path":{"name":"Result","id":"2:42149:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"log::SetLoggerError","id":"20:352:2075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42131:2891-0:156:2399":{"id":"a:2:42131:2891-0:156:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:2891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:57:2253":{"id":"0:57:2253","crate_id":0,"name":"build","span":{"filename":"src/logger.rs","begin":[487,4],"end":[496,5]},"visibility":"public","docs":"Build an env logger.\n\nThe returned logger implements the `Log` trait and can be installed manually\nor nested within another logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:362:60":{"id":"0:362:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/writer/target.rs","begin":[3,9],"end":[3,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:2310":{"id":"0:77:2310","crate_id":0,"name":"flush","span":{"filename":"src/logger.rs","begin":[672,4],"end":[672,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[24,0],"end":[33,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ColorChoice","id":"32:21:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:221:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:2948:254-0:365:1950":{"id":"a:2:2948:254-0:365:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[61,9],"end":[61,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2943:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32418:244-0:324:2098":{"id":"a:2:32418:244-0:324:2098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42130:2892-0:336:2129":{"id":"a:2:42130:2892-0:336:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:2892","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:93:2330":{"id":"0:93:2330","crate_id":0,"name":"write_style_or","span":{"filename":"src/logger.rs","begin":[757,4],"end":[765,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.\n\nIf the variable is not set, the default value will be used.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["write_style_env",{"generic":"E"}],["default",{"generic":"V"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42130:2892-0:324:2098":{"id":"a:2:42130:2892-0:324:2098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:2892","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:42131:2891-0:399:1949":{"id":"a:2:42131:2891-0:399:1949","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:2891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2736-0:324:2098":{"id":"b:2:2736-0:324:2098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3497:1634":{"id":"2:3497:1634","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39762:6964","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:155:2478":{"id":"0:155:2478","crate_id":0,"name":"timestamp_nanos","span":{"filename":"src/fmt/humantime.rs","begin":[66,4],"end":[71,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nnanosecond precision.","links":{"`Timestamp`":"0:156:2399"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12749:34672":{"id":"2:12749:34672","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:35367":{"id":"5:5543:35367","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42130:2892-0:399:1949":{"id":"a:2:42130:2892-0:399:1949","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:2892","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:330:60":{"id":"0:330:60","crate_id":0,"name":"default","span":{"filename":"src/logger.rs","begin":[37,9],"end":[37,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:2099":{"id":"0:49:2099","crate_id":0,"name":"filter","span":{"filename":"src/logger.rs","begin":[371,4],"end":[374,5]},"visibility":"public","docs":"Adds filters to the logger.\n\nThe given module (if any) will log at most the specified level provided.\nIf no module is provided then the filter will apply to all log messages.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter(Some(\"path::to::module\"), LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["module",{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:219:2071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12768:34677":{"id":"2:12768:34677","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12040:1538","crate::ops::IndexMut":"2:3161:10056","str::slice_unchecked":"2:12767:34676"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:320-0:355:256":{"id":"0:320-0:355:256","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[282,20],"end":[282,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::Target","name":"Target","id":"0:355:256","glob":false}}},"0:46:2208":{"id":"0:46:2208","crate_id":0,"name":"format_suffix","span":{"filename":"src/logger.rs","begin":[311,4],"end":[314,5]},"visibility":"public","docs":"Configures the end of line suffix.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["suffix",{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2426-0:336:2129":{"id":"b:2:2426-0:336:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2428:2420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:2948:254-0:247:141":{"id":"a:2:2948:254-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:154:2477":{"id":"0:154:2477","crate_id":0,"name":"timestamp_micros","span":{"filename":"src/fmt/humantime.rs","begin":[57,4],"end":[62,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with\nmicrosecond precision.","links":{"`Timestamp`":"0:156:2399"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12835:34684":{"id":"2:12835:34684","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:247:141":{"id":"0:247:141","crate_id":0,"name":"Formatter","span":{"filename":"src/fmt/mod.rs","begin":[101,0],"end":[104,1]},"visibility":"public","docs":"A formatter to write logs into.\n\n`Formatter` implements the standard [`Write`] trait for writing log records.\nIt also supports terminal colors, through the [`style`] method.\n\n# Examples\n\nUse the [`writeln`] macro to format a log record.\nAn instance of a `Formatter` is passed to an `env_logger` format as `buf`:\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| writeln!(buf, \"{}: {}\", record.level(), record.args()));\n```\n\n[`Write`]: https://doc.rust-lang.org/stable/std/io/trait.Write.html\n[`writeln`]: https://doc.rust-lang.org/stable/std/macro.writeln.html\n[`style`]: #method.style","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:150","0:255","a:2:32418:244-0:247:141","a:2:32500:2952-0:247:141","a:2:42130:2892-0:247:141","a:2:42131:2891-0:247:141","a:2:2948:254-0:247:141","b:2:2426-0:247:141","b:2:2741-0:247:141","b:2:2726-0:247:141","b:2:2736-0:247:141","b:2:3495-0:247:141","b:2:2730-0:247:141","b:2:2423-0:247:141","0:257","0:260"]}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[537,0],"end":[602,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:2126","0:68:2154","0:69:2099","0:70:2298"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12871:29424":{"id":"2:12871:29424","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:895:37694"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2739:135":{"id":"2:2739:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:410:456":{"id":"0:410:456","crate_id":0,"name":"clone","span":{"filename":"src/fmt/mod.rs","begin":[61,15],"end":[61,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:406:2206":{"id":"0:406:2206","crate_id":0,"name":"Nanos","span":{"filename":"src/fmt/mod.rs","begin":[70,4],"end":[70,9]},"visibility":"default","docs":"Nanosecond precision (9 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"5:5540:35366":{"id":"5:5540:35366","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/target.rs","begin":[3,9],"end":[3,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2777:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:362:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:383:662":{"id":"0:383:662","crate_id":0,"name":"eq","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,29],"end":[12,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:32445:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:323-0:3:1948":{"id":"0:323-0:3:1948","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[283,0],"end":[283,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::logger","name":"logger","id":"0:3:1948","glob":true}}},"2:12870:28038":{"id":"2:12870:28038","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12752:34674":{"id":"2:12752:34674","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12750:34673"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:2182":{"id":"0:37:2182","crate_id":0,"name":"format_level","span":{"filename":"src/logger.rs","begin":[260,4],"end":[263,5]},"visibility":"public","docs":"Whether or not to write the level in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3495-0:336:2129":{"id":"b:2:3495-0:336:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:258:2183":{"id":"0:258:2183","crate_id":0,"name":"write","span":{"filename":"src/fmt/mod.rs","begin":[150,4],"end":[152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12747:875":{"id":"2:12747:875","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12034:452"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:385:60":{"id":"0:385:60","crate_id":0,"name":"default","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,50],"end":[12,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26:2126":{"id":"0:26:2126","crate_id":0,"name":"from_env","span":{"filename":"src/logger.rs","begin":[104,4],"end":[111,5]},"visibility":"public","docs":"Initializes the log builder from the environment.\n\nThe variables used to read configuration from can be tweaked before\npassing in.\n\n# Examples\n\nInitialise a logger reading the log filter from an environment variable\ncalled `MY_LOG`:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger using the `MY_LOG` variable for filtering and\n`MY_LOG_STYLE` for whether or not to write styles:\n\n```\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::from_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3495-0:324:2098":{"id":"b:2:3495-0:324:2098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:689:2740":{"id":"5:689:2740","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12820:29521":{"id":"2:12820:29521","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12849:26957":{"id":"2:12849:26957","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:4677"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12872:29425":{"id":"2:12872:29425","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:895:37694"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12748:3330":{"id":"2:12748:3330","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:366:2550":{"id":"0:366:2550","crate_id":0,"name":"Always","span":{"filename":"src/fmt/writer/mod.rs","begin":[18,4],"end":[18,10]},"visibility":"default","docs":"Try very hard to print styles.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:128:719":{"id":"0:128:719","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/mod.rs","begin":[1,0],"end":[714,1]},"visibility":"public","docs":"Formatting for log records.\n\nThis module contains a [`Formatter`] that can be used to format log records\ninto without needing temporary allocations. Usually you won't need to worry\nabout the contents of this module and can use the `Formatter` like an ordinary\n[`Write`].\n\n# Formatting log records\n\nThe format used to print log records can be customised using the [`Builder::format`]\nmethod.\nCustom formats can apply different color and weight to printed values using\n[`Style`] builders.\n\n```\nuse std::io::Write;\n\nlet mut builder = env_logger::Builder::new();\n\nbuilder.format(|buf, record| {\n    writeln!(buf, \"{}: {}\",\n        record.level(),\n        record.args())\n});\n```\n\n[`Formatter`]: struct.Formatter.html\n[`Style`]: struct.Style.html\n[`Builder::format`]: ../struct.Builder.html#method.format\n[`Write`]: https://doc.rust-lang.org/stable/std/io/trait.Write.html","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:238-23:0:1953","0:239-0:156:2399","0:240-0:355:256","0:241-0:365:1950","0:399:1949","0:247:141"],"is_stripped":false}}},"b:2:2741-0:156:2399":{"id":"b:2:2741-0:156:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:256:2423":{"id":"0:256:2423","crate_id":0,"name":"default_level_style","span":{"filename":"src/fmt/mod.rs","begin":[132,4],"end":[146,5]},"visibility":"public","docs":"Get the default [`style::Style`] for the given level.\n\nThe style can be used to print other values besides the level.","links":{"`style::Style`":"23:397:2424"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"Level","id":"20:198:2397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"style::Style","id":"23:397:2424","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12775:33289":{"id":"2:12775:33289","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12774:33287"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44185:7043","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32500:2952-0:336:2129":{"id":"a:2:32500:2952-0:336:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:2952","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2741-0:247:141":{"id":"b:2:2741-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2744:135","2:2745:1619"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:41:2193":{"id":"0:41:2193","crate_id":0,"name":"format_timestamp","span":{"filename":"src/logger.rs","begin":[285,4],"end":[288,5]},"visibility":"public","docs":"Configures if timestamp should be included and in what precision.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["timestamp",{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"fmt::TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2726-0:156:2399":{"id":"b:2:2726-0:156:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2729:2143"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2423-0:355:256":{"id":"b:2:2423-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:2068"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5535":{"id":"5:5535","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5536:35365","5:5537:2442","5:5540:35366","5:5543:35367","5:5551:35368","5:5552:35369","5:5553:2867","5:5554:28035","5:5555:28036"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[499,0],"end":[510,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9877:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:378":{"id":"0:378","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,33],"end":[12,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10093:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:379:783"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:47:2213":{"id":"0:47:2213","crate_id":0,"name":"filter_module","span":{"filename":"src/logger.rs","begin":[330,4],"end":[333,5]},"visibility":"public","docs":"Adds a directive to the filter for a specific module.\n\n# Examples\n\nOnly include messages for info and above for logs in `path::to::module`:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_module(\"path::to::module\", LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["module",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:219:2071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:28035":{"id":"5:5554:28035","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12869:28037"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:29426":{"id":"2:12873:29426","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:895:37694"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32418:244-0:399:1949":{"id":"a:2:32418:244-0:399:1949","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5536:35365":{"id":"5:5536:35365","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2177","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2177","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221:746":{"id":"0:221:746","crate_id":0,"name":"from","span":{"filename":"src/fmt/writer/mod.rs","begin":[25,4],"end":[32,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["choice",{"resolved_path":{"name":"anstream::ColorChoice","id":"32:21:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32500:2952-0:355:256":{"id":"a:2:32500:2952-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:2952","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/fmt/humantime.rs","begin":[103,0],"end":[114,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:9882:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:169:719"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32418:244-0:247:141":{"id":"a:2:32418:244-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32418:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12770:29504":{"id":"2:12770:29504","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12769:29503"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:2218":{"id":"0:48:2218","crate_id":0,"name":"filter_level","span":{"filename":"src/logger.rs","begin":[349,4],"end":[352,5]},"visibility":"public","docs":"Adds a directive to the filter for all modules.\n\n# Examples\n\nOnly include messages for info and above for logs globally:\n\n```\nuse env_logger::Builder;\nuse log::LevelFilter;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Info);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["level",{"resolved_path":{"name":"LevelFilter","id":"20:219:2071","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324:2098":{"id":"0:324:2098","crate_id":0,"name":"Builder","span":{"filename":"src/logger.rs","begin":[38,0],"end":[43,1]},"visibility":"public","docs":"`Builder` acts as builder for initializing a `Logger`.\n\nIt can be used to customize the log format, change the environment variable used\nto provide the logging directives and also set the default log level filter.\n\n# Examples\n\n```\n# use std::io::Write;\nuse env_logger::Builder;\nuse log::{LevelFilter, error, info};\n\nlet mut builder = Builder::from_default_env();\n\nbuilder\n    .format(|buf, record| writeln!(buf, \"{} - {}\", record.level(), record.args()))\n    .filter(None, LevelFilter::Info)\n    .init();\n\nerror!(\"error message\");\ninfo!(\"info message\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:24","a:2:32418:244-0:324:2098","a:2:32500:2952-0:324:2098","a:2:42130:2892-0:324:2098","a:2:42131:2891-0:324:2098","a:2:2948:254-0:324:2098","b:2:2426-0:324:2098","b:2:2741-0:324:2098","b:2:2726-0:324:2098","b:2:2736-0:324:2098","b:2:3495-0:324:2098","b:2:2730-0:324:2098","b:2:2423-0:324:2098","0:329","0:58"]}}},"a:2:42130:2892-0:60:2266":{"id":"a:2:42130:2892-0:60:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:2892","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:212:719":{"id":"0:212:719","crate_id":0,"name":"fmt","span":{"filename":"src/fmt/writer/target.rs","begin":[15,4],"end":[25,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2426-0:399:1949":{"id":"b:2:2426-0:399:1949","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2428:2420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:322-0:365:1950":{"id":"0:322-0:365:1950","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[282,48],"end":[282,58]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fmt::WriteStyle","name":"WriteStyle","id":"0:365:1950","glob":false}}},"2:12823:2298":{"id":"2:12823:2298","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12443:4677","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::rmatches":"2:12826:34681"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44106:4984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12832:34683":{"id":"2:12832:34683","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12443:4677","`DoubleEndedIterator`":"2:7826:128","prim@char":"1:12034:452","str::match_indices":"2:12829:34682"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44070:7039","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:376":{"id":"0:376","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,29],"end":[12,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2491:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5537:2442":{"id":"5:5537:2442","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7535:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7535:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32:2154":{"id":"0:32:2154","crate_id":0,"name":"from_default_env","span":{"filename":"src/logger.rs","begin":[184,4],"end":[186,5]},"visibility":"public","docs":"Initializes the log builder from the environment using default variable names.\n\nThis method is a convenient way to call `from_env(Env::default())` without\nhaving to use the `Env` type explicitly. The builder will use the\n[default environment variables].\n\n# Examples\n\nInitialise a logger using the default environment variables:\n\n```\nuse env_logger::Builder;\n\nlet mut builder = Builder::from_default_env();\nbuilder.init();\n```\n\n[default environment variables]: struct.Env.html#default-environment-variables","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2426-0:324:2098":{"id":"b:2:2426-0:324:2098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2420:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2428:2420"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:42130:2892-0:355:256":{"id":"a:2:42130:2892-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:2892","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[699,0],"end":[782,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:82:1039","0:83:2099","0:85:2322","0:88:2326","0:91:2240","0:93:2330","0:96:2332"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:384":{"id":"0:384","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,50],"end":[12,57]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2777:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:385:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12841:34687":{"id":"2:12841:34687","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:2187":{"id":"0:39:2187","crate_id":0,"name":"format_target","span":{"filename":"src/logger.rs","begin":[272,4],"end":[275,5]},"visibility":"public","docs":"Whether or not to write the target in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:2261":{"id":"0:56:2261","crate_id":0,"name":"init","span":{"filename":"src/logger.rs","begin":[478,4],"end":[481,5]},"visibility":"public","docs":"Initializes the global logger with the built env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Panics\n\nThis function will panic if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:241-0:365:1950":{"id":"0:241-0:365:1950","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[52,0],"end":[52,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::writer::WriteStyle","name":"WriteStyle","id":"0:365:1950","glob":false}}},"a:2:2948:254-0:355:256":{"id":"a:2:2948:254-0:355:256","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Target","id":"0:355:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:2:32500:2952-0:60:2266":{"id":"a:2:32500:2952-0:60:2266","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32500:2952","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Logger","id":"0:60:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12858:34692":{"id":"2:12858:34692","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:4677"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2736-0:156:2399":{"id":"b:2:2736-0:156:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3495-0:365:1950":{"id":"b:2:3495-0:365:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12867:29421":{"id":"2:12867:29421","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39949:29414","Self::is_ascii":"2:12866:28033"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39949:29414","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:363:2572":{"id":"0:363:2572","crate_id":0,"name":"Stderr","span":{"filename":"src/fmt/writer/target.rs","begin":[9,4],"end":[9,10]},"visibility":"default","docs":"Logs will be sent to standard error.","links":{},"attrs":["#[default]"],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:5:687-0:365:1950":{"id":"b:5:687-0:365:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2439:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:2740","5:690:2335","5:691:3388"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[37,9],"end":[37,16]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2777:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:330:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:400:2197":{"id":"0:400:2197","crate_id":0,"name":"Seconds","span":{"filename":"src/fmt/mod.rs","begin":[64,4],"end":[64,11]},"visibility":"default","docs":"Full second precision (0 decimal digits)","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:12776:3688":{"id":"2:12776:3688","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44156:2843","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2948:254-0:324:2098":{"id":"a:2:2948:254-0:324:2098","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2948:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"2:12777:34678":{"id":"2:12777:34678","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44166:7041","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:259:2310":{"id":"0:259:2310","crate_id":0,"name":"flush","span":{"filename":"src/fmt/mod.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"io::Result","id":"1:2944:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:719":{"id":"0:59:719","crate_id":0,"name":"fmt","span":{"filename":"src/logger.rs","begin":[500,4],"end":[509,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"std::fmt::Formatter","id":"2:9852:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"std::fmt::Result","id":"2:9833:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:2240":{"id":"0:91:2240","crate_id":0,"name":"write_style","span":{"filename":"src/logger.rs","begin":[745,4],"end":[752,5]},"visibility":"public","docs":"Specify an environment variable to read the style from.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["write_style_env",{"generic":"E"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Cow","id":"5:692:117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"primitive":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:382":{"id":"0:382","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[12,39],"end":[12,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2486:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:383:662"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3495-0:156:2399":{"id":"b:2:3495-0:156:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:152:2475":{"id":"0:152:2475","crate_id":0,"name":"timestamp_seconds","span":{"filename":"src/fmt/humantime.rs","begin":[39,4],"end":[44,5]},"visibility":"public","docs":"Get a [`Timestamp`] for the current date and time in UTC with full\nsecond precision.","links":{"`Timestamp`":"0:156:2399"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Timestamp","id":"0:156:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:22:2080":{"id":"0:22:2080","crate_id":0,"name":"DEFAULT_FILTER_ENV","span":{"filename":"src/logger.rs","begin":[10,0],"end":[10,48]},"visibility":"public","docs":"The default name for the environment variable to read filters from.","links":{},"attrs":[],"deprecation":null,"inner":{"constant":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"expr":"\"RUST_LOG\"","value":null,"is_literal":true}}},"2:12750:34673":{"id":"2:12750:34673","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3495-0:247:141":{"id":"b:2:3495-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3493:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3497:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:38:2185":{"id":"0:38:2185","crate_id":0,"name":"format_module_path","span":{"filename":"src/logger.rs","begin":[266,4],"end":[269,5]},"visibility":"public","docs":"Whether or not to write the module path in the default format.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["write",{"primitive":"bool"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:2252":{"id":"0:116:2252","crate_id":0,"name":"try_init","span":{"filename":"src/logger.rs","begin":[846,0],"end":[848,1]},"visibility":"public","docs":"Attempts to initialize the global logger with an env logger.\n\nThis should be called early in the execution of a Rust program. Any log\nevents that occur before initialization will be ignored.\n\n# Errors\n\nThis function will fail if it is called more than once, or if another\nlibrary has already initialized a global logger.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Result","id":"2:42149:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"log::SetLoggerError","id":"20:352:2075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:371:456":{"id":"0:371:456","crate_id":0,"name":"clone","span":{"filename":"src/fmt/writer/mod.rs","begin":[12,9],"end":[12,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12755:2497":{"id":"2:12755:2497","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11998:2496"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42131:2891-0:247:141":{"id":"a:2:42131:2891-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:2891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:222":{"id":"0:222","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[36,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"color\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"anstream::ColorChoice","id":"32:21:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:223:746"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:239-0:156:2399":{"id":"0:239-0:156:2399","crate_id":0,"name":null,"span":{"filename":"src/fmt/mod.rs","begin":[50,0],"end":[50,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"humantime\")]"],"deprecation":null,"inner":{"import":{"source":"self::humantime::Timestamp","name":"Timestamp","id":"0:156:2399","glob":false}}},"0:219-0:355:256":{"id":"0:219-0:355:256","crate_id":0,"name":null,"span":{"filename":"src/fmt/writer/mod.rs","begin":[9,0],"end":[9,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"target::Target","name":"Target","id":"0:355:256","glob":false}}},"2:12805:34679":{"id":"2:12805:34679","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12443:4677","str::split":"2:12796:2487","prim@char":"1:12034:452","`DoubleEndedIterator`":"2:7826:128","str::rsplit_terminator":"2:12808:34680"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43952:7036","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12756:34675":{"id":"2:12756:34675","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/logger.rs","begin":[45,0],"end":[497,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Builder","id":"0:324:2098","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:25:1039","0:26:2126","0:29:2131","0:32:2154","0:33:2160","0:34:731","0:36:2180","0:37:2182","0:38:2185","0:39:2187","0:40:2190","0:41:2193","0:42:2196","0:43:2199","0:44:2202","0:45:2205","0:46:2208","0:47:2213","0:48:2218","0:49:2099","0:50:2145","0:51:1563","0:52:2240","0:53:2147","0:54:2245","0:55:2252","0:56:2261","0:57:2253"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12808:34680":{"id":"2:12808:34680","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12443:4677","str::split":"2:12796:2487","prim@char":"1:12034:452","str::split_terminator":"2:12805:34679"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43970:7037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12839:34686":{"id":"2:12839:34686","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42130:2892-0:365:1950":{"id":"a:2:42130:2892-0:365:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42130:2892","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2423-0:399:1949":{"id":"b:2:2423-0:399:1949","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32419:2951","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2417:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimestampPrecision","id":"0:399:1949","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2425:2068"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12852:29523":{"id":"2:12852:29523","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:4677"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42002:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12855:34691":{"id":"2:12855:34691","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12034:452","self::pattern":"2:12443:4677"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12448:4575","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12463:15375","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2131":{"id":"0:29:2131","crate_id":0,"name":"parse_env","span":{"filename":"src/logger.rs","begin":[149,4],"end":[164,5]},"visibility":"public","docs":"Applies the configuration from the environment.\n\nThis function allows a builder to be configured with default parameters,\nto be then overridden by the environment.\n\n# Examples\n\nInitialise a logger with filter level `Off`, then override the log\nfilter from an environment variable called `MY_LOG`:\n\n```\nuse log::LevelFilter;\nuse env_logger::Builder;\n\nlet mut builder = Builder::new();\n\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(\"MY_LOG\");\nbuilder.init();\n```\n\nInitialise a logger with filter level `Off`, then use the `MY_LOG`\nvariable to override filtering and `MY_LOG_STYLE` to override  whether\nor not to write styles:\n\n```\nuse log::LevelFilter;\nuse env_logger::{Builder, Env};\n\nlet env = Env::new().filter(\"MY_LOG\").write_style(\"MY_LOG_STYLE\");\n\nlet mut builder = Builder::new();\nbuilder.filter_level(LevelFilter::Off);\nbuilder.parse_env(env);\nbuilder.init();\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["env",{"generic":"E"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2700:160","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:355:256":{"id":"0:355:256","crate_id":0,"name":"Target","span":{"filename":"src/fmt/writer/target.rs","begin":[4,0],"end":[12,1]},"visibility":"public","docs":"Log target, either `stdout`, `stderr` or a custom pipe.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:356:2569","0:363:2572","0:358:2574"],"impls":["a:2:32418:244-0:355:256","a:2:32500:2952-0:355:256","a:2:42130:2892-0:355:256","a:2:42131:2891-0:355:256","a:2:2948:254-0:355:256","b:2:2426-0:355:256","b:2:2741-0:355:256","b:2:2726-0:355:256","b:2:2736-0:355:256","b:2:3495-0:355:256","b:2:2730-0:355:256","b:2:2423-0:355:256","0:361","0:211"]}}},"a:2:42131:2891-0:336:2129":{"id":"a:2:42131:2891-0:336:2129","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42131:2891","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Env","id":"0:336:2129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:399:1949":{"id":"0:399:1949","crate_id":0,"name":"TimestampPrecision","span":{"filename":"src/fmt/mod.rs","begin":[62,0],"end":[71,1]},"visibility":"public","docs":"Formatting precision of timestamps.\n\nSeconds give precision of full seconds, milliseconds give thousands of a\nsecond (3 decimal digits), microseconds are millionth of a second (6 decimal\ndigits) and nanoseconds are billionth of a second (9 decimal digits).","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:400:2197","0:402:2200","0:404:2203","0:406:2206"],"impls":["a:2:32418:244-0:399:1949","a:2:32500:2952-0:399:1949","a:2:42130:2892-0:399:1949","a:2:42131:2891-0:399:1949","a:2:2948:254-0:399:1949","b:2:2426-0:399:1949","b:2:2741-0:399:1949","b:2:2726-0:399:1949","b:2:2736-0:399:1949","b:2:3495-0:399:1949","b:2:2730-0:399:1949","b:2:2423-0:399:1949","b:5:687-0:399:1949","0:408","0:411","0:245","0:409"]}}},"b:2:2730-0:247:141":{"id":"b:2:2730-0:247:141","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2703:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Formatter","id":"0:247:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2732:746"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2736-0:365:1950":{"id":"b:2:2736-0:365:1950","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2710:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2706:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"WriteStyle","id":"0:365:1950","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2739:135","2:2740:1621"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"2:41221:2870":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:3607:3427":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"27:1188:2098":{"crate_id":27,"path":["aho_corasick","dfa","Builder"],"kind":"struct"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:5140:9067":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6960:6352":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:8921:3004":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:9833:233":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:15842:5362":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:40603:6980":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"18:766:26498":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"11:856:6624":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:44633:9625":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:32388:6432":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:22199:10098":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"25:931:4880":{"crate_id":25,"path":["regex","re_bytes","Captures"],"kind":"struct"},"1:8975:4436":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:11307:5185":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:22677:32347":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"27:1422:2098":{"crate_id":27,"path":["aho_corasick","packed","teddy","compile","Builder"],"kind":"struct"},"1:2662:2858":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:41939:7210":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:12797:4240":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:13695:5490":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:11384:9634":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:48012:7173":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:46562:7106":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"23:330:4194":{"crate_id":23,"path":["anstyle","effect","EffectsDisplay"],"kind":"struct"},"1:4742:10130":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:41962:6898":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:5992:2882":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:4613:6173":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:43952:7036":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:10451:4020":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:12335:4234":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:10700:3427":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:1521:8572":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:4444:3948":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:483:8496":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:33704:15495":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:5123:9063":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:5974:9153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:2504:6131":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:3994:10117":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:6741:9340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"26:2132:4823":{"crate_id":26,"path":["regex_syntax","hir","translate","Translator"],"kind":"struct"},"6:4854:8925":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:4719:6175":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:5992:9165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"11:2498:21356":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:3122:2948":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:10800:2841":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"29:0:1952":{"crate_id":29,"path":["anstream"],"kind":"module"},"28:824:4556":{"crate_id":28,"path":["memchr","memmem","Searcher"],"kind":"struct"},"11:1883:3426":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"25:1861:36126":{"crate_id":25,"path":["regex","literal","imp","LiteralIter"],"kind":"enum"},"17:15725:6005":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:14385:5614":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:12053:1641":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"27:1668:4673":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesBuilder"],"kind":"struct"},"25:2437:4995":{"crate_id":25,"path":["regex","re_set","bytes","SetMatches"],"kind":"struct"},"2:46659:7109":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"26:1081:26545":{"crate_id":26,"path":["regex_syntax","ast","parse","Primitive"],"kind":"enum"},"27:1261:4620":{"crate_id":27,"path":["aho_corasick","nfa","IterTransitionsMut"],"kind":"struct"},"11:1603:6636":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:2881:6147":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:8139:2869":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:2710:264":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:44621:9622":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:22729:6949":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:1477:4382":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:22228:15512":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:11518:7208":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:6543:2942":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:2596:6135":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"27:1157:4606":{"crate_id":27,"path":["aho_corasick","dfa","PremultipliedByteClass"],"kind":"struct"},"22:181:2399":{"crate_id":22,"path":["humantime","wrapper","Timestamp"],"kind":"struct"},"2:48280:7184":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:15027:5808":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"26:1107:4163":{"crate_id":26,"path":["regex_syntax","ast","parse","ParserBuilder"],"kind":"struct"},"16:6156:6255":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:10845:6908":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:8844:4435":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:9759:22358":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:32418:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"18:599:35731":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:6466:2945":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"15:327:4350":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:495:8288":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:14346:5611":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:7090:6374":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:4777:719":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:10299:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"20:296:2073":{"crate_id":20,"path":["log","Metadata"],"kind":"struct"},"17:13056:5353":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:12999:5344":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:11309:4441":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:837:6621":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:7277:3333":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:4889:6181":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"27:1225:4615":{"crate_id":27,"path":["aho_corasick","nfa","State"],"kind":"struct"},"32:0:3509":{"crate_id":32,"path":["colorchoice"],"kind":"module"},"25:1468:4910":{"crate_id":25,"path":["regex","compile","SuffixCache"],"kind":"struct"},"16:6569:4330":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13676:5485":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:2644:6137":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:3126:1170":{"crate_id":1,"path":["std","io","prelude"],"kind":"module"},"26:1188:2077":{"crate_id":26,"path":["regex_syntax","ast","print","Writer"],"kind":"struct"},"17:12127:5278":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:7879:2949":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"29:417:4126":{"crate_id":29,"path":["anstream","adapter","wincon","WinconBytes"],"kind":"struct"},"1:11012:3712":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"16:2788:6143":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:7468:6727":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:7544:6465":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:43292:4423":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:40719:6869":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:2062:6711":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"27:1406:4575":{"crate_id":27,"path":["aho_corasick","packed","pattern","Pattern"],"kind":"struct"},"17:13504:5444":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"18:690:4555":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:42131:2891":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:3735:7208":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8547:3426":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:3581:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"26:2029:135":{"crate_id":26,"path":["regex_syntax","error","Error"],"kind":"enum"},"16:5982:6228":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"11:1923:4678":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"25:2047:4980":{"crate_id":25,"path":["regex","prog","InstRanges"],"kind":"struct"},"1:8148:2871":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"25:1605:4192":{"crate_id":25,"path":["regex","dfa","StateFlags"],"kind":"struct"},"1:4821:10127":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:5015:9008":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:2744:6141":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"26:0:3312":{"crate_id":26,"path":["regex_syntax"],"kind":"module"},"16:6721:22297":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"26:2560:135":{"crate_id":26,"path":["regex_syntax","unicode","Error"],"kind":"enum"},"5:4366:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"5:7268:2899":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:909:6634":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:5146:9069":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"22:209:36098":{"crate_id":22,"path":["humantime","date","Precision"],"kind":"enum"},"17:13948:5526":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:504:3056":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"5:7347:4391":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:42556:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:10881:22374":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"22:102:2524":{"crate_id":22,"path":["humantime","date","format_rfc3339_nanos"],"kind":"function"},"2:22268:10319":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"18:681:4553":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:5971:4010":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:32533:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:43055:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"27:1147:4605":{"crate_id":27,"path":["aho_corasick","dfa","Premultiplied"],"kind":"struct"},"1:859:3333":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:13246:3996":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"26:1144:26546":{"crate_id":26,"path":["regex_syntax","ast","parse","GroupState"],"kind":"enum"},"2:22282:15512":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"25:2174:4597":{"crate_id":25,"path":["regex","re_bytes","Match"],"kind":"struct"},"18:624:35732":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:11243:5181":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6425:6280":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:790:3925":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:41230:3980":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:12701:5328":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:9036:7328":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:3366:2870":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:8290:4193":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:3160:30933":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:2370:10090":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:6426:2937":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:12220:5032":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4955:8971":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:13395:5414":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:11041:4204":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:6083:21403":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:580:8549":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:9882:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:12463:15375":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"11:774:4382":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:5830:6206":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:42200:3427":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"26:1284:4419":{"crate_id":26,"path":["regex_syntax","ast","Span"],"kind":"struct"},"2:42070:3427":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:31164:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11469:5195":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:5625:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:43888:2846":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:5004:9005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:4625:10117":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:15294:5879":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:10740:9633":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11476:4356":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:16004:6078":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:10530:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:14057:5542":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:12718:22365":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:12050:795":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:2228:5028":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:9536:33727":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"26:1623:26536":{"crate_id":26,"path":["regex_syntax","ast","ClassUnicodeOpKind"],"kind":"enum"},"6:5885:9116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"18:614:35733":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"26:2125:4169":{"crate_id":26,"path":["regex_syntax","hir","translate","TranslatorBuilder"],"kind":"struct"},"26:2311:4776":{"crate_id":26,"path":["regex_syntax","hir","ClassUnicode"],"kind":"struct"},"1:914:4384":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:12035:1659":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"28:665:150":{"crate_id":28,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:4595:8844":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"11:1676:3916":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:10293:2846":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"18:481:4527":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4529:8810":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:9877:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:7343:9437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"23:366:3712":{"crate_id":23,"path":["anstyle","reset","Reset"],"kind":"struct"},"17:12396:5304":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:14633:5638":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:13044:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:13765:5499":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"25:2238:4989":{"crate_id":25,"path":["regex","re_bytes","CaptureNames"],"kind":"struct"},"2:44617:9621":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"26:2109:4167":{"crate_id":26,"path":["regex_syntax","hir","print","PrinterBuilder"],"kind":"struct"},"11:123:3910":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:12057:1698":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:5004:2822":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"30:85:26582":{"crate_id":30,"path":["anstyle_parse","CharAccumulator"],"kind":"trait"},"1:10745:7246":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:15961:5390":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:4584:8839":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"11:875:6626":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:44124:7040":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:5322:6189":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"26:1817:4797":{"crate_id":26,"path":["regex_syntax","ast","RepetitionOp"],"kind":"struct"},"26:2140:26564":{"crate_id":26,"path":["regex_syntax","hir","translate","HirFrame"],"kind":"enum"},"27:1586:4529":{"crate_id":27,"path":["aho_corasick","prefilter","PrefilterState"],"kind":"struct"},"2:7111:3341":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:5798:4298":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:12052:1640":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:11755:5228":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:7850:7246":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:1546:8586":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:48158:7176":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:2972:2740":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"25:1433:36146":{"crate_id":25,"path":["regex","compile","MaybeInst"],"kind":"enum"},"17:11439:5192":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:14896:5792":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:1545:3955":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"9:486:21281":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:40742:4402":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:43274:4615":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:10946:26949":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"23:253:3708":{"crate_id":23,"path":["anstyle","color","Ansi256Color"],"kind":"struct"},"5:6687:3922":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:5753:2934":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:13633:5474":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6386:6276":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:44895:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:16032:6085":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:46091:7084":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:1562:4789":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"27:1195:135":{"crate_id":27,"path":["aho_corasick","error","Error"],"kind":"struct"},"17:15535:5959":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:43784:7025":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:281:2177":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:10315:4226":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:3670:10109":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:3357:33867":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:40771:6876":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"25:2268:4992":{"crate_id":25,"path":["regex","re_bytes","ReplacerRef"],"kind":"struct"},"29:114:2852":{"crate_id":29,"path":["anstream","stream","IsTerminal"],"kind":"trait"},"26:2160:4827":{"crate_id":26,"path":["regex_syntax","hir","translate","TranslatorI"],"kind":"struct"},"5:7029:3970":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:3163:9664":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"11:1160:6633":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:14087:5561":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:22656:32329":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13684:5487":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:42515:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"26:268:36855":{"crate_id":26,"path":["regex_syntax","ast","visitor","ClassInduct"],"kind":"enum"},"2:30562:2890":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11052:5143":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6226:6260":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:4265:2768":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"27:1651:4668":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesTwo"],"kind":"struct"},"29:507:36886":{"crate_id":29,"path":["anstream","auto","StreamInner"],"kind":"enum"},"2:7281:32381":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:44882:7071":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:8228:7294":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"26:2423:3900":{"crate_id":26,"path":["regex_syntax","hir","Group"],"kind":"struct"},"2:40350:6862":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"11:883:6627":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:6691:9312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"22:134:135":{"crate_id":22,"path":["humantime","duration","Error"],"kind":"enum"},"17:12684:5103":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:32409:6957":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:4449:2754":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11497:4227":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:8938:10201":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:849:3427":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:2574:6134":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:15125:5834":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:16049:6087":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:41215:6888":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:11065:5163":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:110:314":{"crate_id":5,"path":["alloc","alloc","alloc"],"kind":"function"},"2:11001:6913":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:2722:6140":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:951:6627":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:8288:10140":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:5816:4303":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"31:53:4615":{"crate_id":31,"path":["utf8parse","types","State"],"kind":"enum"},"2:2323:636":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:2426:2070":{"crate_id":1,"path":["std","io"],"kind":"module"},"7:78:21275":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:3482:2437":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:14426:5619":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:46069:7083":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:939:6624":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4998:9002":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:39701:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"26:2227:3904":{"crate_id":26,"path":["regex_syntax","hir","Hir"],"kind":"struct"},"26:2579:26565":{"crate_id":26,"path":["regex_syntax","unicode","ClassQuery"],"kind":"enum"},"1:11023:4022":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:21250:33582":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:40419:6972":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"25:2552:4990":{"crate_id":25,"path":["regex","re_unicode","CaptureLocations"],"kind":"struct"},"17:3584:5031":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:5673:6150":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"26:1467:26538":{"crate_id":26,"path":["regex_syntax","ast","HexLiteralKind"],"kind":"enum"},"1:5571:10195":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:1697:8687":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"22:100:2523":{"crate_id":22,"path":["humantime","date","format_rfc3339_millis"],"kind":"function"},"5:6605:3333":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4434:8767":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:13118:6931":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"23:340:3710":{"crate_id":23,"path":["anstyle","effect","EffectIter"],"kind":"struct"},"2:44194:6924":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:4585:6172":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:10931:7223":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:6811:10225":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"11:1891:3941":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:12051:1643":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:7768:4346":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:46247:7091":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"11:1087:35705":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"25:1780:4951":{"crate_id":25,"path":["regex","input","InputAt"],"kind":"struct"},"1:1556:4788":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:401:5017":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:1094:5022":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:6430:2938":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:9445:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:1537:8580":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:5152:9072":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:256:5015":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:12850:5032":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"11:2352:6629":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:7582:4339":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:40623:2873":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:14170:5577":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:15384:5902":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:9028:4445":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:45961:7079":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12930:22367":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:40992:6883":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:40473:6976":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:363:3076":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"20:352:2075":{"crate_id":20,"path":["log","SetLoggerError"],"kind":"struct"},"18:699:4136":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"25:949:4883":{"crate_id":25,"path":["regex","re_bytes","CapturesDebug"],"kind":"struct"},"5:830:3928":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:4865:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:4998:856":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:5727:4297":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"28:731:35733":{"crate_id":28,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:15087:5826":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:9651:22356":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:3278:2572":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"24:85:3318":{"crate_id":24,"path":["env_filter","directive","Directive"],"kind":"struct"},"2:44319:7050":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"26:1654:26539":{"crate_id":26,"path":["regex_syntax","ast","ClassSet"],"kind":"enum"},"6:548:8533":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:6047:9202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:5910:9121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:4252:3426":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:4745:6176":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:40560:10070":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:4921:6182":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"23:309:2435":{"crate_id":23,"path":["anstyle","effect","Effects"],"kind":"struct"},"2:41903:32337":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:13478:5439":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:8332:9322":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:4469:10141":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:6960:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:569:8544":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:7622:9455":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:11321:4204":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:12674:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:1550:4787":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"27:1094:4599":{"crate_id":27,"path":["aho_corasick","classes","ByteClassRepresentatives"],"kind":"struct"},"2:44282:15387":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:1455:3333":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:30794:32351":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:7563:2744":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:7736:6470":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:40593:3974":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11226:5178":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:10768:6906":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:7560:6734":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:5955:9151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:9096:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:6485:4328":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:10559:5141":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:4020:3941":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"28:699:3296":{"crate_id":28,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:640:7198":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"27:1644:4666":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesOne"],"kind":"struct"},"6:4535:8813":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:7782:6471":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:22226:32856":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:9790:22359":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:6600:22296":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6742:6329":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:12091:5275":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:13285:5394":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"26:2240:26550":{"crate_id":26,"path":["regex_syntax","hir","HirKind"],"kind":"enum"},"16:6687:6316":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:2380:6126":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"10:44:4357":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:41926:7006":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:40530:32353":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:2985:3280":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:4745:8870":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11455:4026":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:10964:4435":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:5982:9158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:43714:7020":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11666:5216":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:11122:4434":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:43872:6918":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:8852:3426":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:5033:9019":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:13235:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"26:1309:4742":{"crate_id":26,"path":["regex_syntax","ast","WithComments"],"kind":"struct"},"17:15546:5963":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:6961:9431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:5829:9076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:43477:7015":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:15212:5856":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:7616:9454":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:6171:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:5344:3922":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:12046:800":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"11:2469:3955":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"11:364:3912":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"25:2248:4990":{"crate_id":25,"path":["regex","re_bytes","CaptureLocations"],"kind":"struct"},"1:7917:7249":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"14:165:21366":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"18:491:5014":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:39679:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:10556:3066":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:5891:9119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:15733:6008":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4496:8796":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:8234:7296":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:2439:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:40803:4403":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:48348:7188":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"22:99:2525":{"crate_id":22,"path":["humantime","date","format_rfc3339_seconds"],"kind":"function"},"6:4506:8802":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:2941:2763":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:533:8524":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"9:393:21283":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"30:201:21319":{"crate_id":30,"path":["anstyle_parse","state","definitions","Action"],"kind":"enum"},"2:10093:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:7128:7328":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:836:3426":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:4647:8862":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:2586:2856":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12614:22364":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"11:1566:21361":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:12366:22486":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:14878:5787":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:22843:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:12403:2793":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"26:1602:26535":{"crate_id":26,"path":["regex_syntax","ast","ClassUnicodeKind"],"kind":"enum"},"17:9730:22357":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:7668:9467":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6222:9256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"11:1066:21360":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:2969:21432":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:40466:6975":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"29:329:4518":{"crate_id":29,"path":["anstream","adapter","strip","StripStrIter"],"kind":"struct"},"17:13297:5395":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13663:5483":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"18:515:4526":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:10355:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:12345:5299":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:13066:33425":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:44937:7075":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"27:1167:4002":{"crate_id":27,"path":["aho_corasick","dfa","Repr"],"kind":"struct"},"0:128:719":{"crate_id":0,"path":["env_logger","fmt"],"kind":"module"},"2:1882:15522":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"24:41:2282":{"crate_id":24,"path":["env_filter","filter","Filter"],"kind":"struct"},"23:388:4195":{"crate_id":23,"path":["anstyle","reset","ResetDisplay"],"kind":"struct"},"17:16076:6096":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:3021:6390":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:2197:5025":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:2777:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"14:202:15389":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:42062:3426":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:11727:5225":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:14921:5794":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"11:1917:4789":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:46210:7089":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"7:31:21268":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:42120:3003":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:43797:7026":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:40546:6979":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:48333:7187":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:48234:7180":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"26:1296:4681":{"crate_id":26,"path":["regex_syntax","ast","Position"],"kind":"struct"},"2:3338:15417":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:6897:4013":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:3493:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:22091:10313":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:5568:9243":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:15519:5955":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:4737:15428":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:10803:5145":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"4:0:2607":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:7285:6725":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:6249:4010":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"25:2476:4984":{"crate_id":25,"path":["regex","re_trait","Matches"],"kind":"struct"},"2:10959:4986":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:3065:5041":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"11:299:9610":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:15253:5865":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:9354:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:1674:8677":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"25:2169:4983":{"crate_id":25,"path":["regex","re_builder","set_unicode","RegexSetBuilder"],"kind":"struct"},"2:21192:33585":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:33107:6385":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"28:716:35731":{"crate_id":28,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:44874:7069":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:8283:9630":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"20:326:2790":{"crate_id":20,"path":["log","MetadataBuilder"],"kind":"struct"},"2:38171:15501":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"11:2562:8483":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:44839:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"11:2383:3426":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"20:0:1955":{"crate_id":20,"path":["log"],"kind":"module"},"16:4641:6174":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:41756:6895":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:5961:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:4180:10139":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:40367:6967":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:47230:7135":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:11156:4410":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"27:1107:4583":{"crate_id":27,"path":["aho_corasick","dfa","DFA"],"kind":"enum"},"16:7708:4344":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8922:10199":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:46918:7129":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"11:396:3914":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:12898:22366":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"25:1842:36144":{"crate_id":25,"path":["regex","literal","imp","Matcher"],"kind":"enum"},"0:399:1949":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision"],"kind":"enum"},"29:99:26578":{"crate_id":29,"path":["anstream","stream","RawStream"],"kind":"trait"},"25:2496:4597":{"crate_id":25,"path":["regex","re_unicode","Match"],"kind":"struct"},"6:4968:8981":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:5712:4294":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:4989:8996":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:0:2616":{"crate_id":17,"path":["object"],"kind":"module"},"2:42002:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:12037:1152":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:4724:8868":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"25:178:4856":{"crate_id":25,"path":["regex","compile","ByteClassSet"],"kind":"struct"},"1:8874:7225":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"11:2403:3427":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:44166:7041":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"25:307:4859":{"crate_id":25,"path":["regex","dfa","TransitionsRow"],"kind":"struct"},"1:8980:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:42217:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:5905:6215":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:4050:10122":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"9:357:21297":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:4381:3948":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:43745:7023":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:9452:7245":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:6013:15806":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"29:466:4615":{"crate_id":29,"path":["anstream","adapter","wincon","State"],"kind":"enum"},"17:11800:5230":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10137:4222":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:7665:2098":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:14786:5752":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:14399:5615":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:4806:6178":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:41790:10108":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:482:3998":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"26:1057:4692":{"crate_id":26,"path":["regex_syntax","utf8","ScalarRange"],"kind":"struct"},"2:45985:7080":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:1496:8562":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4814:8903":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"25:1889:4959":{"crate_id":25,"path":["regex","literal","imp","Memmem"],"kind":"struct"},"24:19:2098":{"crate_id":24,"path":["env_filter","filter","Builder"],"kind":"struct"},"1:945:6626":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:2569:6726":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"27:1501:4642":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddyFat1Mask256"],"kind":"struct"},"16:2696:6139":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"27:1677:4674":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesOne"],"kind":"struct"},"26:1115:4074":{"crate_id":26,"path":["regex_syntax","ast","parse","Parser"],"kind":"struct"},"16:2284:21404":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:6499:4329":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:588:10023":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:11372:7236":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:2406:6127":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:7747:15487":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"28:816:4136":{"crate_id":28,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:4556:8823":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"29:501:2570":{"crate_id":29,"path":["anstream","auto","AutoStream"],"kind":"struct"},"6:6658:9289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5009:9007":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13097:5362":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:46340:7099":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:42595:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:4686:8865":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:6483:6878":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:6346:4324":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"26:2436:26526":{"crate_id":26,"path":["regex_syntax","hir","GroupKind"],"kind":"enum"},"17:4928:5038":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:10141:3523":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"29:315:4122":{"crate_id":29,"path":["anstream","adapter","strip","StripStr"],"kind":"struct"},"17:16062:6093":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"28:769:4528":{"crate_id":28,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:11539:7209":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"11:351:35701":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:7651:9462":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:3111:2765":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:12005:10031":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:2333:15512":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:5632:4010":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:7511:6732":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:40:3918":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:5415:7221":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:6893:4290":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"27:1399:4637":{"crate_id":27,"path":["aho_corasick","packed","pattern","PatternIter"],"kind":"struct"},"6:6100:9227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:9896:2813":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:10075:7331":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:3888:6163":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13419:5416":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:1486:4383":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"30:0:3507":{"crate_id":30,"path":["anstyle_parse"],"kind":"module"},"11:1025:6628":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:7826:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:12410:5307":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:14373:5613":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:11617:5209":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:10657:4204":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:1743:659":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:4212:2822":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:5075:9035":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5085:9040":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:7903:4433":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"26:1779:26530":{"crate_id":26,"path":["regex_syntax","ast","AssertionKind"],"kind":"enum"},"27:1271:2098":{"crate_id":27,"path":["aho_corasick","nfa","Builder"],"kind":"struct"},"28:726:4539":{"crate_id":28,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:7651:6468":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:4908:8947":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:2983:34106":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:3797:6161":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:8354:7214":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:2658:15439":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13922:5523":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:4773:5037":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"18:538:4131":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"28:681:4133":{"crate_id":28,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:43696:7017":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:5876:4401":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13724:5495":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:4616:8852":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:6545:6293":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"25:2202:4984":{"crate_id":25,"path":["regex","re_bytes","Matches"],"kind":"struct"},"18:652:4528":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:1691:8684":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:11576:5206":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"26:1335:26524":{"crate_id":26,"path":["regex_syntax","ast","Ast"],"kind":"enum"},"16:3830:6162":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:40681:4399":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"28:0:2617":{"crate_id":28,"path":["memchr"],"kind":"module"},"17:14001:5533":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:43724:7021":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:13961:5528":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"22:0:1767":{"crate_id":22,"path":["humantime"],"kind":"module"},"2:10312:3985":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:15671:5995":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:6596:2946":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:3032:6156":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:6169:9245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"27:1690:4676":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesThree"],"kind":"struct"},"17:15049:5812":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:43262:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:4523:8808":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:13869:5516":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:15493:5946":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"28:844:4138":{"crate_id":28,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"31:23:21319":{"crate_id":31,"path":["utf8parse","types","Action"],"kind":"enum"},"17:11536:5203":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"25:0:1768":{"crate_id":25,"path":["regex"],"kind":"module"},"1:7867:7247":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"31:0:3508":{"crate_id":31,"path":["utf8parse"],"kind":"module"},"17:11945:5263":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:1650:8660":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8495:10190":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"25:1213:4880":{"crate_id":25,"path":["regex","re_unicode","Captures"],"kind":"struct"},"17:11767:5229":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6268:35718":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:6819:9353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"25:2144:4983":{"crate_id":25,"path":["regex","re_builder","set_bytes","RegexSetBuilder"],"kind":"struct"},"2:4919:32554":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:41248:6891":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:8013:2860":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:142:2704":{"crate_id":5,"path":["alloc","boxed"],"kind":"module"},"5:3217:4789":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"27:1102:4603":{"crate_id":27,"path":["aho_corasick","classes","ByteClassBuilder"],"kind":"struct"},"2:42746:2814":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:3126:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"26:2348:4825":{"crate_id":26,"path":["regex_syntax","hir","ClassBytes"],"kind":"struct"},"26:2593:36194":{"crate_id":26,"path":["regex_syntax","unicode","CanonicalClassQuery"],"kind":"enum"},"6:4878:8935":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:8171:2842":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"25:1833:4954":{"crate_id":25,"path":["regex","literal","imp","LiteralSearcher"],"kind":"struct"},"1:10516:2572":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"6:6813:9352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:7365:9438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:11614:7237":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:1507:8567":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"11:1896:3955":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:12758:5330":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:14194:5580":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:12103:5276":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:41773:6897":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:12921:4234":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:7933:2859":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:1789:3955":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:596:8558":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:5746:2933":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:1315:6633":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:1691:2822":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:7884:22303":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:14208:5581":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:34419:6394":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:38281:15503":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:555:8536":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:10880:6909":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:11027:5123":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:8134:6526":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"26:1484:3898":{"crate_id":26,"path":["regex_syntax","ast","Class"],"kind":"enum"},"26:1932:3894":{"crate_id":26,"path":["regex_syntax","ast","Flags"],"kind":"struct"},"1:7756:3461":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:3510:2836":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:5419:4200":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:2943:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:44697:2907":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"25:1947:4867":{"crate_id":25,"path":["regex","prog","Program"],"kind":"struct"},"1:2205:3689":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:3344:15416":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:13322:5400":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:4774:6177":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:5121:6188":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"28:97:26488":{"crate_id":28,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:4783:8890":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"0:406:2206":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Nanos"],"kind":"variant"},"2:39949:29414":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:15480:5940":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:4168:15419":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:11345:5186":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:11998:2496":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"32:41:4065":{"crate_id":32,"path":["colorchoice","AtomicChoice"],"kind":"struct"},"17:12432:5311":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"27:923:10098":{"crate_id":27,"path":["aho_corasick","state_id","private","Sealed"],"kind":"trait"},"27:1315:26571":{"crate_id":27,"path":["aho_corasick","packed","api","MatchKind"],"kind":"enum"},"16:8205:22304":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:12324:5297":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"11:742:4385":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:6484:3941":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:2428:6128":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:33527:2738":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"26:1885:26526":{"crate_id":26,"path":["regex_syntax","ast","GroupKind"],"kind":"enum"},"2:3317:15506":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:12153:5280":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4566:8830":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:11029:4023":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:7908:4432":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"26:2099:3895":{"crate_id":26,"path":["regex_syntax","hir","literal","Literal"],"kind":"struct"},"1:10790:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"26:2173:3894":{"crate_id":26,"path":["regex_syntax","hir","translate","Flags"],"kind":"struct"},"25:2054:4981":{"crate_id":25,"path":["regex","prog","InstBytes"],"kind":"struct"},"25:1732:4950":{"crate_id":25,"path":["regex","expand","CaptureRef"],"kind":"struct"},"2:48214:7178":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:14041:5537":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:11595:4450":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:40630:6981":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"25:1725:4947":{"crate_id":25,"path":["regex","exec","ProgramCacheInner"],"kind":"struct"},"2:39637:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:11369:5187":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"27:1281:4576":{"crate_id":27,"path":["aho_corasick","nfa","Compiler"],"kind":"struct"},"5:4182:2822":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:12536:5315":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:10073:2129":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:30602:3654":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10726:35723":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:13093:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:38226:15502":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:10136:3522":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:21236:33594":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"5:3225:4787":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:3966:10114":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:0:314":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:14485:4234":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:48074:7174":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:6467:6283":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"28:853:26497":{"crate_id":28,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:4417:6167":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12387:22487":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"11:1903:4787":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:3491:28140":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:1777:635":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:46192:7088":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:2700:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:7604:9452":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:2335:15513":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:6781:9342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:6718:9322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"25:1622:4925":{"crate_id":25,"path":["regex","dfa","StateMap"],"kind":"struct"},"16:7342:35720":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:4569:10159":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:7307:3933":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"22:157:2916":{"crate_id":22,"path":["humantime","duration","FormattedDuration"],"kind":"struct"},"6:4914:8950":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"26:1389:3902":{"crate_id":26,"path":["regex_syntax","ast","Concat"],"kind":"struct"},"6:5023:9013":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:4383:7213":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:7217:15489":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:6868:9389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:6162:4009":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:2169:22420":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"25:2211:4985":{"crate_id":25,"path":["regex","re_bytes","CaptureMatches"],"kind":"struct"},"1:2352:2301":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"26:2614:26568":{"crate_id":26,"path":["regex_syntax","utf8","Utf8Sequence"],"kind":"enum"},"1:4042:10120":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"26:1184:4708":{"crate_id":26,"path":["regex_syntax","ast","print","Printer"],"kind":"struct"},"1:6297:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:11001:5160":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"25:1654:4929":{"crate_id":25,"path":["regex","exec","ExecNoSyncStr"],"kind":"struct"},"2:3098:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"11:0:2611":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:4932:8961":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:811:3955":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:2946:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:15235:5861":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"27:1683:4675":{"crate_id":27,"path":["aho_corasick","prefilter","StartBytesTwo"],"kind":"struct"},"26:1905:4805":{"crate_id":26,"path":["regex_syntax","ast","CaptureName"],"kind":"struct"},"9:52:4358":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:10922:6690":{"crate_id":1,"path":["std","sys","pal","unix","os_str","Buf"],"kind":"struct"},"2:44156:2843":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:6146:3996":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:14470:5626":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:13989:5532":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:9678:22346":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4628:8861":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"18:80:26487":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:2944:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:4308:2745":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"26:2569:4847":{"crate_id":26,"path":["regex_syntax","unicode","CaseFoldError"],"kind":"struct"},"17:13707:5492":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:5:1709":{"crate_id":5,"path":["alloc","vec"],"kind":"macro"},"16:6352:4326":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:6944:35716":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"25:1914:4967":{"crate_id":25,"path":["regex","pikevm","Threads"],"kind":"struct"},"1:8893:7324":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"27:1560:4653":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Mask256"],"kind":"struct"},"6:7702:9474":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:328:9613":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:1819:3456":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:1063:6629":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:14904:5793":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:637:7196":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:2321:6123":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:2810:6144":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:40409:6971":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"27:1247:4857":{"crate_id":27,"path":["aho_corasick","nfa","Transitions"],"kind":"enum"},"2:22604:6935":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:880:4383":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"0:0:1951":{"crate_id":0,"path":["env_logger"],"kind":"module"},"17:14662:5658":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:5639:7224":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11632:5211":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:42320:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:43000:33572":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:8405:7310":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:16180:5400":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"11:1910:4788":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:34073:15499":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4473:8788":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"26:1322:4743":{"crate_id":26,"path":["regex_syntax","ast","Comment"],"kind":"struct"},"1:5082:7218":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"23:174:3707":{"crate_id":23,"path":["anstyle","color","Color"],"kind":"enum"},"17:9559:22341":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:22:733":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"23:397:2424":{"crate_id":23,"path":["anstyle","style","Style"],"kind":"struct"},"17:16087:6101":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:9023:4439":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:5928:9131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:261:5016":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"26:1640:4782":{"crate_id":26,"path":["regex_syntax","ast","ClassBracketed"],"kind":"struct"},"1:11243:9558":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:1567:4678":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"31:89:4074":{"crate_id":31,"path":["utf8parse","Parser"],"kind":"struct"},"2:39584:6959":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:21575:4160":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:10102:4221":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:11779:4230":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:40812:6879":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:48410:7190":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:14221:5582":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:44024:6911":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"15:394:21395":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:40447:6974":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:6879:6348":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:21238:33579":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13909:5521":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:4841:8920":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"25:1965:4894":{"crate_id":25,"path":["regex","prog","Inst"],"kind":"enum"},"17:15037:5809":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11459:5194":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:7451:3068":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:10941:5155":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"29:385:4519":{"crate_id":29,"path":["anstream","adapter","strip","StripBytesIter"],"kind":"struct"},"18:531:4529":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:16170:5395":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"16:7523:6464":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"13:226:4354":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:14235:5585":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13334:5401":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:14778:5751":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:11342:7233":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:5866:6213":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:4639:9337":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:40431:6973":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:4038:10119":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:9968:22363":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:4126:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:5049:6186":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:5051:7218":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:4151:10136":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"22:194:135":{"crate_id":22,"path":["humantime","date","Error"],"kind":"enum"},"2:7935:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:5403:4199":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:3191:4788":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:47154:7133":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:11395:5188":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:7284:3002":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:9457:4019":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:44629:9624":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"14:160:6616":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:32419:2951":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:42359:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:4637:9335":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:13976:5531":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:22005:10229":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:7554:4337":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:43734:7022":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:32445:251":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:7482:32353":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6159:9242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:1591:8617":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:12041:1624":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:8310:7301":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12560:5317":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"5:886:3930":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:12301:5296":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"9:426:21284":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:12584:5319":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:4129:32249":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:8294:7300":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"27:929:26572":{"crate_id":27,"path":["aho_corasick","state_id","StateID"],"kind":"trait"},"9:0:2609":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:7828:6479":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:15367:5895":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:6456:6282":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:15631:5984":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"25:2466:5000":{"crate_id":25,"path":["regex","re_trait","SubCapturesPosIter"],"kind":"struct"},"6:501:8501":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"27:1596:2098":{"crate_id":27,"path":["aho_corasick","prefilter","Builder"],"kind":"struct"},"2:43846:7030":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11701:5221":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:5939:4272":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:435:5019":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:22548:4412":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:15557:5964":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"26:1974:4810":{"crate_id":26,"path":["regex_syntax","ast","Flag"],"kind":"enum"},"25:1452:36147":{"crate_id":25,"path":["regex","compile","InstHole"],"kind":"enum"},"1:7740:3460":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:357:3075":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:9188:27979":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"27:1630:4581":{"crate_id":27,"path":["aho_corasick","prefilter","RareByteOffsets"],"kind":"struct"},"17:16098:6102":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"16:6968:22298":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:11657:5215":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"3:0:479":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:0:534":{"crate_id":2,"path":["core"],"kind":"module"},"1:9949:7003":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:44350:7054":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:21856:10233":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"27:1514:4644":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask256"],"kind":"struct"},"26:2574:4848":{"crate_id":26,"path":["regex_syntax","unicode","UnicodeWordError"],"kind":"struct"},"2:44333:7053":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:2209:2831":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:15903:6059":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:43970:7037":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:44912:7074":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"18:727:4138":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"25:2062:4179":{"crate_id":25,"path":["regex","re_builder","RegexOptions"],"kind":"struct"},"2:32531:3283":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:10344:3991":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:13145:5377":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:43816:7028":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"26:1194:135":{"crate_id":26,"path":["regex_syntax","ast","Error"],"kind":"struct"},"1:7925:2857":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10422:5139":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11958:5265":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:2766:6142":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"27:0:3313":{"crate_id":27,"path":["aho_corasick"],"kind":"module"},"26:1535:4765":{"crate_id":26,"path":["regex_syntax","ast","ClassAscii"],"kind":"struct"},"6:5068:9032":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:21573:10228":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:46706:7110":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:43806:7027":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"25:2534:2847":{"crate_id":25,"path":["regex","re_unicode","Split"],"kind":"struct"},"20:357:2791":{"crate_id":20,"path":["log","ParseLevelError"],"kind":"struct"},"16:2472:6130":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:5392:15363":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"27:1237:4618":{"crate_id":27,"path":["aho_corasick","nfa","Dense"],"kind":"struct"},"1:12034:452":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:4351:8706":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:10513:2569":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"20:219:2071":{"crate_id":20,"path":["log","LevelFilter"],"kind":"enum"},"2:7333:15481":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"32:21:2552":{"crate_id":32,"path":["colorchoice","ColorChoice"],"kind":"enum"},"1:1902:10066":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:3915:6164":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11141:5168":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:15:2183":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:4375:8723":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4977:8987":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:5431:7222":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:6243:6263":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:5969:9152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"27:1388:4632":{"crate_id":27,"path":["aho_corasick","packed","pattern","Patterns"],"kind":"struct"},"16:149:3907":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:11818:4030":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:32348:8482":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"26:2119:2077":{"crate_id":26,"path":["regex_syntax","hir","print","Writer"],"kind":"struct"},"1:12055:1639":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:15224:5857":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:3201:2864":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:41199:6887":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:6194:4440":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:7269:35717":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:40710:2282":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"20:277:2074":{"crate_id":20,"path":["log","Record"],"kind":"struct"},"2:40751:6871":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:10510:5140":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"18:609:4539":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:5859:9101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"23:274:3709":{"crate_id":23,"path":["anstyle","color","RgbColor"],"kind":"struct"},"11:1582:6635":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:46760:7112":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:11485:5199":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:12202:22485":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:475:4704":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:588:8554":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:48318:7186":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:1536:6710":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13121:5376":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:41819:4419":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:40439:6862":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:6012:9181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10471:35722":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:1495:6634":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"26:2277:3895":{"crate_id":26,"path":["regex_syntax","hir","Literal"],"kind":"enum"},"33:0:3510":{"crate_id":33,"path":["anstyle_query"],"kind":"module"},"15:0:2614":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:9130:2521":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:9166:3078":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"5:7317:34448":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:6927:9422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:3230:34451":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"21:0:2608":{"crate_id":21,"path":["cfg_if"],"kind":"module"},"26:2544:4163":{"crate_id":26,"path":["regex_syntax","parser","ParserBuilder"],"kind":"struct"},"5:1387:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:4311:7212":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:6318:6272":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"25:2524:4989":{"crate_id":25,"path":["regex","re_unicode","CaptureNames"],"kind":"struct"},"1:10918:3461":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:40379:32350":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:12039:1505":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:48254:7182":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:15108:5831":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"27:1507:4643":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim2Mask128"],"kind":"struct"},"6:1710:8691":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:3753:6711":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:11645:5212":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"16:6901:4332":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:8906:10200":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6696:6317":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"27:1080:2400":{"crate_id":27,"path":["aho_corasick","buffer","Buffer"],"kind":"struct"},"5:7339:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:13182:5390":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:3315:6157":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:3049:21433":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:7635:3959":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:10101:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:7462:6452":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:11519:6915":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"5:7535:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:43037:2803":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:9111:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:5384:22290":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:42242:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"28:788:4552":{"crate_id":28,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:23761:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:0:2615":{"crate_id":16,"path":["gimli"],"kind":"module"},"11:2151:6629":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"14:187:21373":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:15980:6073":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:893:3941":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"25:987:26515":{"crate_id":25,"path":["regex","re_bytes","Replacer"],"kind":"trait"},"17:14413:5618":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:6583:6294":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:2368:10089":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"26:1720:4784":{"crate_id":26,"path":["regex_syntax","ast","ClassSetUnion"],"kind":"struct"},"17:13882:5235":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:5588:6149":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:22495:6934":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:2200:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:46140:7086":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12572:5318":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:11357:7234":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:8008:4443":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:1270:6375":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:15321:5886":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:14122:5572":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"25:2255:4991":{"crate_id":25,"path":["regex","re_bytes","SubCaptureMatches"],"kind":"struct"},"2:47200:7134":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:4527:6170":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"11:430:35703":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"0:400:2197":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Seconds"],"kind":"variant"},"17:13162:5380":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"27:1698:4597":{"crate_id":27,"path":["aho_corasick","Match"],"kind":"struct"},"16:5088:6187":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"27:1544:4648":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddyFat3Mask256"],"kind":"struct"},"26:2059:4821":{"crate_id":26,"path":["regex_syntax","hir","interval","IntervalSet"],"kind":"struct"},"2:45895:7076":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12784:4238":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:8328:7303":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:212:3920":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:40982:2845":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:12040:1538":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:10770:4444":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:6644:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"15:288:21385":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4603:8848":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:4798:4003":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:5574:4293":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:3988:10116":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8537:7215":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"25:2572:4985":{"crate_id":25,"path":["regex","re_unicode","CaptureMatches"],"kind":"struct"},"1:1821:3457":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:23151:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:7492:6460":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:7670:3067":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13254:4254":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"27:1528:4646":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask128"],"kind":"struct"},"2:42437:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:42398:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13491:5443":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:46840:7113":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"28:777:4546":{"crate_id":28,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:44625:9623":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:15432:5939":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:38915:15505":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"28:556:5014":{"crate_id":28,"path":["memchr","cow","Imp"],"kind":"enum"},"17:14455:5622":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"27:1611:4661":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesBuilder"],"kind":"struct"},"2:43492:9620":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:33763:15497":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"25:2581:4984":{"crate_id":25,"path":["regex","re_unicode","Matches"],"kind":"struct"},"26:1178:4167":{"crate_id":26,"path":["regex_syntax","ast","print","PrinterBuilder"],"kind":"struct"},"2:23548:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:2697:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:14757:5741":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:2992:3282":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:11549:5204":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:48120:7175":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:7691:3066":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:12049:799":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:15345:5890":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:15659:5993":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:13856:5513":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11256:5182":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"25:1661:4930":{"crate_id":25,"path":["regex","exec","ExecReadOnly"],"kind":"struct"},"1:3199:2863":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:5780:2935":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"11:2124:6375":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:13742:5496":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:755:4566":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:13648:5478":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:7719:10029":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"26:1945:4808":{"crate_id":26,"path":["regex_syntax","ast","FlagsItem"],"kind":"struct"},"2:46608:7108":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"27:1449:4626":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Teddy"],"kind":"struct"},"17:15013:5807":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:2911:4002":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:6357:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"14:40:5377":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:12047:797":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:6489:9616":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:12746:4237":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:39776:6965":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:44487:7057":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:1131:34443":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:10054:3450":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:2420:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:12659:22343":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:5877:3941":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"20:290:2789":{"crate_id":20,"path":["log","RecordBuilder"],"kind":"struct"},"17:14822:5781":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:14312:5598":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:8167:6530":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:12148:6919":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"27:1429:4576":{"crate_id":27,"path":["aho_corasick","packed","teddy","compile","Compiler"],"kind":"struct"},"2:40780:6877":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:7582:4016":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"11:434:35695":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"25:2277:4993":{"crate_id":25,"path":["regex","re_bytes","NoExpand"],"kind":"struct"},"28:632:4526":{"crate_id":28,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:673:3426":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"28:691:4528":{"crate_id":28,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:12052:5270":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"26:254:36854":{"crate_id":26,"path":["regex_syntax","ast","visitor","ClassFrame"],"kind":"enum"},"6:1664:8671":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:10716:5143":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:40828:4543":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"11:844:10043":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"28:872:4566":{"crate_id":28,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:38336:15504":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:15301:5880":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:21564:10098":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:6843:3953":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:7498:6730":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:40659:2844":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:10987:6912":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:21881:4411":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10432:35725":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:13935:5524":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:11560:15371":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:8072:6520":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:1514:8570":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:5612:6151":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"26:1850:26528":{"crate_id":26,"path":["regex_syntax","ast","RepetitionRange"],"kind":"enum"},"17:13083:5361":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"25:2599:4993":{"crate_id":25,"path":["regex","re_unicode","NoExpand"],"kind":"struct"},"1:2622:2848":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:10618:35724":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:574:8546":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:42634:2932":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"25:2351:4995":{"crate_id":25,"path":["regex","re_set","unicode","SetMatches"],"kind":"struct"},"2:39657:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11014:5161":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:8243:3428":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:8215:2847":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"30:26:26586":{"crate_id":30,"path":["anstyle_parse","params","ParamsIter"],"kind":"struct"},"16:3655:5046":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:2933:21431":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:14843:5786":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"14:0:2613":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12510:5314":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"25:1518:4913":{"crate_id":25,"path":["regex","dfa","CacheInner"],"kind":"struct"},"1:0:1530":{"crate_id":1,"path":["std"],"kind":"module"},"11:2536:3900":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:1596:8619":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:2354:10085":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:21182:3296":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:4557:6171":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:3687:3922":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:10915:5154":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:44052:7038":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:43860:7033":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"29:403:4119":{"crate_id":29,"path":["anstream","adapter","strip","Utf8Parser"],"kind":"struct"},"25:1906:4451":{"crate_id":25,"path":["regex","pikevm","Cache"],"kind":"struct"},"1:7542:7355":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11523:4213":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:15612:5980":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:15244:5864":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:13832:5512":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:5117:9060":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:11449:5083":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:4231:7211":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:62:15832":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:8478:7313":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:4411:2822":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:2202:7206":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7006:6363":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"20:155:2780":{"crate_id":20,"path":["log","NopLogger"],"kind":"struct"},"2:31192:3296":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"28:546:4527":{"crate_id":28,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:9050:26958":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:3461:6158":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:1617:2396":{"crate_id":2,"path":["core","mem"],"kind":"module"},"18:736:26497":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"10:36:8485":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:2522:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:2450:6129":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11315:7352":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:4835:6179":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:7677:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:12457:4556":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"20:198:2397":{"crate_id":20,"path":["log","Level"],"kind":"enum"},"6:4610:8850":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:1024:3922":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10896:5152":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:9860:22361":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:7633:9459":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:21392:10098":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:40499:6977":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:41981:6899":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:6530:3922":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"22:101:2522":{"crate_id":22,"path":["humantime","date","format_rfc3339_micros"],"kind":"function"},"6:6248:9271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"28:836:4560":{"crate_id":28,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13754:5498":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:42732:2806":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"11:1007:6375":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:8816:4434":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:1406:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"26:2455:3899":{"crate_id":26,"path":["regex_syntax","hir","Repetition"],"kind":"struct"},"1:12038:339":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:6128:9234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"25:2519:4879":{"crate_id":25,"path":["regex","re_unicode","Regex"],"kind":"struct"},"5:7368:3333":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:40395:6970":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:13347:5402":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:9106:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:12418:5309":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:30618:2803":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:12443:4677":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:42739:2807":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"9:507:6693":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"11:832:6634":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:11621:7237":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"25:1528:4857":{"crate_id":25,"path":["regex","dfa","Transitions"],"kind":"struct"},"12:0:2612":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:40513:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:1896:9483":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"27:1521:4645":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddyFat2Mask256"],"kind":"struct"},"1:8159:2841":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:12077:5271":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:3343:3955":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"18:707:4556":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:4902:8945":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:4028:10118":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:1516:4385":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"25:1582:4187":{"crate_id":25,"path":["regex","dfa","EmptyFlags"],"kind":"struct"},"1:5825:2944":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:3001:2903":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:4462:6168":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:39597:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7694:4342":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:42192:3426":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:22362:10308":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:46486:7103":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:10973:6911":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5052:9027":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:22442:6933":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:3594:3426":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:3602:3941":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:5760:22292":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"25:1561:4615":{"crate_id":25,"path":["regex","dfa","State"],"kind":"struct"},"2:5592:2822":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:42208:3333":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:43253:3524":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:3166:9665":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:5388:3902":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:6872:3966":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:4800:8897":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:6415:6279":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"27:1378:4546":{"crate_id":27,"path":["aho_corasick","packed","api","FindIter"],"kind":"struct"},"2:43705:7018":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:1439:3427":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"25:1938:3905":{"crate_id":25,"path":["regex","pool","PoolGuard"],"kind":"struct"},"11:800:3941":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:7660:6469":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:634:6707":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:6361:6273":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:10716:7341":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"26:1131:4702":{"crate_id":26,"path":["regex_syntax","ast","parse","ParserI"],"kind":"struct"},"5:2183:4386":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:10918:6910":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"0:247:141":{"crate_id":0,"path":["env_logger","fmt","Formatter"],"kind":"struct"},"16:4497:6169":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6279:4319":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"27:1013:4588":{"crate_id":27,"path":["aho_corasick","ahocorasick","StreamFindIter"],"kind":"struct"},"26:1402:3895":{"crate_id":26,"path":["regex_syntax","ast","Literal"],"kind":"struct"},"2:4114:6864":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:14765:5744":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:7797:2950":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:9888:2814":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:11390:9635":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:15374:5897":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:46994:7131":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:44672:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:42053:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:15329:5887":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4401:8743":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:5995:4278":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:8195:6531":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:2031:5024":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"13:0:2606":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:4898:420":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:10725:2847":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"18:521:26499":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13787:5506":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:4824:8909":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:3155:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"27:1351:2098":{"crate_id":27,"path":["aho_corasick","packed","api","Builder"],"kind":"struct"},"6:6114:9229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:9681:2804":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:2236:34486":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:6332:4322":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"30:92:26584":{"crate_id":30,"path":["anstyle_parse","VtUtf8Receiver"],"kind":"struct"},"26:1919:4807":{"crate_id":26,"path":["regex_syntax","ast","SetFlags"],"kind":"struct"},"16:2339:4264":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:44425:6927":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4578:8836":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:5017:6185":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"26:2078:4822":{"crate_id":26,"path":["regex_syntax","hir","interval","IntervalSetIter"],"kind":"struct"},"26:2048:141":{"crate_id":26,"path":["regex_syntax","error","Formatter"],"kind":"struct"},"1:11193:8291":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:12474:4204":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:8154:6527":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:5687:2822":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:12972:5343":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:22580:4413":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:7015:6366":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:32501:3284":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:7534:6155":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"25:1628:135":{"crate_id":25,"path":["regex","error","Error"],"kind":"enum"},"16:6818:6343":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:5044:9025":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:1528:8575":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:2694:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:40480:15435":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:3930:10113":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:5435:6191":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:2092:6739":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:14439:5620":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:10133:7332":{"crate_id":1,"path":["std","sys","pal","unix","os_str","Slice"],"kind":"struct"},"1:533:3061":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:621:7195":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:8860:7323":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:42132:3411":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:42753:2815":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"25:1642:4926":{"crate_id":25,"path":["regex","exec","Exec"],"kind":"struct"},"6:4738:8869":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:4789:8893":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:12380:5302":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:10408:7320":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:1743:730":{"crate_id":2,"path":["core","mem","forget"],"kind":"function"},"18:582:3296":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:7531:5021":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:12054:1642":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"22:230:2921":{"crate_id":22,"path":["humantime","date","Rfc3339Timestamp"],"kind":"struct"},"2:42078:3333":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:15177:5847":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:9541:4405":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"18:113:26489":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:6204:4304":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"11:2231:4356":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"27:1137:4604":{"crate_id":27,"path":["aho_corasick","dfa","ByteClass"],"kind":"struct"},"26:1748:26532":{"crate_id":26,"path":["regex_syntax","ast","ClassSetBinaryOpKind"],"kind":"enum"},"17:11426:5191":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:7549:6733":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"5:6862:3965":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:22175:10315":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:10316:27891":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:30333:10110":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:40672:4397":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"25:1693:36129":{"crate_id":25,"path":["regex","exec","MatchLiteralType"],"kind":"enum"},"17:10051:4200":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:4234:2767":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"25:1398:4451":{"crate_id":25,"path":["regex","backtrack","Cache"],"kind":"struct"},"2:33645:15496":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:4159:10137":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:40852:6991":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:7331:3333":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:4893:8939":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:44185:7043":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:8455:4615":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:3409:2766":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:22357:10310":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:1969:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"26:1733:4786":{"crate_id":26,"path":["regex_syntax","ast","ClassSetBinaryOp"],"kind":"struct"},"2:43645:7016":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"25:1922:36145":{"crate_id":25,"path":["regex","pikevm","FollowEpsilon"],"kind":"enum"},"1:7857:4444":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"11:2140:6628":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:3837:7209":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"25:2005:4976":{"crate_id":25,"path":["regex","prog","InstEmptyLook"],"kind":"struct"},"5:4092:3427":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:11714:5223":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:6070:4005":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:1286:6629":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:23074:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"27:1437:4160":{"crate_id":27,"path":["aho_corasick","packed","teddy","compile","Mask"],"kind":"struct"},"25:2229:4986":{"crate_id":25,"path":["regex","re_bytes","SplitN"],"kind":"struct"},"17:14251:5587":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"11:102:9609":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:10172:4223":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"8:0:2608":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:39723:10036":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"20:151:2072":{"crate_id":20,"path":["log","Log"],"kind":"trait"},"2:43237:3525":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:5308:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:47872:7171":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:14509:5636":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:4906:10166":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"23:0:1953":{"crate_id":23,"path":["anstyle"],"kind":"module"},"1:12045:695":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4449:8774":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:8276:7210":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:6189:6258":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"26:1830:26527":{"crate_id":26,"path":["regex_syntax","ast","RepetitionKind"],"kind":"enum"},"17:11215:5176":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"26:2367:4176":{"crate_id":26,"path":["regex_syntax","hir","ClassBytesRange"],"kind":"struct"},"25:713:4863":{"crate_id":25,"path":["regex","pool","Pool"],"kind":"struct"},"17:15337:5889":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"25:2119:4982":{"crate_id":25,"path":["regex","re_builder","unicode","RegexBuilder"],"kind":"struct"},"9:450:21282":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:1909:706":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:15079:5823":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"26:2360:4839":{"crate_id":26,"path":["regex_syntax","hir","ClassBytesIter"],"kind":"struct"},"17:14145:5573":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"18:574:4528":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"0:404:2203":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Micros"],"kind":"variant"},"1:3443:2832":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"29:144:26579":{"crate_id":29,"path":["anstream","stream","AsLockedWrite"],"kind":"trait"},"16:5661:6202":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:2973:34444":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:4830:8912":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7621:22301":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:14156:5575":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:14282:5592":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:4947:8966":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:12514:15381":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"28:655:4131":{"crate_id":28,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:12059:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:41192:6886":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:4847:8923":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:14099:5563":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:12058:1248":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:30630:32334":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:8302:7294":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:2144:3056":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:45939:7078":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:7784:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:16160:6113":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"29:292:4120":{"crate_id":29,"path":["anstream","adapter","strip","StrippedStr"],"kind":"struct"},"5:903:3426":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:9349:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:15645:5986":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:13365:5410":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:7382:4101":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:7503:2869":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:5130:9066":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"25:1231:4883":{"crate_id":25,"path":["regex","re_unicode","CapturesDebug"],"kind":"struct"},"2:22639:6937":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:7840:2073":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:36295:6395":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:12255:5293":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:1685:3922":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:12000:4451":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"25:1754:2755":{"crate_id":25,"path":["regex","expand","Ref"],"kind":"enum"},"26:2489:26528":{"crate_id":26,"path":["regex_syntax","hir","RepetitionRange"],"kind":"enum"},"2:22003:10098":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:3241:2865":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:22136:10314":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:44006:4986":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"25:1802:4953":{"crate_id":25,"path":["regex","input","ByteInput"],"kind":"struct"},"6:7639:9460":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:1576:8605":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"27:1201:2860":{"crate_id":27,"path":["aho_corasick","error","ErrorKind"],"kind":"enum"},"2:39580:10055":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:44649:9629":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"25:2590:4992":{"crate_id":25,"path":["regex","re_unicode","ReplacerRef"],"kind":"struct"},"16:7862:6483":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:4376:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11412:5190":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"27:1489:4640":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask128"],"kind":"struct"},"16:5696:22291":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:14934:5799":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6560:3909":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:527:8521":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:9884:2807":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:5500:7223":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:8202:2845":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"18:590:4532":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:3818:3955":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"14:221:6620":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"29:486:2400":{"crate_id":29,"path":["anstream","buffer","Buffer"],"kind":"struct"},"1:5128:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:7722:4345":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:11292:4024":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"30:304:4119":{"crate_id":30,"path":["anstyle_parse","Utf8Parser"],"kind":"struct"},"6:6079:9215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:6120:9232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:21394:10231":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"11:2369:6639":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:595:5021":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:11175:2521":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:1905:6736":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"27:1211:4568":{"crate_id":27,"path":["aho_corasick","nfa","NFA"],"kind":"struct"},"17:11590:5207":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"24:0:1954":{"crate_id":24,"path":["env_filter"],"kind":"module"},"5:2256:4389":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:5648:6197":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"28:883:26498":{"crate_id":28,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:12185:6921":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:42141:2893":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:557:3063":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:5446:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"26:1588:4776":{"crate_id":26,"path":["regex_syntax","ast","ClassUnicode"],"kind":"struct"},"26:1802:3899":{"crate_id":26,"path":["regex_syntax","ast","Repetition"],"kind":"struct"},"25:213:36127":{"crate_id":25,"path":["regex","dfa","InstPtrs"],"kind":"struct"},"1:8868:3333":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:4364:8715":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:8387:10177":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:507:4528":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:46392:7101":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:1873:7203":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:10974:4216":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"27:1536:4647":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim3Mask256"],"kind":"struct"},"16:7360:35719":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:8003:7250":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:13516:5447":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"25:1380:4803":{"crate_id":25,"path":["regex","backtrack","Bounded"],"kind":"struct"},"16:4986:6184":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:43284:4422":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:6228:9257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:44653:4410":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"11:1142:6632":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4388:8733":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:2548:6133":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:7513:6463":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:46370:7100":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:6136:9236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"25:2346:4994":{"crate_id":25,"path":["regex","re_set","unicode","RegexSet"],"kind":"struct"},"1:5987:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:23710:6953":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"25:2363:4998":{"crate_id":25,"path":["regex","re_set","unicode","SetMatchesIter"],"kind":"struct"},"6:1913:17235":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:33900:15498":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:9101:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:3332:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:4455:8776":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"11:787:4383":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:7556:9450":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4516:8805":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:3372:2764":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:2474:9476":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"14:31:6616":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"25:2432:4994":{"crate_id":25,"path":["regex","re_set","bytes","RegexSet"],"kind":"struct"},"29:518:3513":{"crate_id":29,"path":["anstream","strip","StripStream"],"kind":"struct"},"23:202:2426":{"crate_id":23,"path":["anstyle","color","AnsiColor"],"kind":"enum"},"16:6929:4334":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:8252:15485":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"11:2443:3941":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"30:290:4118":{"crate_id":30,"path":["anstyle_parse","AsciiParser"],"kind":"struct"},"17:12486:5313":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:4167:10138":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:12356:5300":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:6376:22295":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:14296:5594":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:44821:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:489:8499":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:10780:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:3323:2852":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"25:2444:4997":{"crate_id":25,"path":["regex","re_set","bytes","SetMatchesIntoIter"],"kind":"struct"},"5:5154:2882":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:3239:2569":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13407:5415":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:5743:6203":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:9890:2815":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:39755:6963":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:6117:2822":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:6753:6330":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"29:61:26584":{"crate_id":29,"path":["anstream","adapter","strip","VtUtf8Receiver"],"kind":"struct"},"27:1368:36864":{"crate_id":27,"path":["aho_corasick","packed","api","SearchKind"],"kind":"enum"},"2:40842:6881":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:9071:4447":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:7503:6154":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:7435:10042":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13026:5349":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:7054:6369":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:4385:2747":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"27:998:4585":{"crate_id":27,"path":["aho_corasick","ahocorasick","FindOverlappingIter"],"kind":"struct"},"25:1880:4962":{"crate_id":25,"path":["regex","literal","imp","SingleByteSet"],"kind":"struct"},"5:1301:6628":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:9892:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:22693:32362":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"28:807:4555":{"crate_id":28,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:10676:3426":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:10735:9631":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:7138:32246":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:42149:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10207:4224":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:8115:6523":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:7297:3941":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:44462:7056":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"26:2087:4682":{"crate_id":26,"path":["regex_syntax","hir","literal","Literals"],"kind":"struct"},"6:123:15887":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:4744:10131":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:2618:6136":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:1703:8688":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:1054:6628":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:46229:7090":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:7388:9449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"15:306:21386":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13809:5507":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"27:971:5014":{"crate_id":27,"path":["aho_corasick","ahocorasick","Imp"],"kind":"enum"},"20:241:2788":{"crate_id":20,"path":["log","MaybeStaticStr"],"kind":"enum"},"11:700:3333":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:2979:34107":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:14887:5791":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:119:15886":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:41733:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:12273:5331":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:16109:6103":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:4488:8794":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:4428:8766":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"27:1333:4152":{"crate_id":27,"path":["aho_corasick","packed","api","Config"],"kind":"struct"},"30:255:4074":{"crate_id":30,"path":["anstyle_parse","Parser"],"kind":"struct"},"17:15868:6029":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"26:1208:2860":{"crate_id":26,"path":["regex_syntax","ast","ErrorKind"],"kind":"enum"},"17:9813:22360":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"27:1581:4655":{"crate_id":27,"path":["aho_corasick","prefilter","PrefilterObj"],"kind":"struct"},"17:15062:5818":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4755:8877":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:15279:5875":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:6844:6344":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:11155:5170":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:43012:4810":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:44210:6862":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"27:1457:4926":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Exec"],"kind":"enum"},"26:1958:26531":{"crate_id":26,"path":["regex_syntax","ast","FlagsItemKind"],"kind":"enum"},"28:707:4532":{"crate_id":28,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11194:22393":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:15855:5376":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:645:10026":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"28:624:4528":{"crate_id":28,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:922:6621":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:3251:5029":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"26:1518:26533":{"crate_id":26,"path":["regex_syntax","ast","ClassPerlKind"],"kind":"enum"},"5:7376:3333":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"27:961:4582":{"crate_id":27,"path":["aho_corasick","ahocorasick","AhoCorasick"],"kind":"struct"},"25:1647:4928":{"crate_id":25,"path":["regex","exec","ExecNoSync"],"kind":"struct"},"5:2975:9479":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:15101:5829":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:16123:6107":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:12828:5331":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:11088:5164":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:6898:9406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:4703:10141":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:12264:5294":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:6494:2400":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:10510:2863":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:44709:15610":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:4860:8928":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12166:5281":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:11607:27932":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:10337:4201":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:4:1115":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:3936:10112":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"25:1533:4918":{"crate_id":25,"path":["regex","dfa","Fsm"],"kind":"struct"},"2:2788:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"29:450:4128":{"crate_id":29,"path":["anstream","adapter","wincon","WinconCapture"],"kind":"struct"},"16:8050:6519":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:13202:4241":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:11984:6916":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:7645:9461":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:8097:6522":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:6889:9403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"11:2423:3333":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:44645:9628":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"27:1342:36865":{"crate_id":27,"path":["aho_corasick","packed","api","ForceAlgorithm"],"kind":"enum"},"5:2154:6712":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:16016:6080":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"5:3196:34452":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"26:1156:26547":{"crate_id":26,"path":["regex_syntax","ast","parse","ClassState"],"kind":"enum"},"1:3280:2862":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:5807:258":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"25:2487:4985":{"crate_id":25,"path":["regex","re_trait","CaptureMatches"],"kind":"struct"},"5:3184:3426":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:14266:5591":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:4915:10167":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:14021:5536":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:11978:5266":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:8564:7319":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:3600:6159":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:6299:6872":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:6531:6291":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:23386:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:22755:10111":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:3327:261":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"26:1998:26548":{"crate_id":26,"path":["regex_syntax","either","Either"],"kind":"enum"},"1:1796:3450":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:2706:265":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:14698:5689":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:15527:5958":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:7692:9472":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12029:5269":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:40650:6983":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:1558:8595":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:9149:2902":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:6263:9282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"23:353:3711":{"crate_id":23,"path":["anstyle","effect","EffectIndexIter"],"kind":"struct"},"6:4676:8864":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"27:1292:4622":{"crate_id":27,"path":["aho_corasick","nfa","fill_failure_transitions_leftmost","QueuedState"],"kind":"struct"},"25:1671:36128":{"crate_id":25,"path":["regex","exec","MatchType"],"kind":"enum"},"25:1492:4185":{"crate_id":25,"path":["regex","compile","SuffixCacheKey"],"kind":"struct"},"1:3500:2833":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:10608:5142":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:2518:2855":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:43826:7029":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:21447:10227":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"28:753:4545":{"crate_id":28,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:22631:6936":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:7610:9453":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:1534:3426":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:46538:7105":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:5634:6193":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"18:564:4133":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"30:139:4615":{"crate_id":30,"path":["anstyle_parse","state","definitions","State"],"kind":"enum"},"17:511:5020":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"25:1707:36131":{"crate_id":25,"path":["regex","exec","MatchNfaType"],"kind":"enum"},"2:32384:6955":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:15287:5878":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:3161:10056":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:8181:4348":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12600:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"27:1086:4567":{"crate_id":27,"path":["aho_corasick","classes","ByteClasses"],"kind":"struct"},"5:683:257":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:44637:9626":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:8798:7320":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:46516:7104":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"27:1052:4140":{"crate_id":27,"path":["aho_corasick","ahocorasick","AhoCorasickBuilder"],"kind":"struct"},"26:2115:4708":{"crate_id":26,"path":["regex_syntax","hir","print","Printer"],"kind":"struct"},"2:2528:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:10962:5158":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:40454:15434":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:44530:6928":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:42972:9549":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:44924:2897":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2829:6740":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:12044:693":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:2417:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:4050:3922":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"27:1310:4625":{"crate_id":27,"path":["aho_corasick","nfa","AllBytesIter"],"kind":"struct"},"6:507:8504":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:4380:2746":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:7613:6467":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"25:1417:4898":{"crate_id":25,"path":["regex","compile","Patch"],"kind":"struct"},"5:1505:4384":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:3764:6160":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:23228:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"25:1545:233":{"crate_id":25,"path":["regex","dfa","Result"],"kind":"enum"},"25:2449:4998":{"crate_id":25,"path":["regex","re_set","bytes","SetMatchesIter"],"kind":"struct"},"2:26163:273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:7734:10030":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4710:8867":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:1541:3941":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:5867:9103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:44818:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:4513:2757":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"26:2553:4074":{"crate_id":26,"path":["regex_syntax","parser","Parser"],"kind":"struct"},"2:42476:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:15689:6001":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:11126:5167":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:10246:3982":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:48243:7181":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:6261:4289":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:33293:15494":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:12290:5295":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:32921:6388":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"28:761:4528":{"crate_id":28,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"1:7601:4018":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:4957:2872":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:4740:10128":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"24:97:3319":{"crate_id":24,"path":["env_filter","op","FilterOp"],"kind":"struct"},"25:2096:4982":{"crate_id":25,"path":["regex","re_builder","bytes","RegexBuilder"],"kind":"struct"},"17:13218:4245":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:2486:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:15680:5999":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:10520:10098":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:44398:7055":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:32420:252":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"26:1766:3897":{"crate_id":26,"path":["regex_syntax","ast","Assertion"],"kind":"struct"},"29:432:4520":{"crate_id":29,"path":["anstream","adapter","wincon","WinconBytesIter"],"kind":"struct"},"16:7067:6372":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:4491:10142":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:12032:402":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"25:1998:4973":{"crate_id":25,"path":["regex","prog","InstSplit"],"kind":"struct"},"17:15566:5966":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"9:330:8486":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"22:164:129":{"crate_id":22,"path":["humantime","wrapper","Duration"],"kind":"struct"},"17:11690:5220":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:22997:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:11968:15571":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4808:8901":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:8246:3429":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:1424:3426":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:12259:6906":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:21221:33591":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12009:4204":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"30:109:4076":{"crate_id":30,"path":["anstyle_parse","params","Params"],"kind":"struct"},"6:4549:8820":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11113:5166":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"26:1376:3901":{"crate_id":26,"path":["regex_syntax","ast","Alternation"],"kind":"struct"},"6:6071:9214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:48295:7185":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:6059:9207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:928:10043":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"14:7:6616":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:33586:2904":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"25:2543:4986":{"crate_id":25,"path":["regex","re_unicode","SplitN"],"kind":"struct"},"1:1072:6633":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:11294:5184":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"25:1473:4183":{"crate_id":25,"path":["regex","compile","SuffixCacheEntry"],"kind":"struct"},"27:1127:4144":{"crate_id":27,"path":["aho_corasick","dfa","Standard"],"kind":"struct"},"6:1570:8603":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"29:244:28140":{"crate_id":29,"path":["anstream","fmt","Adapter"],"kind":"struct"},"16:536:4276":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10950:5156":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:7598:9451":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:11168:22392":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"18:0:2617":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:4030:2822":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11675:5217":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:4459:2755":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"27:1637:4159":{"crate_id":27,"path":["aho_corasick","prefilter","RareByteOffset"],"kind":"struct"},"1:1966:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:1538:3333":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:1972:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:2491:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"28:648:4529":{"crate_id":28,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11604:5208":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:4964:10173":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"25:1574:4837":{"crate_id":25,"path":["regex","dfa","Byte"],"kind":"struct"},"1:3980:10115":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:1203:5023":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:23629:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"26:1504:4761":{"crate_id":26,"path":["regex_syntax","ast","ClassPerl"],"kind":"struct"},"2:7788:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:1734:8700":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:43878:7034":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:7318:6412":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:9918:22362":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:1527:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:6610:2947":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:11743:5227":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"0:402:2200":{"crate_id":0,"path":["env_logger","fmt","TimestampPrecision","Millis"],"kind":"variant"},"17:13896:5520":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:46039:7082":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6086:9216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:42982:2803":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:46440:7102":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:563:8541":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:15747:6011":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:266:3922":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:22564:4392":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"27:1413:4627":{"crate_id":27,"path":["aho_corasick","packed","rabinkarp","RabinKarp"],"kind":"struct"},"17:14181:5578":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"11:2554:35704":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:4635:9333":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"25:1896:4918":{"crate_id":25,"path":["regex","pikevm","Fsm"],"kind":"struct"},"1:8192:2844":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:2832:6145":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:2948:254":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:43028:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"28:798:4553":{"crate_id":28,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:9852:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:11148:27872":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:12224:6923":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"26:2649:4691":{"crate_id":26,"path":["regex_syntax","utf8","Utf8Range"],"kind":"struct"},"16:7436:4286":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11507:4228":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:42130:2892":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:5897:9120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:2359:6125":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:46964:7130":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:644:4528":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:15710:6004":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:5240:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:8222:2843":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:9891:22342":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:7792:22302":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:2670:6138":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"25:1991:4971":{"crate_id":25,"path":["regex","prog","InstSave"],"kind":"struct"},"17:11991:5267":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:7657:9463":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:11486:6914":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:22722:9617":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:14989:5803":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:47950:7172":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:2657:10098":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:12872:5333":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:10785:35727":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:1115:35663":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:14969:4255":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:44497:7061":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:7645:10098":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"26:2323:4838":{"crate_id":26,"path":["regex_syntax","hir","ClassUnicodeIter"],"kind":"struct"},"5:6351:10320":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:13284:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:16146:6112":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:2600:3986":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:45915:7077":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:43920:6909":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:12230:5285":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:15003:5806":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4461:8779":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:6764:9341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:4053:6165":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:10813:35730":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"13:110:35706":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:1758:3441":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:654:16243":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:7028:4014":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:40728:6986":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:2305:21430":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"16:6017:22293":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:4560:2759":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:39494:3430":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:10067:4220":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"27:1552:4652":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","Mask128"],"kind":"struct"},"6:1604:8624":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"7:0:1688":{"crate_id":7,"path":["unwind"],"kind":"module"},"26:1442:26537":{"crate_id":26,"path":["regex_syntax","ast","SpecialLiteralKind"],"kind":"enum"},"6:542:8530":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:22616:32355":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:3732:7207":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:6041:22294":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:10035:4199":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"18:719:4560":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:5763:6870":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:15990:6074":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:13273:5391":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:4149:15358":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:1760:3442":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:6666:9294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:2703:9480":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10520:35726":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:4870:8931":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:44304:7045":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:10242:4225":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"29:370:4125":{"crate_id":29,"path":["anstream","adapter","strip","StripBytes"],"kind":"struct"},"1:12033:1035":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:4698:8866":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"23:297:4193":{"crate_id":23,"path":["anstyle","color","DisplayBuffer"],"kind":"struct"},"1:12016:26947":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"25:1512:4451":{"crate_id":25,"path":["regex","dfa","Cache"],"kind":"struct"},"2:30688:32356":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:7679:9468":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:7597:35715":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"27:1304:4624":{"crate_id":27,"path":["aho_corasick","nfa","QueuedSet"],"kind":"struct"},"5:7619:3955":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:23467:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:21204:33585":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:11932:5262":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:12056:850":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:4480:8792":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:10988:5159":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"26:2186:135":{"crate_id":26,"path":["regex_syntax","hir","Error"],"kind":"struct"},"25:2358:4997":{"crate_id":25,"path":["regex","re_set","unicode","SetMatchesIntoIter"],"kind":"struct"},"2:47762:7170":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"26:2330:4175":{"crate_id":26,"path":["regex_syntax","hir","ClassUnicodeRange"],"kind":"struct"},"27:1604:4660":{"crate_id":27,"path":["aho_corasick","prefilter","Packed"],"kind":"struct"},"2:22328:10309":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:44176:7042":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:11136:7321":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:7880:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:44510:7065":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:11817:22461":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:7524:2888":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:12953:5340":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:7568:4338":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:5363:6190":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"27:1042:36868":{"crate_id":27,"path":["aho_corasick","ahocorasick","StreamChunk"],"kind":"enum"},"1:10818:27871":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12445:5312":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:1501:8564":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"11:2542:8479":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"26:1871:3900":{"crate_id":26,"path":["regex_syntax","ast","Group"],"kind":"struct"},"16:3232:6122":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:9894:2812":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"27:1495:4641":{"crate_id":27,"path":["aho_corasick","packed","teddy","runtime","TeddySlim1Mask256"],"kind":"struct"},"18:671:4552":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:1639:8652":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:16134:6109":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:7751:15486":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:0:880":{"crate_id":6,"path":["libc"],"kind":"module"},"17:15943:5380":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:14359:5612":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:46584:7107":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:5395:7220":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:43496:6904":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:40518:6978":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:7646:3077":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:47076:7132":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"29:346:4123":{"crate_id":29,"path":["anstream","adapter","strip","StrippedBytes"],"kind":"struct"},"16:4862:6180":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:43771:6981":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:40700:4400":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:15311:5883":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13584:5449":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:44476:15388":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:40690:6984":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:21453:10230":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:22313:10098":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"26:1549:26534":{"crate_id":26,"path":["regex_syntax","ast","ClassAsciiKind"],"kind":"enum"},"2:40760:6989":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:7004:3967":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:1151:35661":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:44641:9627":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:12244:5289":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:40356:6966":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:40793:6990":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:48223:7179":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:43902:2847":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:10807:6907":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:10852:22373":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:7391:22300":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"16:2526:6132":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:46294:7092":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:1682:8678":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:21466:4160":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:15117:5832":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"26:2200:2860":{"crate_id":26,"path":["regex_syntax","hir","ErrorKind"],"kind":"enum"},"2:4102:6863":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11269:4216":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:48196:7177":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:4533:2758":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:10329:3986":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:3080:15359":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"28:741:35732":{"crate_id":28,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:90:3321":{"crate_id":24,"path":["env_filter","filtered_log","FilteredLog"],"kind":"struct"},"19:0:1132":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:48269:7183":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"11:1051:6629":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"25:2040:4979":{"crate_id":25,"path":["regex","prog","InstChar"],"kind":"struct"},"2:48371:7189":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:2703:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"27:1622:4580":{"crate_id":27,"path":["aho_corasick","prefilter","ByteSet"],"kind":"struct"},"28:638:26499":{"crate_id":28,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"18:96:26488":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:8209:2846":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:6700:9313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:13339:2898":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:6798:9347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"25:2220:2847":{"crate_id":25,"path":["regex","re_bytes","Split"],"kind":"struct"},"6:6934:9425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:8993:26948":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:2953:2762":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"11:687:3427":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:41006:6884":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:8239:10107":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"9:177:4373":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:10758:7346":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:43077:2805":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:43245:4421":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"11:1107:6631":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"9:237:4615":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:9834:2437":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:12208:6922":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:3132:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:3394:2822":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:34246:15500":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:44106:4984":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"11:2304:6375":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"10:0:2610":{"crate_id":10,"path":["adler"],"kind":"module"},"27:1659:4671":{"crate_id":27,"path":["aho_corasick","prefilter","RareBytesThree"],"kind":"struct"},"6:4764:8882":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13309:5398":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:7423:6726":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:10016:22340":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:11983:7358":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"23:422:4196":{"crate_id":23,"path":["anstyle","style","StyleDisplay"],"kind":"struct"},"26:1416:26529":{"crate_id":26,"path":["regex_syntax","ast","LiteralKind"],"kind":"enum"},"27:1060:26571":{"crate_id":27,"path":["aho_corasick","ahocorasick","MatchKind"],"kind":"enum"},"2:21445:10098":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:7041:6367":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:15356:5894":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:5111:9057":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:6915:4333":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:3011:6389":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:22743:6950":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:22214:10318":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:42087:3002":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:4884:8936":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:14324:5600":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"26:2404:4794":{"crate_id":26,"path":["regex_syntax","hir","WordBoundary"],"kind":"enum"},"17:9943:22345":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:21893:33592":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:1887:3333":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:47414:7137":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:9016:4681":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:15184:5848":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:660:4546":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:13235:4247":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:5963:6221":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:22920:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:12596:5320":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:47264:7136":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:13448:5427":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"27:1023:4589":{"crate_id":27,"path":["aho_corasick","ahocorasick","StreamChunkIter"],"kind":"struct"},"2:1784:3650":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:12548:5316":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:8986:3060":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:5104:9054":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"27:1359:4556":{"crate_id":27,"path":["aho_corasick","packed","api","Searcher"],"kind":"struct"},"16:8281:6538":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:5941:9140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11399:5189":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:1632:8648":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"26:2385:4836":{"crate_id":26,"path":["regex_syntax","hir","Anchor"],"kind":"enum"},"17:12180:5282":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:39613:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"27:1568:36866":{"crate_id":27,"path":["aho_corasick","prefilter","Candidate"],"kind":"enum"},"2:46007:7081":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"11:2326:6628":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:1814:1189":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"25:1405:36130":{"crate_id":25,"path":["regex","backtrack","Job"],"kind":"enum"},"17:15160:5840":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:32395:6956":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:3129:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:12191:5283":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:6943:9428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"26:2469:26527":{"crate_id":26,"path":["regex_syntax","hir","RepetitionKind"],"kind":"enum"},"2:23305:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"26:1671:26525":{"crate_id":26,"path":["regex_syntax","ast","ClassSetItem"],"kind":"enum"},"1:6540:2941":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"25:1422:3930":{"crate_id":25,"path":["regex","compile","Hole"],"kind":"enum"},"17:10775:5144":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:12140:5279":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:4700:10168":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:4504:2756":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:918:4385":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:11478:7207":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:46737:7111":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"28:81:26487":{"crate_id":28,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:2380:10095":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:2864:6146":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"26:2294:3898":{"crate_id":26,"path":["regex_syntax","hir","Class"],"kind":"enum"},"2:9032:4575":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:14950:5802":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"27:985:4546":{"crate_id":27,"path":["aho_corasick","ahocorasick","FindIter"],"kind":"struct"},"18:636:4545":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:6985:9694":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:4949:6183":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:3460:5030":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:6682:9306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:4440:8769":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:47620:7169":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:6837:9363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:30596:3653":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:9252:3456":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:44831:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:2996:2737":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:14497:5629":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:8239:6432":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:15589:5979":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:21851:10098":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:3254:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:4543:8818":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:15192:5849":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:1040:6375":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:7371:9440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:15507:5952":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:4939:1102":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"26:1167:4707":{"crate_id":26,"path":["regex_syntax","ast","parse","NestLimiter"],"kind":"struct"},"17:15200:5850":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:867:4382":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"25:2459:4999":{"crate_id":25,"path":["regex","re_trait","Locations"],"kind":"struct"},"1:11212:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"29:181:10098":{"crate_id":29,"path":["anstream","stream","private","Sealed"],"kind":"trait"},"16:7474:6453":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:903:3955":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:9624:22339":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:44070:7039":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:3736:3333":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:5381:7219":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"11:2548:8480":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"25:2012:4907":{"crate_id":25,"path":["regex","prog","EmptyLook"],"kind":"enum"},"1:10225:8287":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:41240:6889":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:13383:5411":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"26:1706:4783":{"crate_id":26,"path":["regex_syntax","ast","ClassSetRange"],"kind":"struct"},"17:11563:5205":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"25:1790:4952":{"crate_id":25,"path":["regex","input","CharInput"],"kind":"struct"},"1:8961:2936":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:10667:35728":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"26:2665:4854":{"crate_id":26,"path":["regex_syntax","utf8","Utf8Sequences"],"kind":"struct"},"2:42281:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:2048:2859":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:5921:9129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4776:8889":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:6513:6284":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:10569:35729":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"25:2559:4991":{"crate_id":25,"path":["regex","re_unicode","SubCaptureMatches"],"kind":"struct"},"1:3425:2830":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:41206:2937":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:13463:5433":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"25:2197:4879":{"crate_id":25,"path":["regex","re_bytes","Regex"],"kind":"struct"},"17:12115:5277":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:32402:2755":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:1718:8695":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:39533:15360":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:15267:5872":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:8804:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:44201:6974":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:25:659":{"crate_id":2,"path":["core","env"],"kind":"macro"},"1:8553:7318":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:44219:6973":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:13436:5424":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:12459:4216":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"11:710:4384":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:32500:2952":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:12448:4575":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:21219:33589":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:7845:7245":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:6107:9228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:2907:6148":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"26:2510:4842":{"crate_id":26,"path":["regex_syntax","hir","HirInfo"],"kind":"struct"},"5:3251:4678":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"25:2609:4885":{"crate_id":25,"path":["regex","sparse","SparseSet"],"kind":"struct"},"17:15133:5836":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"14:215:6619":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:7102:22299":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:6804:9349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:12048:798":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:12310:4233":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"25:1814:4862":{"crate_id":25,"path":["regex","input","Char"],"kind":"struct"},"2:9886:2806":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"25:1289:26515":{"crate_id":25,"path":["regex","re_unicode","Replacer"],"kind":"trait"},"2:46170:7087":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:39762:6964":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"5:5650:3953":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:10809:27869":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:7897:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:6711:9318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4666:8863":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"5:3738:2859":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:8830:7321":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:12468:15374":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6913:9413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4922:8955":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"28:114:26489":{"crate_id":28,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:6792:6342":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:46109:7085":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:4344:6166":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:6401:4327":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:10925:22375":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"}},"external_crates":{"31":{"name":"utf8parse","html_root_url":null},"28":{"name":"memchr","html_root_url":null},"25":{"name":"regex","html_root_url":null},"22":{"name":"humantime","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"32":{"name":"colorchoice","html_root_url":null},"29":{"name":"anstream","html_root_url":null},"26":{"name":"regex_syntax","html_root_url":null},"23":{"name":"anstyle","html_root_url":null},"20":{"name":"log","html_root_url":"https://docs.rs/log/0.4.17/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"33":{"name":"anstyle_query","html_root_url":null},"30":{"name":"anstyle_parse","html_root_url":null},"27":{"name":"aho_corasick","html_root_url":null},"24":{"name":"env_filter","html_root_url":null},"21":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}