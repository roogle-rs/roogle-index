{"root":"0:0:1675","crate_version":"0.12.3","includes_private":false,"index":{"1:13249:127":{"id":"1:13249:127","crate_id":1,"name":"Err","span":null,"visibility":"default","docs":"The associated error which can be returned from parsing.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:711":{"id":"0:711","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2078,0],"end":[2093,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2946:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2946:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:716:616"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3507:4635":{"id":"1:3507:4635","crate_id":1,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3509:186","1:3510:908"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2190:1649":{"id":"0:2190:1649","crate_id":0,"name":"hash_map","span":{"filename":"src/lib.rs","begin":[85,0],"end":[85,16]},"visibility":"public","docs":"A hash map implemented with quadratic probing and SIMD lookup.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:2191"],"is_stripped":false}},"1:8615:10009":{"id":"1:8615:10009","crate_id":1,"name":"product","span":null,"visibility":"default","docs":"Method which takes an iterator and generates `Self` from the elements by\nmultiplying the items.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8901:9991":{"id":"1:8901:9991","crate_id":1,"name":"inspect","span":null,"visibility":"default","docs":"Does something with each element of an iterator, passing the value on.\n\nWhen using iterators, you'll often chain several of them together.\nWhile working on such code, you might want to check out what's\nhappening at various parts in the pipeline. To do that, insert\na call to `inspect()`.\n\nIt's more common for `inspect()` to be used as a debugging tool than to\nexist in your final code, but applications may find it useful in certain\nsituations when errors need to be logged before being discarded.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 4, 2, 3];\n\n// this iterator sequence is complex.\nlet sum = a.iter()\n    .cloned()\n    .filter(|x| x % 2 == 0)\n    .fold(0, |sum, i| sum + i);\n\nprintln!(\"{sum}\");\n\n// let's add some inspect() calls to investigate what's happening\nlet sum = a.iter()\n    .cloned()\n    .inspect(|x| println!(\"about to filter: {x}\"))\n    .filter(|x| x % 2 == 0)\n    .inspect(|x| println!(\"made it through filter: {x}\"))\n    .fold(0, |sum, i| sum + i);\n\nprintln!(\"{sum}\");\n```\n\nThis will print:\n\n```text\n6\nabout to filter: 1\nabout to filter: 4\nmade it through filter: 4\nabout to filter: 2\nmade it through filter: 2\nabout to filter: 3\n6\n```\n\nLogging errors before discarding them:\n\n```\nlet lines = [\"1\", \"2\", \"a\"];\n\nlet sum: i32 = lines\n    .iter()\n    .map(|line| line.parse::<i32>())\n    .inspect(|num| {\n        if let Err(ref e) = *num {\n            println!(\"Parsing error: {e}\");\n        }\n    })\n    .filter_map(Result::ok)\n    .sum();\n\nprintln!(\"Sum: {sum}\");\n```\n\nThis will print:\n\n```text\nParsing error: invalid digit found in string\nSum: 3\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Inspect","id":"1:50264:4497","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:606:1972":{"id":"0:606:1972","crate_id":0,"name":"hasher","span":{"filename":"src/map.rs","begin":[506,4],"end":[508,5]},"visibility":"public","docs":"Returns a reference to the map's [`BuildHasher`].\n\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet hasher = DefaultHashBuilder::default();\nlet map: HashMap<i32, i32> = HashMap::with_hasher(hasher);\nlet hasher: &DefaultHashBuilder = map.hasher();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"S"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10534:672":{"id":"1:10534:672","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10484:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:52212:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23739:40532":{"id":"1:23739:40532","crate_id":1,"name":"simd_clamp","span":null,"visibility":"default","docs":"Restrict each lane to a certain interval.\n\nFor each lane, returns `max` if `self` is greater than `max`, and `min` if `self` is\nless than `min`. Otherwise returns `self`.\n\n# Panics\n\nPanics if `min > max` on any lane.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["min",{"kind":"generic","inner":"Self"}],["max",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8613:4478":{"id":"1:8613:4478","crate_id":1,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8615:10009"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:2275":{"id":"0:2275","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,9],"end":[121,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2276:420"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:632:2656":{"id":"0:632:2656","crate_id":0,"name":"entry","span":{"filename":"src/map.rs","begin":[1139,4],"end":[1155,5]},"visibility":"public","docs":"Gets the given key's corresponding entry in the map for in-place manipulation.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut letters = HashMap::new();\n\nfor ch in \"a short treatise on fungi\".chars() {\n    let counter = letters.entry(ch).or_insert(0);\n    *counter += 1;\n}\n\nassert_eq!(letters[&'s'], 2);\nassert_eq!(letters[&'t'], 3);\nassert_eq!(letters[&'u'], 1);\nassert_eq!(letters.get(&'y'), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"generic","inner":"K"}]],"output":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1105:2657","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9035:10006":{"id":"1:9035:10006","crate_id":1,"name":"cycle","span":null,"visibility":"default","docs":"Repeats an iterator endlessly.\n\nInstead of stopping at [`None`], the iterator will instead start again,\nfrom the beginning. After iterating again, it will start at the\nbeginning again. And again. And again. Forever. Note that in case the\noriginal iterator is empty, the resulting iterator will also be empty.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut it = a.iter().cycle();\n\nassert_eq!(it.next(), Some(&1));\nassert_eq!(it.next(), Some(&2));\nassert_eq!(it.next(), Some(&3));\nassert_eq!(it.next(), Some(&1));\nassert_eq!(it.next(), Some(&2));\nassert_eq!(it.next(), Some(&3));\nassert_eq!(it.next(), Some(&1));\n```","links":{"`None`":"1:51151:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Cycle","id":"1:50203:4491","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10777:10537":{"id":"1:10777:10537","crate_id":1,"name":"write_u32","span":null,"visibility":"default","docs":"Writes a single `u32` into this hasher.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23114:40922":{"id":"1:23114:40922","crate_id":1,"name":"reduce_and","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"and\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"1:23106:10958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13333:40780":{"id":"1:13333:40780","crate_id":1,"name":"next_reject","span":null,"visibility":"default","docs":"Finds the next [`Reject`][SearchStep::Reject] result. See [`next()`][Searcher::next]\nand [`next_match()`][Searcher::next_match].\n\nUnlike [`next()`][Searcher::next], there is no guarantee that the returned ranges\nof this and [`next_match`][Searcher::next_match] will overlap.","links":{"Searcher::next":"1:13331:949","SearchStep::Reject":"1:53523:12731","Searcher::next_match":"1:13332:40779"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10541:194":{"id":"1:10541:194","crate_id":1,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10542:672"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4202:1470":{"id":"1:4202:1470","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":"Gets the `TypeId` of `self`.\n\n# Examples\n\n```\nuse std::any::{Any, TypeId};\n\nfn is_string(s: &dyn Any) -> bool {\n    TypeId::of::<String>() == s.type_id()\n}\n\nassert_eq!(is_string(&0), false);\nassert_eq!(is_string(&\"cookie monster\".to_string()), true);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:49587:10813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:2891-0:845:2474":{"id":"b:1:2891-0:845:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2885:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2893:3730"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:23111:40919":{"id":"1:23111:40919","crate_id":1,"name":"reduce_product","span":null,"visibility":"default","docs":"Returns the product of the lanes of the vector, with wrapping multiplication.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"1:23106:10958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:14053:152":{"id":"1:14053:152","crate_id":1,"name":"IntoFuture","span":null,"visibility":"default","docs":"Which kind of future are we turning this into?","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:14036:139","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoFuture","id":"1:14051:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"1:10763:728":{"id":"1:10763:728","crate_id":1,"name":"hash","span":null,"visibility":"default","docs":"Feeds this value into the given [`Hasher`].\n\n# Examples\n\n```\nuse std::collections::hash_map::DefaultHasher;\nuse std::hash::{Hash, Hasher};\n\nlet mut hasher = DefaultHasher::new();\n7920.hash(&mut hasher);\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```","links":{"`Hasher`":"1:10772:147"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"H"},"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10772:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1782:2018":{"id":"0:1782:2018","crate_id":0,"name":"get","span":{"filename":"src/set.rs","begin":[801,4],"end":[811,5]},"visibility":"public","docs":"Returns a reference to the value in the set, if any, that is equal to the given value.\n\nThe value may be any borrowed form of the set's value type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe value type.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert_eq!(set.get(&2), Some(&2));\nassert_eq!(set.get(&4), None);\n```\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3518:4637":{"id":"1:3518:4637","crate_id":1,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3520:186","1:3521:1131"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13725:1957":{"id":"1:13725:1957","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:51151:179","prim@char":"1:61603:4394","self::pattern":"1:13309:10820"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23074:1262":{"id":"1:23074:1262","crate_id":1,"name":"saturating_sub","span":null,"visibility":"default","docs":"Lanewise saturating subtract.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdInt};\nuse core::i32::{MIN, MAX};\nlet x = Simd::from_array([MIN, -2, -1, MAX]);\nlet max = Simd::splat(MAX);\nlet unsat = x - max;\nlet sat = x.saturating_sub(max);\nassert_eq!(unsat, Simd::from_array([1, MAX, MIN, 0]));\nassert_eq!(sat, Simd::from_array([MIN, MIN, MIN, 0]));","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["second",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8650:153":{"id":"1:8650:153","crate_id":1,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8651:2170","1:8652:2171","1:8653:783"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8882:9983":{"id":"1:8882:9983","crate_id":1,"name":"peekable","span":null,"visibility":"default","docs":"Creates an iterator which can use the [`peek`] and [`peek_mut`] methods\nto look at the next element of the iterator without consuming it. See\ntheir documentation for more information.\n\nNote that the underlying iterator is still advanced when [`peek`] or\n[`peek_mut`] are called for the first time: In order to retrieve the\nnext element, [`next`] is called on the underlying iterator, hence any\nside effects (i.e. anything other than fetching the next value) of\nthe [`next`] method will occur.\n\n\n# Examples\n\nBasic usage:\n\n```\nlet xs = [1, 2, 3];\n\nlet mut iter = xs.iter().peekable();\n\n// peek() lets us see into the future\nassert_eq!(iter.peek(), Some(&&1));\nassert_eq!(iter.next(), Some(&1));\n\nassert_eq!(iter.next(), Some(&2));\n\n// we can peek() multiple times, the iterator won't advance\nassert_eq!(iter.peek(), Some(&&3));\nassert_eq!(iter.peek(), Some(&&3));\n\nassert_eq!(iter.next(), Some(&3));\n\n// after the iterator is finished, so is peek()\nassert_eq!(iter.peek(), None);\nassert_eq!(iter.next(), None);\n```\n\nUsing [`peek_mut`] to mutate the next item without advancing the\niterator:\n\n```\nlet xs = [1, 2, 3];\n\nlet mut iter = xs.iter().peekable();\n\n// `peek_mut()` lets us see into the future\nassert_eq!(iter.peek_mut(), Some(&mut &1));\nassert_eq!(iter.peek_mut(), Some(&mut &1));\nassert_eq!(iter.next(), Some(&1));\n\nif let Some(mut p) = iter.peek_mut() {\n    assert_eq!(*p, &2);\n    // put a value into the iterator\n    *p = &1000;\n}\n\n// The value reappears as the iterator continues\nassert_eq!(iter.collect::<Vec<_>>(), vec![&1000, &3]);\n```\n[`peek`]: Peekable::peek\n[`peek_mut`]: Peekable::peek_mut\n[`next`]: Iterator::next","links":{"Peekable::peek_mut":"1:7473:50493","Peekable::peek":"1:7471:50492","Iterator::next":"1:8848:949"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Peekable","id":"1:50311:4499","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10762:143":{"id":"1:10762:143","crate_id":1,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10763:728","1:10765:10534"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:24041:10893":{"id":"1:24041:10893","crate_id":1,"name":"Mask","span":null,"visibility":"default","docs":"The mask element type corresponding to this element type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"MaskElement","id":"1:23403:10894","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"1:10810:2411":{"id":"1:10810:2411","crate_id":1,"name":"hash_one","span":null,"visibility":"default","docs":"Calculates the hash of a single value.\n\nThis is intended as a convenience for code which *consumes* hashes, such\nas the implementation of a hash table or in unit tests that check\nwhether a custom [`Hash`] implementation behaves as expected.\n\nThis must not be used in any code which *creates* hashes, such as in an\nimplementation of [`Hash`].  The way to create a combined hash of\nmultiple values is to call [`Hash::hash`] multiple times using the same\n[`Hasher`], not to call this method repeatedly and combine the results.\n\n# Example\n\n```\n#![feature(build_hasher_simple_hash_one)]\n\nuse std::cmp::{max, min};\nuse std::hash::{BuildHasher, Hash, Hasher};\nstruct OrderAmbivalentPair<T: Ord>(T, T);\nimpl<T: Ord + Hash> Hash for OrderAmbivalentPair<T> {\n    fn hash<H: Hasher>(&self, hasher: &mut H) {\n        min(&self.0, &self.1).hash(hasher);\n        max(&self.0, &self.1).hash(hasher);\n    }\n}\n\n// Then later, in a `#[test]` for the type...\nlet bh = std::collections::hash_map::RandomState::new();\nassert_eq!(\n    bh.hash_one(OrderAmbivalentPair(1, 2)),\n    bh.hash_one(OrderAmbivalentPair(2, 1))\n);\nassert_eq!(\n    bh.hash_one(OrderAmbivalentPair(10, 2)),\n    bh.hash_one(&OrderAmbivalentPair(2, 10))\n);\n```","links":{"`Hash`":"1:10762:143","`Hasher`":"1:10772:147","`Hash::hash`":"1:10763:728"},"attrs":["#[unstable(feature = \"build_hasher_simple_hash_one\", issue = \"86161\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["x",{"kind":"generic","inner":"T"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1544:696":{"id":"0:1544:696","crate_id":0,"name":"from_iter","span":{"filename":"src/map.rs","begin":[6340,4],"end":[6348,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1862:364":{"id":"0:1862:364","crate_id":0,"name":"bitor","span":{"filename":"src/set.rs","begin":[1314,4],"end":[1316,5]},"visibility":"default","docs":"Returns the union of `self` and `rhs` as a new `HashSet<T, S>`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a | &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 3, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13779:42434":{"id":"1:13779:42434","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1285:2170":{"id":"0:1285:2170","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4571,4],"end":[4571,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}},"1:3532:4641":{"id":"1:3532:4641","crate_id":1,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3534:1395"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:1:3414:228-0:2244:1804":{"id":"a:1:3414:228-0:2244:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3681:387":{"id":"1:3681:387","crate_id":1,"name":"call","span":null,"visibility":"default","docs":"Performs the call operation.","links":{},"attrs":["#[unstable(feature = \"fn_traits\", issue = \"29625\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["args",{"kind":"generic","inner":"Args"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"FnOnce","id":"1:3685:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":false}},"1:23080:41053":{"id":"1:23080:41053","crate_id":1,"name":"signum","span":null,"visibility":"default","docs":"Returns numbers representing the sign of each lane.\n* `0` if the number is zero\n* `1` if the number is positive\n* `-1` if the number is negative","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:9023:3756":{"id":"1:9023:3756","crate_id":1,"name":"rev","span":null,"visibility":"default","docs":"Reverses an iterator's direction.\n\nUsually, iterators iterate from left to right. After using `rev()`,\nan iterator will instead iterate from right to left.\n\nThis is only possible if the iterator has an end, so `rev()` only\nworks on [`DoubleEndedIterator`]s.\n\n# Examples\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().rev();\n\nassert_eq!(iter.next(), Some(&3));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), Some(&1));\n\nassert_eq!(iter.next(), None);\n```","links":{"`DoubleEndedIterator`":"1:8691:121"},"attrs":["#[doc(alias = \"reverse\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Rev","id":"1:50321:4500","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:8691:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10786:10546":{"id":"1:10786:10546","crate_id":1,"name":"write_isize","span":null,"visibility":"default","docs":"Writes a single `isize` into this hasher.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"isize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9495:4749-0:2244:1804":{"id":"a:1:9495:4749-0:2244:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9495:4749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:23042:40921":{"id":"1:23042:40921","crate_id":1,"name":"reduce_min","span":null,"visibility":"default","docs":"Returns the minimum lane in the vector.\n\nReturns values based on equality, so a vector containing both `0.` and `-0.` may\nreturn either.\n\nThis function will not return `NaN` unless all lanes are `NaN`.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{f32x2, SimdFloat};\nlet v = f32x2::from_array([3., 7.]);\nassert_eq!(v.reduce_min(), 3.);\n\n// NaN values are skipped...\nlet v = f32x2::from_array([1., f32::NAN]);\nassert_eq!(v.reduce_min(), 1.);\n\n// ...unless all values are NaN\nlet v = f32x2::from_array([f32::NAN, f32::NAN]);\nassert!(v.reduce_min().is_nan());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23017:10956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13778:42433":{"id":"1:13778:42433","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3253:128":{"id":"1:3253:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:42371:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:3209:150":{"id":"1:3209:150","crate_id":1,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3211:3401"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1756":{"id":"0:1756","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[453,0],"end":[536,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1760:291","0:1761:2426","0:1762:2428","0:1763:1972"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8992:1843":{"id":"1:8992:1843","crate_id":1,"name":"min","span":null,"visibility":"default","docs":"Returns the minimum element of an iterator.\n\nIf several elements are equally minimum, the first element is returned.\nIf the iterator is empty, [`None`] is returned.\n\nNote that [`f32`]/[`f64`] doesn't implement [`Ord`] due to NaN being\nincomparable. You can work around this by using [`Iterator::reduce`]:\n```\nassert_eq!(\n    [2.4, f32::NAN, 1.3]\n        .into_iter()\n        .reduce(f32::min)\n        .unwrap(),\n    1.3\n);\n```\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nlet b: Vec<u32> = Vec::new();\n\nassert_eq!(a.iter().min(), Some(&1));\nassert_eq!(b.iter().min(), None);\n```","links":{"`f32`":"1:61613:4401","`Ord`":"1:2982:182","`f64`":"1:61614:4402","`Iterator::reduce`":"1:8946:10000","`None`":"1:51151:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2982:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8891:3739":{"id":"1:8891:3739","crate_id":1,"name":"take","span":null,"visibility":"default","docs":"Creates an iterator that yields the first `n` elements, or fewer\nif the underlying iterator ends sooner.\n\n`take(n)` yields elements until `n` elements are yielded or the end of\nthe iterator is reached (whichever happens first).\nThe returned iterator is a prefix of length `n` if the original iterator\ncontains at least `n` elements, otherwise it contains all of the\n(fewer than `n`) elements of the original iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().take(2);\n\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\n`take()` is often used with an infinite iterator, to make it finite:\n\n```\nlet mut iter = (0..).take(3);\n\nassert_eq!(iter.next(), Some(0));\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), None);\n```\n\nIf less than `n` elements are available,\n`take` will limit itself to the size of the underlying iterator:\n\n```\nlet v = [1, 2];\nlet mut iter = v.into_iter().take(5);\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Take","id":"1:50391:4504","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:538:2285":{"id":"0:538:2285","crate_id":0,"name":"DefaultHashBuilder","span":{"filename":"src/map.rs","begin":[13,0],"end":[13,49]},"visibility":"public","docs":"Default hasher for `HashMap`.","links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"ahash::RandomState","id":"5:879:2286","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:1939:783":{"id":"0:1939:783","crate_id":0,"name":"into_iter","span":{"filename":"src/set.rs","begin":[1549,4],"end":[1553,5]},"visibility":"default","docs":"Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet mut set = HashSet::new();\nset.insert(\"a\".to_string());\nset.insert(\"b\".to_string());\n\n// Not possible to collect to a Vec<String> with a regular `.iter()`.\nlet v: Vec<String> = set.into_iter().collect();\n\n// Will print in an arbitrary order.\nfor x in &v {\n    println!(\"{}\", x);\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1883:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:871:2538":{"id":"0:871:2538","crate_id":0,"name":"Drain","span":{"filename":"src/map.rs","begin":[2586,0],"end":[2588,1]},"visibility":"public","docs":"A draining iterator over the entries of a `HashMap` in arbitrary\norder. The iterator element type is `(K, V)`.\n\nThis `struct` is created by the [`drain`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`drain`]: struct.HashMap.html#method.drain\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut drain_iter = map.drain();\nlet mut vec = vec![drain_iter.next(), drain_iter.next(), drain_iter.next()];\n\n// The `Drain` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some((1, \"a\")), Some((2, \"b\")), Some((3, \"c\"))]);\n\n// It is fused iterator\nassert_eq!(drain_iter.next(), None);\nassert_eq!(drain_iter.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:2280":{"id":"0:2280","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,27],"end":[121,29]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:3411:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1836:693":{"id":"0:1836:693","crate_id":0,"name":"from","span":{"filename":"src/set.rs","begin":[1219,4],"end":[1221,5]},"visibility":"default","docs":"# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet set1 = HashSet::from([1, 2, 3, 4]);\nlet set2: HashSet<_> = [1, 2, 3, 4].into();\nassert_eq!(set1, set2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["arr",{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1938:2171":{"id":"0:1938:2171","crate_id":0,"name":"IntoIter","span":{"filename":"src/set.rs","begin":[1526,4],"end":[1526,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1883:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"1:13685:1968":{"id":"1:13685:1968","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:613:808":{"id":"0:613:808","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[734,4],"end":[736,5]},"visibility":"public","docs":"Returns the number of elements in the map.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut a = HashMap::new();\nassert_eq!(a.len(), 0);\na.insert(1, \"a\");\nassert_eq!(a.len(), 1);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:622:2600":{"id":"0:622:2600","crate_id":0,"name":"into_values","span":{"filename":"src/map.rs","begin":[976,4],"end":[980,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the values in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `V`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\n\nlet mut vec: Vec<i32> = map.into_values().collect();\n\n// The `IntoValues` iterator produces values in arbitrary order, so\n// the values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [1, 2, 3]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:817:2601","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:4:862-0:539:144":{"id":"b:4:862-0:539:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:858:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["4:864:3398","4:865:3822","4:866:10635"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1736":{"id":"0:1736","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[211,0],"end":[383,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1740:1917","0:1741:794","0:1742:808","0:1743:1968","0:1744:2066","0:1745:2551","0:1748:2579","0:1750:1965"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3940:4656":{"id":"1:3940:4656","crate_id":1,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3942:39769"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13334:10819":{"id":"1:13334:10819","crate_id":1,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13336:9970","1:13337:42101","1:13338:42102"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"1:13328:10823","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:23086:40923":{"id":"1:23086:40923","crate_id":1,"name":"reduce_or","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"or\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23070:10945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2273:1660":{"id":"0:2273:1660","crate_id":0,"name":"AllocError","span":{"filename":"src/lib.rs","begin":[128,4],"end":[131,5]},"visibility":"default","docs":"The memory allocator returned an error","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"struct","variant_inner":{"fields":["0:2274:1662"],"fields_stripped":false}}},"1:8853:507":{"id":"1:8853:507","crate_id":1,"name":"count","span":null,"visibility":"default","docs":"Consumes the iterator, counting the number of iterations and returning it.\n\nThis method will call [`next`] repeatedly until [`None`] is encountered,\nreturning the number of times it saw [`Some`]. Note that [`next`] has to be\ncalled at least once even if the iterator does not have any elements.\n\n[`next`]: Iterator::next\n\n# Overflow Behavior\n\nThe method does no guarding against overflows, so counting elements of\nan iterator with more than [`usize::MAX`] elements either produces the\nwrong result or panics. If debug assertions are enabled, a panic is\nguaranteed.\n\n# Panics\n\nThis function might panic if the iterator has more than [`usize::MAX`]\nelements.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().count(), 3);\n\nlet a = [1, 2, 3, 4, 5];\nassert_eq!(a.iter().count(), 5);\n```","links":{"Iterator::next":"1:8848:949","`usize::MAX`":"1:32343:2086","`None`":"1:51151:179","`Some`":"1:51153:223"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8932:9997":{"id":"1:8932:9997","crate_id":1,"name":"try_fold","span":null,"visibility":"default","docs":"An iterator method that applies a function as long as it returns\nsuccessfully, producing a single, final value.\n\n`try_fold()` takes two arguments: an initial value, and a closure with\ntwo arguments: an 'accumulator', and an element. The closure either\nreturns successfully, with the value that the accumulator should have\nfor the next iteration, or it returns failure, with an error value that\nis propagated back to the caller immediately (short-circuiting).\n\nThe initial value is the value the accumulator will have on the first\ncall. If applying the closure succeeded against every element of the\niterator, `try_fold()` returns the final accumulator as success.\n\nFolding is useful whenever you have a collection of something, and want\nto produce a single value from it.\n\n# Note to Implementors\n\nSeveral of the other (forward) methods have default implementations in\nterms of this one, so try to implement this explicitly if it can\ndo something better than the default `for` loop implementation.\n\nIn particular, try to have this call `try_fold()` on the internal parts\nfrom which this iterator is composed. If multiple calls are needed,\nthe `?` operator may be convenient for chaining the accumulator value\nalong, but beware any invariants that need to be upheld before those\nearly returns. This is a `&mut self` method, so iteration needs to be\nresumable after hitting an error here.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\n// the checked sum of all of the elements of the array\nlet sum = a.iter().try_fold(0i8, |acc, &x| acc.checked_add(x));\n\nassert_eq!(sum, Some(6));\n```\n\nShort-circuiting:\n\n```\nlet a = [10, 20, 30, 100, 40, 50];\nlet mut it = a.iter();\n\n// This sum overflows when adding the 100 element\nlet sum = it.try_fold(0i8, |acc, &x| acc.checked_add(x));\nassert_eq!(sum, None);\n\n// Because it short-circuited, the remaining elements are still\n// available through the iterator.\nassert_eq!(it.len(), 2);\nassert_eq!(it.next(), Some(&40));\n```\n\nWhile you cannot `break` from a closure, the [`ControlFlow`] type allows\na similar idea:\n\n```\nuse std::ops::ControlFlow;\n\nlet triangular = (1..30).try_fold(0_i8, |prev, x| {\n    if let Some(next) = prev.checked_add(x) {\n        ControlFlow::Continue(next)\n    } else {\n        ControlFlow::Break(prev)\n    }\n});\nassert_eq!(triangular, ControlFlow::Break(120));\n\nlet triangular = (1..30).try_fold(0_u64, |prev, x| {\n    if let Some(next) = prev.checked_add(x) {\n        ControlFlow::Continue(next)\n    } else {\n        ControlFlow::Break(prev)\n    }\n});\nassert_eq!(triangular, ControlFlow::Continue(435));\n```","links":{"`ControlFlow`":"1:49333:4663"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13693:42411":{"id":"1:13693:42411","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1856:59":{"id":"0:1856:59","crate_id":0,"name":"default","span":{"filename":"src/set.rs","begin":[1279,4],"end":[1283,5]},"visibility":"default","docs":"Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8861:4088":{"id":"1:8861:4088","crate_id":1,"name":"chain","span":null,"visibility":"default","docs":"Takes two iterators and creates a new iterator over both in sequence.\n\n`chain()` will return a new iterator which will first iterate over\nvalues from the first iterator and then over values from the second\niterator.\n\nIn other words, it links two iterators together, in a chain. 🔗\n\n[`once`] is commonly used to adapt a single value into a chain of\nother kinds of iteration.\n\n# Examples\n\nBasic usage:\n\n```\nlet a1 = [1, 2, 3];\nlet a2 = [4, 5, 6];\n\nlet mut iter = a1.iter().chain(a2.iter());\n\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), Some(&3));\nassert_eq!(iter.next(), Some(&4));\nassert_eq!(iter.next(), Some(&5));\nassert_eq!(iter.next(), Some(&6));\nassert_eq!(iter.next(), None);\n```\n\nSince the argument to `chain()` uses [`IntoIterator`], we can pass\nanything that can be converted into an [`Iterator`], not just an\n[`Iterator`] itself. For example, slices (`&[T]`) implement\n[`IntoIterator`], and so can be passed to `chain()` directly:\n\n```\nlet s1 = &[1, 2, 3];\nlet s2 = &[4, 5, 6];\n\nlet mut iter = s1.iter().chain(s2);\n\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), Some(&3));\nassert_eq!(iter.next(), Some(&4));\nassert_eq!(iter.next(), Some(&5));\nassert_eq!(iter.next(), Some(&6));\nassert_eq!(iter.next(), None);\n```\n\nIf you work with Windows API, you may wish to convert [`OsStr`] to `Vec<u16>`:\n\n```\n#[cfg(windows)]\nfn os_str_to_utf16(s: &std::ffi::OsStr) -> Vec<u16> {\n    use std::os::windows::ffi::OsStrExt;\n    s.encode_wide().chain(std::iter::once(0)).collect()\n}\n```\n\n[`once`]: crate::iter::once\n[`OsStr`]: ../../std/ffi/struct.OsStr.html","links":{"crate::iter::once":"1:8426:4465","`Iterator`":"1:8846:160","`IntoIterator`":"1:8650:153"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Chain","id":"1:50172:3941","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3593:368":{"id":"1:3593:368","crate_id":1,"name":"bitxor_assign","span":null,"visibility":"default","docs":"Performs the `^=` operation.\n\n# Examples\n\n```\nlet mut x = true;\nx ^= false;\nassert_eq!(x, true);\n\nlet mut x = true;\nx ^= true;\nassert_eq!(x, false);\n\nlet mut x: u8 = 5;\nx ^= 1;\nassert_eq!(x, 4);\n\nlet mut x: u8 = 5;\nx ^= 2;\nassert_eq!(x, 7);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:743:767":{"id":"0:743:767","crate_id":0,"name":"index","span":{"filename":"src/map.rs","begin":[2167,4],"end":[2169,5]},"visibility":"default","docs":"Returns a reference to the value corresponding to the supplied key.\n\n# Panics\n\nPanics if the key is not present in the `HashMap`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(\"a\", \"One\"), (\"b\", \"Two\")].into();\n\nassert_eq!(map[&\"a\"], \"One\");\nassert_eq!(map[&\"b\"], \"Two\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3591:4647":{"id":"1:3591:4647","crate_id":1,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3593:368"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1937:2170":{"id":"0:1937:2170","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1525,4],"end":[1525,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"1:23040:40919":{"id":"1:23040:40919","crate_id":1,"name":"reduce_product","span":null,"visibility":"default","docs":"Reducing multiply.  Returns the product of the lanes of the vector.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{f32x2, SimdFloat};\nlet v = f32x2::from_array([3., 4.]);\nassert_eq!(v.reduce_product(), 12.);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23017:10956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:80:2243":{"id":"0:80:2243","crate_id":0,"name":"allocate","span":{"filename":"src/raw/alloc.rs","begin":[46,8],"end":[48,9]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:54116:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2417:1796","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:672:2757":{"id":"0:672:2757","crate_id":0,"name":"get_many_key_value_unchecked_mut","span":{"filename":"src/map.rs","begin":[1597,4],"end":[1607,5]},"visibility":"public","docs":"Attempts to get mutable references to `N` values in the map at once, with immutable\nreferences to the corresponding keys, without validating that the values are unique.\n\nReturns an array of length `N` with the results of each query. `None` will be returned if\nany of the keys are missing.\n\nFor a safe alternative see [`get_many_key_value_mut`](`HashMap::get_many_key_value_mut`).\n\n# Safety\n\nCalling this method with overlapping keys is *[undefined behavior]* even if the resulting\nreferences are not used.\n\n[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut libraries = HashMap::new();\nlibraries.insert(\"Bodleian Library\".to_string(), 1602);\nlibraries.insert(\"Athenæum\".to_string(), 1807);\nlibraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\nlibraries.insert(\"Library of Congress\".to_string(), 1800);\n\nlet got = libraries.get_many_key_value_mut([\n    \"Bodleian Library\",\n    \"Herzogin-Anna-Amalia-Bibliothek\",\n]);\nassert_eq!(\n    got,\n    Some([\n        (&\"Bodleian Library\".to_string(), &mut 1602),\n        (&\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), &mut 1691),\n    ]),\n);\n// Missing keys result in None\nlet got = libraries.get_many_key_value_mut([\n    \"Bodleian Library\",\n    \"Gewandhaus\",\n]);\nassert_eq!(got, None);\n```","links":{"`HashMap::get_many_key_value_mut`":"0:665:2754"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["ks",{"kind":"array","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}},"len":"N"}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}]},"len":"N"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3577:4644":{"id":"1:3577:4644","crate_id":1,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3579:186","1:3580:1270"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1727":{"id":"0:1727","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[132,0],"end":[169,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"DefaultHashBuilder","id":"0:538:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1729:936","0:1730:1921"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1850:3686":{"id":"0:1850:3686","crate_id":0,"name":"extend","span":{"filename":"src/set.rs","begin":[1255,4],"end":[1257,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1265:1991":{"id":"0:1265:1991","crate_id":0,"name":"value","span":{"filename":"src/map.rs","begin":[4543,4],"end":[4543,16]},"visibility":"public","docs":"The value which was not inserted, because the entry was already occupied.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"V"}},"1:2982:182":{"id":"1:2982:182","crate_id":1,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2983:427","1:2984:1877","1:2985:1843","1:2986:9969"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2995:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:13338:42102":{"id":"1:13338:42102","crate_id":1,"name":"next_reject_back","span":null,"visibility":"default","docs":"Finds the next [`Reject`][SearchStep::Reject] result.\nSee [`next_back()`][ReverseSearcher::next_back].","links":{"SearchStep::Reject":"1:53523:12731","ReverseSearcher::next_back":"1:13336:9970"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3212:136":{"id":"1:3212:136","crate_id":1,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3214:693"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13713:42416":{"id":"1:13713:42416","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:53392:11122","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:631:1970":{"id":"0:631:1970","crate_id":0,"name":"shrink_to","span":{"filename":"src/map.rs","begin":[1114,4],"end":[1117,5]},"visibility":"public","docs":"Shrinks the capacity of the map with a lower limit. It will drop\ndown no lower than the supplied limit while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.\n\nThis function does nothing if the current capacity is smaller than the\nsupplied minimum capacity.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<i32, i32> = HashMap::with_capacity(100);\nmap.insert(1, 2);\nmap.insert(3, 4);\nassert!(map.capacity() >= 100);\nmap.shrink_to(10);\nassert!(map.capacity() >= 10);\nmap.shrink_to(0);\nassert!(map.capacity() >= 2);\nmap.shrink_to(10);\nassert!(map.capacity() >= 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["min_capacity",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9496:4748-0:2244:1804":{"id":"a:1:9496:4748-0:2244:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3929:233":{"id":"1:3929:233","crate_id":1,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3930:186","1:3931:4656","1:3932:698","1:3933:380"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"1:3934:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2999:807":{"id":"1:2999:807","crate_id":1,"name":"le","span":null,"visibility":"default","docs":"This method tests less than or equal to (for `self` and `other`) and is used by the `<=`\noperator.\n\n# Examples\n\n```\nlet result = 1.0 <= 2.0;\nassert_eq!(result, true);\n\nlet result = 2.0 <= 2.0;\nassert_eq!(result, true);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2281":{"id":"0:2281","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,27],"end":[121,29]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"4:5923:186":{"id":"4:5923:186","crate_id":4,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after concatenation","links":{},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"b:1:4203-0:539:144":{"id":"b:1:4203-0:539:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4201:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:4205:1470"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:8904:2964":{"id":"1:8904:2964","crate_id":1,"name":"collect","span":null,"visibility":"default","docs":"Transforms an iterator into a collection.\n\n`collect()` can take anything iterable, and turn it into a relevant\ncollection. This is one of the more powerful methods in the standard\nlibrary, used in a variety of contexts.\n\nThe most basic pattern in which `collect()` is used is to turn one\ncollection into another. You take a collection, call [`iter`] on it,\ndo a bunch of transformations, and then `collect()` at the end.\n\n`collect()` can also create instances of types that are not typical\ncollections. For example, a [`String`] can be built from [`char`]s,\nand an iterator of [`Result<T, E>`][`Result`] items can be collected\ninto `Result<Collection<T>, E>`. See the examples below for more.\n\nBecause `collect()` is so general, it can cause problems with type\ninference. As such, `collect()` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which collection\nyou're trying to collect into.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet doubled: Vec<i32> = a.iter()\n                         .map(|&x| x * 2)\n                         .collect();\n\nassert_eq!(vec![2, 4, 6], doubled);\n```\n\nNote that we needed the `: Vec<i32>` on the left-hand side. This is because\nwe could collect into, for example, a [`VecDeque<T>`] instead:\n\n[`VecDeque<T>`]: ../../std/collections/struct.VecDeque.html\n\n```\nuse std::collections::VecDeque;\n\nlet a = [1, 2, 3];\n\nlet doubled: VecDeque<i32> = a.iter().map(|&x| x * 2).collect();\n\nassert_eq!(2, doubled[0]);\nassert_eq!(4, doubled[1]);\nassert_eq!(6, doubled[2]);\n```\n\nUsing the 'turbofish' instead of annotating `doubled`:\n\n```\nlet a = [1, 2, 3];\n\nlet doubled = a.iter().map(|x| x * 2).collect::<Vec<i32>>();\n\nassert_eq!(vec![2, 4, 6], doubled);\n```\n\nBecause `collect()` only cares about what you're collecting into, you can\nstill use a partial type hint, `_`, with the turbofish:\n\n```\nlet a = [1, 2, 3];\n\nlet doubled = a.iter().map(|x| x * 2).collect::<Vec<_>>();\n\nassert_eq!(vec![2, 4, 6], doubled);\n```\n\nUsing `collect()` to make a [`String`]:\n\n```\nlet chars = ['g', 'd', 'k', 'k', 'n'];\n\nlet hello: String = chars.iter()\n    .map(|&x| x as u8)\n    .map(|x| (x + 1) as char)\n    .collect();\n\nassert_eq!(\"hello\", hello);\n```\n\nIf you have a list of [`Result<T, E>`][`Result`]s, you can use `collect()` to\nsee if any of them failed:\n\n```\nlet results = [Ok(1), Err(\"nope\"), Ok(3), Err(\"bad\")];\n\nlet result: Result<Vec<_>, &str> = results.iter().cloned().collect();\n\n// gives us the first error\nassert_eq!(Err(\"nope\"), result);\n\nlet results = [Ok(1), Ok(3)];\n\nlet result: Result<Vec<_>, &str> = results.iter().cloned().collect();\n\n// gives us the list of answers\nassert_eq!(Ok(vec![1, 3]), result);\n```\n\n[`iter`]: Iterator::next\n[`String`]: ../../std/string/struct.String.html\n[`char`]: type@char","links":{"Iterator::next":"1:8848:949","`Result`":"1:51274:211","type@char":"1:61603:4394"},"attrs":["#[must_use =\n\"if you really need to exhaust the iterator, consider `.for_each(drop)` instead\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8646:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:861:10635":{"id":"4:861:10635","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":"Uses borrowed data to replace owned data, usually by cloning.\n\nThis is borrow-generalized version of [`Clone::clone_from`].\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s: String = String::new();\n\"hello\".clone_into(&mut s);\n\nlet mut v: Vec<i32> = Vec::new();\n[1, 2][..].clone_into(&mut v);\n```","links":{"`Clone::clone_from`":"1:2909:422"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToOwned","id":"4:858:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1772:4076":{"id":"0:1772:4076","crate_id":0,"name":"difference","span":{"filename":"src/set.rs","begin":[657,4],"end":[662,5]},"visibility":"public","docs":"Visits the values representing the difference,\ni.e., the values that are in `self` but not in `other`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Can be seen as `a - b`.\nfor x in a.difference(&b) {\n    println!(\"{}\", x); // Print 1\n}\n\nlet diff: HashSet<_> = a.difference(&b).collect();\nassert_eq!(diff, [1].iter().collect());\n\n// Note that difference is not symmetric,\n// and `b - a` means something else:\nlet diff: HashSet<_> = b.difference(&a).collect();\nassert_eq!(diff, [4].iter().collect());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:1906:4077","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:604:2426":{"id":"0:604:2426","crate_id":0,"name":"with_hasher_in","span":{"filename":"src/map.rs","begin":[455,4],"end":[460,5]},"visibility":"public","docs":"Creates an empty `HashMap` which will use the given hash builder to hash\nkeys. It will be allocated with the given allocator.\n\nThe created map has the default initial capacity.\n\nWarning: `hash_builder` is normally randomly generated, and\nis designed to allow HashMaps to be resistant to attacks that\ncause many collisions and very poor performance. Setting it\nmanually using this function can expose a DoS attack vector.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut map = HashMap::with_hasher(s);\nmap.insert(1, 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["hash_builder",{"kind":"generic","inner":"S"}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3239-0:2244:1804":{"id":"b:1:3239-0:2244:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3212:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3241:693"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:4253:41305":{"id":"1:4253:41305","crate_id":1,"name":"provide","span":null,"visibility":"default","docs":"Data providers should implement this method to provide *all* values they are able to\nprovide by using `demand`.\n\nNote that the `provide_*` methods on `Demand` have short-circuit semantics: if an earlier\nmethod has successfully provided a value, then later methods will not get an opportunity to\nprovide.\n\n# Examples\n\nProvides a reference to a field with type `String` as a `&str`, and a value of\ntype `i32`.\n\n```rust\n# #![feature(provide_any)]\nuse std::any::{Provider, Demand};\n# struct SomeConcreteType { field: String, num_field: i32 }\n\nimpl Provider for SomeConcreteType {\n    fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n        demand.provide_ref::<str>(&self.field)\n            .provide_value::<i32>(self.num_field);\n    }\n}\n```","links":{},"attrs":["#[unstable(feature = \"provide_any\", issue = \"96024\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"1:4264:10811","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8986:10004":{"id":"1:8986:10004","crate_id":1,"name":"rposition","span":null,"visibility":"default","docs":"Searches for an element in an iterator from the right, returning its\nindex.\n\n`rposition()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, starting from the end,\nand if one of them returns `true`, then `rposition()` returns\n[`Some(index)`]. If all of them return `false`, it returns [`None`].\n\n`rposition()` is short-circuiting; in other words, it will stop\nprocessing as soon as it finds a `true`.\n\n[`Some(index)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert_eq!(a.iter().rposition(|&x| x == 3), Some(2));\n\nassert_eq!(a.iter().rposition(|&x| x == 5), None);\n```\n\nStopping at the first `true`:\n\n```\nlet a = [-1, 2, 3, 4];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.rposition(|&x| x >= 2), Some(3));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next(), Some(&-1));\n```","links":{"Some":"1:51153:223","`None`":"1:51151:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:8714:2225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:8691:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3571:4643":{"id":"1:3571:4643","crate_id":1,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3573:186","1:3574:1267"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3564:364":{"id":"1:3564:364","crate_id":1,"name":"bitor","span":null,"visibility":"default","docs":"Performs the `|` operation.\n\n# Examples\n\n```\nassert_eq!(true | false, true);\nassert_eq!(false | false, false);\nassert_eq!(5u8 | 1u8, 5);\nassert_eq!(5u8 | 2u8, 7);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"BitOr","id":"1:3561:3943","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3602:1271":{"id":"1:3602:1271","crate_id":1,"name":"shr_assign","span":null,"visibility":"default","docs":"Performs the `>>=` operation.\n\n# Examples\n\n```\nlet mut x: u8 = 5;\nx >>= 1;\nassert_eq!(x, 2);\n\nlet mut x: u8 = 2;\nx >>= 1;\nassert_eq!(x, 1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:4997:10768":{"id":"1:4997:10768","crate_id":1,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4998:2170","1:4999:40886","1:5000:2191"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8849:9976":{"id":"1:8849:9976","crate_id":1,"name":"next_chunk","span":null,"visibility":"default","docs":"Advances the iterator and returns an array containing the next `N` values.\n\nIf there are not enough elements to fill the array then `Err` is returned\ncontaining an iterator over the remaining elements.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_next_chunk)]\n\nlet mut iter = \"lorem\".chars();\n\nassert_eq!(iter.next_chunk().unwrap(), ['l', 'o']);              // N is inferred as 2\nassert_eq!(iter.next_chunk().unwrap(), ['r', 'e', 'm']);         // N is inferred as 3\nassert_eq!(iter.next_chunk::<4>().unwrap_err().as_slice(), &[]); // N is explicitly 4\n```\n\nSplit a string and get the first three items.\n\n```\n#![feature(iter_next_chunk)]\n\nlet quote = \"not all those who wander are lost\";\nlet [first, second, third] = quote.split_whitespace().next_chunk().unwrap();\nassert_eq!(first, \"not\");\nassert_eq!(second, \"all\");\nassert_eq!(third, \"those\");\n```","links":{},"attrs":["#[unstable(feature = \"iter_next_chunk\", reason = \"recently added\", issue =\n\"98326\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"len":"N"}}},{"type":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"1:4590:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"const":{"type":{"kind":"primitive","inner":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1800:2073":{"id":"0:1800:2073","crate_id":0,"name":"replace","span":{"filename":"src/set.rs","begin":[1075,4],"end":[1083,5]},"visibility":"public","docs":"Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set = HashSet::new();\nset.insert(Vec::<i32>::new());\n\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 0);\nset.replace(Vec::with_capacity(10));\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 10);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1932:783":{"id":"0:1932:783","crate_id":0,"name":"into_iter","span":{"filename":"src/set.rs","begin":[1519,4],"end":[1521,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1879:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10784:10544":{"id":"1:10784:10544","crate_id":1,"name":"write_i64","span":null,"visibility":"default","docs":"Writes a single `i64` into this hasher.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3218:1457":{"id":"1:3218:1457","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":"Performs the conversion.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"TryInto","id":"1:3215:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"4:5924:22149":{"id":"4:5924:22149","crate_id":4,"name":"join","span":null,"visibility":"default","docs":"Implementation of [`[T]::join`](slice::join)","links":{"slice::join":"4:5910:22149"},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["sep",{"kind":"generic","inner":"Separator"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Join","id":"4:5921:11306","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Separator"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:845:2474":{"id":"0:845:2474","crate_id":0,"name":"Keys","span":{"filename":"src/map.rs","begin":[2490,0],"end":[2492,1]},"visibility":"public","docs":"An iterator over the keys of a `HashMap` in arbitrary order.\nThe iterator element type is `&'a K`.\n\nThis `struct` is created by the [`keys`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`keys`]: struct.HashMap.html#method.keys\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut keys = map.keys();\nlet mut vec = vec![keys.next(), keys.next(), keys.next()];\n\n// The `Keys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some(&1), Some(&2), Some(&3)]);\n\n// It is fused iterator\nassert_eq!(keys.next(), None);\nassert_eq!(keys.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:9496:4748-0:845:2474","a:1:3414:228-0:845:2474","a:1:3469:4530-0:845:2474","a:1:3402:220-0:845:2474","a:1:9495:4749-0:845:2474","b:1:3235-0:845:2474","b:1:2891-0:845:2474","b:1:8654-0:845:2474","b:1:3245-0:845:2474","b:1:4203-0:845:2474","b:1:3239-0:845:2474","b:1:2888-0:845:2474","b:1:3250-0:845:2474","b:4:862-0:845:2474","0:850","0:854","0:1358","0:1365","0:1369"]}},"1:3737:2283":{"id":"1:3737:2283","crate_id":1,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3739:186","1:3740:767"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:14036:139":{"id":"1:14036:139","crate_id":1,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:14037:186","1:14038:1041"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3235-0:2244:1804":{"id":"b:1:3235-0:2244:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3212:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3209:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3238:3401"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:23081:40918":{"id":"1:23081:40918","crate_id":1,"name":"reduce_sum","span":null,"visibility":"default","docs":"Returns the sum of the lanes of the vector, with wrapping addition.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{i32x4, SimdInt};\nlet v = i32x4::from_array([1, 2, 3, 4]);\nassert_eq!(v.reduce_sum(), 10);\n\n// SIMD integer addition is always wrapping\nlet v = i32x4::from_array([i32::MAX, 1, 0, 0]);\nassert_eq!(v.reduce_sum(), i32::MIN);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23070:10945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3414:228-0:2270:1655":{"id":"a:1:3414:228-0:2270:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:23071:10893":{"id":"1:23071:10893","crate_id":1,"name":"Mask","span":null,"visibility":"default","docs":"Mask type used for manipulating this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:2105:2659":{"id":"0:2105:2659","crate_id":0,"name":"Occupied","span":{"filename":"src/set.rs","begin":[1943,4],"end":[1943,40]},"visibility":"default","docs":"An occupied entry.\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet};\nlet mut set: HashSet<_> = [\"a\", \"b\"].into();\n\nmatch set.entry(\"a\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:2107:1585"]}},"0:1874":{"id":"0:1874","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1384,0],"end":[1414,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"1:3502:3945","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}}}},"items":["0:1877:186","0:1878:1394"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8652:2171":{"id":"1:8652:2171","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":"Which kind of iterator are we turning this into?","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:2244:1804":{"id":"0:2244:1804","crate_id":0,"name":"Global","span":{"filename":"src/raw/alloc.rs","begin":[43,4],"end":[43,22]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:1:9496:4748-0:2244:1804","a:1:3414:228-0:2244:1804","a:1:3469:4530-0:2244:1804","a:1:3402:220-0:2244:1804","a:1:9495:4749-0:2244:1804","b:1:3235-0:2244:1804","b:1:2891-0:2244:1804","b:1:3245-0:2244:1804","b:1:4203-0:2244:1804","b:1:3239-0:2244:1804","b:1:2888-0:2244:1804","b:1:3250-0:2244:1804","b:4:862-0:2244:1804","0:2246","0:2247","0:79","0:82"]}},"1:3542:571":{"id":"1:3542:571","crate_id":1,"name":"div_assign","span":null,"visibility":"default","docs":"Performs the `/=` operation.\n\n# Example\n\n```\nlet mut x: u32 = 12;\nx /= 2;\nassert_eq!(x, 6);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1842:3686":{"id":"0:1842:3686","crate_id":0,"name":"extend","span":{"filename":"src/set.rs","begin":[1231,4],"end":[1233,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13710:4677":{"id":"1:13710:4677","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:53124:11109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8852:2191":{"id":"1:8852:2191","crate_id":1,"name":"size_hint","span":null,"visibility":"default","docs":"Returns the bounds on the remaining length of the iterator.\n\nSpecifically, `size_hint()` returns a tuple where the first element\nis the lower bound, and the second element is the upper bound.\n\nThe second half of the tuple that is returned is an <code>[Option]<[usize]></code>.\nA [`None`] here means that either there is no known upper bound, or the\nupper bound is larger than [`usize`].\n\n# Implementation notes\n\nIt is not enforced that an iterator implementation yields the declared\nnumber of elements. A buggy iterator may yield less than the lower bound\nor more than the upper bound of elements.\n\n`size_hint()` is primarily intended to be used for optimizations such as\nreserving space for the elements of the iterator, but must not be\ntrusted to e.g., omit bounds checks in unsafe code. An incorrect\nimplementation of `size_hint()` should not lead to memory safety\nviolations.\n\nThat said, the implementation should provide a correct estimation,\nbecause otherwise it would be a violation of the trait's protocol.\n\nThe default implementation returns <code>(0, [None])</code> which is correct for any\niterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nlet mut iter = a.iter();\n\nassert_eq!((3, Some(3)), iter.size_hint());\nlet _ = iter.next();\nassert_eq!((2, Some(2)), iter.size_hint());\n```\n\nA more complex example:\n\n```\n// The even numbers in the range of zero to nine.\nlet iter = (0..10).filter(|x| x % 2 == 0);\n\n// We might iterate from zero to ten times. Knowing that it's five\n// exactly wouldn't be possible without executing filter().\nassert_eq!((0, Some(10)), iter.size_hint());\n\n// Let's add five more numbers with chain()\nlet iter = (0..10).filter(|x| x % 2 == 0).chain(15..20);\n\n// now both bounds are increased by five\nassert_eq!((5, Some(15)), iter.size_hint());\n```\n\nReturning `None` for an upper bound:\n\n```\n// an infinite iterator has no upper bound\n// and the maximum possible lower bound\nlet iter = 0..;\n\nassert_eq!((usize::MAX, None), iter.size_hint());\n```","links":{"None":"1:51151:179","`usize`":"1:61626:4414","Option":"1:51149:181","usize":"1:61626:4414","`None`":"1:51151:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3687:186":{"id":"1:3687:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The returned type after the call operator is used.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:8903:3741":{"id":"1:8903:3741","crate_id":1,"name":"by_ref","span":null,"visibility":"default","docs":"Borrows an iterator, rather than consuming it.\n\nThis is useful to allow applying iterator adapters while still\nretaining ownership of the original iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut words = [\"hello\", \"world\", \"of\", \"Rust\"].into_iter();\n\n// Take the first two words.\nlet hello_world: Vec<_> = words.by_ref().take(2).collect();\nassert_eq!(hello_world, vec![\"hello\", \"world\"]);\n\n// Collect the rest of the words.\n// We can only do this because we used `by_ref` earlier.\nlet of_rust: Vec<_> = words.collect();\nassert_eq!(of_rust, vec![\"of\", \"Rust\"]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8661:3686":{"id":"1:8661:3686","crate_id":1,"name":"extend","span":null,"visibility":"default","docs":"Extends a collection with the contents of an iterator.\n\nAs this is the only required method for this trait, the [trait-level] docs\ncontain more details.\n\n[trait-level]: Extend\n\n# Examples\n\nBasic usage:\n\n```\n// You can extend a String with some chars:\nlet mut message = String::from(\"abc\");\n\nmessage.extend(['d', 'e', 'f'].iter());\n\nassert_eq!(\"abcdef\", &message);\n```","links":{"Extend":"1:8659:3665"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:621:2593":{"id":"0:621:2593","crate_id":0,"name":"into_keys","span":{"filename":"src/map.rs","begin":[948,4],"end":[952,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the keys in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `K`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\n\nlet mut vec: Vec<&str> = map.into_keys().collect();\n\n// The `IntoKeys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\"]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:789:2594","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1877:186":{"id":"0:1877:186","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1389,4],"end":[1389,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"1:3559:362":{"id":"1:3559:362","crate_id":1,"name":"bitand","span":null,"visibility":"default","docs":"Performs the `&` operation.\n\n# Examples\n\n```\nassert_eq!(true & false, false);\nassert_eq!(true & true, true);\nassert_eq!(5u8 & 1u8, 1);\nassert_eq!(5u8 & 2u8, 0);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"BitAnd","id":"1:3556:3942","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3723:41665":{"id":"1:3723:41665","crate_id":1,"name":"resume","span":null,"visibility":"default","docs":"Resumes the execution of this generator.\n\nThis function will resume execution of the generator or start execution\nif it hasn't already. This call will return back into the generator's\nlast suspension point, resuming execution from the latest `yield`. The\ngenerator will continue executing until it either yields or returns, at\nwhich point this function will return.\n\n# Return value\n\nThe `GeneratorState` enum returned from this function indicates what\nstate the generator is in upon returning. If the `Yielded` variant is\nreturned then the generator has reached a suspension point and a value\nhas been yielded out. Generators in this state are available for\nresumption at a later point.\n\nIf `Complete` is returned then the generator has completely finished\nwith the value provided. It is invalid for the generator to be resumed\nagain.\n\n# Panics\n\nThis function may panic if it is called after the `Complete` variant has\nbeen returned previously. While generator literals in the language are\nguaranteed to panic on resuming after `Complete`, this is not guaranteed\nfor all implementations of the `Generator` trait.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:51266:193","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["arg",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"GeneratorState","id":"1:49360:4660","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Yield","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Generator","id":"1:3719:4659","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Return","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Generator","id":"1:3719:4659","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8693:9971":{"id":"1:8693:9971","crate_id":1,"name":"advance_back_by","span":null,"visibility":"default","docs":"Advances the iterator from the back by `n` elements.\n\n`advance_back_by` is the reverse version of [`advance_by`]. This method will\neagerly skip `n` elements starting from the back by calling [`next_back`] up\nto `n` times until [`None`] is encountered.\n\n`advance_back_by(n)` will return [`Ok(())`] if the iterator successfully advances by\n`n` elements, or [`Err(k)`] if [`None`] is encountered, where `k` is the number of\nelements the iterator is advanced by before running out of elements (i.e. the length\nof the iterator). Note that `k` is always less than `n`.\n\nCalling `advance_back_by(0)` can do meaningful work, for example [`Flatten`] can advance its\nouter iterator until it finds an inner iterator that is not empty, which then often\nallows it to return a more accurate `size_hint()` than in its initial state.\n\n[`advance_by`]: Iterator::advance_by\n[`Flatten`]: crate::iter::Flatten\n[`next_back`]: DoubleEndedIterator::next_back\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_advance_by)]\n\nlet a = [3, 4, 5, 6];\nlet mut iter = a.iter();\n\nassert_eq!(iter.advance_back_by(2), Ok(()));\nassert_eq!(iter.next_back(), Some(&4));\nassert_eq!(iter.advance_back_by(0), Ok(()));\nassert_eq!(iter.advance_back_by(100), Err(1)); // only `&3` was skipped\n```\n\n[`Ok(())`]: Ok\n[`Err(k)`]: Err","links":{"`None`":"1:51151:179","Ok":"1:51277:180","Iterator::advance_by":"1:8858:9978","Err":"1:51280:127","crate::iter::Flatten":"1:6810:4485","DoubleEndedIterator::next_back":"1:8692:9970"},"attrs":["#[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue =\n\"77404\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3311:2157":{"id":"1:3311:2157","crate_id":1,"name":"source","span":null,"visibility":"default","docs":"The lower-level source of this error, if any.\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::fmt;\n\n#[derive(Debug)]\nstruct SuperError {\n    source: SuperErrorSideKick,\n}\n\nimpl fmt::Display for SuperError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"SuperError is here!\")\n    }\n}\n\nimpl Error for SuperError {\n    fn source(&self) -> Option<&(dyn Error + 'static)> {\n        Some(&self.source)\n    }\n}\n\n#[derive(Debug)]\nstruct SuperErrorSideKick;\n\nimpl fmt::Display for SuperErrorSideKick {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"SuperErrorSideKick is here!\")\n    }\n}\n\nimpl Error for SuperErrorSideKick {}\n\nfn get_super_error() -> Result<(), SuperError> {\n    Err(SuperError { source: SuperErrorSideKick })\n}\n\nfn main() {\n    match get_super_error() {\n        Err(e) => {\n            println!(\"Error: {e}\");\n            println!(\"Caused by: {}\", e.source().unwrap());\n        }\n        _ => println!(\"No error\"),\n    }\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:3310:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1919:4105":{"id":"0:1919:4105","crate_id":0,"name":"Union","span":{"filename":"src/set.rs","begin":[1510,0],"end":[1512,1]},"visibility":"public","docs":"A lazy iterator producing elements in the union of `HashSet`s.\n\nThis `struct` is created by the [`union`] method on [`HashSet`].\nSee its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`union`]: struct.HashSet.html#method.union","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:10773:664":{"id":"1:10773:664","crate_id":1,"name":"finish","span":null,"visibility":"default","docs":"Returns the hash value for the values written so far.\n\nDespite its name, the method does not reset the hasher’s internal\nstate. Additional [`write`]s will continue from the current value.\nIf you need to start a fresh hash value, you will have to create\na new hasher.\n\n# Examples\n\n```\nuse std::collections::hash_map::DefaultHasher;\nuse std::hash::Hasher;\n\nlet mut hasher = DefaultHasher::new();\nhasher.write(b\"Cool!\");\n\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```\n\n[`write`]: Hasher::write","links":{"Hasher::write":"1:10774:1898"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13733:2182":{"id":"1:13733:2182","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:13711:40772","str::rsplit":"1:13739:42420","prim@char":"1:61603:4394","`DoubleEndedIterator`":"1:8691:121","self::pattern":"1:13309:10820"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:53138:11079","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9118:1791":{"id":"1:9118:1791","crate_id":1,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9024:10005":{"id":"1:9024:10005","crate_id":1,"name":"unzip","span":null,"visibility":"default","docs":"Converts an iterator of pairs into a pair of containers.\n\n`unzip()` consumes an entire iterator of pairs, producing two\ncollections: one from the left elements of the pairs, and one\nfrom the right elements.\n\nThis function is, in some sense, the opposite of [`zip`].\n\n[`zip`]: Iterator::zip\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [(1, 2), (3, 4), (5, 6)];\n\nlet (left, right): (Vec<_>, Vec<_>) = a.iter().cloned().unzip();\n\nassert_eq!(left, [1, 3, 5]);\nassert_eq!(right, [2, 4, 6]);\n\n// you can also unzip multiple nested tuples at once\nlet a = [(1, (2, 3)), (4, (5, 6))];\n\nlet (x, (y, z)): (Vec<_>, (Vec<_>, Vec<_>)) = a.iter().cloned().unzip();\nassert_eq!(x, [1, 4]);\nassert_eq!(y, [2, 5]);\nassert_eq!(z, [3, 6]);\n```","links":{"Iterator::zip":"1:8863:4480"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"FromA"},{"kind":"generic","inner":"FromB"}]},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"FromA","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"FromB","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"FromA"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:8659:3665","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"FromB"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:8659:3665","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"A"},{"kind":"generic","inner":"B"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1820":{"id":"0:1820","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1180,0],"end":[1187,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3212:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1824:693"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:858:2484":{"id":"0:858:2484","crate_id":0,"name":"Values","span":{"filename":"src/map.rs","begin":[2538,0],"end":[2540,1]},"visibility":"public","docs":"An iterator over the values of a `HashMap` in arbitrary order.\nThe iterator element type is `&'a V`.\n\nThis `struct` is created by the [`values`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`values`]: struct.HashMap.html#method.values\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut values = map.values();\nlet mut vec = vec![values.next(), values.next(), values.next()];\n\n// The `Values` iterator produces values in arbitrary order, so the\n// values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some(&\"a\"), Some(&\"b\"), Some(&\"c\")]);\n\n// It is fused iterator\nassert_eq!(values.next(), None);\nassert_eq!(values.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:13705:42413":{"id":"1:13705:42413","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:13704:42412","crate::ops::IndexMut":"1:3741:4650","`str`":"1:61609:4399"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:13686:42407":{"id":"1:13686:42407","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14528:3741":{"id":"1:14528:3741","crate_id":1,"name":"by_ref","span":null,"visibility":"default","docs":"Creates a \"by reference\" adapter for this instance of `Allocator`.\n\nThe returned adapter also implements `Allocator` and will simply borrow this.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:647:2020":{"id":"0:647:2020","crate_id":0,"name":"get_mut","span":{"filename":"src/map.rs","begin":[1363,4],"end":[1373,5]},"visibility":"public","docs":"Returns a mutable reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nif let Some(x) = map.get_mut(&1) {\n    *x = \"b\";\n}\nassert_eq!(map[&1], \"b\");\n\nassert_eq!(map.get_mut(&2), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["k",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1741:794":{"id":"0:1741:794","crate_id":0,"name":"iter","span":{"filename":"src/set.rs","begin":[243,4],"end":[247,5]},"visibility":"public","docs":"An iterator visiting all elements in arbitrary order.\nThe iterator element type is `&'a T`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet mut set = HashSet::new();\nset.insert(\"a\");\nset.insert(\"b\");\n\n// Will print in an arbitrary order.\nfor x in set.iter() {\n    println!(\"{}\", x);\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1879:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2888-0:845:2474":{"id":"b:1:2888-0:845:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2890:2281"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:13684:808":{"id":"1:13684:808","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:61603:4394"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1883:2171":{"id":"0:1883:2171","crate_id":0,"name":"IntoIter","span":{"filename":"src/set.rs","begin":[1434,0],"end":[1436,1]},"visibility":"public","docs":"An owning iterator over the items of a `HashSet`.\n\nThis `struct` is created by the [`into_iter`] method on [`HashSet`]\n(provided by the `IntoIterator` trait). See its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`into_iter`]: struct.HashSet.html#method.into_iter","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:13324:40424":{"id":"1:13324:40424","crate_id":1,"name":"is_prefix_of","span":null,"visibility":"default","docs":"Checks whether the pattern matches at the front of the haystack","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13757:42426":{"id":"1:13757:42426","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13334:10819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2888-0:2270:1655":{"id":"b:1:2888-0:2270:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:2281"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1863":{"id":"0:1863","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1319,0],"end":[1350,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitAnd","id":"1:3556:3942","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:1867:186","0:1868:362"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/raw/alloc.rs","begin":[44,4],"end":[53,5]},"visibility":{"restricted":{"parent":"0:62:1638","path":"::raw::alloc::inner"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:2243","0:81:2149"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2885:98":{"id":"1:2885:98","crate_id":1,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2887:3730"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:23113:40921":{"id":"1:23113:40921","crate_id":1,"name":"reduce_min","span":null,"visibility":"default","docs":"Returns the minimum lane in the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"1:23106:10958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8973:10003":{"id":"1:8973:10003","crate_id":1,"name":"try_find","span":null,"visibility":"default","docs":"Applies function to the elements of iterator and returns\nthe first true result or the first error.\n\nThe return type of this method depends on the return type of the closure.\nIf you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>; E>`.\nIf you return `Option<bool>` from the closure, you'll get an `Option<Option<Self::Item>>`.\n\n# Examples\n\n```\n#![feature(try_find)]\n\nlet a = [\"1\", \"2\", \"lol\", \"NaN\", \"5\"];\n\nlet is_my_num = |s: &str, search: i32| -> Result<bool, std::num::ParseIntError> {\n    Ok(s.parse::<i32>()?  == search)\n};\n\nlet result = a.iter().try_find(|&&s| is_my_num(s, 2));\nassert_eq!(result, Ok(Some(&\"2\")));\n\nlet result = a.iter().try_find(|&&s| is_my_num(s, 5));\nassert!(result.is_err());\n```\n\nThis also supports other types which implement `Try`, not just `Result`.\n```\n#![feature(try_find)]\n\nuse std::num::NonZeroU32;\nlet a = [3, 5, 7, 4, 9, 0, 11];\nlet result = a.iter().try_find(|&&x| NonZeroU32::new(x).map(|y| y.is_power_of_two()));\nassert_eq!(result, Some(Some(&4)));\nlet result = a.iter().take(3).try_find(|&&x| NonZeroU32::new(x).map(|y| y.is_power_of_two()));\nassert_eq!(result, Some(None));\nlet result = a.iter().rev().try_find(|&&x| NonZeroU32::new(x).map(|y| y.is_power_of_two()));\nassert_eq!(result, None);\n```","links":{},"attrs":["#[unstable(feature = \"try_find\", reason = \"new API\", issue = \"63178\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"qualified_path","inner":{"name":"TryType","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Residual","id":"1:3940:4656","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"bool"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Residual","id":"1:3940:4656","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3677:590":{"id":"1:3677:590","crate_id":1,"name":"drop","span":null,"visibility":"default","docs":"Executes the destructor for this type.\n\nThis method is called implicitly when the value goes out of scope,\nand cannot be called explicitly (this is compiler error [E0040]).\nHowever, the [`mem::drop`] function in the prelude can be\nused to call the argument's `Drop` implementation.\n\nWhen this method has been called, `self` has not yet been deallocated.\nThat only happens after the method is over.\nIf this wasn't the case, `self` would be a dangling reference.\n\n# Panics\n\nGiven that a [`panic!`] will call `drop` as it unwinds, any [`panic!`]\nin a `drop` implementation will likely abort.\n\nNote that even if this panics, the value is considered to be dropped;\nyou must not cause `drop` to be called again. This is normally automatically\nhandled by the compiler, but when using unsafe code, can sometimes occur\nunintentionally, particularly when using [`ptr::drop_in_place`].\n\n[E0040]: ../../error_codes/E0040.html\n[`panic!`]: crate::panic!\n[`mem::drop`]: drop\n[`ptr::drop_in_place`]: crate::ptr::drop_in_place","links":{"crate::ptr::drop_in_place":"1:2788:591","drop":"1:2138:590","crate::panic!":"1:4:1006"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13683":{"id":"1:13683","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:12762:1379","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:13684:808","1:13685:1968","1:13686:42407","1:13687:42408","1:13689:42409","1:13692:42410","1:13693:42411","1:13694:314","1:13695:2039","1:13696:2018","1:13698:2020","1:13700:42204","1:13702:2041","1:13704:42412","1:13705:42413","1:13706:42414","1:13707:42415","1:13708:11147","1:13709:10850","1:13710:4677","1:13711:40772","1:13712:40732","1:13713:42416","1:13714:42417","1:13715:40739","1:13716:3780","1:13719:42418","1:13722:42419","1:13725:1957","1:13729:9975","1:13733:2182","1:13736:40738","1:13739:42420","1:13742:42421","1:13745:42422","1:13748:42423","1:13751:42424","1:13754:42425","1:13757:42426","1:13760:4418","1:13763:42427","1:13766:42428","1:13769:42429","1:13772:42430","1:13774:42431","1:13776:42432","1:13778:42433","1:13779:42434","1:13780:42435","1:13783:42436","1:13786:42437","1:13789:42438","1:13792:42439","1:13795:42440","1:13798:42441","1:13801:11007","1:13803:11301","1:13804:42442","1:13805:42443","1:13806:42444","1:13807:42445","1:13809:18466","1:13810:42446"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3585:363":{"id":"1:3585:363","crate_id":1,"name":"bitand_assign","span":null,"visibility":"default","docs":"Performs the `&=` operation.\n\n# Examples\n\n```\nlet mut x = true;\nx &= false;\nassert_eq!(x, false);\n\nlet mut x = true;\nx &= true;\nassert_eq!(x, true);\n\nlet mut x: u8 = 5;\nx &= 1;\nassert_eq!(x, 1);\n\nlet mut x: u8 = 5;\nx &= 2;\nassert_eq!(x, 0);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"4:6510:1436":{"id":"4:6510:1436","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":"Converts the given value to a `String`.\n\n# Examples\n\nBasic usage:\n\n```\nlet i = 5;\nlet five = String::from(\"5\");\n\nassert_eq!(five, i.to_string());\n```","links":{},"attrs":["#[rustc_conversion_suggestion]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8508:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8871:3043":{"id":"1:8871:3043","crate_id":1,"name":"for_each","span":null,"visibility":"default","docs":"Calls a closure on each element of an iterator.\n\nThis is equivalent to using a [`for`] loop on the iterator, although\n`break` and `continue` are not possible from a closure. It's generally\nmore idiomatic to use a `for` loop, but `for_each` may be more legible\nwhen processing items at the end of longer iterator chains. In some\ncases `for_each` may also be faster than a loop, because it will use\ninternal iteration on adapters like `Chain`.\n\n[`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n\n# Examples\n\nBasic usage:\n\n```\nuse std::sync::mpsc::channel;\n\nlet (tx, rx) = channel();\n(0..5).map(|x| x * 2 + 1)\n      .for_each(move |x| tx.send(x).unwrap());\n\nlet v: Vec<_> =  rx.iter().collect();\nassert_eq!(v, vec![1, 3, 5, 7, 9]);\n```\n\nFor such a small example, a `for` loop may be cleaner, but `for_each`\nmight be preferable to keep a functional style with longer iterators:\n\n```\n(0..5).flat_map(|x| x * 100 .. x * 110)\n      .enumerate()\n      .filter(|&(i, x)| (i + x) % 3 == 0)\n      .for_each(|(i, x)| println!(\"{i}:{x}\"));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9125:4477":{"id":"1:9125:4477","crate_id":1,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"1:8193:4461","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8961:1957":{"id":"1:8961:1957","crate_id":1,"name":"find","span":null,"visibility":"default","docs":"Searches for an element of an iterator that satisfies a predicate.\n\n`find()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, and if any of them return\n`true`, then `find()` returns [`Some(element)`]. If they all return\n`false`, it returns [`None`].\n\n`find()` is short-circuiting; in other words, it will stop processing\nas soon as the closure returns `true`.\n\nBecause `find()` takes a reference, and many iterators iterate over\nreferences, this leads to a possibly confusing situation where the\nargument is a double reference. You can see this effect in the\nexamples below, with `&&x`.\n\n[`Some(element)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert_eq!(a.iter().find(|&&x| x == 2), Some(&2));\n\nassert_eq!(a.iter().find(|&&x| x == 5), None);\n```\n\nStopping at the first `true`:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.find(|&&x| x == 2), Some(&2));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next(), Some(&3));\n```\n\nNote that `iter.find(f)` is equivalent to `iter.filter(f).next()`.","links":{"Some":"1:51153:223","`None`":"1:51151:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9495:4749":{"id":"1:9495:4749","crate_id":1,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8863:4480":{"id":"1:8863:4480","crate_id":1,"name":"zip","span":null,"visibility":"default","docs":"'Zips up' two iterators into a single iterator of pairs.\n\n`zip()` returns a new iterator that will iterate over two other\niterators, returning a tuple where the first element comes from the\nfirst iterator, and the second element comes from the second iterator.\n\nIn other words, it zips two iterators together, into a single one.\n\nIf either iterator returns [`None`], [`next`] from the zipped iterator\nwill return [`None`].\nIf the zipped iterator has no more elements to return then each further attempt to advance\nit will first try to advance the first iterator at most one time and if it still yielded an item\ntry to advance the second iterator at most one time.\n\nTo 'undo' the result of zipping up two iterators, see [`unzip`].\n\n[`unzip`]: Iterator::unzip\n\n# Examples\n\nBasic usage:\n\n```\nlet a1 = [1, 2, 3];\nlet a2 = [4, 5, 6];\n\nlet mut iter = a1.iter().zip(a2.iter());\n\nassert_eq!(iter.next(), Some((&1, &4)));\nassert_eq!(iter.next(), Some((&2, &5)));\nassert_eq!(iter.next(), Some((&3, &6)));\nassert_eq!(iter.next(), None);\n```\n\nSince the argument to `zip()` uses [`IntoIterator`], we can pass\nanything that can be converted into an [`Iterator`], not just an\n[`Iterator`] itself. For example, slices (`&[T]`) implement\n[`IntoIterator`], and so can be passed to `zip()` directly:\n\n```\nlet s1 = &[1, 2, 3];\nlet s2 = &[4, 5, 6];\n\nlet mut iter = s1.iter().zip(s2);\n\nassert_eq!(iter.next(), Some((&1, &4)));\nassert_eq!(iter.next(), Some((&2, &5)));\nassert_eq!(iter.next(), Some((&3, &6)));\nassert_eq!(iter.next(), None);\n```\n\n`zip()` is often used to zip an infinite iterator to a finite one.\nThis works because the finite iterator will eventually return [`None`],\nending the zipper. Zipping with `(0..)` can look a lot like [`enumerate`]:\n\n```\nlet enumerate: Vec<_> = \"foo\".chars().enumerate().collect();\n\nlet zipper: Vec<_> = (0..).zip(\"foo\".chars()).collect();\n\nassert_eq!((0, 'f'), enumerate[0]);\nassert_eq!((0, 'f'), zipper[0]);\n\nassert_eq!((1, 'o'), enumerate[1]);\nassert_eq!((1, 'o'), zipper[1]);\n\nassert_eq!((2, 'o'), enumerate[2]);\nassert_eq!((2, 'o'), zipper[2]);\n```\n\nIf both iterators have roughly equivalent syntax, it may be more readable to use [`zip`]:\n\n```\nuse std::iter::zip;\n\nlet a = [1, 2, 3];\nlet b = [2, 3, 4];\n\nlet mut zipped = zip(\n    a.into_iter().map(|x| x * 2).skip(1),\n    b.into_iter().map(|x| x * 2).skip(1),\n);\n\nassert_eq!(zipped.next(), Some((4, 6)));\nassert_eq!(zipped.next(), Some((6, 8)));\nassert_eq!(zipped.next(), None);\n```\n\ncompared to:\n\n```\n# let a = [1, 2, 3];\n# let b = [2, 3, 4];\n#\nlet mut zipped = a\n    .into_iter()\n    .map(|x| x * 2)\n    .skip(1)\n    .zip(b.into_iter().map(|x| x * 2).skip(1));\n#\n# assert_eq!(zipped.next(), Some((4, 6)));\n# assert_eq!(zipped.next(), Some((6, 8)));\n# assert_eq!(zipped.next(), None);\n```\n\n[`enumerate`]: Iterator::enumerate\n[`next`]: Iterator::next\n[`zip`]: crate::iter::zip","links":{"crate::iter::zip":"1:7935:4480","Iterator::unzip":"1:9024:10005","`None`":"1:51151:179","`IntoIterator`":"1:8650:153","`Iterator`":"1:8846:160","Iterator::enumerate":"1:8881:2032","Iterator::next":"1:8848:949"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Zip","id":"1:50429:4506","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1799:2805":{"id":"0:1799:2805","crate_id":0,"name":"insert_unique_unchecked","span":{"filename":"src/set.rs","begin":[1055,4],"end":[1057,5]},"visibility":"public","docs":"Insert a value the set without checking if the value already exists in the set.\n\nReturns a reference to the value just inserted.\n\nThis operation is safe if a value does not exist in the set.\n\nHowever, if a value exists in the set already, the behavior is unspecified:\nthis operation may panic, loop forever, or any following operation with the set\nmay panic, loop forever or return arbitrary result.\n\nThat said, this operation (and following operations) are guaranteed to\nnot violate memory safety.\n\nThis operation is faster than regular insert, because it does not perform\nlookup before insertion.\n\nThis operation is useful during initial population of the set.\nFor example, when constructing a set from another set, we know\nthat values are unique.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:854":{"id":"0:854","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2504,0],"end":[2508,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10524:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10524:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:857:672"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8948:10001":{"id":"1:8948:10001","crate_id":1,"name":"try_reduce","span":null,"visibility":"default","docs":"Reduces the elements to a single one by repeatedly applying a reducing operation. If the\nclosure returns a failure, the failure is propagated back to the caller immediately.\n\nThe return type of this method depends on the return type of the closure. If the closure\nreturns `Result<Self::Item, E>`, then this function will return `Result<Option<Self::Item>,\nE>`. If the closure returns `Option<Self::Item>`, then this function will return\n`Option<Option<Self::Item>>`.\n\nWhen called on an empty iterator, this function will return either `Some(None)` or\n`Ok(None)` depending on the type of the provided closure.\n\nFor iterators with at least one element, this is essentially the same as calling\n[`try_fold()`] with the first element of the iterator as the initial accumulator value.\n\n[`try_fold()`]: Iterator::try_fold\n\n# Examples\n\nSafely calculate the sum of a series of numbers:\n\n```\n#![feature(iterator_try_reduce)]\n\nlet numbers: Vec<usize> = vec![10, 20, 5, 23, 0];\nlet sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\nassert_eq!(sum, Some(Some(58)));\n```\n\nDetermine when a reduction short circuited:\n\n```\n#![feature(iterator_try_reduce)]\n\nlet numbers = vec![1, 2, 3, usize::MAX, 4, 5];\nlet sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\nassert_eq!(sum, None);\n```\n\nDetermine when a reduction was not performed because there are no elements:\n\n```\n#![feature(iterator_try_reduce)]\n\nlet numbers: Vec<usize> = Vec::new();\nlet sum = numbers.into_iter().try_reduce(|x, y| x.checked_add(y));\nassert_eq!(sum, Some(None));\n```\n\nUse a [`Result`] instead of an [`Option`]:\n\n```\n#![feature(iterator_try_reduce)]\n\nlet numbers = vec![\"1\", \"2\", \"3\", \"4\", \"5\"];\nlet max: Result<Option<_>, <usize as std::str::FromStr>::Err> =\n    numbers.into_iter().try_reduce(|x, y| {\n        if x.parse::<usize>()? > y.parse::<usize>()? { Ok(x) } else { Ok(y) }\n    });\nassert_eq!(max, Ok(Some(\"5\")));\n```","links":{"`Result`":"1:51274:211","Iterator::try_fold":"1:8932:9997","`Option`":"1:51149:181"},"attrs":["#[unstable(feature = \"iterator_try_reduce\", reason = \"new API\", issue =\n\"87053\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"qualified_path","inner":{"name":"TryType","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Residual","id":"1:3940:4656","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"R"},"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Residual","id":"1:3940:4656","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3245-0:1716:146":{"id":"b:1:3245-0:1716:146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3219:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3215:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3248:128","1:3249:1457"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1887:2538":{"id":"0:1887:2538","crate_id":0,"name":"Drain","span":{"filename":"src/set.rs","begin":[1445,0],"end":[1447,1]},"visibility":"public","docs":"A draining iterator over the items of a `HashSet`.\n\nThis `struct` is created by the [`drain`] method on [`HashSet`].\nSee its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`drain`]: struct.HashSet.html#method.drain","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"a:1:9495:4749-0:2270:1655":{"id":"a:1:9495:4749-0:2270:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9495:4749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"4:6197:43100":{"id":"4:6197:43100","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13805:42443"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8508:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8646:137":{"id":"1:8646:137","crate_id":1,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8648:696"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1788:4133":{"id":"0:1788:4133","crate_id":0,"name":"get_or_insert_with","span":{"filename":"src/set.rs","begin":[890,4],"end":[903,5]},"visibility":"public","docs":"Inserts a value computed from `f` into the set if the given `value` is\nnot present, then returns a reference to the value in the set.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]\n    .iter().map(|&pet| pet.to_owned()).collect();\n\nassert_eq!(set.len(), 3);\nfor &pet in &[\"cat\", \"dog\", \"fish\"] {\n    let value = set.get_or_insert_with(pet, str::to_owned);\n    assert_eq!(value, pet);\n}\nassert_eq!(set.len(), 4); // a new \"fish\" was inserted\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3685:133","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3239-0:539:144":{"id":"b:1:3239-0:539:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3212:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3241:693"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:546":{"id":"0:546","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[193,0],"end":[207,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:551:420","0:552:422"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:3402:220-0:1716:146":{"id":"a:1:3402:220-0:1716:146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3402:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3402:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3402:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3402:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:2882:97":{"id":"1:2882:97","crate_id":1,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2884:2281"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:8930:9996":{"id":"1:8930:9996","crate_id":1,"name":"is_partitioned","span":null,"visibility":"default","docs":"Checks if the elements of this iterator are partitioned according to the given predicate,\nsuch that all those that return `true` precede all those that return `false`.\n\nSee also [`partition()`] and [`partition_in_place()`].\n\n[`partition()`]: Iterator::partition\n[`partition_in_place()`]: Iterator::partition_in_place\n\n# Examples\n\n```\n#![feature(iter_is_partitioned)]\n\nassert!(\"Iterator\".chars().is_partitioned(char::is_uppercase));\nassert!(!\"IntoIterator\".chars().is_partitioned(char::is_uppercase));\n```","links":{"Iterator::partition":"1:8911:9994","Iterator::partition_in_place":"1:8919:9995"},"attrs":["#[unstable(feature = \"iter_is_partitioned\", reason = \"new API\", issue =\n\"62544\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:628:1978":{"id":"0:628:1978","crate_id":0,"name":"reserve","span":{"filename":"src/map.rs","begin":[1013,4],"end":[1016,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.\n\n# Panics\n\nPanics if the new allocation size overflows [`usize`].\n\n[`usize`]: https://doc.rust-lang.org/std/primitive.usize.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet mut map: HashMap<&str, i32> = HashMap::new();\n// Map is empty and doesn't allocate memory\nassert_eq!(map.capacity(), 0);\n\nmap.reserve(10);\n\n// And now map can hold at least 10 elements\nassert!(map.capacity() >= 10);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3407:2408":{"id":"1:3407:2408","crate_id":1,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3743:768":{"id":"1:3743:768","crate_id":1,"name":"index_mut","span":null,"visibility":"default","docs":"Performs the mutable indexing (`container[index]`) operation.\n\n# Panics\n\nMay panic if the index is out of bounds.","links":{},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"generic","inner":"Idx"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Index","id":"1:3737:2283","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13722:42419":{"id":"1:13722:42419","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"1:13309:10820","prim@char":"1:61603:4394"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13334:10819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23027:41721":{"id":"1:23027:41721","crate_id":1,"name":"is_sign_positive","span":null,"visibility":"default","docs":"Returns true for each lane if it has a positive sign, including\n`+0.0`, `NaN`s with positive sign bit and positive infinity.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23017:10956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:551:420":{"id":"0:551:420","crate_id":0,"name":"clone","span":{"filename":"src/map.rs","begin":[194,4],"end":[199,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1809:616":{"id":"0:1809:616","crate_id":0,"name":"eq","span":{"filename":"src/set.rs","begin":[1153,4],"end":[1159,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23106:10958":{"id":"1:23106:10958","crate_id":1,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23107:40917","1:23108:1261","1:23109:1262","1:23110:40918","1:23111:40919","1:23112:40920","1:23113:40921","1:23114:40922","1:23115:40923","1:23116:40924"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3412:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23119:10815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:1:3235-0:845:2474":{"id":"b:1:3235-0:845:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3212:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3209:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3238:3401"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3239-0:2270:1655":{"id":"b:1:3239-0:2270:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3212:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3241:693"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:729:672":{"id":"0:729:672","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[2110,4],"end":[2112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10484:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10473:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8885:9985":{"id":"1:8885:9985","crate_id":1,"name":"take_while","span":null,"visibility":"default","docs":"Creates an iterator that yields elements based on a predicate.\n\n`take_while()` takes a closure as an argument. It will call this\nclosure on each element of the iterator, and yield elements\nwhile it returns `true`.\n\nAfter `false` is returned, `take_while()`'s job is over, and the\nrest of the elements are ignored.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [-1i32, 0, 1];\n\nlet mut iter = a.iter().take_while(|x| x.is_negative());\n\nassert_eq!(iter.next(), Some(&-1));\nassert_eq!(iter.next(), None);\n```\n\nBecause the closure passed to `take_while()` takes a reference, and many\niterators iterate over references, this leads to a possibly confusing\nsituation, where the type of the closure is a double reference:\n\n```\nlet a = [-1, 0, 1];\n\nlet mut iter = a.iter().take_while(|x| **x < 0); // need two *s!\n\nassert_eq!(iter.next(), Some(&-1));\nassert_eq!(iter.next(), None);\n```\n\nStopping after an initial `false`:\n\n```\nlet a = [-1, 0, 1, -2];\n\nlet mut iter = a.iter().take_while(|x| **x < 0);\n\nassert_eq!(iter.next(), Some(&-1));\n\n// We have more elements that are less than zero, but since we already\n// got a false, take_while() isn't used any more\nassert_eq!(iter.next(), None);\n```\n\nBecause `take_while()` needs to look at the value in order to see if it\nshould be included or not, consuming iterators will see that it is\nremoved:\n\n```\nlet a = [1, 2, 3, 4];\nlet mut iter = a.iter();\n\nlet result: Vec<i32> = iter.by_ref()\n                           .take_while(|n| **n != 3)\n                           .cloned()\n                           .collect();\n\nassert_eq!(result, &[1, 2]);\n\nlet result: Vec<i32> = iter.cloned().collect();\n\nassert_eq!(result, &[4]);\n```\n\nThe `3` is no longer there, because it was consumed in order to see if\nthe iteration should stop, but wasn't placed back into the iterator.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"TakeWhile","id":"1:50410:4505","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8715:808":{"id":"1:8715:808","crate_id":1,"name":"len","span":null,"visibility":"default","docs":"Returns the exact remaining length of the iterator.\n\nThe implementation ensures that the iterator will return exactly `len()`\nmore times a [`Some(T)`] value, before returning [`None`].\nThis method has a default implementation, so you usually should not\nimplement it directly. However, if you can provide a more efficient\nimplementation, you can do so. See the [trait-level] docs for an\nexample.\n\nThis function has the same safety guarantees as the\n[`Iterator::size_hint`] function.\n\n[trait-level]: ExactSizeIterator\n[`Some(T)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\n// a finite range knows exactly how many times it will iterate\nlet mut range = 0..5;\n\nassert_eq!(5, range.len());\nlet _ = range.next();\nassert_eq!(4, range.len());\n```","links":{"ExactSizeIterator":"1:8714:2225","`None`":"1:51151:179","`Iterator::size_hint`":"1:8852:2191","Some":"1:51153:223"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9018:4926":{"id":"1:9018:4926","crate_id":1,"name":"min_by","span":null,"visibility":"default","docs":"Returns the element that gives the minimum value with respect to the\nspecified comparison function.\n\nIf several elements are equally minimum, the first element is\nreturned. If the iterator is empty, [`None`] is returned.\n\n# Examples\n\n```\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(*a.iter().min_by(|x, y| x.cmp(y)).unwrap(), -10);\n```","links":{"`None`":"1:51151:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["compare",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:41194:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1879:2502":{"id":"0:1879:2502","crate_id":0,"name":"Iter","span":{"filename":"src/set.rs","begin":[1423,0],"end":[1425,1]},"visibility":"public","docs":"An iterator over the items of a `HashSet`.\n\nThis `struct` is created by the [`iter`] method on [`HashSet`].\nSee its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`iter`]: struct.HashSet.html#method.iter","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:609:1542":{"id":"0:609:1542","crate_id":0,"name":"values","span":{"filename":"src/map.rs","begin":[588,4],"end":[590,5]},"visibility":"public","docs":"An iterator visiting all values in arbitrary order.\nThe iterator element type is `&'a V`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\nassert_eq!(map.len(), 3);\nlet mut vec: Vec<i32> = Vec::new();\n\nfor val in map.values() {\n    println!(\"{}\", val);\n    vec.push(*val);\n}\n\n// The `Values` iterator produces values in arbitrary order, so the\n// values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [1, 2, 3]);\n\nassert_eq!(map.len(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Values","id":"0:858:2484","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3587:4646":{"id":"1:3587:4646","crate_id":1,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3589:365"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10525:672":{"id":"1:10525:672","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.\n\n# Examples\n\n```\nuse std::fmt;\n\nstruct Position {\n    longitude: f32,\n    latitude: f32,\n}\n\nimpl fmt::Debug for Position {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.debug_tuple(\"\")\n         .field(&self.longitude)\n         .field(&self.latitude)\n         .finish()\n    }\n}\n\nlet position = Position { longitude: 1.987, latitude: 2.983 };\nassert_eq!(format!(\"{position:?}\"), \"(1.987, 2.983)\");\n\nassert_eq!(format!(\"{position:#?}\"), \"(\n    1.987,\n    2.983,\n)\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10484:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:52212:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:9496:4748-0:1716:146":{"id":"a:1:9496:4748-0:1716:146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1861:186":{"id":"0:1861:186","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1292,4],"end":[1292,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:1868:362":{"id":"0:1868:362","crate_id":0,"name":"bitand","span":{"filename":"src/set.rs","begin":[1347,4],"end":[1349,5]},"visibility":"default","docs":"Returns the intersection of `self` and `rhs` as a new `HashSet<T, S>`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: HashSet<_> = vec![2, 3, 4].into_iter().collect();\n\nlet set = &a & &b;\n\nlet mut i = 0;\nlet expected = [2, 3];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3561:3943":{"id":"1:3561:3943","crate_id":1,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3563:186","1:3564:364"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8848:949":{"id":"1:8848:949","crate_id":1,"name":"next","span":null,"visibility":"default","docs":"Advances the iterator and returns the next value.\n\nReturns [`None`] when iteration is finished. Individual iterator\nimplementations may choose to resume iteration, and so calling `next()`\nagain may or may not eventually start returning [`Some(Item)`] again at some\npoint.\n\n[`Some(Item)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\n// A call to next() returns the next value...\nassert_eq!(Some(&1), iter.next());\nassert_eq!(Some(&2), iter.next());\nassert_eq!(Some(&3), iter.next());\n\n// ... and then None once it's over.\nassert_eq!(None, iter.next());\n\n// More calls may or may not return `None`. Here, they always will.\nassert_eq!(None, iter.next());\nassert_eq!(None, iter.next());\n```","links":{"`None`":"1:51151:179","Some":"1:51153:223"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10536:672":{"id":"1:10536:672","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10484:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:52212:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3852:3780":{"id":"1:3852:3780","crate_id":1,"name":"contains","span":null,"visibility":"default","docs":"Returns `true` if `item` is contained in the range.\n\n# Examples\n\n```\nassert!( (3..5).contains(&4));\nassert!(!(3..5).contains(&2));\n\nassert!( (0.0..1.0).contains(&0.5));\nassert!(!(0.0..1.0).contains(&f32::NAN));\nassert!(!(0.0..f32::NAN).contains(&0.5));\nassert!(!(f32::NAN..1.0).contains(&0.5));","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["item",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"U"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2995:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2995:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3740:767":{"id":"1:3740:767","crate_id":1,"name":"index","span":null,"visibility":"default","docs":"Performs the indexing (`container[index]`) operation.\n\n# Panics\n\nMay panic if the index is out of bounds.","links":{},"attrs":["#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"generic","inner":"Idx"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Index","id":"1:3737:2283","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23076:41049":{"id":"1:23076:41049","crate_id":1,"name":"saturating_abs","span":null,"visibility":"default","docs":"Lanewise saturating absolute value, implemented in Rust.\nAs abs(), except the MIN value becomes MAX instead of itself.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdInt};\nuse core::i32::{MIN, MAX};\nlet xs = Simd::from_array([MIN, -2, 0, 3]);\nlet unsat = xs.abs();\nlet sat = xs.saturating_abs();\nassert_eq!(unsat, Simd::from_array([MIN, 2, 0, 3]));\nassert_eq!(sat, Simd::from_array([MAX, 2, 0, 3]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13763:42427":{"id":"1:13763:42427","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"1:8691:121","prim@char":"1:61603:4394","self::pattern":"1:13309:10820","str::matches":"1:13760:4418"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:53360:11121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13334:10819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:651:2027":{"id":"0:651:2027","crate_id":0,"name":"get_many_mut","span":{"filename":"src/map.rs","begin":[1432,4],"end":[1438,5]},"visibility":"public","docs":"Attempts to get mutable references to `N` values in the map at once.\n\nReturns an array of length `N` with the results of each query. For soundness, at most one\nmutable reference will be returned to any value. `None` will be returned if any of the\nkeys are duplicates or missing.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut libraries = HashMap::new();\nlibraries.insert(\"Bodleian Library\".to_string(), 1602);\nlibraries.insert(\"Athenæum\".to_string(), 1807);\nlibraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\nlibraries.insert(\"Library of Congress\".to_string(), 1800);\n\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"Library of Congress\",\n]);\nassert_eq!(\n    got,\n    Some([\n        &mut 1807,\n        &mut 1800,\n    ]),\n);\n\n// Missing keys result in None\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"New York Public Library\",\n]);\nassert_eq!(got, None);\n\n// Duplicate keys result in None\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"Athenæum\",\n]);\nassert_eq!(got, None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["ks",{"kind":"array","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}},"len":"N"}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}},"len":"N"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:858:231":{"id":"4:858:231","crate_id":4,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:859:3398","4:860:3822","4:861:10635"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3538:909":{"id":"1:3538:909","crate_id":1,"name":"mul_assign","span":null,"visibility":"default","docs":"Performs the `*=` operation.\n\n# Example\n\n```\nlet mut x: u32 = 12;\nx *= 2;\nassert_eq!(x, 24);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1825":{"id":"0:1825","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1189,0],"end":[1201,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8646:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1829:696"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1869":{"id":"0:1869","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1352,0],"end":[1382,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitXor","id":"1:3566:3944","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}}}},"items":["0:1872:186","0:1873:367"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3534:1395":{"id":"1:3534:1395","crate_id":1,"name":"sub_assign","span":null,"visibility":"default","docs":"Performs the `-=` operation.\n\n# Example\n\n```\nlet mut x: u32 = 12;\nx -= 1;\nassert_eq!(x, 11);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2276:420":{"id":"0:2276:420","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[121,9],"end":[121,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3719:4659":{"id":"1:3719:4659","crate_id":1,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3721:246","1:3722:212","1:3723:41665"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8860:2109":{"id":"1:8860:2109","crate_id":1,"name":"step_by","span":null,"visibility":"default","docs":"Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.\n\nNote 1: The first element of the iterator will always be returned,\nregardless of the step given.\n\nNote 2: The time at which ignored elements are pulled is not fixed.\n`StepBy` behaves like the sequence `self.next()`, `self.nth(step-1)`,\n`self.nth(step-1)`, …, but is also free to behave like the sequence\n`advance_n_and_return_first(&mut self, step)`,\n`advance_n_and_return_first(&mut self, step)`, …\nWhich way is used may change for some iterators for performance reasons.\nThe second way will advance the iterator earlier and may consume more items.\n\n`advance_n_and_return_first` is the equivalent of:\n```\nfn advance_n_and_return_first<I>(iter: &mut I, n: usize) -> Option<I::Item>\nwhere\n    I: Iterator,\n{\n    let next = iter.next();\n    if n > 1 {\n        iter.nth(n - 2);\n    }\n    next\n}\n```\n\n# Panics\n\nThe method will panic if the given step is `0`.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [0, 1, 2, 3, 4, 5];\nlet mut iter = a.iter().step_by(2);\n\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), Some(&4));\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["step",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"StepBy","id":"1:50380:4488","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23025:41719":{"id":"1:23025:41719","crate_id":1,"name":"to_degrees","span":null,"visibility":"default","docs":"Converts each lane from radians to degrees.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:590:1673":{"id":"0:590:1673","crate_id":0,"name":"new_in","span":{"filename":"src/map.rs","begin":[337,4],"end":[339,5]},"visibility":"public","docs":"Creates an empty `HashMap` using the given allocator.\n\nThe hash map is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3512:4634":{"id":"1:3512:4634","crate_id":1,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3514:186","1:3515:570"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2884:2281":{"id":"1:2884:2281","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":"Immutably borrows from an owned value.\n\n# Examples\n\n```\nuse std::borrow::Borrow;\n\nfn check<T: Borrow<str>>(s: T) {\n    assert_eq!(\"Hello\", s.borrow());\n}\n\nlet s = \"Hello\".to_string();\n\ncheck(s);\n\nlet s = \"Hello\";\n\ncheck(s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Borrowed"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:730":{"id":"0:730","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2115,0],"end":[2139,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:735:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13729:9975":{"id":"1:13729:9975","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"1:13309:10820","`None`":"1:51151:179","prim@char":"1:61603:4394"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13334:10819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2888-0:539:144":{"id":"b:1:2888-0:539:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2890:2281"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:9008:4927":{"id":"1:9008:4927","crate_id":1,"name":"min_by_key","span":null,"visibility":"default","docs":"Returns the element that gives the minimum value from the\nspecified function.\n\nIf several elements are equally minimum, the first element is\nreturned. If the iterator is empty, [`None`] is returned.\n\n# Examples\n\n```\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(*a.iter().min_by_key(|x| x.abs()).unwrap(), 0);\n```","links":{"`None`":"1:51151:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2982:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5921:11306":{"id":"4:5921:11306","crate_id":4,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5923:186","4:5924:22149"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1857":{"id":"0:1857","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1286,0],"end":[1317,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"1:3561:3943","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:1861:186","0:1862:364"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3536:4639":{"id":"1:3536:4639","crate_id":1,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3538:909"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:700:1959":{"id":"0:700:1959","crate_id":0,"name":"remove","span":{"filename":"src/map.rs","begin":[1813,4],"end":[1823,5]},"visibility":"public","docs":"Removes a key from the map, returning the value at the key if the key\nwas previously in the map. Keeps the allocated memory for reuse.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\n// The map is empty\nassert!(map.is_empty() && map.capacity() == 0);\n\nmap.insert(1, \"a\");\nlet capacity_before_remove = map.capacity();\n\nassert_eq!(map.remove(&1), Some(\"a\"));\nassert_eq!(map.remove(&1), None);\n\n// Now map holds none elements but capacity is equal to the old one\nassert!(map.len() == 0 && map.capacity() == capacity_before_remove);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["k",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1878:1394":{"id":"0:1878:1394","crate_id":0,"name":"sub","span":{"filename":"src/set.rs","begin":[1411,4],"end":[1413,5]},"visibility":"default","docs":"Returns the difference of `self` and `rhs` as a new `HashSet<T, S>`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a - &b;\n\nlet mut i = 0;\nlet expected = [1, 2];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23736:30961":{"id":"1:23736:30961","crate_id":1,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23737:40530","1:23738:40531","1:23739:40532"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"1:23731:10895","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2948:616":{"id":"1:2948:616","crate_id":1,"name":"eq","span":null,"visibility":"default","docs":"This method tests for `self` and `other` values to be equal, and is used\nby `==`.","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13789:42438":{"id":"1:13789:42438","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:61603:4394","self::pattern":"1:13309:10820"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13334:10819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23084:40921":{"id":"1:23084:40921","crate_id":1,"name":"reduce_min","span":null,"visibility":"default","docs":"Returns the minimum lane in the vector.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{i32x4, SimdInt};\nlet v = i32x4::from_array([1, 2, 3, 4]);\nassert_eq!(v.reduce_min(), 1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23070:10945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:9029:3779":{"id":"1:9029:3779","crate_id":1,"name":"copied","span":null,"visibility":"default","docs":"Creates an iterator which copies all of its elements.\n\nThis is useful when you have an iterator over `&T`, but you need an\niterator over `T`.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet v_copied: Vec<_> = a.iter().copied().collect();\n\n// copied is the same as .map(|&x| x)\nlet v_map: Vec<_> = a.iter().map(|&x| x).collect();\n\nassert_eq!(v_copied, vec![1, 2, 3]);\nassert_eq!(v_map, vec![1, 2, 3]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Copied","id":"1:50194:4484","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Copy","id":"1:3412:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1716:146":{"id":"0:1716:146","crate_id":0,"name":"HashSet","span":{"filename":"src/set.rs","begin":[115,0],"end":[117,1]},"visibility":"public","docs":"A hash set implemented as a `HashMap` where the value is `()`.\n\nAs with the [`HashMap`] type, a `HashSet` requires that the elements\nimplement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by\nusing `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,\nit is important that the following property holds:\n\n```text\nk1 == k2 -> hash(k1) == hash(k2)\n```\n\nIn other words, if two keys are equal, their hashes must be equal.\n\n\nIt is a logic error for an item to be modified in such a way that the\nitem's hash, as determined by the [`Hash`] trait, or its equality, as\ndetermined by the [`Eq`] trait, changes while it is in the set. This is\nnormally only possible through [`Cell`], [`RefCell`], global state, I/O, or\nunsafe code.\n\nIt is also a logic error for the [`Hash`] implementation of a key to panic.\nThis is generally only possible if the trait is implemented manually. If a\npanic does occur then the contents of the `HashSet` may become corrupted and\nsome items may be dropped from the table.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n// Type inference lets us omit an explicit type signature (which\n// would be `HashSet<String>` in this example).\nlet mut books = HashSet::new();\n\n// Add some books.\nbooks.insert(\"A Dance With Dragons\".to_string());\nbooks.insert(\"To Kill a Mockingbird\".to_string());\nbooks.insert(\"The Odyssey\".to_string());\nbooks.insert(\"The Great Gatsby\".to_string());\n\n// Check for a specific one.\nif !books.contains(\"The Winds of Winter\") {\n    println!(\"We have {} books, but The Winds of Winter ain't one.\",\n             books.len());\n}\n\n// Remove a book.\nbooks.remove(\"The Odyssey\");\n\n// Iterate over everything.\nfor book in &books {\n    println!(\"{}\", book);\n}\n```\n\nThe easiest way to use `HashSet` with a custom type is to derive\n[`Eq`] and [`Hash`]. We must also derive [`PartialEq`]. This will in the\nfuture be implied by [`Eq`].\n\n```\nuse hashbrown::HashSet;\n#[derive(Hash, Eq, PartialEq, Debug)]\nstruct Viking {\n    name: String,\n    power: usize,\n}\n\nlet mut vikings = HashSet::new();\n\nvikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });\nvikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });\nvikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });\nvikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });\n\n// Use derived implementation to print the vikings.\nfor x in &vikings {\n    println!(\"{:?}\", x);\n}\n```\n\nA `HashSet` with fixed list of elements can be initialized from an array:\n\n```\nuse hashbrown::HashSet;\n\nlet viking_names: HashSet<&'static str> =\n    [ \"Einar\", \"Olaf\", \"Harald\" ].iter().cloned().collect();\n// use the values stored in the set\n```\n\n[`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n[`HashMap`]: struct.HashMap.html\n[`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html\n[`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"DefaultHashBuilder","id":"0:538:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1727","0:1731","0:1736","0:1751","0:1756","0:1764","a:1:9496:4748-0:1716:146","a:1:3414:228-0:1716:146","a:1:3469:4530-0:1716:146","a:1:3402:220-0:1716:146","a:1:9495:4749-0:1716:146","b:1:3235-0:1716:146","b:1:2891-0:1716:146","b:1:3245-0:1716:146","b:1:4203-0:1716:146","b:1:3239-0:1716:146","b:1:2888-0:1716:146","b:1:3250-0:1716:146","b:4:862-0:1716:146","0:1721","0:1805","0:1811","0:1815","0:1820","0:1825","0:1831","0:1838","0:1845","0:1852","0:1857","0:1863","0:1869","0:1874","0:1925","0:1933"]}},"5:255:44913":{"id":"5:255:44913","crate_id":5,"name":"get_hash","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","begin":[42,4],"end":[42,86]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"H"}}}],["build_hasher",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"B"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"H"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23355:30942":{"id":"1:23355:30942","crate_id":1,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23356:1806","1:23357:40812","1:23358:40813"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23348:10815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8906:9992":{"id":"1:8906:9992","crate_id":1,"name":"try_collect","span":null,"visibility":"default","docs":"Fallibly transforms an iterator into a collection, short circuiting if\na failure is encountered.\n\n`try_collect()` is a variation of [`collect()`][`collect`] that allows fallible\nconversions during collection. Its main use case is simplifying conversions from\niterators yielding [`Option<T>`][`Option`] into `Option<Collection<T>>`, or similarly for other [`Try`]\ntypes (e.g. [`Result`]).\n\nImportantly, `try_collect()` doesn't require that the outer [`Try`] type also implements [`FromIterator`];\nonly the inner type produced on `Try::Output` must implement it. Concretely,\nthis means that collecting into `ControlFlow<_, Vec<i32>>` is valid because `Vec<i32>` implements\n[`FromIterator`], even though [`ControlFlow`] doesn't.\n\nAlso, if a failure is encountered during `try_collect()`, the iterator is still valid and\nmay continue to be used, in which case it will continue iterating starting after the element that\ntriggered the failure. See the last example below for an example of how this works.\n\n# Examples\nSuccessfully collecting an iterator of `Option<i32>` into `Option<Vec<i32>>`:\n```\n#![feature(iterator_try_collect)]\n\nlet u = vec![Some(1), Some(2), Some(3)];\nlet v = u.into_iter().try_collect::<Vec<i32>>();\nassert_eq!(v, Some(vec![1, 2, 3]));\n```\n\nFailing to collect in the same way:\n```\n#![feature(iterator_try_collect)]\n\nlet u = vec![Some(1), Some(2), None, Some(3)];\nlet v = u.into_iter().try_collect::<Vec<i32>>();\nassert_eq!(v, None);\n```\n\nA similar example, but with `Result`:\n```\n#![feature(iterator_try_collect)]\n\nlet u: Vec<Result<i32, ()>> = vec![Ok(1), Ok(2), Ok(3)];\nlet v = u.into_iter().try_collect::<Vec<i32>>();\nassert_eq!(v, Ok(vec![1, 2, 3]));\n\nlet u = vec![Ok(1), Ok(2), Err(()), Ok(3)];\nlet v = u.into_iter().try_collect::<Vec<i32>>();\nassert_eq!(v, Err(()));\n```\n\nFinally, even [`ControlFlow`] works, despite the fact that it\ndoesn't implement [`FromIterator`]. Note also that the iterator can\ncontinue to be used, even if a failure is encountered:\n\n```\n#![feature(iterator_try_collect)]\n\nuse core::ops::ControlFlow::{Break, Continue};\n\nlet u = [Continue(1), Continue(2), Break(3), Continue(4), Continue(5)];\nlet mut it = u.into_iter();\n\nlet v = it.try_collect::<Vec<_>>();\nassert_eq!(v, Break(3));\n\nlet v = it.try_collect::<Vec<_>>();\nassert_eq!(v, Continue(vec![4, 5]));\n```\n\n[`collect`]: Iterator::collect","links":{"`ControlFlow`":"1:49333:4663","`Option`":"1:51149:181","`Try`":"1:3929:233","`Result`":"1:51274:211","`FromIterator`":"1:8646:137","Iterator::collect":"1:8904:2964"},"attrs":["#[unstable(feature = \"iterator_try_collect\", issue = \"94047\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"TryType","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Residual","id":"1:3940:4656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Residual","id":"1:3940:4656","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"FromIterator","id":"1:8646:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:603:291":{"id":"0:603:291","crate_id":0,"name":"allocator","span":{"filename":"src/map.rs","begin":[430,4],"end":[432,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14525:41902":{"id":"1:14525:41902","crate_id":1,"name":"grow","span":null,"visibility":"default","docs":"Attempts to extend the memory block.\n\nReturns a new [`NonNull<[u8]>`][NonNull] containing a pointer and the actual size of the allocated\nmemory. The pointer is suitable for holding data described by `new_layout`. To accomplish\nthis, the allocator may extend the allocation referenced by `ptr` to fit the new layout.\n\nIf this returns `Ok`, then ownership of the memory block referenced by `ptr` has been\ntransferred to this allocator. The memory may or may not have been freed, and should be\nconsidered unusable.\n\nIf this method returns `Err`, then ownership of the memory block has not been transferred to\nthis allocator, and the contents of the memory block are unaltered.\n\n# Safety\n\n* `ptr` must denote a block of memory [*currently allocated*] via this allocator.\n* `old_layout` must [*fit*] that block of memory (The `new_layout` argument need not fit it.).\n* `new_layout.size()` must be greater than or equal to `old_layout.size()`.\n\nNote that `new_layout.align()` need not be the same as `old_layout.align()`.\n\n[*currently allocated*]: #currently-allocated-memory\n[*fit*]: #memory-fitting\n\n# Errors\n\nReturns `Err` if the new layout does not meet the allocator's size and alignment\nconstraints of the allocator, or if growing otherwise fails.\n\nImplementations are encouraged to return `Err` on memory exhaustion rather than panicking or\naborting, but this is not a strict requirement. (Specifically: it is *legal* to implement\nthis trait atop an underlying native allocation library that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an allocation error are encouraged to\ncall the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{"NonNull":"1:2417:1796"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2417:1796","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["old_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:54116:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:54116:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2417:1796","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:54145:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:23144:10893":{"id":"1:23144:10893","crate_id":1,"name":"Mask","span":null,"visibility":"default","docs":"The mask type returned by each comparison.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:23731:10895":{"id":"1:23731:10895","crate_id":1,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23732:1309","1:23733:1308","1:23734:1306","1:23735:1305"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"1:23143:10957","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1561:3686":{"id":"0:1561:3686","crate_id":0,"name":"extend","span":{"filename":"src/map.rs","begin":[6482,4],"end":[6484,5]},"visibility":"default","docs":"Inserts all new key-values from the iterator to existing `HashMap<K, V, S, A>`.\nReplace values with existing keys with new values returned from the iterator.\nThe keys and values must implement [`Copy`] trait.\n\n[`Copy`]: https://doc.rust-lang.org/core/marker/trait.Copy.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, 100);\n\nlet arr = [(1, 1), (2, 2)];\nlet some_iter = arr.iter().map(|&(k, v)| (k, v));\nmap.extend(some_iter);\n// Replace values with existing keys with new values returned from the iterator.\n// So that the map.get(&1) doesn't return Some(&100).\nassert_eq!(map.get(&1), Some(&1));\n\nlet some_vec: Vec<_> = vec![(3, 3), (4, 4)];\nmap.extend(some_vec.iter().map(|&(k, v)| (k, v)));\n\nlet some_arr = [(5, 5), (6, 6)];\nmap.extend(some_arr.iter().map(|&(k, v)| (k, v)));\n\n// You can also extend from another HashMap\nlet mut new_map = HashMap::new();\nnew_map.extend(&map);\nassert_eq!(new_map, map);\n\nlet mut vec: Vec<_> = new_map.into_iter().collect();\n// The `IntoIter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:954:3118":{"id":"0:954:3118","crate_id":0,"name":"RawOccupiedEntryMut","span":{"filename":"src/map.rs","begin":[2973,0],"end":[2977,1]},"visibility":"public","docs":"A view into an occupied entry in a `HashMap`.\nIt is part of the [`RawEntryMut`] enum.\n\n[`RawEntryMut`]: enum.RawEntryMut.html\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut, RawOccupiedEntryMut};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\", 10), (\"b\", 20), (\"c\", 30)]);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet _raw_o: RawOccupiedEntryMut<_, _, _> = map.raw_entry_mut().from_key(&\"a\").insert(\"a\", 100);\nassert_eq!(map.len(), 3);\n\n// Existing key (insert and update)\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(mut view) => {\n        assert_eq!(view.get(), &100);\n        let v = view.get_mut();\n        let new_v = (*v) * 10;\n        *v = new_v;\n        assert_eq!(view.insert(1111), 1000);\n    }\n}\n\nassert_eq!(map[&\"a\"], 1111);\nassert_eq!(map.len(), 3);\n\n// Existing key (take)\nlet hash = compute_hash(map.hasher(), &\"c\");\nmatch map.raw_entry_mut().from_key_hashed_nocheck(hash, &\"c\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"c\", 30));\n    }\n}\nassert_eq!(map.raw_entry().from_key(&\"c\"), None);\nassert_eq!(map.len(), 2);\n\nlet hash = compute_hash(map.hasher(), &\"b\");\nmatch map.raw_entry_mut().from_hash(hash, |q| *q == \"b\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"b\", 20));\n    }\n}\nassert_eq!(map.get(&\"b\"), None);\nassert_eq!(map.len(), 1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:9067:10012":{"id":"1:9067:10012","crate_id":1,"name":"eq_by","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are equal to those of\nanother with respect to the specified equality function.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_order_by)]\n\nlet xs = [1, 2, 3, 4];\nlet ys = [1, 4, 9, 16];\n\nassert!(xs.iter().eq_by(&ys, |&x, &y| x * x == y));\n```","links":{"`Iterator`":"1:8846:160"},"attrs":["#[unstable(feature = \"iter_order_by\", issue = \"64295\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}],["eq",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3563:186":{"id":"1:3563:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `|` operator.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:9077:842":{"id":"1:9077:842","crate_id":1,"name":"lt","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\nless than those of another.\n\n# Examples\n\n```\nassert_eq!([1].iter().lt([1].iter()), false);\nassert_eq!([1].iter().lt([1, 2].iter()), true);\nassert_eq!([1, 2].iter().lt([1].iter()), false);\nassert_eq!([1, 2].iter().lt([1, 2].iter()), false);\n```","links":{"Ord#lexicographical-comparison":"1:2982:182","`Iterator`":"1:8846:160"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2995:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1745:2551":{"id":"0:1745:2551","crate_id":0,"name":"retain","span":{"filename":"src/set.rs","begin":[321,4],"end":[326,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` such that `f(&e)` returns `false`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet xs = [1,2,3,4,5,6];\nlet mut set: HashSet<i32> = xs.iter().cloned().collect();\nset.retain(|&k| k % 2 == 0);\nassert_eq!(set.len(), 3);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6179:43096":{"id":"4:6179:43096","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:8508:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8508:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10478:4878":{"id":"1:10478:4878","crate_id":1,"name":"write_fmt","span":null,"visibility":"default","docs":"Glue for usage of the [`write!`] macro with implementors of this trait.\n\nThis method should generally not be invoked manually, but rather through\nthe [`write!`] macro itself.\n\n# Examples\n\n```\nuse std::fmt::{Error, Write};\n\nfn writer<W: Write>(f: &mut W, s: &str) -> Result<(), Error> {\n    f.write_fmt(format_args!(\"{s}\"))\n}\n\nlet mut buf = String::new();\nwriter(&mut buf, \"world\").unwrap();\nassert_eq!(&buf, \"world\");\n```","links":{"`write!`":"1:14:1898"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["args",{"kind":"resolved_path","inner":{"name":"Arguments","id":"1:52286:73","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:52212:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:4:862-0:2270:1655":{"id":"b:4:862-0:2270:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:858:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:864:3398","4:865:3822","4:866:10635"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2890:2281":{"id":"1:2890:2281","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3520:186":{"id":"1:3520:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `%` operator.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:14038:1041":{"id":"1:14038:1041","crate_id":1,"name":"poll","span":null,"visibility":"default","docs":"Attempt to resolve the future to a final value, registering\nthe current task for wakeup if the value is not yet available.\n\n# Return value\n\nThis function returns:\n\n- [`Poll::Pending`] if the future is not ready yet\n- [`Poll::Ready(val)`] with the result `val` of this future if it\n  finished successfully.\n\nOnce a future has finished, clients should not `poll` it again.\n\nWhen a future is not ready yet, `poll` returns `Poll::Pending` and\nstores a clone of the [`Waker`] copied from the current [`Context`].\nThis [`Waker`] is then woken once the future can make progress.\nFor example, a future waiting for a socket to become\nreadable would call `.clone()` on the [`Waker`] and store it.\nWhen a signal arrives elsewhere indicating that the socket is readable,\n[`Waker::wake`] is called and the socket future's task is awoken.\nOnce a task has been woken up, it should attempt to `poll` the future\nagain, which may or may not produce a final value.\n\nNote that on multiple calls to `poll`, only the [`Waker`] from the\n[`Context`] passed to the most recent call should be scheduled to\nreceive a wakeup.\n\n# Runtime characteristics\n\nFutures alone are *inert*; they must be *actively* `poll`ed to make\nprogress, meaning that each time the current task is woken up, it should\nactively re-`poll` pending futures that it still has an interest in.\n\nThe `poll` function is not called repeatedly in a tight loop -- instead,\nit should only be called when the future indicates that it is ready to\nmake progress (by calling `wake()`). If you're familiar with the\n`poll(2)` or `select(2)` syscalls on Unix it's worth noting that futures\ntypically do *not* suffer the same problems of \"all wakeups must poll\nall events\"; they are more like `epoll(4)`.\n\nAn implementation of `poll` should strive to return quickly, and should\nnot block. Returning quickly prevents unnecessarily clogging up\nthreads or event loops. If it is known ahead of time that a call to\n`poll` may end up taking awhile, the work should be offloaded to a\nthread pool (or something similar) to ensure that `poll` can return\nquickly.\n\n# Panics\n\nOnce a future has completed (returned `Ready` from `poll`), calling its\n`poll` method again may panic, block forever, or cause other kinds of\nproblems; the `Future` trait places no requirements on the effects of\nsuch a call. However, as the `poll` method is not marked `unsafe`,\nRust's usual rules apply: calls must never cause undefined behavior\n(memory corruption, incorrect use of `unsafe` functions, or the like),\nregardless of the future's state.\n\n[`Poll::Ready(val)`]: Poll::Ready\n[`Waker`]: crate::task::Waker\n[`Waker::wake`]: crate::task::Waker::wake","links":{"Poll::Ready":"1:54062:206","`Poll::Pending`":"1:54065:192","`Context`":"1:14340:10769","crate::task::Waker":"1:14350:11152","crate::task::Waker::wake":"1:14356:11149"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:51266:193","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"1:14340:10769","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"1:54060:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Future","id":"1:14036:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:704":{"id":"0:704","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1864,0],"end":[2076,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:709:2898","0:710:2914"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:14526:41903":{"id":"1:14526:41903","crate_id":1,"name":"grow_zeroed","span":null,"visibility":"default","docs":"Behaves like `grow`, but also ensures that the new contents are set to zero before being\nreturned.\n\nThe memory block will contain the following contents after a successful call to\n`grow_zeroed`:\n  * Bytes `0..old_layout.size()` are preserved from the original allocation.\n  * Bytes `old_layout.size()..old_size` will either be preserved or zeroed, depending on\n    the allocator implementation. `old_size` refers to the size of the memory block prior\n    to the `grow_zeroed` call, which may be larger than the size that was originally\n    requested when it was allocated.\n  * Bytes `old_size..new_size` are zeroed. `new_size` refers to the size of the memory\n    block returned by the `grow_zeroed` call.\n\n# Safety\n\n* `ptr` must denote a block of memory [*currently allocated*] via this allocator.\n* `old_layout` must [*fit*] that block of memory (The `new_layout` argument need not fit it.).\n* `new_layout.size()` must be greater than or equal to `old_layout.size()`.\n\nNote that `new_layout.align()` need not be the same as `old_layout.align()`.\n\n[*currently allocated*]: #currently-allocated-memory\n[*fit*]: #memory-fitting\n\n# Errors\n\nReturns `Err` if the new layout does not meet the allocator's size and alignment\nconstraints of the allocator, or if growing otherwise fails.\n\nImplementations are encouraged to return `Err` on memory exhaustion rather than panicking or\naborting, but this is not a strict requirement. (Specifically: it is *legal* to implement\nthis trait atop an underlying native allocation library that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an allocation error are encouraged to\ncall the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2417:1796","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["old_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:54116:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:54116:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2417:1796","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:54145:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3001:708":{"id":"1:3001:708","crate_id":1,"name":"ge","span":null,"visibility":"default","docs":"This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`\noperator.\n\n# Examples\n\n```\nlet result = 2.0 >= 1.0;\nassert_eq!(result, true);\n\nlet result = 2.0 >= 2.0;\nassert_eq!(result, true);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:620:1965":{"id":"0:620:1965","crate_id":0,"name":"clear","span":{"filename":"src/map.rs","begin":[922,4],"end":[924,5]},"visibility":"public","docs":"Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut a = HashMap::new();\na.insert(1, \"a\");\nlet capacity_before_clear = a.capacity();\n\na.clear();\n\n// Map is empty.\nassert!(a.is_empty());\n// But map capacity is equal to old one.\nassert_eq!(a.capacity(), capacity_before_clear);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8876:3743":{"id":"1:8876:3743","crate_id":1,"name":"filter","span":null,"visibility":"default","docs":"Creates an iterator which uses a closure to determine if an element\nshould be yielded.\n\nGiven an element the closure must return `true` or `false`. The returned\niterator will yield only the elements for which the closure returns\ntrue.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [0i32, 1, 2];\n\nlet mut iter = a.iter().filter(|x| x.is_positive());\n\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\nBecause the closure passed to `filter()` takes a reference, and many\niterators iterate over references, this leads to a possibly confusing\nsituation, where the type of the closure is a double reference:\n\n```\nlet a = [0, 1, 2];\n\nlet mut iter = a.iter().filter(|x| **x > 1); // need two *s!\n\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\nIt's common to instead use destructuring on the argument to strip away\none:\n\n```\nlet a = [0, 1, 2];\n\nlet mut iter = a.iter().filter(|&x| *x > 1); // both & and *\n\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\nor both:\n\n```\nlet a = [0, 1, 2];\n\nlet mut iter = a.iter().filter(|&&x| x > 1); // two &s\n\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```\n\nof these layers.\n\nNote that `iter.filter(f).next()` is equivalent to `iter.find(f)`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Filter","id":"1:50223:4493","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10524:110":{"id":"1:10524:110","crate_id":1,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10525:672"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3573:186":{"id":"1:3573:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `<<` operator.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1729:936":{"id":"0:1729:936","crate_id":0,"name":"new","span":{"filename":"src/set.rs","begin":[145,4],"end":[149,5]},"visibility":"public","docs":"Creates an empty `HashSet`.\n\nThe hash set is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet set: HashSet<i32> = HashSet::new();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8896:9988":{"id":"1:8896:9988","crate_id":1,"name":"flat_map","span":null,"visibility":"default","docs":"Creates an iterator that works like map, but flattens nested structure.\n\nThe [`map`] adapter is very useful, but only when the closure\nargument produces values. If it produces an iterator instead, there's\nan extra layer of indirection. `flat_map()` will remove this extra layer\non its own.\n\nYou can think of `flat_map(f)` as the semantic equivalent\nof [`map`]ping, and then [`flatten`]ing as in `map(f).flatten()`.\n\nAnother way of thinking about `flat_map()`: [`map`]'s closure returns\none item for each element, and `flat_map()`'s closure returns an\niterator for each element.\n\n[`map`]: Iterator::map\n[`flatten`]: Iterator::flatten\n\n# Examples\n\nBasic usage:\n\n```\nlet words = [\"alpha\", \"beta\", \"gamma\"];\n\n// chars() returns an iterator\nlet merged: String = words.iter()\n                          .flat_map(|s| s.chars())\n                          .collect();\nassert_eq!(merged, \"alphabetagamma\");\n```","links":{"Iterator::map":"1:8868:857","Iterator::flatten":"1:8899:9989"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"FlatMap","id":"1:6733:4495","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"U"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13689:42409":{"id":"1:13689:42409","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13687:42408"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1899:4096":{"id":"0:1899:4096","crate_id":0,"name":"Intersection","span":{"filename":"src/set.rs","begin":[1471,0],"end":[1476,1]},"visibility":"public","docs":"A lazy iterator producing elements in the intersection of `HashSet`s.\n\nThis `struct` is created by the [`intersection`] method on [`HashSet`].\nSee its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`intersection`]: struct.HashSet.html#method.intersection","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:4999:40886":{"id":"1:4999:40886","crate_id":1,"name":"poll_next","span":null,"visibility":"default","docs":"Attempt to pull out the next value of this async iterator, registering the\ncurrent task for wakeup if the value is not yet available, and returning\n`None` if the async iterator is exhausted.\n\n# Return value\n\nThere are several possible return values, each indicating a distinct\nasync iterator state:\n\n- `Poll::Pending` means that this async iterator's next value is not ready\nyet. Implementations will ensure that the current task will be notified\nwhen the next value may be ready.\n\n- `Poll::Ready(Some(val))` means that the async iterator has successfully\nproduced a value, `val`, and may produce further values on subsequent\n`poll_next` calls.\n\n- `Poll::Ready(None)` means that the async iterator has terminated, and\n`poll_next` should not be invoked again.\n\n# Panics\n\nOnce an async iterator has finished (returned `Ready(None)` from `poll_next`), calling its\n`poll_next` method again may panic, block forever, or cause other kinds of\nproblems; the `AsyncIterator` trait places no requirements on the effects of\nsuch a call. However, as the `poll_next` method is not marked `unsafe`,\nRust's usual rules apply: calls must never cause undefined behavior\n(memory corruption, incorrect use of `unsafe` functions, or the like),\nregardless of the async iterator's state.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:51266:193","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"1:14340:10769","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"1:54060:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"AsyncIterator","id":"1:4997:10768","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3313:41304":{"id":"1:3313:41304","crate_id":1,"name":"description","span":null,"visibility":"default","docs":"```\nif let Err(e) = \"xc\".parse::<u32>() {\n    // Print `e` itself, no need for description().\n    eprintln!(\"Error: {e}\");\n}\n```","links":{},"attrs":["#[deprecated(since = \"1.42.0\", note = \"use the Display impl or to_string()\")]"],"deprecation":{"since":"1.42.0","note":"use the Display impl or to_string()"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11171:42204":{"id":"1:11171:42204","crate_id":1,"name":"get_unchecked","span":null,"visibility":"default","docs":"Returns a shared reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling `slice` pointer\nis *[undefined behavior]* even if the resulting reference is not used.\n\n[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"1:11166:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3211:3401":{"id":"1:3211:3401","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Converts this type into the (usually inferred) input type.","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2248:420":{"id":"0:2248:420","crate_id":0,"name":"clone","span":{"filename":"src/raw/alloc.rs","begin":[42,19],"end":[42,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23024:41718":{"id":"1:23024:41718","crate_id":1,"name":"recip","span":null,"visibility":"default","docs":"Takes the reciprocal (inverse) of each lane, `1/x`.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23734:1306":{"id":"1:23734:1306","crate_id":1,"name":"simd_gt","span":null,"visibility":"default","docs":"Test if each lane is greater than the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"1:23143:10957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1931:2171":{"id":"0:1931:2171","crate_id":0,"name":"IntoIter","span":{"filename":"src/set.rs","begin":[1516,4],"end":[1516,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1879:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"0:1123:2660":{"id":"0:1123:2660","crate_id":0,"name":"OccupiedEntry","span":{"filename":"src/map.rs","begin":[4194,0],"end":[4199,1]},"visibility":"public","docs":"A view into an occupied entry in a `HashMap`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap, OccupiedEntry};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\", 10), (\"b\", 20), (\"c\", 30)]);\n\nlet _entry_o: OccupiedEntry<_, _, _> = map.entry(\"a\").insert(100);\nassert_eq!(map.len(), 3);\n\n// Existing key (insert and update)\nmatch map.entry(\"a\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(mut view) => {\n        assert_eq!(view.get(), &100);\n        let v = view.get_mut();\n        *v *= 10;\n        assert_eq!(view.insert(1111), 1000);\n    }\n}\n\nassert_eq!(map[&\"a\"], 1111);\nassert_eq!(map.len(), 3);\n\n// Existing key (take)\nmatch map.entry(\"c\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"c\", 30));\n    }\n}\nassert_eq!(map.get(&\"c\"), None);\nassert_eq!(map.len(), 2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"b:1:2891-0:2270:1655":{"id":"b:1:2891-0:2270:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2885:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:3730"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1761:2426":{"id":"0:1761:2426","crate_id":0,"name":"with_hasher_in","span":{"filename":"src/set.rs","begin":[484,4],"end":[488,5]},"visibility":"public","docs":"Creates a new empty hash set which will use the given hasher to hash\nkeys.\n\nThe hash set is also created with the default initial capacity.\n\nWarning: `hasher` is normally randomly generated, and\nis designed to allow `HashSet`s to be resistant to attacks that\ncause many collisions and very poor performance. Setting it\nmanually using this function can expose a DoS attack vector.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut set = HashSet::with_hasher(s);\nset.insert(2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["hasher",{"kind":"generic","inner":"S"}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1770:2639":{"id":"0:1770:2639","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/set.rs","begin":[603,4],"end":[605,5]},"visibility":"public","docs":"Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set = HashSet::with_capacity(100);\nset.insert(1);\nset.insert(2);\nassert!(set.capacity() >= 100);\nset.shrink_to_fit();\nassert!(set.capacity() >= 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9064:616":{"id":"1:9064:616","crate_id":1,"name":"eq","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are equal to those of\nanother.\n\n# Examples\n\n```\nassert_eq!([1].iter().eq([1].iter()), true);\nassert_eq!([1].iter().eq([1, 2].iter()), false);\n```","links":{"`Iterator`":"1:8846:160"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2946:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13250:41999":{"id":"1:13250:41999","crate_id":1,"name":"from_str","span":null,"visibility":"default","docs":"Parses a string `s` to return a value of this type.\n\nIf parsing succeeds, return the value inside [`Ok`], otherwise\nwhen the string is ill-formatted return an error specific to the\ninside [`Err`]. The error type is specific to the implementation of the trait.\n\n# Examples\n\nBasic usage with [`i32`], a type that implements `FromStr`:\n\n```\nuse std::str::FromStr;\n\nlet s = \"5\";\nlet x = i32::from_str(s).unwrap();\n\nassert_eq!(5, x);\n```","links":{"`Err`":"1:51280:127","`i32`":"1:61617:4405","`Ok`":"1:51277:180"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"FromStr","id":"1:13248:10868","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8936:9998":{"id":"1:8936:9998","crate_id":1,"name":"try_for_each","span":null,"visibility":"default","docs":"An iterator method that applies a fallible function to each item in the\niterator, stopping at the first error and returning that error.\n\nThis can also be thought of as the fallible form of [`for_each()`]\nor as the stateless version of [`try_fold()`].\n\n[`for_each()`]: Iterator::for_each\n[`try_fold()`]: Iterator::try_fold\n\n# Examples\n\n```\nuse std::fs::rename;\nuse std::io::{stdout, Write};\nuse std::path::Path;\n\nlet data = [\"no_tea.txt\", \"stale_bread.json\", \"torrential_rain.png\"];\n\nlet res = data.iter().try_for_each(|x| writeln!(stdout(), \"{x}\"));\nassert!(res.is_ok());\n\nlet mut it = data.iter().cloned();\nlet res = it.try_for_each(|x| rename(x, Path::new(x).with_extension(\"old\")));\nassert!(res.is_err());\n// It short-circuited, so the remaining items are still in the iterator:\nassert_eq!(it.next(), Some(\"stale_bread.json\"));\n```\n\nThe [`ControlFlow`] type can be used with this method for the situations\nin which you'd use `break` and `continue` in a normal loop:\n\n```\nuse std::ops::ControlFlow;\n\nlet r = (2..100).try_for_each(|x| {\n    if 323 % x == 0 {\n        return ControlFlow::Break(x)\n    }\n\n    ControlFlow::Continue(())\n});\nassert_eq!(r, ControlFlow::Break(17));\n```","links":{"`ControlFlow`":"1:49333:4663","Iterator::try_fold":"1:8932:9997","Iterator::for_each":"1:8871:3043"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[]}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8658:783":{"id":"1:8658:783","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1768:1978":{"id":"0:1768:1978","crate_id":0,"name":"reserve","span":{"filename":"src/set.rs","begin":[561,4],"end":[563,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.\n\n# Panics\n\nPanics if the new allocation size overflows `usize`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet mut set: HashSet<i32> = HashSet::new();\nset.reserve(10);\nassert!(set.capacity() >= 10);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1803:3739":{"id":"0:1803:3739","crate_id":0,"name":"take","span":{"filename":"src/set.rs","begin":[1134,4],"end":[1144,5]},"visibility":"public","docs":"Removes and returns the value in the set, if any, that is equal to the given one.\n\nThe value may be any borrowed form of the set's value type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe value type.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert_eq!(set.take(&2), Some(2));\nassert_eq!(set.take(&2), None);\n```\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8951:286":{"id":"1:8951:286","crate_id":1,"name":"all","span":null,"visibility":"default","docs":"Tests if every element of the iterator matches a predicate.\n\n`all()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, and if they all return\n`true`, then so does `all()`. If any of them return `false`, it\nreturns `false`.\n\n`all()` is short-circuiting; in other words, it will stop processing\nas soon as it finds a `false`, given that no matter what else happens,\nthe result will also be `false`.\n\nAn empty iterator returns `true`.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert!(a.iter().all(|&x| x > 0));\n\nassert!(!a.iter().all(|&x| x > 2));\n```\n\nStopping at the first `false`:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert!(!iter.all(|&x| x != 2));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next(), Some(&3));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11166:222":{"id":"1:11166:222","crate_id":1,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:11168:186","1:11169:2018","1:11170:2020","1:11171:42204","1:11172:2041","1:11173:767","1:11174:768"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:11156:10815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3500:274":{"id":"1:3500:274","crate_id":1,"name":"add","span":null,"visibility":"default","docs":"Performs the `+` operation.\n\n# Example\n\n```\nassert_eq!(12 + 1, 13);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Add","id":"1:3497:4633","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2127:2662":{"id":"0:2127:2662","crate_id":0,"name":"VacantEntry","span":{"filename":"src/set.rs","begin":[2044,0],"end":[2046,1]},"visibility":"public","docs":"A view into a vacant entry in a `HashSet`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet, VacantEntry};\n\nlet mut set = HashSet::<&str>::new();\n\nlet entry_v: VacantEntry<_, _> = match set.entry(\"a\") {\n    Entry::Vacant(view) => view,\n    Entry::Occupied(_) => unreachable!(),\n};\nentry_v.insert();\nassert!(set.contains(\"a\") && set.len() == 1);\n\n// Nonexistent key (insert)\nmatch set.entry(\"b\") {\n    Entry::Vacant(view) => view.insert(),\n    Entry::Occupied(_) => unreachable!(),\n}\nassert!(set.contains(\"b\") && set.len() == 2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:9079:807":{"id":"1:9079:807","crate_id":1,"name":"le","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\nless or equal to those of another.\n\n# Examples\n\n```\nassert_eq!([1].iter().le([1].iter()), true);\nassert_eq!([1].iter().le([1, 2].iter()), true);\nassert_eq!([1, 2].iter().le([1].iter()), false);\nassert_eq!([1, 2].iter().le([1, 2].iter()), true);\n```","links":{"`Iterator`":"1:8846:160","Ord#lexicographical-comparison":"1:2982:182"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2995:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:864:3398":{"id":"4:864:3398","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"1:23082:40919":{"id":"1:23082:40919","crate_id":1,"name":"reduce_product","span":null,"visibility":"default","docs":"Returns the product of the lanes of the vector, with wrapping multiplication.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{i32x4, SimdInt};\nlet v = i32x4::from_array([1, 2, 3, 4]);\nassert_eq!(v.reduce_product(), 24);\n\n// SIMD integer multiplication is always wrapping\nlet v = i32x4::from_array([i32::MAX, 2, 1, 1]);\nassert!(v.reduce_product() < i32::MAX);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23070:10945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13742:42421":{"id":"1:13742:42421","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13309:10820","prim@char":"1:61603:4394","str::split":"1:13733:2182","str::rsplit_terminator":"1:13745:42422","`DoubleEndedIterator`":"1:8691:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:53188:11113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1930:2170":{"id":"0:1930:2170","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1515,4],"end":[1515,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:597:2424":{"id":"0:597:2424","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/map.rs","begin":[419,4],"end":[424,5]},"visibility":"public","docs":"Creates an empty `HashMap` with the specified capacity, using `hash_builder`\nto hash the keys.\n\nThe hash map will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash map will not allocate.\n\nWarning: `hash_builder` is normally randomly generated, and\nis designed to allow HashMaps to be resistant to attacks that\ncause many collisions and very poor performance. Setting it\nmanually using this function can expose a DoS attack vector.\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashMap to be useful, see its documentation for details.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut map = HashMap::with_capacity_and_hasher(10, s);\nassert_eq!(map.len(), 0);\nassert!(map.capacity() >= 10);\n\nmap.insert(1, 2);\n```\n\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}],["hash_builder",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10780:10540":{"id":"1:10780:10540","crate_id":1,"name":"write_usize","span":null,"visibility":"default","docs":"Writes a single `usize` into this hasher.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10538:672":{"id":"1:10538:672","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10484:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:52212:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23358:40813":{"id":"1:23358:40813","crate_id":1,"name":"from_bitmask","span":null,"visibility":"default","docs":"Converts a bitmask to a mask.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bitmask",{"kind":"qualified_path","inner":{"name":"BitMask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToBitMask","id":"1:23355:30942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"4:6196:4469":{"id":"4:6196:4469","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:8508:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8508:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3469:4530-0:845:2474":{"id":"a:1:3469:4530-0:845:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3469:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:8664:3687":{"id":"1:8664:3687","crate_id":1,"name":"extend_reserve","span":null,"visibility":"default","docs":"Reserves capacity in a collection for the given number of additional elements.\n\nThe default implementation does nothing.","links":{},"attrs":["#[unstable(feature = \"extend_one\", issue = \"72631\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:752:2502":{"id":"0:752:2502","crate_id":0,"name":"Iter","span":{"filename":"src/map.rs","begin":[2221,0],"end":[2224,1]},"visibility":"public","docs":"An iterator over the entries of a `HashMap` in arbitrary order.\nThe iterator element type is `(&'a K, &'a V)`.\n\nThis `struct` is created by the [`iter`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`iter`]: struct.HashMap.html#method.iter\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut iter = map.iter();\nlet mut vec = vec![iter.next(), iter.next(), iter.next()];\n\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some((&1, &\"a\")), Some((&2, &\"b\")), Some((&3, &\"c\"))]);\n\n// It is fused iterator\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:1303:2171":{"id":"0:1303:2171","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[4641,4],"end":[4641,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:779:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"1:13792:42439":{"id":"1:13792:42439","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:13309:10820","prim@char":"1:61603:4394"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13334:10819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3850:41878":{"id":"1:3850:41878","crate_id":1,"name":"start_bound","span":null,"visibility":"default","docs":"Start index bound.\n\nReturns the start value as a `Bound`.\n\n# Examples\n\n```\n# fn main() {\nuse std::ops::Bound::*;\nuse std::ops::RangeBounds;\n\nassert_eq!((..10).start_bound(), Unbounded);\nassert_eq!((3..10).start_bound(), Included(&3));\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bound","id":"1:49548:4652","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23035:41728":{"id":"1:23035:41728","crate_id":1,"name":"copysign","span":null,"visibility":"default","docs":"Returns each lane with the magnitude of `self` and the sign of `sign`.\n\nFor any lane containing a `NAN`, a `NAN` with the sign of `sign` is returned.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["sign",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1297":{"id":"0:1297","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4639,0],"end":[4667,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1302:2170","0:1303:2171","0:1304:783"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3235-0:539:144":{"id":"b:1:3235-0:539:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3212:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3209:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3238:3401"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:8193:4461":{"id":"1:8193:4461","crate_id":1,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8194:41603","1:8195:41604","1:8196:41601","1:8197:41597","1:8198:41605","1:8199:41602","1:8200:41600"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2995:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1295:2171":{"id":"0:1295:2171","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[4604,4],"end":[4604,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:766:2511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}}}},"1:23108:1261":{"id":"1:23108:1261","crate_id":1,"name":"saturating_add","span":null,"visibility":"default","docs":"Lanewise saturating add.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdUint};\nuse core::u32::MAX;\nlet x = Simd::from_array([2, 1, 0, MAX]);\nlet max = Simd::splat(MAX);\nlet unsat = x + max;\nlet sat = x.saturating_add(max);\nassert_eq!(unsat, Simd::from_array([1, 0, MAX, MAX - 1]));\nassert_eq!(sat, max);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["second",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10788:1576":{"id":"1:10788:1576","crate_id":1,"name":"write_str","span":null,"visibility":"default","docs":"Writes a single `str` into this hasher.\n\nIf you're implementing [`Hash`], you generally do not need to call this,\nas the `impl Hash for str` does, so you should prefer that instead.\n\nThis includes the domain separator for prefix-freedom, so you should\n**not** call `Self::write_length_prefix` before calling this.\n\n# Note to Implementers\n\nThere are at least two reasonable default ways to implement this.\nWhich one will be the default is not yet decided, so for now\nyou probably want to override it specifically.\n\n## The general answer\n\nIt's always correct to implement this with a length prefix:\n\n```\n# #![feature(hasher_prefixfree_extras)]\n# struct Foo;\n# impl std::hash::Hasher for Foo {\n# fn finish(&self) -> u64 { unimplemented!() }\n# fn write(&mut self, _bytes: &[u8]) { unimplemented!() }\nfn write_str(&mut self, s: &str) {\n    self.write_length_prefix(s.len());\n    self.write(s.as_bytes());\n}\n# }\n```\n\nAnd, if your `Hasher` works in `usize` chunks, this is likely a very\nefficient way to do it, as anything more complicated may well end up\nslower than just running the round with the length.\n\n## If your `Hasher` works byte-wise\n\nOne nice thing about `str` being UTF-8 is that the `b'\\xFF'` byte\nnever happens.  That means that you can append that to the byte stream\nbeing hashed and maintain prefix-freedom:\n\n```\n# #![feature(hasher_prefixfree_extras)]\n# struct Foo;\n# impl std::hash::Hasher for Foo {\n# fn finish(&self) -> u64 { unimplemented!() }\n# fn write(&mut self, _bytes: &[u8]) { unimplemented!() }\nfn write_str(&mut self, s: &str) {\n    self.write(s.as_bytes());\n    self.write_u8(0xff);\n}\n# }\n```\n\nThis does require that your implementation not add extra padding, and\nthus generally requires that you maintain a buffer, running a round\nonly once that buffer is full (or `finish` is called).\n\nThat's because if `write` pads data out to a fixed chunk size, it's\nlikely that it does it in such a way that `\"a\"` and `\"a\\x00\"` would\nend up hashing the same sequence of things, introducing conflicts.","links":{"`Hash`":"1:10762:143"},"attrs":["#[unstable(feature = \"hasher_prefixfree_extras\", issue = \"96762\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12750:2170":{"id":"1:12750:2170","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":"The element type of the slice being matched on.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1564":{"id":"0:1564","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[6501,0],"end":[6557,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":"Inserts all new key-values from the iterator and replaces values with existing\nkeys with new values returned from the iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3412:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3412:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:8659:3665","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1570:3686"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:10772:147":{"id":"1:10772:147","crate_id":1,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10773:664","1:10774:1898","1:10775:10535","1:10776:10536","1:10777:10537","1:10778:10538","1:10779:10539","1:10780:10540","1:10781:10541","1:10782:10542","1:10783:10543","1:10784:10544","1:10785:10545","1:10786:10546","1:10787:10547","1:10788:1576"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:14522:2243":{"id":"1:14522:2243","crate_id":1,"name":"allocate","span":null,"visibility":"default","docs":"Attempts to allocate a block of memory.\n\nOn success, returns a [`NonNull<[u8]>`][NonNull] meeting the size and alignment guarantees of `layout`.\n\nThe returned block may have a larger size than specified by `layout.size()`, and may or may\nnot have its contents initialized.\n\n# Errors\n\nReturning `Err` indicates that either memory is exhausted or `layout` does not meet\nallocator's size or alignment constraints.\n\nImplementations are encouraged to return `Err` on memory exhaustion rather than panicking or\naborting, but this is not a strict requirement. (Specifically: it is *legal* to implement\nthis trait atop an underlying native allocation library that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an allocation error are encouraged to\ncall the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{"NonNull":"1:2417:1796"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:54116:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2417:1796","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:54145:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:716:616":{"id":"0:716:616","crate_id":0,"name":"eq","span":{"filename":"src/map.rs","begin":[2085,4],"end":[2092,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23732:1309":{"id":"1:23732:1309","crate_id":1,"name":"simd_lt","span":null,"visibility":"default","docs":"Test if each lane is less than the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"1:23143:10957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:948:2659":{"id":"0:948:2659","crate_id":0,"name":"Occupied","span":{"filename":"src/map.rs","begin":[2896,4],"end":[2896,49]},"visibility":"default","docs":"An occupied entry.\n\n# Examples\n\n```\nuse hashbrown::{hash_map::RawEntryMut, HashMap};\nlet mut map: HashMap<_, _> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:950:1585"]}},"0:1164:2672":{"id":"0:1164:2672","crate_id":0,"name":"EntryRef","span":{"filename":"src/map.rs","begin":[4321,0],"end":[4354,1]},"visibility":"public","docs":"A view into a single entry in a map, which may either be vacant or occupied,\nwith any borrowed form of the map's key type.\n\n\nThis `enum` is constructed from the [`entry_ref`] method on [`HashMap`].\n\n[`Hash`] and [`Eq`] on the borrowed form of the map's key type *must* match those\nfor the key type. It also require that key may be constructed from the borrowed\nform through the [`From`] trait.\n\n[`HashMap`]: struct.HashMap.html\n[`entry_ref`]: struct.HashMap.html#method.entry_ref\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n[`From`]: https://doc.rust-lang.org/std/convert/trait.From.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap, OccupiedEntryRef};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\".to_owned(), 10), (\"b\".into(), 20), (\"c\".into(), 30)]);\nassert_eq!(map.len(), 3);\n\n// Existing key (insert)\nlet key = String::from(\"a\");\nlet entry: EntryRef<_, _, _, _> = map.entry_ref(&key);\nlet _raw_o: OccupiedEntryRef<_, _, _, _> = entry.insert(1);\nassert_eq!(map.len(), 3);\n// Nonexistent key (insert)\nmap.entry_ref(\"d\").insert(4);\n\n// Existing key (or_insert)\nlet v = map.entry_ref(\"b\").or_insert(2);\nassert_eq!(std::mem::replace(v, 2), 20);\n// Nonexistent key (or_insert)\nmap.entry_ref(\"e\").or_insert(5);\n\n// Existing key (or_insert_with)\nlet v = map.entry_ref(\"c\").or_insert_with(|| 3);\nassert_eq!(std::mem::replace(v, 3), 30);\n// Nonexistent key (or_insert_with)\nmap.entry_ref(\"f\").or_insert_with(|| 6);\n\nprintln!(\"Our HashMap: {:?}\", map);\n\nfor (key, value) in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"].into_iter().zip(1..=6) {\n    assert_eq!(map[key], value)\n}\nassert_eq!(map.len(), 6);\n```","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"variants_stripped":false,"variants":["0:1172:2659","0:1175:2661"],"impls":[]}},"1:13810:42446":{"id":"1:13810:42446","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5544:42446"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:53455:11129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8858:9978":{"id":"1:8858:9978","crate_id":1,"name":"advance_by","span":null,"visibility":"default","docs":"Advances the iterator by `n` elements.\n\nThis method will eagerly skip `n` elements by calling [`next`] up to `n`\ntimes until [`None`] is encountered.\n\n`advance_by(n)` will return [`Ok(())`][Ok] if the iterator successfully advances by\n`n` elements, or [`Err(k)`][Err] if [`None`] is encountered, where `k` is the number\nof elements the iterator is advanced by before running out of elements (i.e. the\nlength of the iterator). Note that `k` is always less than `n`.\n\nCalling `advance_by(0)` can do meaningful work, for example [`Flatten`]\ncan advance its outer iterator until it finds an inner iterator that is not empty, which\nthen often allows it to return a more accurate `size_hint()` than in its initial state.\n\n[`Flatten`]: crate::iter::Flatten\n[`next`]: Iterator::next\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_advance_by)]\n\nlet a = [1, 2, 3, 4];\nlet mut iter = a.iter();\n\nassert_eq!(iter.advance_by(2), Ok(()));\nassert_eq!(iter.next(), Some(&3));\nassert_eq!(iter.advance_by(0), Ok(()));\nassert_eq!(iter.advance_by(100), Err(1)); // only `&4` was skipped\n```","links":{"crate::iter::Flatten":"1:6810:4485","Iterator::next":"1:8848:949","Err":"1:51280:127","Ok":"1:51277:180","`None`":"1:51151:179"},"attrs":["#[unstable(feature = \"iter_advance_by\", reason = \"recently added\", issue =\n\"77404\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23737:40530":{"id":"1:23737:40530","crate_id":1,"name":"simd_max","span":null,"visibility":"default","docs":"Returns the lane-wise maximum with `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1175:2661":{"id":"0:1175:2661","crate_id":0,"name":"Vacant","span":{"filename":"src/map.rs","begin":[4353,4],"end":[4353,49]},"visibility":"default","docs":"A vacant entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\nlet mut map: HashMap<String, i32> = HashMap::new();\n\nmatch map.entry_ref(\"a\") {\n    EntryRef::Occupied(_) => unreachable!(),\n    EntryRef::Vacant(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:1177:1585"]}},"1:3665:3938":{"id":"1:3665:3938","crate_id":1,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3666:557"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"1:3652:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8194:41603":{"id":"1:8194:41603","crate_id":1,"name":"steps_between","span":null,"visibility":"default","docs":"Returns the number of *successor* steps required to get from `start` to `end`.\n\nReturns `None` if the number of steps would overflow `usize`\n(or is infinite, or if `end` would never be reached).\n\n# Invariants\n\nFor any `a`, `b`, and `n`:\n\n* `steps_between(&a, &b) == Some(n)` if and only if `Step::forward_checked(&a, n) == Some(b)`\n* `steps_between(&a, &b) == Some(n)` if and only if `Step::backward_checked(&b, n) == Some(a)`\n* `steps_between(&a, &b) == Some(n)` only if `a <= b`\n  * Corollary: `steps_between(&a, &b) == Some(0)` if and only if `a == b`\n  * Note that `a <= b` does _not_ imply `steps_between(&a, &b) != None`;\n    this is the case when it would require more than `usize::MAX` steps to get to `b`\n* `steps_between(&a, &b) == None` if `a > b`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["end",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23037:40530":{"id":"1:23037:40530","crate_id":1,"name":"simd_max","span":null,"visibility":"default","docs":"Returns the maximum of each lane.\n\nIf one of the values is `NAN`, then the other value is returned.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:9495:4749-0:539:144":{"id":"a:1:9495:4749-0:539:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9495:4749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9495:4749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9495:4749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9495:4749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9495:4749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:950:1585":{"id":"0:950:1585","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[2896,13],"end":[2896,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"RawOccupiedEntryMut","id":"0:954:3118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},"1:10776:10536":{"id":"1:10776:10536","crate_id":1,"name":"write_u16","span":null,"visibility":"default","docs":"Writes a single `u16` into this hasher.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13760:4418":{"id":"1:13760:4418","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:13760:4418","self::pattern":"1:13309:10820","prim@char":"1:61603:4394","`DoubleEndedIterator`":"1:8691:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:53342:11120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1288":{"id":"0:1288","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4602,0],"end":[4637,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:1294:2170","0:1295:2171","0:1296:783"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:4203-0:845:2474":{"id":"b:1:4203-0:845:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4201:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:4205:1470"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:13745:42422":{"id":"1:13745:42422","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13309:10820","prim@char":"1:61603:4394","str::split_terminator":"1:13742:42421","str::split":"1:13733:2182"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:53206:11114","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13334:10819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23032:41726":{"id":"1:23032:41726","crate_id":1,"name":"is_subnormal","span":null,"visibility":"default","docs":"Returns true for each lane if its value is subnormal.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23017:10956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:11168:186":{"id":"1:11168:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The output type returned by methods.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null}},"0:1364:2191":{"id":"0:1364:2191","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[4772,4],"end":[4774,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1264:2656":{"id":"0:1264:2656","crate_id":0,"name":"entry","span":{"filename":"src/map.rs","begin":[4541,4],"end":[4541,44]},"visibility":"public","docs":"The entry in the map that was already occupied.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1123:2660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},"1:23073:1261":{"id":"1:23073:1261","crate_id":1,"name":"saturating_add","span":null,"visibility":"default","docs":"Lanewise saturating add.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdInt};\nuse core::i32::{MIN, MAX};\nlet x = Simd::from_array([MIN, 0, 1, MAX]);\nlet max = Simd::splat(MAX);\nlet unsat = x + max;\nlet sat = x.saturating_add(max);\nassert_eq!(unsat, Simd::from_array([-1, MAX, MIN, -2]));\nassert_eq!(sat, Simd::from_array([-1, MAX, MAX, MAX]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["second",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1744:2066":{"id":"0:1744:2066","crate_id":0,"name":"drain","span":{"filename":"src/set.rs","begin":[301,4],"end":[305,5]},"visibility":"public","docs":"Clears the set, returning all elements in an iterator.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert!(!set.is_empty());\n\n// print 1, 2, 3 in an arbitrary order\nfor i in set.drain() {\n    println!(\"{}\", i);\n}\n\nassert!(set.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:1887:2538","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9042:427":{"id":"1:9042:427","crate_id":1,"name":"cmp","span":null,"visibility":"default","docs":"[Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\nof another.\n\n# Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!([1].iter().cmp([1].iter()), Ordering::Equal);\nassert_eq!([1].iter().cmp([1, 2].iter()), Ordering::Less);\nassert_eq!([1, 2].iter().cmp([1].iter()), Ordering::Greater);\n```","links":{"`Iterator`":"1:8846:160","Ord#lexicographical-comparison":"1:2982:182"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:41194:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2982:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3250-0:1716:146":{"id":"b:1:3250-0:1716:146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3209:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3219:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3253:128","1:3254:1456"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3499:186":{"id":"1:3499:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `+` operator.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:8981:1042":{"id":"1:8981:1042","crate_id":1,"name":"position","span":null,"visibility":"default","docs":"Searches for an element in an iterator, returning its index.\n\n`position()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, and if one of them\nreturns `true`, then `position()` returns [`Some(index)`]. If all of\nthem return `false`, it returns [`None`].\n\n`position()` is short-circuiting; in other words, it will stop\nprocessing as soon as it finds a `true`.\n\n# Overflow Behavior\n\nThe method does no guarding against overflows, so if there are more\nthan [`usize::MAX`] non-matching elements, it either produces the wrong\nresult or panics. If debug assertions are enabled, a panic is\nguaranteed.\n\n# Panics\n\nThis function might panic if the iterator has more than `usize::MAX`\nnon-matching elements.\n\n[`Some(index)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert_eq!(a.iter().position(|&x| x == 2), Some(1));\n\nassert_eq!(a.iter().position(|&x| x == 5), None);\n```\n\nStopping at the first `true`:\n\n```\nlet a = [1, 2, 3, 4];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.position(|&x| x >= 2), Some(1));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next(), Some(&3));\n\n// The returned index depends on iterator state\nassert_eq!(iter.position(|&x| x == 4), Some(0));\n\n```","links":{"`None`":"1:51151:179","Some":"1:51153:223","`usize::MAX`":"1:32343:2086"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:953:1585":{"id":"0:953:1585","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[2910,11],"end":[2910,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"RawVacantEntryMut","id":"0:973:3122","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},"1:9085:10013":{"id":"1:9085:10013","crate_id":1,"name":"is_sorted","span":null,"visibility":"default","docs":"Checks if the elements of this iterator are sorted.\n\nThat is, for each element `a` and its following element `b`, `a <= b` must hold. If the\niterator yields exactly zero or one element, `true` is returned.\n\nNote that if `Self::Item` is only `PartialOrd`, but not `Ord`, the above definition\nimplies that this function returns `false` if any two consecutive items are not\ncomparable.\n\n# Examples\n\n```\n#![feature(is_sorted)]\n\nassert!([1, 2, 2, 9].iter().is_sorted());\nassert!(![1, 3, 2, 4].iter().is_sorted());\nassert!([0].iter().is_sorted());\nassert!(std::iter::empty::<i32>().is_sorted());\nassert!(![0.0, 1.0, f32::NAN].iter().is_sorted());\n```","links":{},"attrs":["#[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2995:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:605:2428":{"id":"0:605:2428","crate_id":0,"name":"with_capacity_and_hasher_in","span":{"filename":"src/map.rs","begin":[484,4],"end":[489,5]},"visibility":"public","docs":"Creates an empty `HashMap` with the specified capacity, using `hash_builder`\nto hash the keys. It will be allocated with the given allocator.\n\nThe hash map will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash map will not allocate.\n\nWarning: `hash_builder` is normally randomly generated, and\nis designed to allow HashMaps to be resistant to attacks that\ncause many collisions and very poor performance. Setting it\nmanually using this function can expose a DoS attack vector.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut map = HashMap::with_capacity_and_hasher(10, s);\nmap.insert(1, 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}],["hash_builder",{"kind":"generic","inner":"S"}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3514:186":{"id":"1:3514:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `/` operator.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:13702:2041":{"id":"1:13702:2041","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11166:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11166:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:2270:1655":{"id":"0:2270:1655","crate_id":0,"name":"TryReserveError","span":{"filename":"src/lib.rs","begin":[122,0],"end":[132,1]},"visibility":"public","docs":"The error type for `try_reserve` methods.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:2271:1658","0:2273:1660"],"impls":["a:1:9496:4748-0:2270:1655","a:1:3414:228-0:2270:1655","a:1:3469:4530-0:2270:1655","a:1:3402:220-0:2270:1655","a:1:9495:4749-0:2270:1655","b:1:3235-0:2270:1655","b:1:2891-0:2270:1655","b:1:3245-0:2270:1655","b:1:4203-0:2270:1655","b:1:3239-0:2270:1655","b:1:2888-0:2270:1655","b:1:3250-0:2270:1655","b:4:862-0:2270:1655","0:2275","0:2277","0:2278","0:2280","0:2281","0:2283"]}},"1:13809:18466":{"id":"1:13809:18466","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5547:18466"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:53446:11128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3254:1456":{"id":"1:3254:1456","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:3219:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8943:9999":{"id":"1:8943:9999","crate_id":1,"name":"fold","span":null,"visibility":"default","docs":"Folds every element into an accumulator by applying an operation,\nreturning the final result.\n\n`fold()` takes two arguments: an initial value, and a closure with two\narguments: an 'accumulator', and an element. The closure returns the value that\nthe accumulator should have for the next iteration.\n\nThe initial value is the value the accumulator will have on the first\ncall.\n\nAfter applying this closure to every element of the iterator, `fold()`\nreturns the accumulator.\n\nThis operation is sometimes called 'reduce' or 'inject'.\n\nFolding is useful whenever you have a collection of something, and want\nto produce a single value from it.\n\nNote: `fold()`, and similar methods that traverse the entire iterator,\nmight not terminate for infinite iterators, even on traits for which a\nresult is determinable in finite time.\n\nNote: [`reduce()`] can be used to use the first element as the initial\nvalue, if the accumulator type and item type is the same.\n\nNote: `fold()` combines elements in a *left-associative* fashion. For associative\noperators like `+`, the order the elements are combined in is not important, but for non-associative\noperators like `-` the order will affect the final result.\nFor a *right-associative* version of `fold()`, see [`DoubleEndedIterator::rfold()`].\n\n# Note to Implementors\n\nSeveral of the other (forward) methods have default implementations in\nterms of this one, so try to implement this explicitly if it can\ndo something better than the default `for` loop implementation.\n\nIn particular, try to have this call `fold()` on the internal parts\nfrom which this iterator is composed.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\n// the sum of all of the elements of the array\nlet sum = a.iter().fold(0, |acc, x| acc + x);\n\nassert_eq!(sum, 6);\n```\n\nLet's walk through each step of the iteration here:\n\n| element | acc | x | result |\n|---------|-----|---|--------|\n|         | 0   |   |        |\n| 1       | 0   | 1 | 1      |\n| 2       | 1   | 2 | 3      |\n| 3       | 3   | 3 | 6      |\n\nAnd so, our final result, `6`.\n\nThis example demonstrates the left-associative nature of `fold()`:\nit builds a string, starting with an initial value\nand continuing with each element from the front until the back:\n\n```\nlet numbers = [1, 2, 3, 4, 5];\n\nlet zero = \"0\".to_string();\n\nlet result = numbers.iter().fold(zero, |acc, &x| {\n    format!(\"({acc} + {x})\")\n});\n\nassert_eq!(result, \"(((((0 + 1) + 2) + 3) + 4) + 5)\");\n```\nIt's common for people who haven't used iterators a lot to\nuse a `for` loop with a list of things to build up a result. Those\ncan be turned into `fold()`s:\n\n[`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n\n```\nlet numbers = [1, 2, 3, 4, 5];\n\nlet mut result = 0;\n\n// for loop:\nfor i in &numbers {\n    result = result + i;\n}\n\n// fold:\nlet result2 = numbers.iter().fold(0, |acc, &x| acc + x);\n\n// they're the same\nassert_eq!(result, result2);\n```\n\n[`reduce()`]: Iterator::reduce","links":{"Iterator::reduce":"1:8946:10000","`DoubleEndedIterator::rfold()`":"1:8699:9974"},"attrs":["#[doc(alias = \"inject\", alias = \"foldl\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3933:380":{"id":"1:3933:380","crate_id":1,"name":"branch","span":null,"visibility":"default","docs":"Used in `?` to decide whether the operator should produce a value\n(because this returned [`ControlFlow::Continue`])\nor propagate a value back to the caller\n(because this returned [`ControlFlow::Break`]).\n\n# Examples\n\n```\n#![feature(try_trait_v2)]\nuse std::ops::{ControlFlow, Try};\n\nassert_eq!(Ok::<_, String>(3).branch(), ControlFlow::Continue(3));\nassert_eq!(Err::<String, _>(3).branch(), ControlFlow::Break(Err(3)));\n\nassert_eq!(Some(3).branch(), ControlFlow::Continue(3));\nassert_eq!(None::<String>.branch(), ControlFlow::Break(None));\n\nassert_eq!(ControlFlow::<String, _>::Continue(3).branch(), ControlFlow::Continue(3));\nassert_eq!(\n    ControlFlow::<_, String>::Break(3).branch(),\n    ControlFlow::Break(ControlFlow::Break(3)),\n);\n```","links":{"`ControlFlow::Break`":"1:49339:99","`ControlFlow::Continue`":"1:49336:106"},"attrs":["#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ControlFlow","id":"1:49333:4663","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3219:236":{"id":"1:3219:236","crate_id":1,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3221:128","1:3222:1456"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8966:10002":{"id":"1:8966:10002","crate_id":1,"name":"find_map","span":null,"visibility":"default","docs":"Applies function to the elements of iterator and returns\nthe first non-none result.\n\n`iter.find_map(f)` is equivalent to `iter.filter_map(f).next()`.\n\n# Examples\n\n```\nlet a = [\"lol\", \"NaN\", \"2\", \"5\"];\n\nlet first_number = a.iter().find_map(|s| s.parse().ok());\n\nassert_eq!(first_number, Some(2));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3245-0:2244:1804":{"id":"b:1:3245-0:2244:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3219:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3215:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3248:128","1:3249:1457"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3208:1899":{"id":"1:3208:1899","crate_id":1,"name":"as_mut","span":null,"visibility":"default","docs":"Converts this type into a mutable reference of the (usually inferred) input type.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1539":{"id":"0:1539","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[6333,0],"end":[6349,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8646:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1544:696"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3245-0:845:2474":{"id":"b:1:3245-0:845:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3219:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3215:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3248:128","1:3249:1457"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:23077:41050":{"id":"1:23077:41050","crate_id":1,"name":"saturating_neg","span":null,"visibility":"default","docs":"Lanewise saturating negation, implemented in Rust.\nAs neg(), except the MIN value becomes MAX instead of itself.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdInt};\nuse core::i32::{MIN, MAX};\nlet x = Simd::from_array([MIN, -2, 3, MAX]);\nlet unsat = -x;\nlet sat = x.saturating_neg();\nassert_eq!(unsat, Simd::from_array([MIN, 2, -3, MIN + 1]));\nassert_eq!(sat, Simd::from_array([MAX, 2, -3, MIN + 1]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1240:2676":{"id":"0:1240:2676","crate_id":0,"name":"VacantEntryRef","span":{"filename":"src/map.rs","begin":[4501,0],"end":[4505,1]},"visibility":"public","docs":"A view into a vacant entry in a `HashMap`.\nIt is part of the [`EntryRef`] enum.\n\n[`EntryRef`]: enum.EntryRef.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap, VacantEntryRef};\n\nlet mut map = HashMap::<String, i32>::new();\n\nlet entry_v: VacantEntryRef<_, _, _, _> = match map.entry_ref(\"a\") {\n    EntryRef::Vacant(view) => view,\n    EntryRef::Occupied(_) => unreachable!(),\n};\nentry_v.insert(10);\nassert!(map[\"a\"] == 10 && map.len() == 1);\n\n// Nonexistent key (insert and update)\nmatch map.entry_ref(\"b\") {\n    EntryRef::Occupied(_) => unreachable!(),\n    EntryRef::Vacant(view) => {\n        let value = view.insert(2);\n        assert_eq!(*value, 2);\n        *value = 20;\n    }\n}\nassert!(map[\"b\"] == 20 && map.len() == 2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:710:2914":{"id":"0:710:2914","crate_id":0,"name":"raw_entry","span":{"filename":"src/map.rs","begin":[2012,4],"end":[2014,5]},"visibility":"public","docs":"Creates a raw immutable entry builder for the HashMap.\n\nRaw entries provide the lowest level of control for searching and\nmanipulating a map. They must be manually initialized with a hash and\nthen manually searched.\n\nThis is useful for\n* Hash memoization\n* Using a search key that doesn't work with the Borrow trait\n* Using custom comparison logic without newtype wrappers\n\nUnless you are in such a situation, higher-level and more foolproof APIs like\n`get` should be preferred.\n\nImmutable raw entries have very limited use; you might instead want `raw_entry_mut`.\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\", 100), (\"b\", 200), (\"c\", 300)]);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nfor k in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"] {\n    let hash = compute_hash(map.hasher(), k);\n    let v = map.get(&k).cloned();\n    let kv = v.as_ref().map(|v| (&k, v));\n\n    println!(\"Key: {} and value: {:?}\", k, v);\n\n    assert_eq!(map.raw_entry().from_key(&k), kv);\n    assert_eq!(map.raw_entry().from_hash(hash, |q| *q == k), kv);\n    assert_eq!(map.raw_entry().from_key_hashed_nocheck(hash, &k), kv);\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RawEntryBuilder","id":"0:981:2915","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13700:42204":{"id":"1:13700:42204","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11166:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11166:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3414:228-0:1716:146":{"id":"a:1:3414:228-0:1716:146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1174:1585":{"id":"0:1174:1585","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[4338,13],"end":[4338,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"OccupiedEntryRef","id":"0:1205:2673","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"Q"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},"0:1726:422":{"id":"0:1726:422","crate_id":0,"name":"clone_from","span":{"filename":"src/set.rs","begin":[126,4],"end":[128,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2946:188":{"id":"1:2946:188","crate_id":1,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2948:616","1:2949:923"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:2194":{"id":"0:2194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::map::HashMap","name":"HashMap","id":"0:539:144","glob":false}},"a:1:3402:220-0:539:144":{"id":"a:1:3402:220-0:539:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3402:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3402:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3402:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:3402:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3402:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1279":{"id":"0:1279","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4570,0],"end":[4600,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:1285:2170","0:1286:2171","0:1287:783"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:23109:1262":{"id":"1:23109:1262","crate_id":1,"name":"saturating_sub","span":null,"visibility":"default","docs":"Lanewise saturating subtract.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdUint};\nuse core::u32::MAX;\nlet x = Simd::from_array([2, 1, 0, MAX]);\nlet max = Simd::splat(MAX);\nlet unsat = x - max;\nlet sat = x.saturating_sub(max);\nassert_eq!(unsat, Simd::from_array([3, 2, 1, 0]));\nassert_eq!(sat, Simd::splat(0));","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["second",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8993:4929":{"id":"1:8993:4929","crate_id":1,"name":"max_by_key","span":null,"visibility":"default","docs":"Returns the element that gives the maximum value from the\nspecified function.\n\nIf several elements are equally maximum, the last element is\nreturned. If the iterator is empty, [`None`] is returned.\n\n# Examples\n\n```\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(*a.iter().max_by_key(|x| x.abs()).unwrap(), -10);\n```","links":{"`None`":"1:51151:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2982:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:552:422":{"id":"0:552:422","crate_id":0,"name":"clone_from","span":{"filename":"src/map.rs","begin":[201,4],"end":[206,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3676:2169":{"id":"1:3676:2169","crate_id":1,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3677:590"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10533:4589":{"id":"1:10533:4589","crate_id":1,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10534:672"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1748:2579":{"id":"0:1748:2579","crate_id":0,"name":"drain_filter","span":{"filename":"src/set.rs","begin":[354,4],"end":[365,5]},"visibility":"public","docs":"Drains elements which are true under the given predicate,\nand returns an iterator over the removed items.\n\nIn other words, move all elements `e` such that `f(&e)` returns `true` out\ninto another iterator.\n\nWhen the returned DrainedFilter is dropped, any remaining elements that satisfy\nthe predicate are dropped from the set.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<i32> = (0..8).collect();\nlet drained: HashSet<i32> = set.drain_filter(|v| v % 2 == 0).collect();\n\nlet mut evens = drained.into_iter().collect::<Vec<_>>();\nlet mut odds = set.into_iter().collect::<Vec<_>>();\nevens.sort();\nodds.sort();\n\nassert_eq!(evens, vec![0, 2, 4, 6]);\nassert_eq!(odds, vec![1, 3, 5, 7]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1892:2580","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1785:4129":{"id":"0:1785:4129","crate_id":0,"name":"get_or_insert_owned","span":{"filename":"src/set.rs","begin":[857,4],"end":[869,5]},"visibility":"public","docs":"Inserts an owned copy of the given `value` into the set if it is not\npresent, then returns a reference to the value in the set.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]\n    .iter().map(|&pet| pet.to_owned()).collect();\n\nassert_eq!(set.len(), 3);\nfor &pet in &[\"cat\", \"dog\", \"fish\"] {\n    let value = set.get_or_insert_owned(pet);\n    assert_eq!(value, pet);\n}\nassert_eq!(set.len(), 4); // a new \"fish\" was inserted\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"4:858:231","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23075:37189":{"id":"1:23075:37189","crate_id":1,"name":"abs","span":null,"visibility":"default","docs":"Lanewise absolute value, implemented in Rust.\nEvery lane becomes its absolute value.\n\n# Examples\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{Simd, SimdInt};\nuse core::i32::{MIN, MAX};\nlet xs = Simd::from_array([MIN, MIN +1, -5, 0]);\nassert_eq!(xs.abs(), Simd::from_array([MIN, MAX, 5, 0]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:973:3122":{"id":"0:973:3122","crate_id":0,"name":"RawVacantEntryMut","span":{"filename":"src/map.rs","begin":[3044,0],"end":[3047,1]},"visibility":"public","docs":"A view into a vacant entry in a `HashMap`.\nIt is part of the [`RawEntryMut`] enum.\n\n[`RawEntryMut`]: enum.RawEntryMut.html\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut, RawVacantEntryMut};\n\nlet mut map = HashMap::<&str, i32>::new();\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet raw_v: RawVacantEntryMut<_, _, _> = match map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(view) => view,\n    RawEntryMut::Occupied(_) => unreachable!(),\n};\nraw_v.insert(\"a\", 10);\nassert!(map[&\"a\"] == 10 && map.len() == 1);\n\n// Nonexistent key (insert and update)\nlet hash = compute_hash(map.hasher(), &\"b\");\nmatch map.raw_entry_mut().from_key_hashed_nocheck(hash, &\"b\") {\n    RawEntryMut::Occupied(_) => unreachable!(),\n    RawEntryMut::Vacant(view) => {\n        let (k, value) = view.insert(\"b\", 2);\n        assert_eq!((*k, *value), (\"b\", 2));\n        *value = 20;\n    }\n}\nassert!(map[&\"b\"] == 20 && map.len() == 2);\n\nlet hash = compute_hash(map.hasher(), &\"c\");\nmatch map.raw_entry_mut().from_hash(hash, |q| *q == \"c\") {\n    RawEntryMut::Occupied(_) => unreachable!(),\n    RawEntryMut::Vacant(view) => {\n        assert_eq!(view.insert(\"c\", 30), (&mut \"c\", &mut 30));\n    }\n}\nassert!(map[&\"c\"] == 30 && map.len() == 3);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:2246":{"id":"0:2246","crate_id":0,"name":null,"span":{"filename":"src/raw/alloc.rs","begin":[42,13],"end":[42,17]},"visibility":{"restricted":{"parent":"0:62:1638","path":"::raw::alloc::inner"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:3412:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3597:1268":{"id":"1:3597:1268","crate_id":1,"name":"shl_assign","span":null,"visibility":"default","docs":"Performs the `<<=` operation.\n\n# Examples\n\n```\nlet mut x: u8 = 5;\nx <<= 1;\nassert_eq!(x, 10);\n\nlet mut x: u8 = 1;\nx <<= 1;\nassert_eq!(x, 2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13336:9970":{"id":"1:13336:9970","crate_id":1,"name":"next_back","span":null,"visibility":"default","docs":"Performs the next search step starting from the back.\n\n- Returns [`Match(a, b)`][SearchStep::Match] if `haystack[a..b]`\n  matches the pattern.\n- Returns [`Reject(a, b)`][SearchStep::Reject] if `haystack[a..b]`\n  can not match the pattern, even partially.\n- Returns [`Done`][SearchStep::Done] if every byte of the haystack\n  has been visited\n\nThe stream of [`Match`][SearchStep::Match] and\n[`Reject`][SearchStep::Reject] values up to a [`Done`][SearchStep::Done]\nwill contain index ranges that are adjacent, non-overlapping,\ncovering the whole haystack, and laying on utf8 boundaries.\n\nA [`Match`][SearchStep::Match] result needs to contain the whole matched\npattern, however [`Reject`][SearchStep::Reject] results may be split up\ninto arbitrary many adjacent fragments. Both ranges may have zero length.\n\nAs an example, the pattern `\"aaa\"` and the haystack `\"cbaaaaab\"`\nmight produce the stream\n`[Reject(7, 8), Match(4, 7), Reject(1, 4), Reject(0, 1)]`.","links":{"SearchStep::Reject":"1:53523:12731","SearchStep::Match":"1:53519:10023","SearchStep::Done":"1:53527:12709"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SearchStep","id":"1:53518:10822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:2986:9969":{"id":"1:2986:9969","crate_id":1,"name":"clamp","span":null,"visibility":"default","docs":"Restrict a value to a certain interval.\n\nReturns `max` if `self` is greater than `max`, and `min` if `self` is\nless than `min`. Otherwise this returns `self`.\n\n# Panics\n\nPanics if `min > max`.\n\n# Examples\n\n```\nassert!((-3).clamp(-2, 1) == -2);\nassert!(0.clamp(-2, 1) == 0);\nassert!(2.clamp(-2, 1) == 1);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["min",{"kind":"generic","inner":"Self"}],["max",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2995:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2278":{"id":"0:2278","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,16],"end":[121,25]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2946:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2279:616"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3286:116":{"id":"1:3286:116","crate_id":1,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3287:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3528:3847":{"id":"1:3528:3847","crate_id":1,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3530:275"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:629:1983":{"id":"0:629:1983","crate_id":0,"name":"try_reserve","span":{"filename":"src/map.rs","begin":[1063,4],"end":[1066,5]},"visibility":"public","docs":"Tries to reserve capacity for at least `additional` more elements to be inserted\nin the given `HashMap<K,V>`. The collection may reserve more space to avoid\nfrequent reallocations.\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, isize> = HashMap::new();\n// Map is empty and doesn't allocate memory\nassert_eq!(map.capacity(), 0);\n\nmap.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n\n// And now map can hold at least 10 elements\nassert!(map.capacity() >= 10);\n```\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned:\n```\n# fn test() {\nuse hashbrown::HashMap;\nuse hashbrown::TryReserveError;\nlet mut map: HashMap<i32, i32> = HashMap::new();\n\nmatch map.try_reserve(usize::MAX) {\n    Err(error) => match error {\n        TryReserveError::CapacityOverflow => {}\n        _ => panic!(\"TryReserveError::AllocError ?\"),\n    },\n    _ => panic!(),\n}\n# }\n# fn main() {\n#     #[cfg(not(miri))]\n#     test()\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1819:672":{"id":"0:1819:672","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1175,4],"end":[1177,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10484:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10473:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:719":{"id":"0:719","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2095,0],"end":[2102,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:766:2511":{"id":"0:766:2511","crate_id":0,"name":"IterMut","span":{"filename":"src/map.rs","begin":[2270,0],"end":[2274,1]},"visibility":"public","docs":"A mutable iterator over the entries of a `HashMap` in arbitrary order.\nThe iterator element type is `(&'a K, &'a mut V)`.\n\nThis `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`iter_mut`]: struct.HashMap.html#method.iter_mut\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<_, _> = [(1, \"One\".to_owned()), (2, \"Two\".into())].into();\n\nlet mut iter = map.iter_mut();\niter.next().map(|(_, v)| v.push_str(\" Mississippi\"));\niter.next().map(|(_, v)| v.push_str(\" Mississippi\"));\n\n// It is fused iterator\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), None);\n\nassert_eq!(map.get(&1).unwrap(), &\"One Mississippi\".to_owned());\nassert_eq!(map.get(&2).unwrap(), &\"Two Mississippi\".to_owned());\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:591:1922":{"id":"0:591:1922","crate_id":0,"name":"with_capacity_in","span":{"filename":"src/map.rs","begin":[346,4],"end":[348,5]},"visibility":"public","docs":"Creates an empty `HashMap` with the specified capacity using the given allocator.\n\nThe hash map will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash map will not allocate.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23738:40531":{"id":"1:23738:40531","crate_id":1,"name":"simd_min","span":null,"visibility":"default","docs":"Returns the lane-wise minimum with `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:2909:422":{"id":"1:2909:422","crate_id":1,"name":"clone_from","span":null,"visibility":"default","docs":"Performs copy-assignment from `source`.\n\n`a.clone_from(&b)` is equivalent to `a = b.clone()` in functionality,\nbut can be overridden to reuse the resources of `a` to avoid unnecessary\nallocations.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1829:696":{"id":"0:1829:696","crate_id":0,"name":"from_iter","span":{"filename":"src/set.rs","begin":[1196,4],"end":[1200,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1304:783":{"id":"0:1304:783","crate_id":0,"name":"into_iter","span":{"filename":"src/map.rs","begin":[4662,4],"end":[4666,5]},"visibility":"default","docs":"Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(\"a\", 1), (\"b\", 2), (\"c\", 3)].into();\n\n// Not possible with .iter()\nlet mut vec: Vec<(&str, i32)> = map.into_iter().collect();\n// The `IntoIter` iterator produces items in arbitrary order, so\n// the items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(\"a\", 1), (\"b\", 2), (\"c\", 3)]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:779:2171","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1552:3686":{"id":"0:1552:3686","crate_id":0,"name":"extend","span":{"filename":"src/map.rs","begin":[6395,4],"end":[6410,5]},"visibility":"default","docs":"Inserts all new key-values from the iterator to existing `HashMap<K, V, S, A>`.\nReplace values with existing keys with new values returned from the iterator.\n\n# Examples\n\n```\nuse hashbrown::hash_map::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, 100);\n\nlet some_iter = [(1, 1), (2, 2)].into_iter();\nmap.extend(some_iter);\n// Replace values with existing keys with new values returned from the iterator.\n// So that the map.get(&1) doesn't return Some(&100).\nassert_eq!(map.get(&1), Some(&1));\n\nlet some_vec: Vec<_> = vec![(3, 3), (4, 4)];\nmap.extend(some_vec);\n\nlet some_arr = [(5, 5), (6, 6)];\nmap.extend(some_arr);\nlet old_map_len = map.len();\n\n// You can also extend from another HashMap\nlet mut new_map = HashMap::new();\nnew_map.extend(map);\nassert_eq!(new_map.len(), old_map_len);\n\nlet mut vec: Vec<_> = new_map.into_iter().collect();\n// The `IntoIter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:859:3398":{"id":"4:859:3398","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":"The resulting type after obtaining ownership.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"1:13786:42437":{"id":"1:13786:42437","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:61603:4394","self::pattern":"1:13309:10820"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3583:4645":{"id":"1:3583:4645","crate_id":1,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3585:363"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:24040:10764":{"id":"1:24040:10764","crate_id":1,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:24041:10893"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:24036:10815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3412:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3722:212":{"id":"1:3722:212","crate_id":1,"name":"Return","span":null,"visibility":"default","docs":"The type of value this generator returns.\n\nThis corresponds to the type returned from a generator either with a\n`return` statement or implicitly as the last expression of a generator\nliteral. For example futures would use this as `Result<T, E>` as it\nrepresents a completed future.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1555":{"id":"0:1555","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[6436,0],"end":[6497,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":"Inserts all new key-values from the iterator and replaces values with existing\nkeys with new values returned from the iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3412:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3412:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:8659:3665","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1561:3686"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3688:389":{"id":"1:3688:389","crate_id":1,"name":"call_once","span":null,"visibility":"default","docs":"Performs the call operation.","links":{},"attrs":["#[unstable(feature = \"fn_traits\", issue = \"29625\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["args",{"kind":"generic","inner":"Args"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"FnOnce","id":"1:3685:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":false}},"1:8197:41597":{"id":"1:8197:41597","crate_id":1,"name":"forward_unchecked","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *successor*\nof `self` `count` times.\n\n# Safety\n\nIt is undefined behavior for this operation to overflow the\nrange of values supported by `Self`. If you cannot guarantee that this\nwill not overflow, use `forward` or `forward_checked` instead.\n\n# Invariants\n\nFor any `a`:\n\n* if there exists `b` such that `b > a`, it is safe to call `Step::forward_unchecked(a, 1)`\n* if there exists `b`, `n` such that `steps_between(&a, &b) == Some(n)`,\n  it is safe to call `Step::forward_unchecked(a, m)` for any `m <= n`.\n\nFor any `a` and `n`, where no overflow occurs:\n\n* `Step::forward_unchecked(a, n)` is equivalent to `Step::forward(a, n)`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3217:128":{"id":"1:3217:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":"The type returned in the event of a conversion error.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:10544:672":{"id":"1:10544:672","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10484:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:52212:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:9495:4749-0:845:2474":{"id":"a:1:9495:4749-0:845:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9495:4749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"4:866:10635":{"id":"4:866:10635","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3250-0:539:144":{"id":"b:1:3250-0:539:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3209:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3219:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3253:128","1:3254:1456"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1114:2661":{"id":"0:1114:2661","crate_id":0,"name":"Vacant","span":{"filename":"src/map.rs","begin":[4142,4],"end":[4142,39]},"visibility":"default","docs":"A vacant entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap};\nlet mut map: HashMap<&str, i32> = HashMap::new();\n\nmatch map.entry(\"a\") {\n    Entry::Occupied(_) => unreachable!(),\n    Entry::Vacant(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:1116:1585"]}},"1:8881:2032":{"id":"1:8881:2032","crate_id":1,"name":"enumerate","span":null,"visibility":"default","docs":"Creates an iterator which gives the current iteration count as well as\nthe next value.\n\nThe iterator returned yields pairs `(i, val)`, where `i` is the\ncurrent index of iteration and `val` is the value returned by the\niterator.\n\n`enumerate()` keeps its count as a [`usize`]. If you want to count by a\ndifferent sized integer, the [`zip`] function provides similar\nfunctionality.\n\n# Overflow Behavior\n\nThe method does no guarding against overflows, so enumerating more than\n[`usize::MAX`] elements either produces the wrong result or panics. If\ndebug assertions are enabled, a panic is guaranteed.\n\n# Panics\n\nThe returned iterator might panic if the to-be-returned index would\noverflow a [`usize`].\n\n[`zip`]: Iterator::zip\n\n# Examples\n\n```\nlet a = ['a', 'b', 'c'];\n\nlet mut iter = a.iter().enumerate();\n\nassert_eq!(iter.next(), Some((0, &'a')));\nassert_eq!(iter.next(), Some((1, &'b')));\nassert_eq!(iter.next(), Some((2, &'c')));\nassert_eq!(iter.next(), None);\n```","links":{"`usize`":"1:61626:4414","Iterator::zip":"1:8863:4480","`usize::MAX`":"1:32343:2086"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Enumerate","id":"1:50213:4492","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23733:1308":{"id":"1:23733:1308","crate_id":1,"name":"simd_le","span":null,"visibility":"default","docs":"Test if each lane is less than or equal to the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"1:23143:10957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23031:41725":{"id":"1:23031:41725","crate_id":1,"name":"is_finite","span":null,"visibility":"default","docs":"Returns true for each lane if its value is neither infinite nor `NaN`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23017:10956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1872:186":{"id":"0:1872:186","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1357,4],"end":[1357,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"1:23021:41716":{"id":"1:23021:41716","crate_id":1,"name":"to_bits","span":null,"visibility":"default","docs":"Raw transmutation to an unsigned integer vector type with the\nsame size and number of lanes.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23017:10956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23107:40917":{"id":"1:23107:40917","crate_id":1,"name":"Scalar","span":null,"visibility":"default","docs":"Scalar type contained by this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:3580:1270":{"id":"1:3580:1270","crate_id":1,"name":"shr","span":null,"visibility":"default","docs":"Performs the `>>` operation.\n\n# Examples\n\n```\nassert_eq!(5u8 >> 1, 2);\nassert_eq!(2u8 >> 1, 1);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Shr","id":"1:3577:4644","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3848:4653":{"id":"1:3848:4653","crate_id":1,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3850:41878","1:3851:41879","1:3852:3780"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"b:1:3235-0:2270:1655":{"id":"b:1:3235-0:2270:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3212:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3209:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3238:3401"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1111:2659":{"id":"0:1111:2659","crate_id":0,"name":"Occupied","span":{"filename":"src/map.rs","begin":[4127,4],"end":[4127,43]},"visibility":"default","docs":"An occupied entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap};\nlet mut map: HashMap<_, _> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.entry(\"a\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:1113:1585"]}},"1:13804:42442":{"id":"1:13804:42442","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10546:672":{"id":"1:10546:672","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10484:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:52212:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23034:41053":{"id":"1:23034:41053","crate_id":1,"name":"signum","span":null,"visibility":"default","docs":"Replaces each lane with a number that represents its sign.\n\n* `1.0` if the number is positive, `+0.0`, or `INFINITY`\n* `-1.0` if the number is negative, `-0.0`, or `NEG_INFINITY`\n* `NAN` if the number is `NAN`","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8865:9980":{"id":"1:8865:9980","crate_id":1,"name":"intersperse","span":null,"visibility":"default","docs":"Creates a new iterator which places a copy of `separator` between adjacent\nitems of the original iterator.\n\nIn case `separator` does not implement [`Clone`] or needs to be\ncomputed every time, use [`intersperse_with`].\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_intersperse)]\n\nlet mut a = [0, 1, 2].iter().intersperse(&100);\nassert_eq!(a.next(), Some(&0));   // The first element from `a`.\nassert_eq!(a.next(), Some(&100)); // The separator.\nassert_eq!(a.next(), Some(&1));   // The next element from `a`.\nassert_eq!(a.next(), Some(&100)); // The separator.\nassert_eq!(a.next(), Some(&2));   // The last element from `a`.\nassert_eq!(a.next(), None);       // The iterator is finished.\n```\n\n`intersperse` can be very useful to join an iterator's items using a common element:\n```\n#![feature(iter_intersperse)]\n\nlet hello = [\"Hello\", \"World\", \"!\"].iter().copied().intersperse(\" \").collect::<String>();\nassert_eq!(hello, \"Hello World !\");\n```\n\n[`Clone`]: crate::clone::Clone\n[`intersperse_with`]: Iterator::intersperse_with","links":{"crate::clone::Clone":"1:2907:105","Iterator::intersperse_with":"1:8866:9981"},"attrs":["#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue =\n\"79524\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["separator",{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Intersperse","id":"1:50273:4507","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3574:1267":{"id":"1:3574:1267","crate_id":1,"name":"shl","span":null,"visibility":"default","docs":"Performs the `<<` operation.\n\n# Examples\n\n```\nassert_eq!(5u8 << 1, 10);\nassert_eq!(1u8 << 1, 2);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Shl","id":"1:3571:4643","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3550:186":{"id":"1:3550:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `!` operator.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:13332:40779":{"id":"1:13332:40779","crate_id":1,"name":"next_match","span":null,"visibility":"default","docs":"Finds the next [`Match`][SearchStep::Match] result. See [`next()`][Searcher::next].\n\nUnlike [`next()`][Searcher::next], there is no guarantee that the returned ranges\nof this and [`next_reject`][Searcher::next_reject] will overlap. This will return\n`(start_match, end_match)`, where start_match is the index of where\nthe match begins, and end_match is the index after the end of the match.","links":{"SearchStep::Match":"1:53519:10023","Searcher::next":"1:13331:949","Searcher::next_reject":"1:13333:40780"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:81:2149":{"id":"0:81:2149","crate_id":0,"name":"deallocate","span":{"filename":"src/raw/alloc.rs","begin":[50,8],"end":[52,9]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2417:1796","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:54116:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1780:3780":{"id":"0:1780:3780","crate_id":0,"name":"contains","span":{"filename":"src/set.rs","begin":[774,4],"end":[780,5]},"visibility":"public","docs":"Returns `true` if the set contains a value.\n\nThe value may be any borrowed form of the set's value type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe value type.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert_eq!(set.contains(&1), true);\nassert_eq!(set.contains(&4), false);\n```\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:779:2171":{"id":"0:779:2171","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[2322,0],"end":[2324,1]},"visibility":"public","docs":"An owning iterator over the entries of a `HashMap` in arbitrary order.\nThe iterator element type is `(K, V)`.\n\nThis `struct` is created by the [`into_iter`] method on [`HashMap`]\n(provided by the [`IntoIterator`] trait). See its documentation for more.\nThe map cannot be used after calling that method.\n\n[`into_iter`]: struct.HashMap.html#method.into_iter\n[`HashMap`]: struct.HashMap.html\n[`IntoIterator`]: https://doc.rust-lang.org/core/iter/trait.IntoIterator.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut iter = map.into_iter();\nlet mut vec = vec![iter.next(), iter.next(), iter.next()];\n\n// The `IntoIter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some((1, \"a\")), Some((2, \"b\")), Some((3, \"c\"))]);\n\n// It is fused iterator\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:1845":{"id":"0:1845","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1248,0],"end":[1270,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:3412:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:8659:3665","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1850:3686"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8691:121":{"id":"1:8691:121","crate_id":1,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8692:9970","1:8693:9971","1:8694:9972","1:8695:9973","1:8699:9974","1:8702:9975"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:592":{"id":"0:592","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[351,0],"end":[425,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:596:2444","0:597:2424"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8900:9990":{"id":"1:8900:9990","crate_id":1,"name":"fuse","span":null,"visibility":"default","docs":"Creates an iterator which ends after the first [`None`].\n\nAfter an iterator returns [`None`], future calls may or may not yield\n[`Some(T)`] again. `fuse()` adapts an iterator, ensuring that after a\n[`None`] is given, it will always return [`None`] forever.\n\nNote that the [`Fuse`] wrapper is a no-op on iterators that implement\nthe [`FusedIterator`] trait. `fuse()` may therefore behave incorrectly\nif the [`FusedIterator`] trait is improperly implemented.\n\n[`Some(T)`]: Some\n[`FusedIterator`]: crate::iter::FusedIterator\n\n# Examples\n\nBasic usage:\n\n```\n// an iterator which alternates between Some and None\nstruct Alternate {\n    state: i32,\n}\n\nimpl Iterator for Alternate {\n    type Item = i32;\n\n    fn next(&mut self) -> Option<i32> {\n        let val = self.state;\n        self.state = self.state + 1;\n\n        // if it's even, Some(i32), else None\n        if val % 2 == 0 {\n            Some(val)\n        } else {\n            None\n        }\n    }\n}\n\nlet mut iter = Alternate { state: 0 };\n\n// we can see our iterator going back and forth\nassert_eq!(iter.next(), Some(0));\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), None);\n\n// however, once we fuse it...\nlet mut iter = iter.fuse();\n\nassert_eq!(iter.next(), Some(4));\nassert_eq!(iter.next(), None);\n\n// it will always return `None` after the first time.\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), None);\n```","links":{"Some":"1:51153:223","crate::iter::FusedIterator":"1:9118:1791","`None`":"1:51151:179","`Fuse`":"1:50255:4496"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Fuse","id":"1:50255:4496","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:618:2579":{"id":"0:618:2579","crate_id":0,"name":"drain_filter","span":{"filename":"src/map.rs","begin":[889,4],"end":[900,5]},"visibility":"public","docs":"Drains elements which are true under the given predicate,\nand returns an iterator over the removed items.\n\nIn other words, move all pairs `(k, v)` such that `f(&k, &mut v)` returns `true` out\ninto another iterator.\n\nNote that `drain_filter` lets you mutate every value in the filter closure, regardless of\nwhether you choose to keep or remove it.\n\nWhen the returned DrainedFilter is dropped, any remaining elements that satisfy\nthe predicate are dropped from the table.\n\nIt is unspecified how many more elements will be subjected to the closure\nif a panic occurs in the closure, or a panic occurs while dropping an element,\nor if the `DrainFilter` value is leaked.\n\nKeeps the allocated memory for reuse.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x)).collect();\nlet capacity_before_drain_filter = map.capacity();\nlet drained: HashMap<i32, i32> = map.drain_filter(|k, _v| k % 2 == 0).collect();\n\nlet mut evens = drained.keys().cloned().collect::<Vec<_>>();\nlet mut odds = map.keys().cloned().collect::<Vec<_>>();\nevens.sort();\nodds.sort();\n\nassert_eq!(evens, vec![0, 2, 4, 6]);\nassert_eq!(odds, vec![1, 3, 5, 7]);\n// Map capacity is equal to old one.\nassert_eq!(map.capacity(), capacity_before_drain_filter);\n\nlet mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x)).collect();\n\n{   // Iterator is dropped without being consumed.\n    let d = map.drain_filter(|k, _v| k % 2 != 0);\n}\n\n// But the map lens have been reduced by half\n// even if we do not use DrainFilter iterator.\nassert_eq!(map.len(), 4);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:882:2580","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3310:128":{"id":"1:3310:128","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3311:2157","1:3313:41304","1:3314:392","1:3315:41305"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10524:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"1:10531:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:610:2490":{"id":"0:610:2490","crate_id":0,"name":"values_mut","span":{"filename":"src/map.rs","begin":[626,4],"end":[630,5]},"visibility":"public","docs":"An iterator visiting all values mutably in arbitrary order.\nThe iterator element type is `&'a mut V`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\n\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\n\nfor val in map.values_mut() {\n    *val = *val + 10;\n}\n\nassert_eq!(map.len(), 3);\nlet mut vec: Vec<i32> = Vec::new();\n\nfor val in map.values() {\n    println!(\"{}\", val);\n    vec.push(*val);\n}\n\n// The `Values` iterator produces values in arbitrary order, so the\n// values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [11, 12, 13]);\n\nassert_eq!(map.len(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:930:2491","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6176:2073":{"id":"4:6176:2073","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:8508:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8508:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3526:929":{"id":"1:3526:929","crate_id":1,"name":"neg","span":null,"visibility":"default","docs":"Performs the unary `-` operation.\n\n# Example\n\n```\nlet x: i32 = 12;\nassert_eq!(-x, -12);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Neg","id":"1:3524:4636","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13687:42408":{"id":"1:13687:42408","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3558:186":{"id":"1:3558:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `&` operator.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"5:254:10528":{"id":"5:254:10528","crate_id":5,"name":"CallHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:255:44913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:750:693":{"id":"0:750:693","crate_id":0,"name":"from","span":{"filename":"src/map.rs","begin":[2188,4],"end":[2190,5]},"visibility":"default","docs":"# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map1 = HashMap::from([(1, 2), (3, 4)]);\nlet map2: HashMap<_, _> = [(1, 2), (3, 4)].into();\nassert_eq!(map1, map2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["arr",{"kind":"array","inner":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]},"len":"N"}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:817:2601":{"id":"0:817:2601","crate_id":0,"name":"IntoValues","span":{"filename":"src/map.rs","begin":[2428,0],"end":[2430,1]},"visibility":"public","docs":"An owning iterator over the values of a `HashMap` in arbitrary order.\nThe iterator element type is `V`.\n\nThis `struct` is created by the [`into_values`] method on [`HashMap`].\nSee its documentation for more. The map cannot be used after calling that method.\n\n[`into_values`]: struct.HashMap.html#method.into_values\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut values = map.into_values();\nlet mut vec = vec![values.next(), values.next(), values.next()];\n\n// The `IntoValues` iterator produces values in arbitrary order, so\n// the values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some(\"a\"), Some(\"b\"), Some(\"c\")]);\n\n// It is fused iterator\nassert_eq!(values.next(), None);\nassert_eq!(values.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:8946:10000":{"id":"1:8946:10000","crate_id":1,"name":"reduce","span":null,"visibility":"default","docs":"Reduces the elements to a single one, by repeatedly applying a reducing\noperation.\n\nIf the iterator is empty, returns [`None`]; otherwise, returns the\nresult of the reduction.\n\nThe reducing function is a closure with two arguments: an 'accumulator', and an element.\nFor iterators with at least one element, this is the same as [`fold()`]\nwith the first element of the iterator as the initial accumulator value, folding\nevery subsequent element into it.\n\n[`fold()`]: Iterator::fold\n\n# Example\n\n```\nlet reduced: i32 = (1..10).reduce(|acc, e| acc + e).unwrap();\nassert_eq!(reduced, 45);\n\n// Which is equivalent to doing it with `fold`:\nlet folded: i32 = (1..10).fold(0, |acc, e| acc + e);\nassert_eq!(reduced, folded);\n```","links":{"Iterator::fold":"1:8943:9999","`None`":"1:51151:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10531:120":{"id":"1:10531:120","crate_id":1,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10532:672"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:645:2703":{"id":"0:645:2703","crate_id":0,"name":"contains_key","span":{"filename":"src/map.rs","begin":[1331,4],"end":[1337,5]},"visibility":"public","docs":"Returns `true` if the map contains a value for the specified key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.contains_key(&1), true);\nassert_eq!(map.contains_key(&2), false);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["k",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3654:555":{"id":"1:3654:555","crate_id":1,"name":"deref","span":null,"visibility":"default","docs":"Dereferences the value.","links":{},"attrs":["#[must_use]","#[rustc_diagnostic_item = \"deref_method\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Deref","id":"1:3652:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:14524:2149":{"id":"1:14524:2149","crate_id":1,"name":"deallocate","span":null,"visibility":"default","docs":"Deallocates the memory referenced by `ptr`.\n\n# Safety\n\n* `ptr` must denote a block of memory [*currently allocated*] via this allocator, and\n* `layout` must [*fit*] that block of memory.\n\n[*currently allocated*]: #currently-allocated-memory\n[*fit*]: #memory-fitting","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2417:1796","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:54116:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3402:220-0:2244:1804":{"id":"a:1:3402:220-0:2244:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3402:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1824:693":{"id":"0:1824:693","crate_id":0,"name":"from","span":{"filename":"src/set.rs","begin":[1184,4],"end":[1186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["map",{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8866:9981":{"id":"1:8866:9981","crate_id":1,"name":"intersperse_with","span":null,"visibility":"default","docs":"Creates a new iterator which places an item generated by `separator`\nbetween adjacent items of the original iterator.\n\nThe closure will be called exactly once each time an item is placed\nbetween two adjacent items from the underlying iterator; specifically,\nthe closure is not called if the underlying iterator yields less than\ntwo items and after the last item is yielded.\n\nIf the iterator's item implements [`Clone`], it may be easier to use\n[`intersperse`].\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_intersperse)]\n\n#[derive(PartialEq, Debug)]\nstruct NotClone(usize);\n\nlet v = [NotClone(0), NotClone(1), NotClone(2)];\nlet mut it = v.into_iter().intersperse_with(|| NotClone(99));\n\nassert_eq!(it.next(), Some(NotClone(0)));  // The first element from `v`.\nassert_eq!(it.next(), Some(NotClone(99))); // The separator.\nassert_eq!(it.next(), Some(NotClone(1)));  // The next element from `v`.\nassert_eq!(it.next(), Some(NotClone(99))); // The separator.\nassert_eq!(it.next(), Some(NotClone(2)));  // The last element from `v`.\nassert_eq!(it.next(), None);               // The iterator is finished.\n```\n\n`intersperse_with` can be used in situations where the separator needs\nto be computed:\n```\n#![feature(iter_intersperse)]\n\nlet src = [\"Hello\", \"to\", \"all\", \"people\", \"!!\"].iter().copied();\n\n// The closure mutably borrows its context to generate an item.\nlet mut happy_emojis = [\" ❤️ \", \" 😀 \"].iter().copied();\nlet separator = || happy_emojis.next().unwrap_or(\" 🦀 \");\n\nlet result = src.intersperse_with(separator).collect::<String>();\nassert_eq!(result, \"Hello ❤️ to 😀 all 🦀 people 🦀 !!\");\n```\n[`Clone`]: crate::clone::Clone\n[`intersperse`]: Iterator::intersperse","links":{"crate::clone::Clone":"1:2907:105","Iterator::intersperse":"1:8865:9980"},"attrs":["#[unstable(feature = \"iter_intersperse\", reason = \"recently added\", issue =\n\"79524\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["separator",{"kind":"generic","inner":"G"}]],"output":{"kind":"resolved_path","inner":{"name":"IntersperseWith","id":"1:7228:4508","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"G"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"G","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"G"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[],"output":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3221:128":{"id":"1:3221:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":"The type returned in the event of a conversion error.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:13695:2039":{"id":"1:13695:2039","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:61620:4408"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2191":{"id":"0:2191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[87,4],"end":[87,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::map","name":"map","id":"0:479:857","glob":true}},"1:8196:41601":{"id":"1:8196:41601","crate_id":1,"name":"forward","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *successor*\nof `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`,\nthis function is allowed to panic, wrap, or saturate.\nThe suggested behavior is to panic when debug assertions are enabled,\nand to wrap or saturate otherwise.\n\nUnsafe code should not rely on the correctness of behavior after overflow.\n\n# Invariants\n\nFor any `a`, `n`, and `m`, where no overflow occurs:\n\n* `Step::forward(Step::forward(a, n), m) == Step::forward(a, n + m)`\n\nFor any `a` and `n`, where no overflow occurs:\n\n* `Step::forward_checked(a, n) == Some(Step::forward(a, n))`\n* `Step::forward(a, n) == (0..n).fold(a, |x, _| Step::forward(x, 1))`\n  * Corollary: `Step::forward(a, 0) == a`\n* `Step::forward(a, n) >= a`\n* `Step::backward(Step::forward(a, n), n) == a`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11169:2018":{"id":"1:11169:2018","crate_id":1,"name":"get","span":null,"visibility":"default","docs":"Returns a shared reference to the output at this location, if in\nbounds.","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"1:11166:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:9495:4749-0:1716:146":{"id":"a:1:9495:4749-0:1716:146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9495:4749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9495:4749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:9495:4749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:9495:4749","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:78:2149":{"id":"0:78:2149","crate_id":0,"name":"deallocate","span":{"filename":"src/raw/alloc.rs","begin":[39,8],"end":[39,70]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2417:1796","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:54116:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"0:1811":{"id":"0:1811","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1162,0],"end":[1168,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3248:128":{"id":"1:3248:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:3219:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"1:3241:693":{"id":"1:3241:693","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:744":{"id":"0:744","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2174,0],"end":[2191,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3212:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]},"len":"N"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"resolved_path","inner":{"name":"DefaultHashBuilder","id":"0:538:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:750:693"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1776:4095":{"id":"0:1776:4095","crate_id":0,"name":"intersection","span":{"filename":"src/set.rs","begin":[711,4],"end":[721,5]},"visibility":"public","docs":"Visits the values representing the intersection,\ni.e., the values that are both in `self` and `other`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Print 2, 3 in arbitrary order.\nfor x in a.intersection(&b) {\n    println!(\"{}\", x);\n}\n\nlet intersection: HashSet<_> = a.intersection(&b).collect();\nassert_eq!(intersection, [2, 3].iter().collect());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:1899:4096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3469:4530":{"id":"1:3469:4530","crate_id":1,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13748:42423":{"id":"1:13748:42423","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"1:13309:10820","prim@char":"1:61603:4394","str::rsplitn":"1:13751:42424"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:53242:11086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:5920:445":{"id":"4:5920:445","crate_id":4,"name":"concat","span":null,"visibility":"default","docs":"Implementation of [`[T]::concat`](slice::concat)","links":{"slice::concat":"4:5908:445"},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Concat","id":"4:5917:11308","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Item"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10785:10545":{"id":"1:10785:10545","crate_id":1,"name":"write_i128","span":null,"visibility":"default","docs":"Writes a single `i128` into this hasher.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3589:365":{"id":"1:3589:365","crate_id":1,"name":"bitor_assign","span":null,"visibility":"default","docs":"Performs the `|=` operation.\n\n# Examples\n\n```\nlet mut x = true;\nx |= false;\nassert_eq!(x, true);\n\nlet mut x = false;\nx |= false;\nassert_eq!(x, false);\n\nlet mut x: u8 = 5;\nx |= 1;\nassert_eq!(x, 5);\n\nlet mut x: u8 = 5;\nx |= 2;\nassert_eq!(x, 7);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1784:4120":{"id":"0:1784:4120","crate_id":0,"name":"get_or_insert","span":{"filename":"src/set.rs","begin":[828,4],"end":[836,5]},"visibility":"public","docs":"Inserts the given `value` into the set if it is not present, then\nreturns a reference to the value in the set.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert_eq!(set.len(), 3);\nassert_eq!(set.get_or_insert(2), &2);\nassert_eq!(set.get_or_insert(100), &100);\nassert_eq!(set.len(), 4); // 100 was inserted\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23023:37189":{"id":"1:23023:37189","crate_id":1,"name":"abs","span":null,"visibility":"default","docs":"Produces a vector where every lane has the absolute value of the\nequivalently-indexed lane in `self`.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:14051:152":{"id":"1:14051:152","crate_id":1,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:14052:186","1:14053:152","1:14054:782"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1925":{"id":"0:1925","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1514,0],"end":[1522,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:1930:2170","0:1931:2171","0:1932:783"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:615:2066":{"id":"0:615:2066","crate_id":0,"name":"drain","span":{"filename":"src/map.rs","begin":[794,4],"end":[798,5]},"visibility":"public","docs":"Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.\n\nIf the returned iterator is dropped before being fully consumed, it\ndrops the remaining key-value pairs. The returned iterator keeps a\nmutable borrow on the vector to optimize its implementation.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut a = HashMap::new();\na.insert(1, \"a\");\na.insert(2, \"b\");\nlet capacity_before_drain = a.capacity();\n\nfor (k, v) in a.drain().take(1) {\n    assert!(k == 1 || k == 2);\n    assert!(v == \"a\" || v == \"b\");\n}\n\n// As we can see, the map is empty and contains no element.\nassert!(a.is_empty() && a.len() == 0);\n// But map capacity is equal to old one.\nassert_eq!(a.capacity(), capacity_before_drain);\n\nlet mut a = HashMap::new();\na.insert(1, \"a\");\na.insert(2, \"b\");\n\n{   // Iterator is dropped without being consumed.\n    let d = a.drain();\n}\n\n// But the map is empty even if we do not use Drain iterator.\nassert!(a.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:871:2538","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:860:3822":{"id":"4:860:3822","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":"Creates owned data from borrowed data, usually by cloning.\n\n# Examples\n\nBasic usage:\n\n```\nlet s: &str = \"a\";\nlet ss: String = s.to_owned();\n\nlet v: &[i32] = &[1, 2];\nlet vv: Vec<i32> = v.to_owned();\n```","links":{},"attrs":["#[must_use =\n\"cloning is often expensive and is not expected to have side effects\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToOwned","id":"4:858:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:9036:10007":{"id":"1:9036:10007","crate_id":1,"name":"array_chunks","span":null,"visibility":"default","docs":"Returns an iterator over `N` elements of the iterator at a time.\n\nThe chunks do not overlap. If `N` does not divide the length of the\niterator, then the last up to `N-1` elements will be omitted and can be\nretrieved from the [`.into_remainder()`][ArrayChunks::into_remainder]\nfunction of the iterator.\n\n# Panics\n\nPanics if `N` is 0.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_array_chunks)]\n\nlet mut iter = \"lorem\".chars().array_chunks();\nassert_eq!(iter.next(), Some(['l', 'o']));\nassert_eq!(iter.next(), Some(['r', 'e']));\nassert_eq!(iter.next(), None);\nassert_eq!(iter.into_remainder().unwrap().as_slice(), &['m']);\n```\n\n```\n#![feature(iter_array_chunks)]\n\nlet data = [1, 1, 2, -2, 6, 0, 3, 1];\n//          ^-----^  ^------^\nfor [x, y, z] in data.iter().array_chunks() {\n    assert_eq!(x + y + z, 4);\n}\n```","links":{"ArrayChunks::into_remainder":"1:6086:50512"},"attrs":["#[track_caller]","#[unstable(feature = \"iter_array_chunks\", reason = \"recently added\", issue =\n\"100450\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"ArrayChunks","id":"1:50129:4481","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"const":{"type":{"kind":"primitive","inner":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13780:42435":{"id":"1:13780:42435","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:61603:4394","self::pattern":"1:13309:10820"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13339:10824","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13776:42432":{"id":"1:13776:42432","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3411:225":{"id":"1:3411:225","crate_id":1,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3544:4640":{"id":"1:3544:4640","crate_id":1,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3546:1132"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3942:39769":{"id":"1:3942:39769","crate_id":1,"name":"TryType","span":null,"visibility":"default","docs":"The \"return\" type of this meta-function.","links":{},"attrs":["#[unstable(feature = \"try_trait_v2_residual\", issue = \"91285\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"O"}}}},{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"Self"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:697:1674":{"id":"0:697:1674","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[1674,4],"end":[1683,5]},"visibility":"public","docs":"Inserts a key-value pair into the map.\n\nIf the map did not have this key present, [`None`] is returned.\n\nIf the map did have this key present, the value is updated, and the old\nvalue is returned. The key is not updated, though; this matters for\ntypes that can be `==` without being identical. See the [`std::collections`]\n[module-level documentation] for more.\n\n[`None`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.None\n[`std::collections`]: https://doc.rust-lang.org/std/collections/index.html\n[module-level documentation]: https://doc.rust-lang.org/std/collections/index.html#insert-and-complex-keys\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nassert_eq!(map.insert(37, \"a\"), None);\nassert_eq!(map.is_empty(), false);\n\nmap.insert(37, \"b\");\nassert_eq!(map.insert(37, \"c\"), Some(\"b\"));\nassert_eq!(map[&37], \"c\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["k",{"kind":"generic","inner":"K"}],["v",{"kind":"generic","inner":"V"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1815":{"id":"0:1815","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1170,0],"end":[1178,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10524:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10524:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1819:672"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8611:10008":{"id":"1:8611:10008","crate_id":1,"name":"sum","span":null,"visibility":"default","docs":"Method which takes an iterator and generates `Self` from the elements by\n\"summing up\" the items.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1771:1970":{"id":"0:1771:1970","crate_id":0,"name":"shrink_to","span":{"filename":"src/set.rs","begin":[629,4],"end":[631,5]},"visibility":"public","docs":"Shrinks the capacity of the set with a lower limit. It will drop\ndown no lower than the supplied limit while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.\n\nPanics if the current capacity is smaller than the supplied\nminimum capacity.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set = HashSet::with_capacity(100);\nset.insert(1);\nset.insert(2);\nassert!(set.capacity() >= 100);\nset.shrink_to(10);\nassert!(set.capacity() >= 10);\nset.shrink_to(0);\nassert!(set.capacity() >= 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["min_capacity",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9496:4748-0:539:144":{"id":"a:1:9496:4748-0:539:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3203:75":{"id":"1:3203:75","crate_id":1,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3205:315"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:702:1961":{"id":"0:702:1961","crate_id":0,"name":"remove_entry","span":{"filename":"src/map.rs","begin":[1854,4],"end":[1861,5]},"visibility":"public","docs":"Removes a key from the map, returning the stored key and value if the\nkey was previously in the map. Keeps the allocated memory for reuse.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\n// The map is empty\nassert!(map.is_empty() && map.capacity() == 0);\n\nmap.insert(1, \"a\");\nlet capacity_before_remove = map.capacity();\n\nassert_eq!(map.remove_entry(&1), Some((1, \"a\")));\nassert_eq!(map.remove(&1), None);\n\n// Now map hold none elements but capacity is equal to the old one\nassert!(map.len() == 0 && map.capacity() == capacity_before_remove);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["k",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3666:557":{"id":"1:3666:557","crate_id":1,"name":"deref_mut","span":null,"visibility":"default","docs":"Mutably dereferences the value.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Deref","id":"1:3652:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1365":{"id":"0:1365","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4776,0],"end":[4781,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:8714:2225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1368:808"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3206:74":{"id":"1:3206:74","crate_id":1,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3208:1899"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:2949:923":{"id":"1:2949:923","crate_id":1,"name":"ne","span":null,"visibility":"default","docs":"This method tests for `!=`. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2271:1658":{"id":"0:2271:1658","crate_id":0,"name":"CapacityOverflow","span":{"filename":"src/lib.rs","begin":[125,4],"end":[125,20]},"visibility":"default","docs":"Error due to the computed capacity exceeding the collection's maximum\n(usually `isize::MAX` bytes).","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"4:865:3822":{"id":"4:865:3822","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23143:10957":{"id":"1:23143:10957","crate_id":1,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23144:10893","1:23145:1284","1:23146:1311"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10540:672":{"id":"1:10540:672","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10484:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:52212:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10782:10542":{"id":"1:10782:10542","crate_id":1,"name":"write_i16","span":null,"visibility":"default","docs":"Writes a single `i16` into this hasher.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3525:186":{"id":"1:3525:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `-` operator.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1294:2170":{"id":"0:1294:2170","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4603,4],"end":[4603,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}},"1:13751:42424":{"id":"1:13751:42424","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:13748:42423","self::pattern":"1:13309:10820","prim@char":"1:61603:4394"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:53260:11087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13334:10819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13709:10850":{"id":"1:13709:10850","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:61603:4394"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:53114:11108","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1258:2822":{"id":"0:1258:2822","crate_id":0,"name":"OccupiedError","span":{"filename":"src/map.rs","begin":[4539,0],"end":[4544,1]},"visibility":"public","docs":"The error returned by [`try_insert`](HashMap::try_insert) when the key already exists.\n\nContains the occupied entry, and the value that was not inserted.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, OccupiedError};\n\nlet mut map: HashMap<_, _> = [(\"a\", 10), (\"b\", 20)].into();\n\n// try_insert method returns mutable reference to the value if keys are vacant,\n// but if the map did have key present, nothing is updated, and the provided\n// value is returned inside `Err(_)` variant\nmatch map.try_insert(\"a\", 100) {\n    Err(OccupiedError { mut entry, value }) => {\n        assert_eq!(entry.key(), &\"a\");\n        assert_eq!(value, 100);\n        assert_eq!(entry.insert(100), 10)\n    }\n    _ => unreachable!(),\n}\nassert_eq!(map[&\"a\"], 100);\n```","links":{"HashMap::try_insert":"0:699:2821"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":["0:1264:2656","0:1265:1991"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"4:6194:43098":{"id":"4:6194:43098","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:8508:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8508:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3000:725":{"id":"1:3000:725","crate_id":1,"name":"gt","span":null,"visibility":"default","docs":"This method tests greater than (for `self` and `other`) and is used by the `>` operator.\n\n# Examples\n\n```\nlet result = 1.0 > 2.0;\nassert_eq!(result, false);\n\nlet result = 2.0 > 2.0;\nassert_eq!(result, false);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8878:9982":{"id":"1:8878:9982","crate_id":1,"name":"filter_map","span":null,"visibility":"default","docs":"Creates an iterator that both filters and maps.\n\nThe returned iterator yields only the `value`s for which the supplied\nclosure returns `Some(value)`.\n\n`filter_map` can be used to make chains of [`filter`] and [`map`] more\nconcise. The example below shows how a `map().filter().map()` can be\nshortened to a single call to `filter_map`.\n\n[`filter`]: Iterator::filter\n[`map`]: Iterator::map\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [\"1\", \"two\", \"NaN\", \"four\", \"5\"];\n\nlet mut iter = a.iter().filter_map(|s| s.parse().ok());\n\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(5));\nassert_eq!(iter.next(), None);\n```\n\nHere's the same example, but with [`filter`] and [`map`]:\n\n```\nlet a = [\"1\", \"two\", \"NaN\", \"four\", \"5\"];\nlet mut iter = a.iter().map(|s| s.parse()).filter(|s| s.is_ok()).map(|s| s.unwrap());\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(5));\nassert_eq!(iter.next(), None);\n```","links":{"Iterator::map":"1:8868:857","Iterator::filter":"1:8876:3743"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"FilterMap","id":"1:50232:4494","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:9496:4748-0:845:2474":{"id":"a:1:9496:4748-0:845:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1892:2580":{"id":"0:1892:2580","crate_id":0,"name":"DrainFilter","span":{"filename":"src/set.rs","begin":[1456,0],"end":[1462,1]},"visibility":"public","docs":"A draining iterator over entries of a `HashSet` which don't satisfy the predicate `f`.\n\nThis `struct` is created by the [`drain_filter`] method on [`HashSet`]. See its\ndocumentation for more.\n\n[`drain_filter`]: struct.HashSet.html#method.drain_filter\n[`HashSet`]: struct.HashSet.html","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":[]}},"1:8991:1877":{"id":"1:8991:1877","crate_id":1,"name":"max","span":null,"visibility":"default","docs":"Returns the maximum element of an iterator.\n\nIf several elements are equally maximum, the last element is\nreturned. If the iterator is empty, [`None`] is returned.\n\nNote that [`f32`]/[`f64`] doesn't implement [`Ord`] due to NaN being\nincomparable. You can work around this by using [`Iterator::reduce`]:\n```\nassert_eq!(\n    [2.4, f32::NAN, 1.3]\n        .into_iter()\n        .reduce(f32::max)\n        .unwrap(),\n    2.4\n);\n```\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nlet b: Vec<u32> = Vec::new();\n\nassert_eq!(a.iter().max(), Some(&3));\nassert_eq!(b.iter().max(), None);\n```","links":{"`f32`":"1:61613:4401","`f64`":"1:61614:4402","`Ord`":"1:2982:182","`Iterator::reduce`":"1:8946:10000","`None`":"1:51151:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2982:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:850":{"id":"0:850","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2495,0],"end":[2502,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:853:420"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:10778:10538":{"id":"1:10778:10538","crate_id":1,"name":"write_u64","span":null,"visibility":"default","docs":"Writes a single `u64` into this hasher.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8609:4479":{"id":"1:8609:4479","crate_id":1,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8611:10008"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:12749:11294":{"id":"1:12749:11294","crate_id":1,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:12750:2170","1:12751:40808"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13323:40423":{"id":"1:13323:40423","crate_id":1,"name":"is_contained_in","span":null,"visibility":"default","docs":"Checks whether the pattern matches anywhere in the haystack","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3469:4530-0:2270:1655":{"id":"a:1:3469:4530-0:2270:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3469:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:8654-0:845:2474":{"id":"b:1:8654-0:845:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:8656:2170","1:8657:2171","1:8658:783"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"1:3684:388":{"id":"1:3684:388","crate_id":1,"name":"call_mut","span":null,"visibility":"default","docs":"Performs the call operation.","links":{},"attrs":["#[unstable(feature = \"fn_traits\", issue = \"29625\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["args",{"kind":"generic","inner":"Args"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"FnOnce","id":"1:3685:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":false}},"1:8911:9994":{"id":"1:8911:9994","crate_id":1,"name":"partition","span":null,"visibility":"default","docs":"Consumes an iterator, creating two collections from it.\n\nThe predicate passed to `partition()` can return `true`, or `false`.\n`partition()` returns a pair, all of the elements for which it returned\n`true`, and all of the elements for which it returned `false`.\n\nSee also [`is_partitioned()`] and [`partition_in_place()`].\n\n[`is_partitioned()`]: Iterator::is_partitioned\n[`partition_in_place()`]: Iterator::partition_in_place\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet (even, odd): (Vec<_>, Vec<_>) = a\n    .into_iter()\n    .partition(|n| n % 2 == 0);\n\nassert_eq!(even, vec![2]);\nassert_eq!(odd, vec![1, 3]);\n```","links":{"Iterator::is_partitioned":"1:8930:9996","Iterator::partition_in_place":"1:8919:9995"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"B"},{"kind":"generic","inner":"B"}]},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Extend","id":"1:8659:3665","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3250-0:2244:1804":{"id":"b:1:3250-0:2244:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3209:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3219:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3253:128","1:3254:1456"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:77:2243":{"id":"0:77:2243","crate_id":0,"name":"allocate","span":{"filename":"src/raw/alloc.rs","begin":[38,8],"end":[38,70]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:54116:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2417:1796","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}},{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13248:10868":{"id":"1:13248:10868","crate_id":1,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13249:127","1:13250:41999"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8890:1347":{"id":"1:8890:1347","crate_id":1,"name":"skip","span":null,"visibility":"default","docs":"Creates an iterator that skips the first `n` elements.\n\n`skip(n)` skips elements until `n` elements are skipped or the end of the\niterator is reached (whichever happens first). After that, all the remaining\nelements are yielded. In particular, if the original iterator is too short,\nthen the returned iterator is empty.\n\nRather than overriding this method directly, instead override the `nth` method.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().skip(2);\n\nassert_eq!(iter.next(), Some(&3));\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Skip","id":"1:50351:4502","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3741:4650":{"id":"1:3741:4650","crate_id":1,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3743:768"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"1:3737:2283","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:2283":{"id":"0:2283","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,31],"end":[121,36]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10524:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2284:672"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:479:857":{"id":"0:479:857","crate_id":0,"name":"map","span":{"filename":"src/map.rs","begin":[1,0],"end":[8408,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:538:2285","0:539:144","0:752:2502","0:766:2511","0:779:2171","0:789:2594","0:817:2601","0:845:2474","0:858:2484","0:871:2538","0:882:2580","0:930:2491","0:935:2899","0:942:3113","0:954:3118","0:973:3122","0:981:2915","0:1105:2657","0:1123:2660","0:1149:2662","0:1164:2672","0:1205:2673","0:1240:2676","0:1258:2822"],"is_stripped":true}},"b:1:3245-0:2270:1655":{"id":"b:1:3245-0:2270:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3219:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3215:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3248:128","1:3249:1457"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:10787:10547":{"id":"1:10787:10547","crate_id":1,"name":"write_length_prefix","span":null,"visibility":"default","docs":"Writes a length prefix into this hasher, as part of being prefix-free.\n\nIf you're implementing [`Hash`] for a custom collection, call this before\nwriting its contents to this `Hasher`.  That way\n`(collection![1, 2, 3], collection![4, 5])` and\n`(collection![1, 2], collection![3, 4, 5])` will provide different\nsequences of values to the `Hasher`\n\nThe `impl<T> Hash for [T]` includes a call to this method, so if you're\nhashing a slice (or array or vector) via its `Hash::hash` method,\nyou should **not** call this yourself.\n\nThis method is only for providing domain separation.  If you want to\nhash a `usize` that represents part of the *data*, then it's important\nthat you pass it to [`Hasher::write_usize`] instead of to this method.\n\n# Examples\n\n```\n#![feature(hasher_prefixfree_extras)]\n# // Stubs to make the `impl` below pass the compiler\n# struct MyCollection<T>(Option<T>);\n# impl<T> MyCollection<T> {\n#     fn len(&self) -> usize { todo!() }\n# }\n# impl<'a, T> IntoIterator for &'a MyCollection<T> {\n#     type Item = T;\n#     type IntoIter = std::iter::Empty<T>;\n#     fn into_iter(self) -> Self::IntoIter { todo!() }\n# }\n\nuse std::hash::{Hash, Hasher};\nimpl<T: Hash> Hash for MyCollection<T> {\n    fn hash<H: Hasher>(&self, state: &mut H) {\n        state.write_length_prefix(self.len());\n        for elt in self {\n            elt.hash(state);\n        }\n    }\n}\n```\n\n# Note to Implementers\n\nIf you've decided that your `Hasher` is willing to be susceptible to\nHash-DoS attacks, then you might consider skipping hashing some or all\nof the `len` provided in the name of increased performance.","links":{"`Hasher::write_usize`":"1:10780:10540","`Hash`":"1:10762:143"},"attrs":["#[unstable(feature = \"hasher_prefixfree_extras\", issue = \"96762\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13325:40426":{"id":"1:13325:40426","crate_id":1,"name":"is_suffix_of","span":null,"visibility":"default","docs":"Checks whether the pattern matches at the back of the haystack","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13334:10819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23357:40812":{"id":"1:23357:40812","crate_id":1,"name":"to_bitmask","span":null,"visibility":"default","docs":"Converts a mask to a bitmask.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"BitMask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"ToBitMask","id":"1:23355:30942","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:4201:68":{"id":"1:4201:68","crate_id":1,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4202:1470"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:8657:2171":{"id":"1:8657:2171","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"I"}}},"b:4:862-0:1716:146":{"id":"b:4:862-0:1716:146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:858:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["4:864:3398","4:865:3822","4:866:10635"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:10475:1576":{"id":"1:10475:1576","crate_id":1,"name":"write_str","span":null,"visibility":"default","docs":"Writes a string slice into this writer, returning whether the write\nsucceeded.\n\nThis method can only succeed if the entire string slice was successfully\nwritten, and this method will not return until all data has been\nwritten or an error occurs.\n\n# Errors\n\nThis function will return an instance of [`Error`] on error.\n\nThe purpose of std::fmt::Error is to abort the formatting operation when the underlying\ndestination encounters some error preventing it from accepting more text; it should\ngenerally be propagated rather than handled, at least when implementing formatting traits.\n\n# Examples\n\n```\nuse std::fmt::{Error, Write};\n\nfn writer<W: Write>(f: &mut W, s: &str) -> Result<(), Error> {\n    f.write_str(s)\n}\n\nlet mut buf = String::new();\nwriter(&mut buf, \"hola\").unwrap();\nassert_eq!(&buf, \"hola\");\n```","links":{"`Error`":"1:52212:128"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:52212:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10783:10543":{"id":"1:10783:10543","crate_id":1,"name":"write_i32","span":null,"visibility":"default","docs":"Writes a single `i32` into this hasher.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3566:3944":{"id":"1:3566:3944","crate_id":1,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3568:186","1:3569:367"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:2888-0:1716:146":{"id":"b:1:2888-0:1716:146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2890:2281"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:10543:4593":{"id":"1:10543:4593","crate_id":1,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10544:672"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:584:936":{"id":"0:584:936","crate_id":0,"name":"new","span":{"filename":"src/map.rs","begin":[307,4],"end":[309,5]},"visibility":"public","docs":"Creates an empty `HashMap`.\n\nThe hash map is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet mut map: HashMap<&str, i32> = HashMap::new();\nassert_eq!(map.len(), 0);\nassert_eq!(map.capacity(), 0);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1751":{"id":"0:1751","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[385,0],"end":[451,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1754:2444","0:1755:2424"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13712:40732":{"id":"1:13712:40732","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:13711:40772"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:53421:11125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10774:1898":{"id":"1:10774:1898","crate_id":1,"name":"write","span":null,"visibility":"default","docs":"Writes some data into this `Hasher`.\n\n# Examples\n\n```\nuse std::collections::hash_map::DefaultHasher;\nuse std::hash::Hasher;\n\nlet mut hasher = DefaultHasher::new();\nlet data = [0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef];\n\nhasher.write(&data);\n\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```\n\n# Note to Implementers\n\nYou generally should not do length-prefixing as part of implementing\nthis method.  It's up to the [`Hash`] implementation to call\n[`Hasher::write_length_prefix`] before sequences that need it.","links":{"`Hash`":"1:10762:143","`Hasher::write_length_prefix`":"1:10787:10547"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bytes",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23017:10956":{"id":"1:23017:10956","crate_id":1,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23018:10893","1:23019:40917","1:23020:41715","1:23021:41716","1:23022:41717","1:23023:37189","1:23024:41718","1:23025:41719","1:23026:41720","1:23027:41721","1:23028:41722","1:23029:41723","1:23030:41724","1:23031:41725","1:23032:41726","1:23033:41727","1:23034:41053","1:23035:41728","1:23036:40531","1:23037:40530","1:23038:40532","1:23039:40918","1:23040:40919","1:23041:40920","1:23042:40921"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3412:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23119:10815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10775:10535":{"id":"1:10775:10535","crate_id":1,"name":"write_u8","span":null,"visibility":"default","docs":"Writes a single `u8` into this hasher.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8909:9993":{"id":"1:8909:9993","crate_id":1,"name":"collect_into","span":null,"visibility":"default","docs":"Collects all the items from an iterator into a collection.\n\nThis method consumes the iterator and adds all its items to the\npassed collection. The collection is then returned, so the call chain\ncan be continued.\n\nThis is useful when you already have a collection and wants to add\nthe iterator items to it.\n\nThis method is a convenience method to call [Extend::extend](trait.Extend.html),\nbut instead of being called on a collection, it's called on an iterator.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_collect_into)]\n\nlet a = [1, 2, 3];\nlet mut vec: Vec::<i32> = vec![0, 1];\n\na.iter().map(|&x| x * 2).collect_into(&mut vec);\na.iter().map(|&x| x * 10).collect_into(&mut vec);\n\nassert_eq!(vec![0, 1, 2, 4, 6, 10, 20, 30], vec);\n```\n\n`Vec` can have a manual set capacity to avoid reallocating it:\n\n```\n#![feature(iter_collect_into)]\n\nlet a = [1, 2, 3];\nlet mut vec: Vec::<i32> = Vec::with_capacity(6);\n\na.iter().map(|&x| x * 2).collect_into(&mut vec);\na.iter().map(|&x| x * 10).collect_into(&mut vec);\n\nassert_eq!(6, vec.capacity());\nprintln!(\"{:?}\", vec);\n```\n\nThe returned mutable reference can be used to continue the call chain:\n\n```\n#![feature(iter_collect_into)]\n\nlet a = [1, 2, 3];\nlet mut vec: Vec::<i32> = Vec::with_capacity(6);\n\nlet count = a.iter().collect_into(&mut vec).iter().count();\n\nassert_eq!(count, vec.len());\nprintln!(\"Vec len is {}\", count);\n\nlet count = a.iter().collect_into(&mut vec).iter().count();\n\nassert_eq!(count, vec.len());\nprintln!(\"Vec len now is {}\", count);\n```","links":{},"attrs":["#[unstable(feature = \"iter_collect_into\", reason = \"new API\", issue =\n\"94780\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["collection",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"E"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"E"}}},"c_variadic":false},"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Extend","id":"1:8659:3665","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1644:1648":{"id":"0:1644:1648","crate_id":0,"name":"set","span":{"filename":"src/set.rs","begin":[1,0],"end":[2790,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1716:146","0:1879:2502","0:1883:2171","0:1887:2538","0:1892:2580","0:1899:4096","0:1906:4077","0:1913:4087","0:1919:4105","0:2100:2657","0:2116:2660","0:2127:2662"],"is_stripped":true}},"1:3509:186":{"id":"1:3509:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `*` operator.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:981:2915":{"id":"0:981:2915","crate_id":0,"name":"RawEntryBuilder","span":{"filename":"src/map.rs","begin":[3083,0],"end":[3085,1]},"visibility":"public","docs":"A builder for computing where in a [`HashMap`] a key-value pair would be stored.\n\nSee the [`HashMap::raw_entry`] docs for usage examples.\n\n[`HashMap::raw_entry`]: struct.HashMap.html#method.raw_entry\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryBuilder};\nuse core::hash::{BuildHasher, Hash};\n\nlet mut map = HashMap::new();\nmap.extend([(1, 10), (2, 20), (3, 30)]);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nfor k in 0..6 {\n    let hash = compute_hash(map.hasher(), &k);\n    let v = map.get(&k).cloned();\n    let kv = v.as_ref().map(|v| (&k, v));\n\n    println!(\"Key: {} and value: {:?}\", k, v);\n    let builder: RawEntryBuilder<_, _, _> = map.raw_entry();\n    assert_eq!(builder.from_key(&k), kv);\n    assert_eq!(map.raw_entry().from_hash(hash, |q| *q == k), kv);\n    assert_eq!(map.raw_entry().from_key_hashed_nocheck(hash, &k), kv);\n}\n```","links":{"`HashMap`":"0:539:144"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:3682:132":{"id":"1:3682:132","crate_id":1,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3684:388"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3685:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:643:2698":{"id":"0:643:2698","crate_id":0,"name":"get_key_value_mut","span":{"filename":"src/map.rs","begin":[1299,4],"end":[1309,5]},"visibility":"public","docs":"Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.\n\nThe supplied key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nlet (k, v) = map.get_key_value_mut(&1).unwrap();\nassert_eq!(k, &1);\nassert_eq!(v, &mut \"a\");\n*v = \"b\";\nassert_eq!(map.get_key_value_mut(&1), Some((&1, &mut \"b\")));\nassert_eq!(map.get_key_value_mut(&2), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["k",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9075:923":{"id":"1:9075:923","crate_id":1,"name":"ne","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are unequal to those of\nanother.\n\n# Examples\n\n```\nassert_eq!([1].iter().ne([1].iter()), false);\nassert_eq!([1].iter().ne([1, 2].iter()), true);\n```","links":{"`Iterator`":"1:8846:160"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2946:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8846:160":{"id":"1:8846:160","crate_id":1,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8847:2170","1:8848:949","1:8849:9976","1:8852:2191","1:8853:507","1:8855:9977","1:8858:9978","1:8859:9979","1:8860:2109","1:8861:4088","1:8863:4480","1:8865:9980","1:8866:9981","1:8868:857","1:8871:3043","1:8876:3743","1:8878:9982","1:8881:2032","1:8882:9983","1:8883:9984","1:8885:9985","1:8887:9986","1:8890:1347","1:8891:3739","1:8892:9987","1:8896:9988","1:8899:9989","1:8900:9990","1:8901:9991","1:8903:3741","1:8904:2964","1:8906:9992","1:8909:9993","1:8911:9994","1:8919:9995","1:8930:9996","1:8932:9997","1:8936:9998","1:8943:9999","1:8946:10000","1:8948:10001","1:8951:286","1:8956:304","1:8961:1957","1:8966:10002","1:8973:10003","1:8981:1042","1:8986:10004","1:8991:1877","1:8992:1843","1:8993:4929","1:9003:4928","1:9008:4927","1:9018:4926","1:9023:3756","1:9024:10005","1:9029:3779","1:9032:3828","1:9035:10006","1:9036:10007","1:9038:10008","1:9040:10009","1:9042:427","1:9045:10010","1:9053:1025","1:9056:10011","1:9064:616","1:9067:10012","1:9075:923","1:9077:842","1:9079:807","1:9081:725","1:9083:708","1:9085:10013","1:9086:10014","1:9092:10015"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1852":{"id":"0:1852","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1272,0],"end":[1284,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1856:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:623":{"id":"0:623","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[983,0],"end":[1862,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:628:1978","0:629:1983","0:630:2639","0:631:1970","0:632:2656","0:633:2670","0:637:2018","0:639:2690","0:643:2698","0:645:2703","0:647:2020","0:651:2027","0:658:2035","0:665:2754","0:672:2757","0:697:1674","0:698:2805","0:699:2821","0:700:1959","0:702:1961"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:13714:42417":{"id":"1:13714:42417","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:53402:11123","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1368:808":{"id":"0:1368:808","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[4778,4],"end":[4780,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13692:42410":{"id":"1:13692:42410","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12773:11259"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23018:10893":{"id":"1:23018:10893","crate_id":1,"name":"Mask","span":null,"visibility":"default","docs":"Mask type used for manipulating this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:539:144":{"id":"0:539:144","crate_id":0,"name":"HashMap","span":{"filename":"src/map.rs","begin":[188,0],"end":[191,1]},"visibility":"public","docs":"A hash map implemented with quadratic probing and SIMD lookup.\n\nThe default hashing algorithm is currently [`AHash`], though this is\nsubject to change at any point in the future. This hash function is very\nfast for all types of keys, but this algorithm will typically *not* protect\nagainst attacks such as HashDoS.\n\nThe hashing algorithm can be replaced on a per-`HashMap` basis using the\n[`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many\nalternative algorithms are available on crates.io, such as the [`fnv`] crate.\n\nIt is required that the keys implement the [`Eq`] and [`Hash`] traits, although\nthis can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.\nIf you implement these yourself, it is important that the following\nproperty holds:\n\n```text\nk1 == k2 -> hash(k1) == hash(k2)\n```\n\nIn other words, if two keys are equal, their hashes must be equal.\n\nIt is a logic error for a key to be modified in such a way that the key's\nhash, as determined by the [`Hash`] trait, or its equality, as determined by\nthe [`Eq`] trait, changes while it is in the map. This is normally only\npossible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n\nIt is also a logic error for the [`Hash`] implementation of a key to panic.\nThis is generally only possible if the trait is implemented manually. If a\npanic does occur then the contents of the `HashMap` may become corrupted and\nsome items may be dropped from the table.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\n// Type inference lets us omit an explicit type signature (which\n// would be `HashMap<String, String>` in this example).\nlet mut book_reviews = HashMap::new();\n\n// Review some books.\nbook_reviews.insert(\n    \"Adventures of Huckleberry Finn\".to_string(),\n    \"My favorite book.\".to_string(),\n);\nbook_reviews.insert(\n    \"Grimms' Fairy Tales\".to_string(),\n    \"Masterpiece.\".to_string(),\n);\nbook_reviews.insert(\n    \"Pride and Prejudice\".to_string(),\n    \"Very enjoyable.\".to_string(),\n);\nbook_reviews.insert(\n    \"The Adventures of Sherlock Holmes\".to_string(),\n    \"Eye lyked it alot.\".to_string(),\n);\n\n// Check for a specific one.\n// When collections store owned values (String), they can still be\n// queried using references (&str).\nif !book_reviews.contains_key(\"Les Misérables\") {\n    println!(\"We've got {} reviews, but Les Misérables ain't one.\",\n             book_reviews.len());\n}\n\n// oops, this review has a lot of spelling mistakes, let's delete it.\nbook_reviews.remove(\"The Adventures of Sherlock Holmes\");\n\n// Look up the values associated with some keys.\nlet to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];\nfor &book in &to_find {\n    match book_reviews.get(book) {\n        Some(review) => println!(\"{}: {}\", book, review),\n        None => println!(\"{} is unreviewed.\", book)\n    }\n}\n\n// Look up the value for a key (will panic if the key is not found).\nprintln!(\"Review for Jane: {}\", book_reviews[\"Pride and Prejudice\"]);\n\n// Iterate over everything.\nfor (book, review) in &book_reviews {\n    println!(\"{}: \\\"{}\\\"\", book, review);\n}\n```\n\n`HashMap` also implements an [`Entry API`](#method.entry), which allows\nfor more complex methods of getting, setting, updating and removing keys and\ntheir values:\n\n```\nuse hashbrown::HashMap;\n\n// type inference lets us omit an explicit type signature (which\n// would be `HashMap<&str, u8>` in this example).\nlet mut player_stats = HashMap::new();\n\nfn random_stat_buff() -> u8 {\n    // could actually return some random value here - let's just return\n    // some fixed value for now\n    42\n}\n\n// insert a key only if it doesn't already exist\nplayer_stats.entry(\"health\").or_insert(100);\n\n// insert a key using a function that provides a new value only if it\n// doesn't already exist\nplayer_stats.entry(\"defence\").or_insert_with(random_stat_buff);\n\n// update a key, guarding against the key possibly not being set\nlet stat = player_stats.entry(\"attack\").or_insert(100);\n*stat += random_stat_buff();\n```\n\nThe easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].\nWe must also derive [`PartialEq`].\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n[`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html\n[`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n[`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html\n[`default`]: #method.default\n[`with_hasher`]: #method.with_hasher\n[`with_capacity_and_hasher`]: #method.with_capacity_and_hasher\n[`fnv`]: https://crates.io/crates/fnv\n[`AHash`]: https://crates.io/crates/ahash\n\n```\nuse hashbrown::HashMap;\n\n#[derive(Hash, Eq, PartialEq, Debug)]\nstruct Viking {\n    name: String,\n    country: String,\n}\n\nimpl Viking {\n    /// Creates a new Viking.\n    fn new(name: &str, country: &str) -> Viking {\n        Viking { name: name.to_string(), country: country.to_string() }\n    }\n}\n\n// Use a HashMap to store the vikings' health points.\nlet mut vikings = HashMap::new();\n\nvikings.insert(Viking::new(\"Einar\", \"Norway\"), 25);\nvikings.insert(Viking::new(\"Olaf\", \"Denmark\"), 24);\nvikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12);\n\n// Use derived implementation to print the status of the vikings.\nfor (viking, health) in &vikings {\n    println!(\"{:?} has {} hp\", viking, health);\n}\n```\n\nA `HashMap` with fixed list of elements can be initialized from an array:\n\n```\nuse hashbrown::HashMap;\n\nlet timber_resources: HashMap<&str, i32> = [(\"Norway\", 100), (\"Denmark\", 50), (\"Iceland\", 10)]\n    .iter().cloned().collect();\n// use the values stored in map\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"DefaultHashBuilder","id":"0:538:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:581","0:586","0:592","0:598","0:623","0:704","a:1:9496:4748-0:539:144","a:1:3414:228-0:539:144","a:1:3469:4530-0:539:144","a:1:3402:220-0:539:144","a:1:9495:4749-0:539:144","b:1:3235-0:539:144","b:1:2891-0:539:144","b:1:3245-0:539:144","b:1:4203-0:539:144","b:1:3239-0:539:144","b:1:2888-0:539:144","b:1:3250-0:539:144","b:4:862-0:539:144","0:546","0:711","0:719","0:724","0:730","0:736","0:744","0:1279","0:1288","0:1297","0:1539","0:1547","0:1555","0:1564","0:1820"]}},"0:637:2018":{"id":"0:637:2018","crate_id":0,"name":"get","span":{"filename":"src/map.rs","begin":[1217,4],"end":[1227,5]},"visibility":"public","docs":"Returns a reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get(&1), Some(&\"a\"));\nassert_eq!(map.get(&2), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["k",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1675":{"id":"0:0:1675","crate_id":0,"name":"hashbrown","span":{"filename":"src/lib.rs","begin":[1,0],"end":[150,1]},"visibility":"public","docs":"This crate is a Rust port of Google's high-performance [SwissTable] hash\nmap, adapted to make it a drop-in replacement for Rust's standard `HashMap`\nand `HashSet` types.\n\nThe original C++ version of [SwissTable] can be found [here], and this\n[CppCon talk] gives an overview of how the algorithm works.\n\n[SwissTable]: https://abseil.io/blog/20180927-swisstables\n[here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h\n[CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4","links":{},"attrs":["#![no_std]","#![allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nmust_use_candidate, clippy :: option_if_let_else, clippy :: redundant_else,\nclippy :: manual_map, clippy :: missing_safety_doc, clippy ::\nmissing_errors_doc)]","#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:2190:1649","0:2192:1651","0:2194","0:2197","0:2270:1655"],"is_stripped":false}},"0:2100:2657":{"id":"0:2100:2657","crate_id":0,"name":"Entry","span":{"filename":"src/set.rs","begin":[1926,0],"end":[1959,1]},"visibility":"public","docs":"A view into a single entry in a set, which may either be vacant or occupied.\n\nThis `enum` is constructed from the [`entry`] method on [`HashSet`].\n\n[`HashSet`]: struct.HashSet.html\n[`entry`]: struct.HashSet.html#method.entry\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet, OccupiedEntry};\n\nlet mut set = HashSet::new();\nset.extend([\"a\", \"b\", \"c\"]);\nassert_eq!(set.len(), 3);\n\n// Existing value (insert)\nlet entry: Entry<_, _> = set.entry(\"a\");\nlet _raw_o: OccupiedEntry<_, _> = entry.insert();\nassert_eq!(set.len(), 3);\n// Nonexistent value (insert)\nset.entry(\"d\").insert();\n\n// Existing value (or_insert)\nset.entry(\"b\").or_insert();\n// Nonexistent value (or_insert)\nset.entry(\"e\").or_insert();\n\nprintln!(\"Our HashSet: {:?}\", set);\n\nlet mut vec: Vec<_> = set.iter().copied().collect();\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\", \"d\", \"e\"]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"variants_stripped":false,"variants":["0:2105:2659","0:2108:2661"],"impls":[]}},"0:1831":{"id":"0:1831","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1205,0],"end":[1222,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3212:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"DefaultHashBuilder","id":"0:538:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1836:693"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1369":{"id":"0:1369","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4782,0],"end":[4782,46]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:9118:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2951:125":{"id":"1:2951:125","crate_id":1,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2946:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8659:3665":{"id":"1:8659:3665","crate_id":1,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8661:3686","1:8663:1617","1:8664:3687"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3215:237":{"id":"1:3215:237","crate_id":1,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3217:128","1:3218:1457"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3497:4633":{"id":"1:3497:4633","crate_id":1,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3499:186","1:3500:274"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13803:11301":{"id":"1:13803:11301","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14054:782":{"id":"1:14054:782","crate_id":1,"name":"into_future","span":null,"visibility":"default","docs":"Creates a future from a value.\n\n# Examples\n\nBasic usage:\n\n```no_run\nuse std::future::IntoFuture;\n\n# async fn foo() {\nlet v = async { \"meow\" };\nlet mut fut = v.into_future();\nassert_eq!(\"meow\", fut.await);\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoFuture","id":"1:14051:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3930:186":{"id":"1:3930:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The type of the value produced by `?` when *not* short-circuiting.","links":{},"attrs":["#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1363:949":{"id":"0:1363:949","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[4764,4],"end":[4770,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3540:4638":{"id":"1:3540:4638","crate_id":1,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3542:571"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23356:1806":{"id":"1:23356:1806","crate_id":1,"name":"BitMask","span":null,"visibility":"default","docs":"The integer bitmask type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:23112:40920":{"id":"1:23112:40920","crate_id":1,"name":"reduce_max","span":null,"visibility":"default","docs":"Returns the maximum lane in the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"1:23106:10958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3504:186":{"id":"1:3504:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `-` operator.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:8199:41602":{"id":"1:8199:41602","crate_id":1,"name":"backward","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *predecessor*\nof `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`,\nthis function is allowed to panic, wrap, or saturate.\nThe suggested behavior is to panic when debug assertions are enabled,\nand to wrap or saturate otherwise.\n\nUnsafe code should not rely on the correctness of behavior after overflow.\n\n# Invariants\n\nFor any `a`, `n`, and `m`, where no overflow occurs:\n\n* `Step::backward(Step::backward(a, n), m) == Step::backward(a, n + m)`\n\nFor any `a` and `n`, where no overflow occurs:\n\n* `Step::backward_checked(a, n) == Some(Step::backward(a, n))`\n* `Step::backward(a, n) == (0..n).fold(a, |x, _| Step::backward(x, 1))`\n  * Corollary: `Step::backward(a, 0) == a`\n* `Step::backward(a, n) <= a`\n* `Step::forward(Step::backward(a, n), n) == a`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2891-0:1716:146":{"id":"b:1:2891-0:1716:146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2885:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2893:3730"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:639:2690":{"id":"0:639:2690","crate_id":0,"name":"get_key_value","span":{"filename":"src/map.rs","begin":[1249,4],"end":[1259,5]},"visibility":"public","docs":"Returns the key-value pair corresponding to the supplied key.\n\nThe supplied key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\nassert_eq!(map.get_key_value(&2), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["k",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1906:4077":{"id":"0:1906:4077","crate_id":0,"name":"Difference","span":{"filename":"src/set.rs","begin":[1485,0],"end":[1490,1]},"visibility":"public","docs":"A lazy iterator producing elements in the difference of `HashSet`s.\n\nThis `struct` is created by the [`difference`] method on [`HashSet`].\nSee its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`difference`]: struct.HashSet.html#method.difference","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:3287:59":{"id":"1:3287:59","crate_id":1,"name":"default","span":null,"visibility":"default","docs":"Returns the \"default value\" for a type.\n\nDefault values are often some kind of initial value, identity value, or anything else that\nmay make sense as a default.\n\n# Examples\n\nUsing built-in default values:\n\n```\nlet i: i8 = Default::default();\nlet (x, y): (Option<String>, f64) = Default::default();\nlet (a, b, (c, d)): (i32, u32, (bool, bool)) = Default::default();\n```\n\nMaking your own:\n\n```\n# #[allow(dead_code)]\nenum Kind {\n    A,\n    B,\n    C,\n}\n\nimpl Default for Kind {\n    fn default() -> Self { Kind::A }\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2277":{"id":"0:2277","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,16],"end":[121,25]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:3410:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2891-0:539:144":{"id":"b:1:2891-0:539:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2885:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2893:3730"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:23022:41717":{"id":"1:23022:41717","crate_id":1,"name":"from_bits","span":null,"visibility":"default","docs":"Raw transmutation from an unsigned integer vector type with the\nsame size and number of lanes.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["bits",{"kind":"qualified_path","inner":{"name":"Bits","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23017:10956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3721:246":{"id":"1:3721:246","crate_id":1,"name":"Yield","span":null,"visibility":"default","docs":"The type of value this generator yields.\n\nThis associated type corresponds to the `yield` expression and the\nvalues which are allowed to be returned each time a generator yields.\nFor example an iterator-as-a-generator would likely have this type as\n`T`, the type being iterated over.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:13801:11007":{"id":"1:13801:11007","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:13248:10868","FromStr::Err":"1:13249:127"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:13248:10868","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13248:10868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9038:10008":{"id":"1:9038:10008","crate_id":1,"name":"sum","span":null,"visibility":"default","docs":"Sums the elements of an iterator.\n\nTakes each element, adds them together, and returns the result.\n\nAn empty iterator returns the zero value of the type.\n\n# Panics\n\nWhen calling `sum()` and a primitive integer type is being returned, this\nmethod will panic if the computation overflows and debug assertions are\nenabled.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nlet sum: i32 = a.iter().sum();\n\nassert_eq!(sum, 6);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"S"},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sum","id":"1:8609:4479","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23026:41720":{"id":"1:23026:41720","crate_id":1,"name":"to_radians","span":null,"visibility":"default","docs":"Converts each lane from degrees to radians.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1547":{"id":"0:1547","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[6353,0],"end":[6432,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":"Inserts all new key-values from the iterator and replaces values with existing\nkeys with new values returned from the iterator.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:8659:3665","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1552:3686"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:930:2491":{"id":"0:930:2491","crate_id":0,"name":"ValuesMut","span":{"filename":"src/map.rs","begin":[2735,0],"end":[2737,1]},"visibility":"public","docs":"A mutable iterator over the values of a `HashMap` in arbitrary order.\nThe iterator element type is `&'a mut V`.\n\nThis `struct` is created by the [`values_mut`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`values_mut`]: struct.HashMap.html#method.values_mut\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<_, _> = [(1, \"One\".to_owned()), (2, \"Two\".into())].into();\n\nlet mut values = map.values_mut();\nvalues.next().map(|v| v.push_str(\" Mississippi\"));\nvalues.next().map(|v| v.push_str(\" Mississippi\"));\n\n// It is fused iterator\nassert_eq!(values.next(), None);\nassert_eq!(values.next(), None);\n\nassert_eq!(map.get(&1).unwrap(), &\"One Mississippi\".to_owned());\nassert_eq!(map.get(&2).unwrap(), &\"Two Mississippi\".to_owned());\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:3314:392":{"id":"1:3314:392","crate_id":1,"name":"cause","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[deprecated(since = \"1.33.0\", note =\n\"replaced by Error::source, which can support downcasting\")]"],"deprecation":{"since":"1.33.0","note":"replaced by Error::source, which can support downcasting"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:3310:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:658:2035":{"id":"0:658:2035","crate_id":0,"name":"get_many_unchecked_mut","span":{"filename":"src/map.rs","begin":[1485,4],"end":[1495,5]},"visibility":"public","docs":"Attempts to get mutable references to `N` values in the map at once, without validating that\nthe values are unique.\n\nReturns an array of length `N` with the results of each query. `None` will be returned if\nany of the keys are missing.\n\nFor a safe alternative see [`get_many_mut`](`HashMap::get_many_mut`).\n\n# Safety\n\nCalling this method with overlapping keys is *[undefined behavior]* even if the resulting\nreferences are not used.\n\n[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut libraries = HashMap::new();\nlibraries.insert(\"Bodleian Library\".to_string(), 1602);\nlibraries.insert(\"Athenæum\".to_string(), 1807);\nlibraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\nlibraries.insert(\"Library of Congress\".to_string(), 1800);\n\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"Library of Congress\",\n]);\nassert_eq!(\n    got,\n    Some([\n        &mut 1807,\n        &mut 1800,\n    ]),\n);\n\n// Missing keys result in None\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"New York Public Library\",\n]);\nassert_eq!(got, None);\n```","links":{"`HashMap::get_many_mut`":"0:651:2027"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["ks",{"kind":"array","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}},"len":"N"}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}},"len":"N"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:10537:4591":{"id":"1:10537:4591","crate_id":1,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10538:672"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13754:42425":{"id":"1:13754:42425","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3412:107":{"id":"1:3412:107","crate_id":1,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:23072:40917":{"id":"1:23072:40917","crate_id":1,"name":"Scalar","span":null,"visibility":"default","docs":"Scalar type contained by this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1762:2428":{"id":"0:1762:2428","crate_id":0,"name":"with_capacity_and_hasher_in","span":{"filename":"src/set.rs","begin":[512,4],"end":[516,5]},"visibility":"public","docs":"Creates an empty `HashSet` with the specified capacity, using\n`hasher` to hash the keys.\n\nThe hash set will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash set will not allocate.\n\nWarning: `hasher` is normally randomly generated, and\nis designed to allow `HashSet`s to be resistant to attacks that\ncause many collisions and very poor performance. Setting it\nmanually using this function can expose a DoS attack vector.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut set = HashSet::with_capacity_and_hasher(10, s);\nset.insert(1);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}],["hasher",{"kind":"generic","inner":"S"}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6174":{"id":"4:6174","crate_id":4,"name":null,"span":null,"visibility":{"restricted":{"parent":"4:5987:1379","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["4:6175:43095","4:6176:2073","4:6179:43096","4:6182:43097","4:6194:43098","4:6195:43099","4:6196:4469","4:6197:43100","4:6198:43101"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3524:4636":{"id":"1:3524:4636","crate_id":1,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3525:186","1:3526:929"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23735:1305":{"id":"1:23735:1305","crate_id":1,"name":"simd_ge","span":null,"visibility":"default","docs":"Test if each lane is greater than or equal to the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"1:23143:10957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:882:2580":{"id":"0:882:2580","crate_id":0,"name":"DrainFilter","span":{"filename":"src/map.rs","begin":[2632,0],"end":[2638,1]},"visibility":"public","docs":"A draining iterator over entries of a `HashMap` which don't satisfy the predicate\n`f(&k, &mut v)` in arbitrary order. The iterator element type is `(K, V)`.\n\nThis `struct` is created by the [`drain_filter`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`drain_filter`]: struct.HashMap.html#method.drain_filter\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<i32, &str> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut drain_filter = map.drain_filter(|k, _v| k % 2 != 0);\nlet mut vec = vec![drain_filter.next(), drain_filter.next()];\n\n// The `DrainFilter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some((1, \"a\")),Some((3, \"c\"))]);\n\n// It is fused iterator\nassert_eq!(drain_filter.next(), None);\nassert_eq!(drain_filter.next(), None);\ndrop(drain_filter);\n\nassert_eq!(map.len(), 1);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":[]}},"1:23116:40924":{"id":"1:23116:40924","crate_id":1,"name":"reduce_xor","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"xor\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"1:23106:10958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2108:2661":{"id":"0:2108:2661","crate_id":0,"name":"Vacant","span":{"filename":"src/set.rs","begin":[1958,4],"end":[1958,36]},"visibility":"default","docs":"A vacant entry.\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet};\nlet mut set: HashSet<&str> = HashSet::new();\n\nmatch set.entry(\"a\") {\n    Entry::Occupied(_) => unreachable!(),\n    Entry::Vacant(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:2110:1585"]}},"0:951:2661":{"id":"0:951:2661","crate_id":0,"name":"Vacant","span":{"filename":"src/map.rs","begin":[2910,4],"end":[2910,45]},"visibility":"default","docs":"A vacant entry.\n\n# Examples\n\n```\nuse hashbrown::{hash_map::RawEntryMut, HashMap};\nlet mut map: HashMap<&str, i32> = HashMap::new();\n\nmatch map.raw_entry_mut().from_key(\"a\") {\n    RawEntryMut::Occupied(_) => unreachable!(),\n    RawEntryMut::Vacant(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:953:1585"]}},"b:1:3245-0:539:144":{"id":"b:1:3245-0:539:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3219:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3215:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3248:128","1:3249:1457"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1755:2424":{"id":"0:1755:2424","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/set.rs","begin":[446,4],"end":[450,5]},"visibility":"public","docs":"Creates an empty `HashSet` with the specified capacity, using\n`hasher` to hash the keys.\n\nThe hash set will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash set will not allocate.\n\nWarning: `hasher` is normally randomly generated, and\nis designed to allow `HashSet`s to be resistant to attacks that\ncause many collisions and very poor performance. Setting it\nmanually using this function can expose a DoS attack vector.\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashMap to be useful, see its documentation for details.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut set = HashSet::with_capacity_and_hasher(10, s);\nset.insert(1);\n```\n\n[`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}],["hasher",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:611:794":{"id":"0:611:794","crate_id":0,"name":"iter","span":{"filename":"src/map.rs","begin":[660,4],"end":[668,5]},"visibility":"public","docs":"An iterator visiting all key-value pairs in arbitrary order.\nThe iterator element type is `(&'a K, &'a V)`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\nassert_eq!(map.len(), 3);\nlet mut vec: Vec<(&str, i32)> = Vec::new();\n\nfor (key, val) in map.iter() {\n    println!(\"key: {} val: {}\", key, val);\n    vec.push((*key, *val));\n}\n\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(\"a\", 1), (\"b\", 2), (\"c\", 3)]);\n\nassert_eq!(map.len(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:752:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12751:40808":{"id":"1:12751:40808","crate_id":1,"name":"as_slice","span":null,"visibility":"default","docs":"Currently, the consumers of `SlicePattern` need a slice.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SlicePattern","id":"1:12749:11294","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1750:1965":{"id":"0:1750:1965","crate_id":0,"name":"clear","span":{"filename":"src/set.rs","begin":[380,4],"end":[382,5]},"visibility":"public","docs":"Clears the set, removing all values.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut v = HashSet::new();\nv.insert(1);\nv.clear();\nassert!(v.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:699:2821":{"id":"0:699:2821","crate_id":0,"name":"try_insert","span":{"filename":"src/map.rs","begin":[1773,4],"end":[1782,5]},"visibility":"public","docs":"Tries to insert a key-value pair into the map, and returns\na mutable reference to the value in the entry.\n\n# Errors\n\nIf the map already had this key present, nothing is updated, and\nan error containing the occupied entry and the value is returned.\n\n# Examples\n\nBasic usage:\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::OccupiedError;\n\nlet mut map = HashMap::new();\nassert_eq!(map.try_insert(37, \"a\").unwrap(), &\"a\");\n\nmatch map.try_insert(37, \"b\") {\n    Err(OccupiedError { entry, value }) => {\n        assert_eq!(entry.key(), &37);\n        assert_eq!(entry.get(), &\"a\");\n        assert_eq!(value, \"b\");\n    }\n    _ => panic!()\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"generic","inner":"K"}],["value",{"kind":"generic","inner":"V"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}},{"type":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1258:2822","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2247":{"id":"0:2247","crate_id":0,"name":null,"span":{"filename":"src/raw/alloc.rs","begin":[42,19],"end":[42,24]},"visibility":{"restricted":{"parent":"0:62:1638","path":"::raw::alloc::inner"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2248:420"],"negative":false,"synthetic":false,"blanket_impl":null}},"4:6198:43101":{"id":"4:6198:43101","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13806:42444"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8508:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1778:62":{"id":"0:1778:62","crate_id":0,"name":"union","span":{"filename":"src/set.rs","begin":[742,4],"end":[753,5]},"visibility":"public","docs":"Visits the values representing the union,\ni.e., all the values in `self` or `other`, without duplicates.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Print 1, 2, 3, 4 in arbitrary order.\nfor x in a.union(&b) {\n    println!(\"{}\", x);\n}\n\nlet union: HashSet<_> = a.union(&b).collect();\nassert_eq!(union, [1, 2, 3, 4].iter().collect());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Union","id":"0:1919:4105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3141:10785":{"id":"1:3141:10785","crate_id":1,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:3140:10815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:586":{"id":"0:586","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[331,0],"end":[349,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"resolved_path","inner":{"name":"DefaultHashBuilder","id":"0:538:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:590:1673","0:591:1922"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3510:908":{"id":"1:3510:908","crate_id":1,"name":"mul","span":null,"visibility":"default","docs":"Performs the `*` operation.\n\n# Example\n\n```\nassert_eq!(12 * 2, 24);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Mul","id":"1:3507:4635","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8956:304":{"id":"1:8956:304","crate_id":1,"name":"any","span":null,"visibility":"default","docs":"Tests if any element of the iterator matches a predicate.\n\n`any()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, and if any of them return\n`true`, then so does `any()`. If they all return `false`, it\nreturns `false`.\n\n`any()` is short-circuiting; in other words, it will stop processing\nas soon as it finds a `true`, given that no matter what else happens,\nthe result will also be `true`.\n\nAn empty iterator returns `false`.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert!(a.iter().any(|&x| x > 0));\n\nassert!(!a.iter().any(|&x| x > 5));\n```\n\nStopping at the first `true`:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert!(iter.any(|&x| x != 2));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next(), Some(&2));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3936:699":{"id":"1:3936:699","crate_id":1,"name":"from_residual","span":null,"visibility":"default","docs":"Constructs the type from a compatible `Residual` type.\n\nThis should be implemented consistently with the `branch` method such\nthat applying the `?` operator will get back an equivalent residual:\n`FromResidual::from_residual(r).branch() --> ControlFlow::Break(r)`.\n(It must not be an *identical* residual when interconversion is involved.)\n\n# Examples\n\n```\n#![feature(try_trait_v2)]\nuse std::ops::{ControlFlow, FromResidual};\n\nassert_eq!(Result::<String, i64>::from_residual(Err(3_u8)), Err(3));\nassert_eq!(Option::<String>::from_residual(None), None);\nassert_eq!(\n    ControlFlow::<_, String>::from_residual(ControlFlow::Break(5)),\n    ControlFlow::Break(5),\n);\n```","links":{},"attrs":["#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["residual",{"kind":"generic","inner":"R"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3239-0:1716:146":{"id":"b:1:3239-0:1716:146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3212:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3241:693"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1287:783":{"id":"0:1287:783","crate_id":0,"name":"into_iter","span":{"filename":"src/map.rs","begin":[4597,4],"end":[4599,5]},"visibility":"default","docs":"Creates an iterator over the entries of a `HashMap` in arbitrary order.\nThe iterator element type is `(&'a K, &'a V)`.\n\nReturn the same `Iter` struct as by the [`iter`] method on [`HashMap`].\n\n[`iter`]: struct.HashMap.html#method.iter\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet map_one: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\nlet mut map_two = HashMap::new();\n\nfor (key, value) in &map_one {\n    println!(\"Key: {}, Value: {}\", key, value);\n    map_two.insert_unique_unchecked(*key, *value);\n}\n\nassert_eq!(map_one, map_two);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:752:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8694:9972":{"id":"1:8694:9972","crate_id":1,"name":"nth_back","span":null,"visibility":"default","docs":"Returns the `n`th element from the end of the iterator.\n\nThis is essentially the reversed version of [`Iterator::nth()`].\nAlthough like most indexing operations, the count starts from zero, so\n`nth_back(0)` returns the first value from the end, `nth_back(1)` the\nsecond, and so on.\n\nNote that all elements between the end and the returned element will be\nconsumed, including the returned element. This also means that calling\n`nth_back(0)` multiple times on the same iterator will return different\nelements.\n\n`nth_back()` will return [`None`] if `n` is greater than or equal to the\nlength of the iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().nth_back(2), Some(&1));\n```\n\nCalling `nth_back()` multiple times doesn't rewind the iterator:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.nth_back(1), Some(&2));\nassert_eq!(iter.nth_back(1), None);\n```\n\nReturning `None` if there are less than `n + 1` elements:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().nth_back(10), None);\n```","links":{"`Iterator::nth()`":"1:8859:9979","`None`":"1:51151:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9053:1025":{"id":"1:9053:1025","crate_id":1,"name":"partial_cmp","span":null,"visibility":"default","docs":"[Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\nof another.\n\n# Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!([1.].iter().partial_cmp([1.].iter()), Some(Ordering::Equal));\nassert_eq!([1.].iter().partial_cmp([1., 2.].iter()), Some(Ordering::Less));\nassert_eq!([1., 2.].iter().partial_cmp([1.].iter()), Some(Ordering::Greater));\n\nassert_eq!([f64::NAN].iter().partial_cmp([1.].iter()), None);\n```","links":{"Ord#lexicographical-comparison":"1:2982:182","`Iterator`":"1:8846:160"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:41194:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2995:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:857:672":{"id":"0:857:672","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[2505,4],"end":[2507,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:10484:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:10473:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4998:2170":{"id":"1:4998:2170","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":"The type of items yielded by the async iterator.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:4010:4662":{"id":"1:4010:4662","crate_id":1,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"4:5919:186":{"id":"4:5919:186","crate_id":4,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after concatenation","links":{},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:13704:42412":{"id":"1:13704:42412","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"1:3737:2283","`str`":"1:61609:4399","str::slice_mut_unchecked":"1:13705:42413"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3600:4649":{"id":"1:3600:4649","crate_id":1,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3602:1271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3521:1131":{"id":"1:3521:1131","crate_id":1,"name":"rem","span":null,"visibility":"default","docs":"Performs the `%` operation.\n\n# Example\n\n```\nassert_eq!(12 % 10, 2);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Rem","id":"1:3518:4637","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23039:40918":{"id":"1:23039:40918","crate_id":1,"name":"reduce_sum","span":null,"visibility":"default","docs":"Returns the sum of the lanes of the vector.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{f32x2, SimdFloat};\nlet v = f32x2::from_array([1., 2.]);\nassert_eq!(v.reduce_sum(), 3.);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23017:10956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13711:40772":{"id":"1:13711:40772","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:13712:40732"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:53412:11124","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13772:42430":{"id":"1:13772:42430","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11173:767":{"id":"1:11173:767","crate_id":1,"name":"index","span":null,"visibility":"default","docs":"Returns a shared reference to the output at this location, panicking\nif out of bounds.","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"1:11166:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3414:228-0:845:2474":{"id":"a:1:3414:228-0:845:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:76:1803":{"id":"0:76:1803","crate_id":0,"name":"Allocator","span":{"filename":"src/raw/alloc.rs","begin":[37,4],"end":[40,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_safety_doc)]"],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["0:77:2243","0:78:2149"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:79"]}},"1:23019:40917":{"id":"1:23019:40917","crate_id":1,"name":"Scalar","span":null,"visibility":"default","docs":"Scalar type contained by this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:5000:2191":{"id":"1:5000:2191","crate_id":1,"name":"size_hint","span":null,"visibility":"default","docs":"Returns the bounds on the remaining length of the async iterator.\n\nSpecifically, `size_hint()` returns a tuple where the first element\nis the lower bound, and the second element is the upper bound.\n\nThe second half of the tuple that is returned is an <code>[Option]<[usize]></code>.\nA [`None`] here means that either there is no known upper bound, or the\nupper bound is larger than [`usize`].\n\n# Implementation notes\n\nIt is not enforced that an async iterator implementation yields the declared\nnumber of elements. A buggy async iterator may yield less than the lower bound\nor more than the upper bound of elements.\n\n`size_hint()` is primarily intended to be used for optimizations such as\nreserving space for the elements of the async iterator, but must not be\ntrusted to e.g., omit bounds checks in unsafe code. An incorrect\nimplementation of `size_hint()` should not lead to memory safety\nviolations.\n\nThat said, the implementation should provide a correct estimation,\nbecause otherwise it would be a violation of the trait's protocol.\n\nThe default implementation returns <code>(0, [None])</code> which is correct for any\nasync iterator.","links":{"usize":"1:61626:4414","Option":"1:51149:181","`usize`":"1:61626:4414","`None`":"1:51151:179","None":"1:51151:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1149:2662":{"id":"0:1149:2662","crate_id":0,"name":"VacantEntry","span":{"filename":"src/map.rs","begin":[4257,0],"end":[4261,1]},"visibility":"public","docs":"A view into a vacant entry in a `HashMap`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap, VacantEntry};\n\nlet mut map = HashMap::<&str, i32>::new();\n\nlet entry_v: VacantEntry<_, _, _> = match map.entry(\"a\") {\n    Entry::Vacant(view) => view,\n    Entry::Occupied(_) => unreachable!(),\n};\nentry_v.insert(10);\nassert!(map[&\"a\"] == 10 && map.len() == 1);\n\n// Nonexistent key (insert and update)\nmatch map.entry(\"b\") {\n    Entry::Occupied(_) => unreachable!(),\n    Entry::Vacant(view) => {\n        let value = view.insert(2);\n        assert_eq!(*value, 2);\n        *value = 20;\n    }\n}\nassert!(map[&\"b\"] == 20 && map.len() == 2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:1734:1673":{"id":"0:1734:1673","crate_id":0,"name":"new_in","span":{"filename":"src/set.rs","begin":[185,4],"end":[189,5]},"visibility":"public","docs":"Creates an empty `HashSet`.\n\nThe hash set is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet set: HashSet<i32> = HashSet::new();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2995:189":{"id":"1:2995:189","crate_id":1,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2997:1025","1:2998:842","1:2999:807","1:3000:725","1:3001:708"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2946:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1740:1917":{"id":"0:1740:1917","crate_id":0,"name":"capacity","span":{"filename":"src/set.rs","begin":[222,4],"end":[224,5]},"visibility":"public","docs":"Returns the number of elements the set can hold without reallocating.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet set: HashSet<i32> = HashSet::with_capacity(100);\nassert!(set.capacity() >= 100);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13769:42429":{"id":"1:13769:42429","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13309:10820","str::match_indices":"1:13766:42428","prim@char":"1:61603:4394","`DoubleEndedIterator`":"1:8691:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:53306:11118","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13334:10819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:83:59":{"id":"0:83:59","crate_id":0,"name":"default","span":{"filename":"src/raw/alloc.rs","begin":[56,8],"end":[58,9]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10535:4590":{"id":"1:10535:4590","crate_id":1,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10536:672"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2908:420":{"id":"1:2908:420","crate_id":1,"name":"clone","span":null,"visibility":"default","docs":"Returns a copy of the value.\n\n# Examples\n\n```\n# #![allow(noop_method_call)]\nlet hello = \"Hello\"; // &str implements Clone\n\nassert_eq!(\"Hello\", hello.clone());\n```","links":{},"attrs":["#[must_use =\n\"cloning is often expensive and is not expected to have side effects\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2197":{"id":"0:2197","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[118,0],"end":[118,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::set::HashSet","name":"HashSet","id":"0:1716:146","glob":false}},"1:23403:10894":{"id":"1:23403:10894","crate_id":1,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"1:24040:10764","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23394:10815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3685:133":{"id":"1:3685:133","crate_id":1,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3687:186","1:3688:389"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3414:228":{"id":"1:3414:228","crate_id":1,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3595:4648":{"id":"1:3595:4648","crate_id":1,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3597:1268"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9092:10015":{"id":"1:9092:10015","crate_id":1,"name":"is_sorted_by_key","span":null,"visibility":"default","docs":"Checks if the elements of this iterator are sorted using the given key extraction\nfunction.\n\nInstead of comparing the iterator's elements directly, this function compares the keys of\nthe elements, as determined by `f`. Apart from that, it's equivalent to [`is_sorted`]; see\nits documentation for more information.\n\n[`is_sorted`]: Iterator::is_sorted\n\n# Examples\n\n```\n#![feature(is_sorted)]\n\nassert!([\"c\", \"bb\", \"aaa\"].iter().is_sorted_by_key(|s| s.len()));\nassert!(![-2i32, -1, 0, 3].iter().is_sorted_by_key(|n| n.abs()));\n```","links":{"Iterator::is_sorted":"1:9085:10013"},"attrs":["#[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"K"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2995:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23028:41722":{"id":"1:23028:41722","crate_id":1,"name":"is_sign_negative","span":null,"visibility":"default","docs":"Returns true for each lane if it has a negative sign, including\n`-0.0`, `NaN`s with negative sign bit and negative infinity.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23017:10956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3652:117":{"id":"1:3652:117","crate_id":1,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3653:230","1:3654:555"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1302:2170":{"id":"0:1302:2170","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4640,4],"end":[4640,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}},"0:2284:672":{"id":"0:2284:672","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[121,31],"end":[121,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:10484:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:10473:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13798:42441":{"id":"1:13798:42441","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:61603:4394","self::pattern":"1:13309:10820"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13334:10819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1798:1674":{"id":"0:1798:1674","crate_id":0,"name":"insert","span":{"filename":"src/set.rs","begin":[1031,4],"end":[1033,5]},"visibility":"public","docs":"Adds a value to the set.\n\nIf the set did not have this value present, `true` is returned.\n\nIf the set did have this value present, `false` is returned.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set = HashSet::new();\n\nassert_eq!(set.insert(2), true);\nassert_eq!(set.insert(2), false);\nassert_eq!(set.len(), 1);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:581":{"id":"0:581","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[292,0],"end":[328,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"resolved_path","inner":{"name":"DefaultHashBuilder","id":"0:538:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:584:936","0:585:1921"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8868:857":{"id":"1:8868:857","crate_id":1,"name":"map","span":null,"visibility":"default","docs":"Takes a closure and creates an iterator which calls that closure on each\nelement.\n\n`map()` transforms one iterator into another, by means of its argument:\nsomething that implements [`FnMut`]. It produces a new iterator which\ncalls this closure on each element of the original iterator.\n\nIf you are good at thinking in types, you can think of `map()` like this:\nIf you have an iterator that gives you elements of some type `A`, and\nyou want an iterator of some other type `B`, you can use `map()`,\npassing a closure that takes an `A` and returns a `B`.\n\n`map()` is conceptually similar to a [`for`] loop. However, as `map()` is\nlazy, it is best used when you're already working with other iterators.\nIf you're doing some sort of looping for a side effect, it's considered\nmore idiomatic to use [`for`] than `map()`.\n\n[`for`]: ../../book/ch03-05-control-flow.html#looping-through-a-collection-with-for\n[`FnMut`]: crate::ops::FnMut\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().map(|x| 2 * x);\n\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), Some(4));\nassert_eq!(iter.next(), Some(6));\nassert_eq!(iter.next(), None);\n```\n\nIf you're doing some sort of side effect, prefer [`for`] to `map()`:\n\n```\n# #![allow(unused_must_use)]\n// don't do this:\n(0..5).map(|x| println!(\"{x}\"));\n\n// it won't even execute, as it is lazy. Rust will warn you about this.\n\n// Instead, use for:\nfor x in 0..5 {\n    println!(\"{x}\");\n}\n```","links":{"crate::ops::FnMut":"1:3682:132"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Map","id":"1:50284:4498","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2997:1025":{"id":"1:2997:1025","crate_id":1,"name":"partial_cmp","span":null,"visibility":"default","docs":"This method returns an ordering between `self` and `other` values if one exists.\n\n# Examples\n\n```\nuse std::cmp::Ordering;\n\nlet result = 1.0.partial_cmp(&2.0);\nassert_eq!(result, Some(Ordering::Less));\n\nlet result = 1.0.partial_cmp(&1.0);\nassert_eq!(result, Some(Ordering::Equal));\n\nlet result = 2.0.partial_cmp(&1.0);\nassert_eq!(result, Some(Ordering::Greater));\n```\n\nWhen comparison is impossible:\n\n```\nlet result = f64::NAN.partial_cmp(&1.0);\nassert_eq!(result, None);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:41194:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23087:40924":{"id":"1:23087:40924","crate_id":1,"name":"reduce_xor","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"xor\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23070:10945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:709:2898":{"id":"0:709:2898","crate_id":0,"name":"raw_entry_mut","span":{"filename":"src/map.rs","begin":[1963,4],"end":[1965,5]},"visibility":"public","docs":"Creates a raw entry builder for the HashMap.\n\nRaw entries provide the lowest level of control for searching and\nmanipulating a map. They must be manually initialized with a hash and\nthen manually searched. After this, insertions into a vacant entry\nstill require an owned key to be provided.\n\nRaw entries are useful for such exotic situations as:\n\n* Hash memoization\n* Deferring the creation of an owned key until it is known to be required\n* Using a search key that doesn't work with the Borrow trait\n* Using custom comparison logic without newtype wrappers\n\nBecause raw entries provide much more low-level control, it's much easier\nto put the HashMap into an inconsistent state which, while memory-safe,\nwill cause the map to produce seemingly random results. Higher-level and\nmore foolproof APIs like `entry` should be preferred when possible.\n\nIn particular, the hash used to initialized the raw entry must still be\nconsistent with the hash of the key that is ultimately stored in the entry.\nThis is because implementations of HashMap may need to recompute hashes\nwhen resizing, at which point only the keys are available.\n\nRaw entries give mutable access to the keys. This must not be used\nto modify how the key would compare or hash, as the map will not re-evaluate\nwhere the key should go, meaning the keys may become \"lost\" if their\nlocation does not reflect their state. For instance, if you change a key\nso that the map now contains keys which compare equal, search may start\nacting erratically, with two keys randomly masking each other. Implementations\nare free to assume this doesn't happen (within the limits of memory-safety).\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\", 100), (\"b\", 200), (\"c\", 300)]);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\n// Existing key (insert and update)\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(mut view) => {\n        assert_eq!(view.get(), &100);\n        let v = view.get_mut();\n        let new_v = (*v) * 10;\n        *v = new_v;\n        assert_eq!(view.insert(1111), 1000);\n    }\n}\n\nassert_eq!(map[&\"a\"], 1111);\nassert_eq!(map.len(), 3);\n\n// Existing key (take)\nlet hash = compute_hash(map.hasher(), &\"c\");\nmatch map.raw_entry_mut().from_key_hashed_nocheck(hash, &\"c\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"c\", 300));\n    }\n}\nassert_eq!(map.raw_entry().from_key(&\"c\"), None);\nassert_eq!(map.len(), 2);\n\n// Nonexistent key (insert and update)\nlet key = \"d\";\nlet hash = compute_hash(map.hasher(), &key);\nmatch map.raw_entry_mut().from_hash(hash, |q| *q == key) {\n    RawEntryMut::Occupied(_) => unreachable!(),\n    RawEntryMut::Vacant(view) => {\n        let (k, value) = view.insert(\"d\", 4000);\n        assert_eq!((*k, *value), (\"d\", 4000));\n        *value = 40000;\n    }\n}\nassert_eq!(map[&\"d\"], 40000);\nassert_eq!(map.len(), 3);\n\nmatch map.raw_entry_mut().from_hash(hash, |q| *q == key) {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"d\", 40000));\n    }\n}\nassert_eq!(map.get(&\"d\"), None);\nassert_eq!(map.len(), 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"RawEntryBuilderMut","id":"0:935:2899","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:665:2754":{"id":"0:665:2754","crate_id":0,"name":"get_many_key_value_mut","span":{"filename":"src/map.rs","begin":[1541,4],"end":[1551,5]},"visibility":"public","docs":"Attempts to get mutable references to `N` values in the map at once, with immutable\nreferences to the corresponding keys.\n\nReturns an array of length `N` with the results of each query. For soundness, at most one\nmutable reference will be returned to any value. `None` will be returned if any of the keys\nare duplicates or missing.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut libraries = HashMap::new();\nlibraries.insert(\"Bodleian Library\".to_string(), 1602);\nlibraries.insert(\"Athenæum\".to_string(), 1807);\nlibraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\nlibraries.insert(\"Library of Congress\".to_string(), 1800);\n\nlet got = libraries.get_many_key_value_mut([\n    \"Bodleian Library\",\n    \"Herzogin-Anna-Amalia-Bibliothek\",\n]);\nassert_eq!(\n    got,\n    Some([\n        (&\"Bodleian Library\".to_string(), &mut 1602),\n        (&\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), &mut 1691),\n    ]),\n);\n// Missing keys result in None\nlet got = libraries.get_many_key_value_mut([\n    \"Bodleian Library\",\n    \"Gewandhaus\",\n]);\nassert_eq!(got, None);\n\n// Duplicate keys result in None\nlet got = libraries.get_many_key_value_mut([\n    \"Bodleian Library\",\n    \"Herzogin-Anna-Amalia-Bibliothek\",\n    \"Herzogin-Anna-Amalia-Bibliothek\",\n]);\nassert_eq!(got, None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["ks",{"kind":"array","inner":{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}},"len":"N"}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}]},"len":"N"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23036:40531":{"id":"1:23036:40531","crate_id":1,"name":"simd_min","span":null,"visibility":"default","docs":"Returns the minimum of each lane.\n\nIf one of the values is `NAN`, then the other value is returned.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1177:1585":{"id":"0:1177:1585","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[4353,11],"end":[4353,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"VacantEntryRef","id":"0:1240:2676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"Q"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},"1:4252:10812":{"id":"1:4252:10812","crate_id":1,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4253:41305"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1873:367":{"id":"0:1873:367","crate_id":0,"name":"bitxor","span":{"filename":"src/set.rs","begin":[1379,4],"end":[1381,5]},"visibility":"default","docs":"Returns the symmetric difference of `self` and `rhs` as a new `HashSet<T, S>`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a ^ &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23083:40920":{"id":"1:23083:40920","crate_id":1,"name":"reduce_max","span":null,"visibility":"default","docs":"Returns the maximum lane in the vector.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{i32x4, SimdInt};\nlet v = i32x4::from_array([1, 2, 3, 4]);\nassert_eq!(v.reduce_max(), 4);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23070:10945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3502:3945":{"id":"1:3502:3945","crate_id":1,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3504:186","1:3505:1394"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13339:10824":{"id":"1:13339:10824","crate_id":1,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13334:10819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:8919:9995":{"id":"1:8919:9995","crate_id":1,"name":"partition_in_place","span":null,"visibility":"default","docs":"Reorders the elements of this iterator *in-place* according to the given predicate,\nsuch that all those that return `true` precede all those that return `false`.\nReturns the number of `true` elements found.\n\nThe relative order of partitioned items is not maintained.\n\n# Current implementation\n\nCurrent algorithms tries finding the first element for which the predicate evaluates\nto false, and the last element for which it evaluates to true and repeatedly swaps them.\n\nTime complexity: *O*(*n*)\n\nSee also [`is_partitioned()`] and [`partition()`].\n\n[`is_partitioned()`]: Iterator::is_partitioned\n[`partition()`]: Iterator::partition\n\n# Examples\n\n```\n#![feature(iter_partition_in_place)]\n\nlet mut a = [1, 2, 3, 4, 5, 6, 7];\n\n// Partition in-place between evens and odds\nlet i = a.iter_mut().partition_in_place(|&n| n % 2 == 0);\n\nassert_eq!(i, 3);\nassert!(a[..i].iter().all(|&n| n % 2 == 0)); // evens\nassert!(a[i..].iter().all(|&n| n % 2 == 1)); // odds\n```","links":{"Iterator::is_partitioned":"1:8930:9996","Iterator::partition":"1:8911:9994"},"attrs":["#[unstable(feature = \"iter_partition_in_place\", reason = \"new API\", issue =\n\"62543\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:8691:121","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13319:10821":{"id":"1:13319:10821","crate_id":1,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:13321:10823","1:13322:40422","1:13323:40423","1:13324:40424","1:13325:40426","1:13326:40425","1:13327:40427"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1933":{"id":"0:1933","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1524,0],"end":[1554,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1937:2170","0:1938:2171","0:1939:783"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:8663:1617":{"id":"1:8663:1617","crate_id":1,"name":"extend_one","span":null,"visibility":"default","docs":"Extends a collection with exactly one element.","links":{},"attrs":["#[unstable(feature = \"extend_one\", issue = \"72631\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["item",{"kind":"generic","inner":"A"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:598":{"id":"0:598","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[427,0],"end":[981,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:603:291","0:604:2426","0:605:2428","0:606:1972","0:607:1917","0:608:2473","0:609:1542","0:610:2490","0:611:794","0:612:2492","0:613:808","0:614:1968","0:615:2066","0:616:2551","0:618:2579","0:620:1965","0:621:2593","0:622:2600"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1763:1972":{"id":"0:1763:1972","crate_id":0,"name":"hasher","span":{"filename":"src/set.rs","begin":[533,4],"end":[535,5]},"visibility":"public","docs":"Returns a reference to the set's [`BuildHasher`].\n\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet hasher = DefaultHashBuilder::default();\nlet set: HashSet<i32> = HashSet::with_hasher(hasher);\nlet hasher: &DefaultHashBuilder = set.hasher();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"S"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2998:842":{"id":"1:2998:842","crate_id":1,"name":"lt","span":null,"visibility":"default","docs":"This method tests less than (for `self` and `other`) and is used by the `<` operator.\n\n# Examples\n\n```\nlet result = 1.0 < 2.0;\nassert_eq!(result, true);\n\nlet result = 2.0 < 1.0;\nassert_eq!(result, false);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Rhs"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8855:9977":{"id":"1:8855:9977","crate_id":1,"name":"last","span":null,"visibility":"default","docs":"Consumes the iterator, returning the last element.\n\nThis method will evaluate the iterator until it returns [`None`]. While\ndoing so, it keeps track of the current element. After [`None`] is\nreturned, `last()` will then return the last element it saw.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().last(), Some(&3));\n\nlet a = [1, 2, 3, 4, 5];\nassert_eq!(a.iter().last(), Some(&5));\n```","links":{"`None`":"1:51151:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8200:41600":{"id":"1:8200:41600","crate_id":1,"name":"backward_unchecked","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *predecessor*\nof `self` `count` times.\n\n# Safety\n\nIt is undefined behavior for this operation to overflow the\nrange of values supported by `Self`. If you cannot guarantee that this\nwill not overflow, use `backward` or `backward_checked` instead.\n\n# Invariants\n\nFor any `a`:\n\n* if there exists `b` such that `b < a`, it is safe to call `Step::backward_unchecked(a, 1)`\n* if there exists `b`, `n` such that `steps_between(&b, &a) == Some(n)`,\n  it is safe to call `Step::backward_unchecked(a, m)` for any `m <= n`.\n\nFor any `a` and `n`, where no overflow occurs:\n\n* `Step::backward_unchecked(a, n)` is equivalent to `Step::backward(a, n)`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:742:186":{"id":"0:742:186","crate_id":0,"name":"Output","span":{"filename":"src/map.rs","begin":[2148,4],"end":[2148,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"V"}}},"4:6509:232":{"id":"4:6509:232","crate_id":4,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:6510:1436"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3931:4656":{"id":"1:3931:4656","crate_id":1,"name":"Residual","span":null,"visibility":"default","docs":"The type of the value passed to [`FromResidual::from_residual`]\nas part of `?` when short-circuiting.\n\nThis represents the possible values of the `Self` type which are *not*\nrepresented by the `Output` type.\n\n# Note to Implementors\n\nThe choice of this type is critical to interconversion.\nUnlike the `Output` type, which will often be a raw generic type,\nthis type is typically a newtype of some sort to \"color\" the type\nso that it's distinguishable from the residuals of other types.\n\nThis is why `Result<T, E>::Residual` is not `E`, but `Result<Infallible, E>`.\nThat way it's distinct from `ControlFlow<E>::Residual`, for example,\nand thus `?` on `ControlFlow` cannot be used in a method returning `Result`.\n\nIf you're making a generic type `Foo<T>` that implements `Try<Output = T>`,\nthen typically you can use `Foo<std::convert::Infallible>` as its `Residual`\ntype: that type will have a \"hole\" in the correct place, and will maintain the\n\"foo-ness\" of the residual so other types need to opt-in to interconversion.","links":{"`FromResidual::from_residual`":"1:3936:699"},"attrs":["#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:2985:1843":{"id":"1:2985:1843","crate_id":1,"name":"min","span":null,"visibility":"default","docs":"Compares and returns the minimum of two values.\n\nReturns the first argument if the comparison determines them to be equal.\n\n# Examples\n\n```\nassert_eq!(1, 1.min(2));\nassert_eq!(2, 2.min(2));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13739:42420":{"id":"1:13739:42420","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:13733:2182","self::pattern":"1:13309:10820","prim@char":"1:61603:4394","`DoubleEndedIterator`":"1:8691:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:53156:11083","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13334:10819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:614:1968":{"id":"0:614:1968","crate_id":0,"name":"is_empty","span":{"filename":"src/map.rs","begin":[751,4],"end":[753,5]},"visibility":"public","docs":"Returns `true` if the map contains no elements.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut a = HashMap::new();\nassert!(a.is_empty());\na.insert(1, \"a\");\nassert!(!a.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9045:10010":{"id":"1:9045:10010","crate_id":1,"name":"cmp_by","span":null,"visibility":"default","docs":"[Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\nof another with respect to the specified comparison function.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_order_by)]\n\nuse std::cmp::Ordering;\n\nlet xs = [1, 2, 3, 4];\nlet ys = [1, 4, 9, 16];\n\nassert_eq!(xs.iter().cmp_by(&ys, |&x, &y| x.cmp(&y)), Ordering::Less);\nassert_eq!(xs.iter().cmp_by(&ys, |&x, &y| (x * x).cmp(&y)), Ordering::Equal);\nassert_eq!(xs.iter().cmp_by(&ys, |&x, &y| (2 * x).cmp(&y)), Ordering::Greater);\n```","links":{"Ord#lexicographical-comparison":"1:2982:182","`Iterator`":"1:8846:160"},"attrs":["#[unstable(feature = \"iter_order_by\", issue = \"64295\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}],["cmp",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:41194:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:41194:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13716:3780":{"id":"1:13716:3780","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"1:13309:10820","prim@char":"1:61603:4394"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:735:59":{"id":"0:735:59","crate_id":0,"name":"default","span":{"filename":"src/map.rs","begin":[2136,4],"end":[2138,5]},"visibility":"default","docs":"Creates an empty `HashMap<K, V, S, A>`, with the `Default` value for the hasher and allocator.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse std::collections::hash_map::RandomState;\n\n// You can specify all types of HashMap, including hasher and allocator.\n// Created map is empty and don't allocate memory\nlet map: HashMap<u32, String> = Default::default();\nassert_eq!(map.capacity(), 0);\nlet map: HashMap<u32, String, RandomState> = HashMap::default();\nassert_eq!(map.capacity(), 0);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8656:2170":{"id":"1:8656:2170","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:8892:9987":{"id":"1:8892:9987","crate_id":1,"name":"scan","span":null,"visibility":"default","docs":"An iterator adapter similar to [`fold`] that holds internal state and\nproduces a new iterator.\n\n[`fold`]: Iterator::fold\n\n`scan()` takes two arguments: an initial value which seeds the internal\nstate, and a closure with two arguments, the first being a mutable\nreference to the internal state and the second an iterator element.\nThe closure can assign to the internal state to share state between\niterations.\n\nOn iteration, the closure will be applied to each element of the\niterator and the return value from the closure, an [`Option`], is\nyielded by the iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter().scan(1, |state, &x| {\n    // each iteration, we'll multiply the state by the element\n    *state = *state * x;\n\n    // then, we'll yield the negation of the state\n    Some(-*state)\n});\n\nassert_eq!(iter.next(), Some(-1));\nassert_eq!(iter.next(), Some(-2));\nassert_eq!(iter.next(), Some(-6));\nassert_eq!(iter.next(), None);\n```","links":{"`Option`":"1:51149:181","Iterator::fold":"1:8943:9999"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["initial_state",{"kind":"generic","inner":"St"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Scan","id":"1:50330:4501","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"St"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"St","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"St"}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3249:1457":{"id":"1:3249:1457","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:3219:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2110:1585":{"id":"0:2110:1585","crate_id":0,"name":"0","span":{"filename":"src/set.rs","begin":[1958,11],"end":[1958,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:2127:2662","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},"1:4205:1470":{"id":"1:4205:1470","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:49587:10813","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3851:41879":{"id":"1:3851:41879","crate_id":1,"name":"end_bound","span":null,"visibility":"default","docs":"End index bound.\n\nReturns the end value as a `Bound`.\n\n# Examples\n\n```\n# fn main() {\nuse std::ops::Bound::*;\nuse std::ops::RangeBounds;\n\nassert_eq!((3..).end_bound(), Unbounded);\nassert_eq!((3..10).end_bound(), Excluded(&10));\n# }\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bound","id":"1:49548:4652","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"4:5917:11308":{"id":"4:5917:11308","crate_id":4,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["4:5919:186","4:5920:445"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:608:2473":{"id":"0:608:2473","crate_id":0,"name":"keys","span":{"filename":"src/map.rs","begin":[556,4],"end":[558,5]},"visibility":"public","docs":"An iterator visiting all keys in arbitrary order.\nThe iterator element type is `&'a K`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\nassert_eq!(map.len(), 3);\nlet mut vec: Vec<&str> = Vec::new();\n\nfor key in map.keys() {\n    println!(\"{}\", key);\n    vec.push(*key);\n}\n\n// The `Keys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\"]);\n\nassert_eq!(map.len(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9083:708":{"id":"1:9083:708","crate_id":1,"name":"ge","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\ngreater than or equal to those of another.\n\n# Examples\n\n```\nassert_eq!([1].iter().ge([1].iter()), true);\nassert_eq!([1].iter().ge([1, 2].iter()), false);\nassert_eq!([1, 2].iter().ge([1].iter()), true);\nassert_eq!([1, 2].iter().ge([1, 2].iter()), true);\n```","links":{"`Iterator`":"1:8846:160","Ord#lexicographical-comparison":"1:2982:182"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2995:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13698:2020":{"id":"1:13698:2020","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:51151:179"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11166:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11166:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1735:1922":{"id":"0:1735:1922","crate_id":0,"name":"with_capacity_in","span":{"filename":"src/set.rs","begin":[204,4],"end":[208,5]},"visibility":"public","docs":"Creates an empty `HashSet` with the specified capacity.\n\nThe hash set will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash set will not allocate.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet set: HashSet<i32> = HashSet::with_capacity(10);\nassert!(set.capacity() >= 10);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3568:186":{"id":"1:3568:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `^` operator.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:3579:186":{"id":"1:3579:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The resulting type after applying the `>>` operator.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1769:1983":{"id":"0:1769:1983","crate_id":0,"name":"try_reserve","span":{"filename":"src/set.rs","begin":[582,4],"end":[584,5]},"visibility":"public","docs":"Tries to reserve capacity for at least `additional` more elements to be inserted\nin the given `HashSet<K,V>`. The collection may reserve more space to avoid\nfrequent reallocations.\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet mut set: HashSet<i32> = HashSet::new();\nset.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:942:3113":{"id":"0:942:3113","crate_id":0,"name":"RawEntryMut","span":{"filename":"src/map.rs","begin":[2882,0],"end":[2911,1]},"visibility":"public","docs":"A view into a single entry in a map, which may either be vacant or occupied.\n\nThis is a lower-level version of [`Entry`].\n\nThis `enum` is constructed through the [`raw_entry_mut`] method on [`HashMap`],\nthen calling one of the methods of that [`RawEntryBuilderMut`].\n\n[`HashMap`]: struct.HashMap.html\n[`Entry`]: enum.Entry.html\n[`raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut\n[`RawEntryBuilderMut`]: struct.RawEntryBuilderMut.html\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut, RawOccupiedEntryMut};\n\nlet mut map = HashMap::new();\nmap.extend([('a', 1), ('b', 2), ('c', 3)]);\nassert_eq!(map.len(), 3);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\n// Existing key (insert)\nlet raw: RawEntryMut<_, _, _> = map.raw_entry_mut().from_key(&'a');\nlet _raw_o: RawOccupiedEntryMut<_, _, _> = raw.insert('a', 10);\nassert_eq!(map.len(), 3);\n\n// Nonexistent key (insert)\nmap.raw_entry_mut().from_key(&'d').insert('d', 40);\nassert_eq!(map.len(), 4);\n\n// Existing key (or_insert)\nlet hash = compute_hash(map.hasher(), &'b');\nlet kv = map\n    .raw_entry_mut()\n    .from_key_hashed_nocheck(hash, &'b')\n    .or_insert('b', 20);\nassert_eq!(kv, (&mut 'b', &mut 2));\n*kv.1 = 20;\nassert_eq!(map.len(), 4);\n\n// Nonexistent key (or_insert)\nlet hash = compute_hash(map.hasher(), &'e');\nlet kv = map\n    .raw_entry_mut()\n    .from_key_hashed_nocheck(hash, &'e')\n    .or_insert('e', 50);\nassert_eq!(kv, (&mut 'e', &mut 50));\nassert_eq!(map.len(), 5);\n\n// Existing key (or_insert_with)\nlet hash = compute_hash(map.hasher(), &'c');\nlet kv = map\n    .raw_entry_mut()\n    .from_hash(hash, |q| q == &'c')\n    .or_insert_with(|| ('c', 30));\nassert_eq!(kv, (&mut 'c', &mut 3));\n*kv.1 = 30;\nassert_eq!(map.len(), 5);\n\n// Nonexistent key (or_insert_with)\nlet hash = compute_hash(map.hasher(), &'f');\nlet kv = map\n    .raw_entry_mut()\n    .from_hash(hash, |q| q == &'f')\n    .or_insert_with(|| ('f', 60));\nassert_eq!(kv, (&mut 'f', &mut 60));\nassert_eq!(map.len(), 6);\n\nprintln!(\"Our HashMap: {:?}\", map);\n\nlet mut vec: Vec<_> = map.iter().map(|(&k, &v)| (k, v)).collect();\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [('a', 10), ('b', 20), ('c', 30), ('d', 40), ('e', 50), ('f', 60)]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:948:2659","0:951:2661"],"impls":[]}},"1:3505:1394":{"id":"1:3505:1394","crate_id":1,"name":"sub","span":null,"visibility":"default","docs":"Performs the `-` operation.\n\n# Example\n\n```\nassert_eq!(12 - 1, 11);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Sub","id":"1:3502:3945","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13719:42418":{"id":"1:13719:42418","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"1:13309:10820","prim@char":"1:61603:4394"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3556:3942":{"id":"1:3556:3942","crate_id":1,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3558:186","1:3559:362"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13715:40739":{"id":"1:13715:40739","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:53430:11126","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13807:42445":{"id":"1:13807:42445","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5546:42445"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:53437:11127","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3222:1456":{"id":"1:3222:1456","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":"Performs the conversion.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"TryFrom","id":"1:3219:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:724":{"id":"0:724","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2104,0],"end":[2113,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10524:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10524:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10524:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:729:672"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2891-0:2244:1804":{"id":"b:1:2891-0:2244:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2885:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2893:3730"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:8887:9986":{"id":"1:8887:9986","crate_id":1,"name":"map_while","span":null,"visibility":"default","docs":"Creates an iterator that both yields elements based on a predicate and maps.\n\n`map_while()` takes a closure as an argument. It will call this\nclosure on each element of the iterator, and yield elements\nwhile it returns [`Some(_)`][`Some`].\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [-1i32, 4, 0, 1];\n\nlet mut iter = a.iter().map_while(|x| 16i32.checked_div(*x));\n\nassert_eq!(iter.next(), Some(-16));\nassert_eq!(iter.next(), Some(4));\nassert_eq!(iter.next(), None);\n```\n\nHere's the same example, but with [`take_while`] and [`map`]:\n\n[`take_while`]: Iterator::take_while\n[`map`]: Iterator::map\n\n```\nlet a = [-1i32, 4, 0, 1];\n\nlet mut iter = a.iter()\n                .map(|x| 16i32.checked_div(*x))\n                .take_while(|x| x.is_some())\n                .map(|x| x.unwrap());\n\nassert_eq!(iter.next(), Some(-16));\nassert_eq!(iter.next(), Some(4));\nassert_eq!(iter.next(), None);\n```\n\nStopping after an initial [`None`]:\n\n```\nlet a = [0, 1, 2, -3, 4, 5, -6];\n\nlet iter = a.iter().map_while(|x| u32::try_from(*x).ok());\nlet vec = iter.collect::<Vec<_>>();\n\n// We have more elements which could fit in u32 (4, 5), but `map_while` returned `None` for `-3`\n// (as the `predicate` returned `None`) and `collect` stops at the first `None` encountered.\nassert_eq!(vec, vec![0, 1, 2]);\n```\n\nBecause `map_while()` needs to look at the value in order to see if it\nshould be included or not, consuming iterators will see that it is\nremoved:\n\n```\nlet a = [1, 2, -3, 4];\nlet mut iter = a.iter();\n\nlet result: Vec<u32> = iter.by_ref()\n                           .map_while(|n| u32::try_from(*n).ok())\n                           .collect();\n\nassert_eq!(result, &[1, 2]);\n\nlet result: Vec<i32> = iter.cloned().collect();\n\nassert_eq!(result, &[4]);\n```\n\nThe `-3` is no longer there, because it was consumed in order to see if\nthe iteration should stop, but wasn't placed back into the iterator.\n\nNote that unlike [`take_while`] this iterator is **not** fused.\nIt is also not specified what this iterator returns after the first [`None`] is returned.\nIf you need fused iterator, use [`fuse`].\n\n[`fuse`]: Iterator::fuse","links":{"`None`":"1:51151:179","Iterator::fuse":"1:8900:9990","Iterator::take_while":"1:8885:9985","`Some`":"1:51153:223","Iterator::map":"1:8868:857"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MapWhile","id":"1:50293:4486","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14523:41901":{"id":"1:14523:41901","crate_id":1,"name":"allocate_zeroed","span":null,"visibility":"default","docs":"Behaves like `allocate`, but also ensures that the returned memory is zero-initialized.\n\n# Errors\n\nReturning `Err` indicates that either memory is exhausted or `layout` does not meet\nallocator's size or alignment constraints.\n\nImplementations are encouraged to return `Err` on memory exhaustion rather than panicking or\naborting, but this is not a strict requirement. (Specifically: it is *legal* to implement\nthis trait atop an underlying native allocation library that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an allocation error are encouraged to\ncall the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:54116:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2417:1796","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:54145:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13321:10823":{"id":"1:13321:10823","crate_id":1,"name":"Searcher","span":null,"visibility":"default","docs":"Associated searcher for this pattern","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"1:13328:10823","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"1:23020:41715":{"id":"1:23020:41715","crate_id":1,"name":"Bits","span":null,"visibility":"default","docs":"Bit representation of this SIMD vector type.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:698:2805":{"id":"0:698:2805","crate_id":0,"name":"insert_unique_unchecked","span":{"filename":"src/map.rs","begin":[1735,4],"end":[1742,5]},"visibility":"public","docs":"Insert a key-value pair into the map without checking\nif the key already exists in the map.\n\nReturns a reference to the key and value just inserted.\n\nThis operation is safe if a key does not exist in the map.\n\nHowever, if a key exists in the map already, the behavior is unspecified:\nthis operation may panic, loop forever, or any following operation with the map\nmay panic, loop forever or return arbitrary result.\n\nThat said, this operation (and following operations) are guaranteed to\nnot violate memory safety.\n\nThis operation is faster than regular insert, because it does not perform\nlookup before insertion.\n\nThis operation is useful during initial population of the map.\nFor example, when constructing a map from another map, we know\nthat keys are unique.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map1 = HashMap::new();\nassert_eq!(map1.insert(1, \"a\"), None);\nassert_eq!(map1.insert(2, \"b\"), None);\nassert_eq!(map1.insert(3, \"c\"), None);\nassert_eq!(map1.len(), 3);\n\nlet mut map2 = HashMap::new();\n\nfor (key, value) in map1.into_iter() {\n    map2.insert_unique_unchecked(key, value);\n}\n\nlet (key, value) = map2.insert_unique_unchecked(4, \"d\");\nassert_eq!(key, &4);\nassert_eq!(value, &mut \"d\");\n*value = \"e\";\n\nassert_eq!(map2[&1], \"a\");\nassert_eq!(map2[&2], \"b\");\nassert_eq!(map2[&3], \"c\");\nassert_eq!(map2[&4], \"e\");\nassert_eq!(map2.len(), 4);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["k",{"kind":"generic","inner":"K"}],["v",{"kind":"generic","inner":"V"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3932:698":{"id":"1:3932:698","crate_id":1,"name":"from_output","span":null,"visibility":"default","docs":"Constructs the type from its `Output` type.\n\nThis should be implemented consistently with the `branch` method\nsuch that applying the `?` operator will get back the original value:\n`Try::from_output(x).branch() --> ControlFlow::Continue(x)`.\n\n# Examples\n\n```\n#![feature(try_trait_v2)]\nuse std::ops::Try;\n\nassert_eq!(<Result<_, String> as Try>::from_output(3), Ok(3));\nassert_eq!(<Option<_> as Try>::from_output(4), Some(4));\nassert_eq!(\n    <std::ops::ControlFlow<String, _> as Try>::from_output(5),\n    std::ops::ControlFlow::Continue(5),\n);\n\n# fn make_question_mark_work() -> Option<()> {\nassert_eq!(Option::from_output(4)?, 4);\n# None }\n# make_question_mark_work();\n\n// This is used, for example, on the accumulator in `try_fold`:\nlet r = std::iter::empty().try_fold(4, |_, ()| -> Option<_> { unreachable!() });\nassert_eq!(r, Some(4));\n```","links":{},"attrs":["#[unstable(feature = \"try_trait_v2\", issue = \"84277\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["output",{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:9121:4476":{"id":"1:9121:4476","crate_id":1,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:789:2594":{"id":"0:789:2594","crate_id":0,"name":"IntoKeys","span":{"filename":"src/map.rs","begin":[2366,0],"end":[2368,1]},"visibility":"public","docs":"An owning iterator over the keys of a `HashMap` in arbitrary order.\nThe iterator element type is `K`.\n\nThis `struct` is created by the [`into_keys`] method on [`HashMap`].\nSee its documentation for more.\nThe map cannot be used after calling that method.\n\n[`into_keys`]: struct.HashMap.html#method.into_keys\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut keys = map.into_keys();\nlet mut vec = vec![keys.next(), keys.next(), keys.next()];\n\n// The `IntoKeys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some(1), Some(2), Some(3)]);\n\n// It is fused iterator\nassert_eq!(keys.next(), None);\nassert_eq!(keys.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:3569:367":{"id":"1:3569:367","crate_id":1,"name":"bitxor","span":null,"visibility":"default","docs":"Performs the `^` operation.\n\n# Examples\n\n```\nassert_eq!(true ^ false, true);\nassert_eq!(true ^ true, false);\nassert_eq!(5u8 ^ 1u8, 4);\nassert_eq!(5u8 ^ 2u8, 7);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"BitXor","id":"1:3566:3944","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2107:1585":{"id":"0:2107:1585","crate_id":0,"name":"0","span":{"filename":"src/set.rs","begin":[1943,13],"end":[1943,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:2116:2660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},"0:1867:186":{"id":"0:1867:186","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1325,4],"end":[1325,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:1358":{"id":"0:1358","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4760,0],"end":[4775,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["zip","step_by","advance_by","skip_while","cloned","skip","cmp","eq","find","filter","is_sorted_by_key","product","try_find","try_fold","lt","inspect","ge","take_while","min_by","nth","count","partial_cmp","rev","for_each","__iterator_get_unchecked","cmp_by","collect","rposition","try_for_each","try_collect","map_while","min_by_key","intersperse","min","enumerate","le","take","partial_cmp_by","unzip","ne","fold","size_hint","collect_into","scan","max_by","intersperse_with","eq_by","map","cycle","reduce","partition","flat_map","max_by_key","filter_map","next_chunk","chain","by_ref","is_sorted","array_chunks","try_reduce","partition_in_place","flatten","peekable","last","any","all","is_sorted_by","sum","max","position","find_map","is_partitioned","gt","fuse","copied"],"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1362:2170","0:1363:949","0:1364:2191"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2984:1877":{"id":"1:2984:1877","crate_id":1,"name":"max","span":null,"visibility":"default","docs":"Compares and returns the maximum of two values.\n\nReturns the second argument if the comparison determines them to be equal.\n\n# Examples\n\n```\nassert_eq!(2, 1.max(2));\nassert_eq!(2, 2.max(2));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3238:3401":{"id":"1:3238:3401","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3212:136"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1105:2657":{"id":"0:1105:2657","crate_id":0,"name":"Entry","span":{"filename":"src/map.rs","begin":[4110,0],"end":[4143,1]},"visibility":"public","docs":"A view into a single entry in a map, which may either be vacant or occupied.\n\nThis `enum` is constructed from the [`entry`] method on [`HashMap`].\n\n[`HashMap`]: struct.HashMap.html\n[`entry`]: struct.HashMap.html#method.entry\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap, OccupiedEntry};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\", 10), (\"b\", 20), (\"c\", 30)]);\nassert_eq!(map.len(), 3);\n\n// Existing key (insert)\nlet entry: Entry<_, _, _> = map.entry(\"a\");\nlet _raw_o: OccupiedEntry<_, _, _> = entry.insert(1);\nassert_eq!(map.len(), 3);\n// Nonexistent key (insert)\nmap.entry(\"d\").insert(4);\n\n// Existing key (or_insert)\nlet v = map.entry(\"b\").or_insert(2);\nassert_eq!(std::mem::replace(v, 2), 20);\n// Nonexistent key (or_insert)\nmap.entry(\"e\").or_insert(5);\n\n// Existing key (or_insert_with)\nlet v = map.entry(\"c\").or_insert_with(|| 3);\nassert_eq!(std::mem::replace(v, 3), 30);\n// Nonexistent key (or_insert_with)\nmap.entry(\"f\").or_insert_with(|| 6);\n\nprintln!(\"Our HashMap: {:?}\", map);\n\nlet mut vec: Vec<_> = map.iter().map(|(&k, &v)| (k, v)).collect();\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4), (\"e\", 5), (\"f\", 6)]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"variants_stripped":false,"variants":["0:1111:2659","0:1114:2661"],"impls":[]}},"1:14037:186":{"id":"1:14037:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The type of value produced on completion.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1731":{"id":"0:1731","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[172,0],"end":[209,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"DefaultHashBuilder","id":"0:538:2285","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1734:1673","0:1735:1922"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:14052:186":{"id":"1:14052:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The output that the future will produce on completion.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:8651:2170":{"id":"1:8651:2170","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":"The type of the elements being iterated over.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:1793:4160":{"id":"0:1793:4160","crate_id":0,"name":"is_disjoint","span":{"filename":"src/set.rs","begin":[963,4],"end":[965,5]},"visibility":"public","docs":"Returns `true` if `self` has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet mut b = HashSet::new();\n\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(4);\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(1);\nassert_eq!(a.is_disjoint(&b), false);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:630:2639":{"id":"0:630:2639","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/map.rs","begin":[1085,4],"end":[1088,5]},"visibility":"public","docs":"Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<i32, i32> = HashMap::with_capacity(100);\nmap.insert(1, 2);\nmap.insert(3, 4);\nassert!(map.capacity() >= 100);\nmap.shrink_to_fit();\nassert!(map.capacity() >= 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1792:2656":{"id":"0:1792:2656","crate_id":0,"name":"entry","span":{"filename":"src/set.rs","begin":[939,4],"end":[944,5]},"visibility":"public","docs":"Gets the given value's corresponding entry in the set for in-place manipulation.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_set::Entry::*;\n\nlet mut singles = HashSet::new();\nlet mut dupes = HashSet::new();\n\nfor ch in \"a short treatise on fungi\".chars() {\n    if let Vacant(dupe_entry) = dupes.entry(ch) {\n        // We haven't already seen a duplicate, so\n        // check if we've at least seen it once.\n        match singles.entry(ch) {\n            Vacant(single_entry) => {\n                // We found a new character for the first time.\n                single_entry.insert()\n            }\n            Occupied(single_entry) => {\n                // We've already seen this once, \"move\" it to dupes.\n                single_entry.remove();\n                dupe_entry.insert();\n            }\n        }\n    }\n}\n\nassert!(!singles.contains(&'t') && dupes.contains(&'t'));\nassert!(singles.contains(&'u') && !dupes.contains(&'u'));\nassert!(!singles.contains(&'v') && !dupes.contains(&'v'));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:2100:2657","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1116:1585":{"id":"0:1116:1585","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[4142,11],"end":[4142,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1149:2662","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},"0:1797:4174":{"id":"0:1797:4174","crate_id":0,"name":"is_superset","span":{"filename":"src/set.rs","begin":[1009,4],"end":[1011,5]},"visibility":"public","docs":"Returns `true` if the set is a superset of another,\ni.e., `self` contains at least all the values in `other`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet sub: HashSet<_> = [1, 2].iter().cloned().collect();\nlet mut set = HashSet::new();\n\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(0);\nset.insert(1);\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(2);\nassert_eq!(set.is_superset(&sub), true);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3410:226":{"id":"1:3410:226","crate_id":1,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8653:783":{"id":"1:8653:783","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":"Creates an iterator from a value.\n\nSee the [module-level documentation] for more.\n\n[module-level documentation]: crate::iter\n\n# Examples\n\nBasic usage:\n\n```\nlet v = [1, 2, 3];\nlet mut iter = v.into_iter();\n\nassert_eq!(Some(1), iter.next());\nassert_eq!(Some(2), iter.next());\nassert_eq!(Some(3), iter.next());\nassert_eq!(None, iter.next());\n```","links":{"crate::iter":"1:5848:794"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1570:3686":{"id":"0:1570:3686","crate_id":0,"name":"extend","span":{"filename":"src/map.rs","begin":[6542,4],"end":[6544,5]},"visibility":"default","docs":"Inserts all new key-values from the iterator to existing `HashMap<K, V, S, A>`.\nReplace values with existing keys with new values returned from the iterator.\nThe keys and values must implement [`Copy`] trait.\n\n[`Copy`]: https://doc.rust-lang.org/core/marker/trait.Copy.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, 100);\n\nlet arr = [(1, 1), (2, 2)];\nlet some_iter = arr.iter();\nmap.extend(some_iter);\n// Replace values with existing keys with new values returned from the iterator.\n// So that the map.get(&1) doesn't return Some(&100).\nassert_eq!(map.get(&1), Some(&1));\n\nlet some_vec: Vec<_> = vec![(3, 3), (4, 4)];\nmap.extend(&some_vec);\n\nlet some_arr = [(5, 5), (6, 6)];\nmap.extend(&some_arr);\n\nlet mut vec: Vec<_> = map.into_iter().collect();\n// The `IntoIter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3250-0:845:2474":{"id":"b:1:3250-0:845:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3209:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3219:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3253:128","1:3254:1456"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:8198:41605":{"id":"1:8198:41605","crate_id":1,"name":"backward_checked","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *predecessor*\nof `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`, returns `None`.\n\n# Invariants\n\nFor any `a`, `n`, and `m`:\n\n* `Step::backward_checked(a, n).and_then(|x| Step::backward_checked(x, m)) == n.checked_add(m).and_then(|x| Step::backward_checked(a, x))`\n* `Step::backward_checked(a, n).and_then(|x| Step::backward_checked(x, m)) == try { Step::backward_checked(a, n.checked_add(m)?) }`\n\nFor any `a` and `n`:\n\n* `Step::backward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::backward_checked(&x, 1))`\n  * Corollary: `Step::backward_checked(&a, 0) == Some(a)`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10539:4592":{"id":"1:10539:4592","crate_id":1,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10540:672"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13706:42414":{"id":"1:13706:42414","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:13707:42415"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6182:43097":{"id":"4:6182:43097","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:8508:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8508:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:4203-0:1716:146":{"id":"b:1:4203-0:1716:146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4201:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:4205:1470"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1764":{"id":"0:1764","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[538,0],"end":[1145,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1768:1978","0:1769:1983","0:1770:2639","0:1771:1970","0:1772:4076","0:1774:4086","0:1776:4095","0:1778:62","0:1780:3780","0:1782:2018","0:1784:4120","0:1785:4129","0:1788:4133","0:1792:2656","0:1793:4160","0:1795:4167","0:1797:4174","0:1798:1674","0:1799:2805","0:1800:2073","0:1801:1959","0:1803:3739"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:585:1921":{"id":"0:585:1921","crate_id":0,"name":"with_capacity","span":{"filename":"src/map.rs","begin":[325,4],"end":[327,5]},"visibility":"public","docs":"Creates an empty `HashMap` with the specified capacity.\n\nThe hash map will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash map will not allocate.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet mut map: HashMap<&str, i32> = HashMap::with_capacity(10);\nassert_eq!(map.len(), 0);\nassert!(map.capacity() >= 10);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:612:2492":{"id":"0:612:2492","crate_id":0,"name":"iter_mut","span":{"filename":"src/map.rs","begin":[705,4],"end":[713,5]},"visibility":"public","docs":"An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nThe iterator element type is `(&'a K, &'a mut V)`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\n\n// Update all values\nfor (_, val) in map.iter_mut() {\n    *val *= 2;\n}\n\nassert_eq!(map.len(), 3);\nlet mut vec: Vec<(&str, i32)> = Vec::new();\n\nfor (key, val) in &map {\n    println!(\"key: {} val: {}\", key, val);\n    vec.push((*key, *val));\n}\n\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(\"a\", 2), (\"b\", 4), (\"c\", 6)]);\n\nassert_eq!(map.len(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:766:2511","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3205:315":{"id":"1:3205:315","crate_id":1,"name":"as_ref","span":null,"visibility":"default","docs":"Converts this type into a shared reference of the (usually inferred) input type.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10809:2410":{"id":"1:10809:2410","crate_id":1,"name":"build_hasher","span":null,"visibility":"default","docs":"Creates a new hasher.\n\nEach call to `build_hasher` on the same instance should produce identical\n[`Hasher`]s.\n\n# Examples\n\n```\nuse std::collections::hash_map::RandomState;\nuse std::hash::BuildHasher;\n\nlet s = RandomState::new();\nlet new_s = s.build_hasher();\n```","links":{"`Hasher`":"1:10772:147"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Hasher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23079:41052":{"id":"1:23079:41052","crate_id":1,"name":"is_negative","span":null,"visibility":"default","docs":"Returns true for each negative lane and false if it is zero or positive.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23070:10945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3679:131":{"id":"1:3679:131","crate_id":1,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3681:387"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:23030:41724":{"id":"1:23030:41724","crate_id":1,"name":"is_infinite","span":null,"visibility":"default","docs":"Returns true for each lane if its value is positive infinity or negative infinity.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23017:10956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:2887:3730":{"id":"1:2887:3730","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":"Mutably borrows from an owned value.\n\n# Examples\n\n```\nuse std::borrow::BorrowMut;\n\nfn check<T: BorrowMut<[i32]>>(mut v: T) {\n    assert_eq!(&mut [1, 2, 3], v.borrow_mut());\n}\n\nlet v = vec![1, 2, 3];\n\ncheck(v);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Borrowed"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13694:314":{"id":"1:13694:314","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13695:2039","`u8`":"1:61620:4408"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8195:41604":{"id":"1:8195:41604","crate_id":1,"name":"forward_checked","span":null,"visibility":"default","docs":"Returns the value that would be obtained by taking the *successor*\nof `self` `count` times.\n\nIf this would overflow the range of values supported by `Self`, returns `None`.\n\n# Invariants\n\nFor any `a`, `n`, and `m`:\n\n* `Step::forward_checked(a, n).and_then(|x| Step::forward_checked(x, m)) == Step::forward_checked(a, m).and_then(|x| Step::forward_checked(x, n))`\n\nFor any `a`, `n`, and `m` where `n + m` does not overflow:\n\n* `Step::forward_checked(a, n).and_then(|x| Step::forward_checked(x, m)) == Step::forward_checked(a, n + m)`\n\nFor any `a` and `n`:\n\n* `Step::forward_checked(a, n) == (0..n).try_fold(a, |x, _| Step::forward_checked(&x, 1))`\n  * Corollary: `Step::forward_checked(&a, 0) == Some(a)`","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["start",{"kind":"generic","inner":"Self"}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:9032:3828":{"id":"1:9032:3828","crate_id":1,"name":"cloned","span":null,"visibility":"default","docs":"Creates an iterator which [`clone`]s all of its elements.\n\nThis is useful when you have an iterator over `&T`, but you need an\niterator over `T`.\n\nThere is no guarantee whatsoever about the `clone` method actually\nbeing called *or* optimized away. So code should not depend on\neither.\n\n[`clone`]: Clone::clone\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nlet v_cloned: Vec<_> = a.iter().cloned().collect();\n\n// cloned is the same as .map(|&x| x), for integers\nlet v_map: Vec<_> = a.iter().map(|&x| x).collect();\n\nassert_eq!(v_cloned, vec![1, 2, 3]);\nassert_eq!(v_map, vec![1, 2, 3]);\n```\n\nTo get the best performance, try to clone late:\n\n```\nlet a = [vec![0_u8, 1, 2], vec![3, 4], vec![23]];\n// don't do this:\nlet slower: Vec<_> = a.iter().cloned().filter(|s| s.len() == 1).collect();\nassert_eq!(&[vec![23]], &slower[..]);\n// instead call `cloned` late\nlet faster: Vec<_> = a.iter().filter(|s| s.len() == 1).cloned().collect();\nassert_eq!(&[vec![23]], &faster[..]);\n```","links":{"Clone::clone":"1:2908:420"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Cloned","id":"1:50185:4483","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14521:1803":{"id":"1:14521:1803","crate_id":1,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:14522:2243","1:14523:41901","1:14524:2149","1:14525:41902","1:14526:41903","1:14527:41904","1:14528:3741"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:1:3239-0:845:2474":{"id":"b:1:3239-0:845:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3212:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3241:693"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:596:2444":{"id":"0:596:2444","crate_id":0,"name":"with_hasher","span":{"filename":"src/map.rs","begin":[382,4],"end":[387,5]},"visibility":"public","docs":"Creates an empty `HashMap` which will use the given hash builder to hash\nkeys.\n\nThe hash map is initially created with a capacity of 0, so it will not\nallocate until it is first inserted into.\n\nWarning: `hash_builder` is normally randomly generated, and\nis designed to allow HashMaps to be resistant to attacks that\ncause many collisions and very poor performance. Setting it\nmanually using this function can expose a DoS attack vector.\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashMap to be useful, see its documentation for details.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut map = HashMap::with_hasher(s);\nassert_eq!(map.len(), 0);\nassert_eq!(map.capacity(), 0);\n\nmap.insert(1, 2);\n```\n\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["hash_builder",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23146:1311":{"id":"1:23146:1311","crate_id":1,"name":"simd_ne","span":null,"visibility":"default","docs":"Test if each lane is equal to the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"1:23143:10957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"4:6175:43095":{"id":"4:6175:43095","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"4:447:11312","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8253:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"4:447:11312","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8253:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9086:10014":{"id":"1:9086:10014","crate_id":1,"name":"is_sorted_by","span":null,"visibility":"default","docs":"Checks if the elements of this iterator are sorted using the given comparator function.\n\nInstead of using `PartialOrd::partial_cmp`, this function uses the given `compare`\nfunction to determine the ordering of two elements. Apart from that, it's equivalent to\n[`is_sorted`]; see its documentation for more information.\n\n# Examples\n\n```\n#![feature(is_sorted)]\n\nassert!([1, 2, 2, 9].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\nassert!(![1, 3, 2, 4].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\nassert!([0].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\nassert!(std::iter::empty::<i32>().is_sorted_by(|a, b| a.partial_cmp(b)));\nassert!(![0.0, 1.0, f32::NAN].iter().is_sorted_by(|a, b| a.partial_cmp(b)));\n```\n\n[`is_sorted`]: Iterator::is_sorted","links":{"Iterator::is_sorted":"1:9085:10013"},"attrs":["#[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["compare",{"kind":"generic","inner":"F"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:41194:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:935:2899":{"id":"0:935:2899","crate_id":0,"name":"RawEntryBuilderMut","span":{"filename":"src/map.rs","begin":[2794,0],"end":[2796,1]},"visibility":"public","docs":"A builder for computing where in a [`HashMap`] a key-value pair would be stored.\n\nSee the [`HashMap::raw_entry_mut`] docs for usage examples.\n\n[`HashMap::raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut\n\n# Examples\n\n```\nuse hashbrown::hash_map::{RawEntryBuilderMut, RawEntryMut::Vacant, RawEntryMut::Occupied};\nuse hashbrown::HashMap;\nuse core::hash::{BuildHasher, Hash};\n\nlet mut map = HashMap::new();\nmap.extend([(1, 11), (2, 12), (3, 13), (4, 14), (5, 15), (6, 16)]);\nassert_eq!(map.len(), 6);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet builder: RawEntryBuilderMut<_, _, _> = map.raw_entry_mut();\n\n// Existing key\nmatch builder.from_key(&6) {\n    Vacant(_) => unreachable!(),\n    Occupied(view) => assert_eq!(view.get(), &16),\n}\n\nfor key in 0..12 {\n    let hash = compute_hash(map.hasher(), &key);\n    let value = map.get(&key).cloned();\n    let key_value = value.as_ref().map(|v| (&key, v));\n\n    println!(\"Key: {} and value: {:?}\", key, value);\n\n    match map.raw_entry_mut().from_key(&key) {\n        Occupied(mut o) => assert_eq!(Some(o.get_key_value()), key_value),\n        Vacant(_) => assert_eq!(value, None),\n    }\n    match map.raw_entry_mut().from_key_hashed_nocheck(hash, &key) {\n        Occupied(mut o) => assert_eq!(Some(o.get_key_value()), key_value),\n        Vacant(_) => assert_eq!(value, None),\n    }\n    match map.raw_entry_mut().from_hash(hash, |q| *q == key) {\n        Occupied(mut o) => assert_eq!(Some(o.get_key_value()), key_value),\n        Vacant(_) => assert_eq!(value, None),\n    }\n}\n\nassert_eq!(map.len(), 6);\n```","links":{"`HashMap`":"0:539:144"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:23033:41727":{"id":"1:23033:41727","crate_id":1,"name":"is_normal","span":null,"visibility":"default","docs":"Returns true for each lane if its value is neither zero, infinite,\nsubnormal, nor `NaN`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23017:10956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2116:2660":{"id":"0:2116:2660","crate_id":0,"name":"OccupiedEntry","span":{"filename":"src/set.rs","begin":[2006,0],"end":[2008,1]},"visibility":"public","docs":"A view into an occupied entry in a `HashSet`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet, OccupiedEntry};\n\nlet mut set = HashSet::new();\nset.extend([\"a\", \"b\", \"c\"]);\n\nlet _entry_o: OccupiedEntry<_, _> = set.entry(\"a\").insert();\nassert_eq!(set.len(), 3);\n\n// Existing key\nmatch set.entry(\"a\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(view) => {\n        assert_eq!(view.get(), &\"a\");\n    }\n}\n\nassert_eq!(set.len(), 3);\n\n// Existing key (take)\nmatch set.entry(\"c\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(view) => {\n        assert_eq!(view.remove(), \"c\");\n    }\n}\nassert_eq!(set.get(&\"c\"), None);\nassert_eq!(set.len(), 2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"1:23110:40918":{"id":"1:23110:40918","crate_id":1,"name":"reduce_sum","span":null,"visibility":"default","docs":"Returns the sum of the lanes of the vector, with wrapping addition.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"1:23106:10958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:11170:2020":{"id":"1:11170:2020","crate_id":1,"name":"get_mut","span":null,"visibility":"default","docs":"Returns a mutable reference to the output at this location, if in\nbounds.","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"1:11166:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:736":{"id":"0:736","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2141,0],"end":[2170,1]},"visibility":{"restricted":{"parent":"0:479:857","path":"::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:3737:2283","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:742:186","0:743:767"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3549:4642":{"id":"1:3549:4642","crate_id":1,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3550:186","1:3551:979"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8899:9989":{"id":"1:8899:9989","crate_id":1,"name":"flatten","span":null,"visibility":"default","docs":"Creates an iterator that flattens nested structure.\n\nThis is useful when you have an iterator of iterators or an iterator of\nthings that can be turned into iterators and you want to remove one\nlevel of indirection.\n\n# Examples\n\nBasic usage:\n\n```\nlet data = vec![vec![1, 2, 3, 4], vec![5, 6]];\nlet flattened = data.into_iter().flatten().collect::<Vec<u8>>();\nassert_eq!(flattened, &[1, 2, 3, 4, 5, 6]);\n```\n\nMapping and then flattening:\n\n```\nlet words = [\"alpha\", \"beta\", \"gamma\"];\n\n// chars() returns an iterator\nlet merged: String = words.iter()\n                          .map(|s| s.chars())\n                          .flatten()\n                          .collect();\nassert_eq!(merged, \"alphabetagamma\");\n```\n\nYou can also rewrite this in terms of [`flat_map()`], which is preferable\nin this case since it conveys intent more clearly:\n\n```\nlet words = [\"alpha\", \"beta\", \"gamma\"];\n\n// chars() returns an iterator\nlet merged: String = words.iter()\n                          .flat_map(|s| s.chars())\n                          .collect();\nassert_eq!(merged, \"alphabetagamma\");\n```\n\nFlattening only removes one level of nesting at a time:\n\n```\nlet d3 = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]];\n\nlet d2 = d3.iter().flatten().collect::<Vec<_>>();\nassert_eq!(d2, [&[1, 2], &[3, 4], &[5, 6], &[7, 8]]);\n\nlet d1 = d3.iter().flatten().flatten().collect::<Vec<_>>();\nassert_eq!(d1, [&1, &2, &3, &4, &5, &6, &7, &8]);\n```\n\nHere we see that `flatten()` does not perform a \"deep\" flatten.\nInstead, only one level of nesting is removed. That is, if you\n`flatten()` a three-dimensional array, the result will be\ntwo-dimensional and not one-dimensional. To get a one-dimensional\nstructure, you have to `flatten()` again.\n\n[`flat_map()`]: Iterator::flat_map","links":{"Iterator::flat_map":"1:8896:9988"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Flatten","id":"1:6810:4485","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2983:427":{"id":"1:2983:427","crate_id":1,"name":"cmp","span":null,"visibility":"default","docs":"This method returns an [`Ordering`] between `self` and `other`.\n\nBy convention, `self.cmp(&other)` returns the ordering matching the expression\n`self <operator> other` if true.\n\n# Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!(5.cmp(&10), Ordering::Less);\nassert_eq!(10.cmp(&5), Ordering::Greater);\nassert_eq!(5.cmp(&5), Ordering::Equal);\n```","links":{"`Ordering`":"1:41194:183"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:41194:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:9496:4748-0:2270:1655":{"id":"a:1:9496:4748-0:2270:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:9496:4748","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:3414:228-0:539:144":{"id":"a:1:3414:228-0:539:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:8702:9975":{"id":"1:8702:9975","crate_id":1,"name":"rfind","span":null,"visibility":"default","docs":"Searches for an element of an iterator from the back that satisfies a predicate.\n\n`rfind()` takes a closure that returns `true` or `false`. It applies\nthis closure to each element of the iterator, starting at the end, and if any\nof them return `true`, then `rfind()` returns [`Some(element)`]. If they all return\n`false`, it returns [`None`].\n\n`rfind()` is short-circuiting; in other words, it will stop processing\nas soon as the closure returns `true`.\n\nBecause `rfind()` takes a reference, and many iterators iterate over\nreferences, this leads to a possibly confusing situation where the\nargument is a double reference. You can see this effect in the\nexamples below, with `&&x`.\n\n[`Some(element)`]: Some\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\nassert_eq!(a.iter().rfind(|&&x| x == 2), Some(&2));\n\nassert_eq!(a.iter().rfind(|&&x| x == 5), None);\n```\n\nStopping at the first `true`:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.rfind(|&&x| x == 2), Some(&2));\n\n// we can still use `iter`, as there are more elements.\nassert_eq!(iter.next_back(), Some(&1));\n```","links":{"`None`":"1:51151:179","Some":"1:51153:223"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1795:4167":{"id":"0:1795:4167","crate_id":0,"name":"is_subset","span":{"filename":"src/set.rs","begin":[984,4],"end":[986,5]},"visibility":"public","docs":"Returns `true` if the set is a subset of another,\ni.e., `other` contains at least all the values in `self`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet mut set = HashSet::new();\n\nassert_eq!(set.is_subset(&sup), true);\nset.insert(2);\nassert_eq!(set.is_subset(&sup), true);\nset.insert(4);\nassert_eq!(set.is_subset(&sup), false);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:853:420":{"id":"0:853:420","crate_id":0,"name":"clone","span":{"filename":"src/map.rs","begin":[2497,4],"end":[2501,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:633:2670":{"id":"0:633:2670","crate_id":0,"name":"entry_ref","span":{"filename":"src/map.rs","begin":[1175,4],"end":[1195,5]},"visibility":"public","docs":"Gets the given key's corresponding entry by reference in the map for in-place manipulation.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut words: HashMap<String, usize> = HashMap::new();\nlet source = [\"poneyland\", \"horseyland\", \"poneyland\", \"poneyland\"];\nfor (i, &s) in source.iter().enumerate() {\n    let counter = words.entry_ref(s).or_insert(0);\n    *counter += 1;\n}\n\nassert_eq!(words[\"poneyland\"], 3);\nassert_eq!(words[\"horseyland\"], 1);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EntryRef","id":"0:1164:2672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"Q"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8883:9984":{"id":"1:8883:9984","crate_id":1,"name":"skip_while","span":null,"visibility":"default","docs":"Creates an iterator that [`skip`]s elements based on a predicate.\n\n[`skip`]: Iterator::skip\n\n`skip_while()` takes a closure as an argument. It will call this\nclosure on each element of the iterator, and ignore elements\nuntil it returns `false`.\n\nAfter `false` is returned, `skip_while()`'s job is over, and the\nrest of the elements are yielded.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [-1i32, 0, 1];\n\nlet mut iter = a.iter().skip_while(|x| x.is_negative());\n\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), None);\n```\n\nBecause the closure passed to `skip_while()` takes a reference, and many\niterators iterate over references, this leads to a possibly confusing\nsituation, where the type of the closure argument is a double reference:\n\n```\nlet a = [-1, 0, 1];\n\nlet mut iter = a.iter().skip_while(|x| **x < 0); // need two *s!\n\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), None);\n```\n\nStopping after an initial `false`:\n\n```\nlet a = [-1, 0, 1, -2];\n\nlet mut iter = a.iter().skip_while(|x| **x < 0);\n\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&1));\n\n// while this would have been false, since we already got a false,\n// skip_while() isn't used any more\nassert_eq!(iter.next(), Some(&-2));\n\nassert_eq!(iter.next(), None);\n```","links":{"Iterator::skip":"1:8890:1347"},"attrs":["#[doc(alias = \"drop_while\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["predicate",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SkipWhile","id":"1:50370:4503","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3739:186":{"id":"1:3739:186","crate_id":1,"name":"Output","span":null,"visibility":"default","docs":"The returned type after indexing.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null}},"1:9003:4928":{"id":"1:9003:4928","crate_id":1,"name":"max_by","span":null,"visibility":"default","docs":"Returns the element that gives the maximum value with respect to the\nspecified comparison function.\n\nIf several elements are equally maximum, the last element is\nreturned. If the iterator is empty, [`None`] is returned.\n\n# Examples\n\n```\nlet a = [-3_i32, 0, 1, 5, -10];\nassert_eq!(*a.iter().max_by(|x, y| x.cmp(y)).unwrap(), 5);\n```","links":{"`None`":"1:51151:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["compare",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:41194:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9056:10011":{"id":"1:9056:10011","crate_id":1,"name":"partial_cmp_by","span":null,"visibility":"default","docs":"[Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\nof another with respect to the specified comparison function.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(iter_order_by)]\n\nuse std::cmp::Ordering;\n\nlet xs = [1.0, 2.0, 3.0, 4.0];\nlet ys = [1.0, 4.0, 9.0, 16.0];\n\nassert_eq!(\n    xs.iter().partial_cmp_by(&ys, |&x, &y| x.partial_cmp(&y)),\n    Some(Ordering::Less)\n);\nassert_eq!(\n    xs.iter().partial_cmp_by(&ys, |&x, &y| (x * x).partial_cmp(&y)),\n    Some(Ordering::Equal)\n);\nassert_eq!(\n    xs.iter().partial_cmp_by(&ys, |&x, &y| (2.0 * x).partial_cmp(&y)),\n    Some(Ordering::Greater)\n);\n```","links":{"`Iterator`":"1:8846:160","Ord#lexicographical-comparison":"1:2982:182"},"attrs":["#[unstable(feature = \"iter_order_by\", issue = \"64295\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}],["partial_cmp",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:41194:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:41194:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1774:4086":{"id":"0:1774:4086","crate_id":0,"name":"symmetric_difference","span":{"filename":"src/set.rs","begin":[686,4],"end":[690,5]},"visibility":"public","docs":"Visits the values representing the symmetric difference,\ni.e., the values that are in `self` or in `other` but not in both.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Print 1, 4 in arbitrary order.\nfor x in a.symmetric_difference(&b) {\n    println!(\"{}\", x);\n}\n\nlet diff1: HashSet<_> = a.symmetric_difference(&b).collect();\nlet diff2: HashSet<_> = b.symmetric_difference(&a).collect();\n\nassert_eq!(diff1, diff2);\nassert_eq!(diff1, [1, 4].iter().collect());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:1913:4087","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1721":{"id":"0:1721","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[119,0],"end":[129,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1725:420","0:1726:422"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/raw/alloc.rs","begin":[54,4],"end":[59,5]},"visibility":{"restricted":{"parent":"0:62:1638","path":"::raw::alloc::inner"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:3286:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:83:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:9081:725":{"id":"1:9081:725","crate_id":1,"name":"gt","span":null,"visibility":"default","docs":"Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\ngreater than those of another.\n\n# Examples\n\n```\nassert_eq!([1].iter().gt([1].iter()), false);\nassert_eq!([1].iter().gt([1, 2].iter()), false);\nassert_eq!([1, 2].iter().gt([1].iter()), true);\nassert_eq!([1, 2].iter().gt([1, 2].iter()), false);\n```","links":{"`Iterator`":"1:8846:160","Ord#lexicographical-comparison":"1:2982:182"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"I"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2995:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:4:862-0:2244:1804":{"id":"b:4:862-0:2244:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:858:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:864:3398","4:865:3822","4:866:10635"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1730:1921":{"id":"0:1730:1921","crate_id":0,"name":"with_capacity","span":{"filename":"src/set.rs","begin":[164,4],"end":[168,5]},"visibility":"public","docs":"Creates an empty `HashSet` with the specified capacity.\n\nThe hash set will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash set will not allocate.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet set: HashSet<i32> = HashSet::with_capacity(10);\nassert!(set.capacity() >= 10);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1742:808":{"id":"0:1742:808","crate_id":0,"name":"len","span":{"filename":"src/set.rs","begin":[262,4],"end":[264,5]},"visibility":"public","docs":"Returns the number of elements in the set.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut v = HashSet::new();\nassert_eq!(v.len(), 0);\nv.insert(1);\nassert_eq!(v.len(), 1);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9496:4748":{"id":"1:9496:4748","crate_id":1,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:8648:696":{"id":"1:8648:696","crate_id":1,"name":"from_iter","span":null,"visibility":"default","docs":"Creates a value from an iterator.\n\nSee the [module-level documentation] for more.\n\n[module-level documentation]: crate::iter\n\n# Examples\n\nBasic usage:\n\n```\nlet five_fives = std::iter::repeat(5).take(5);\n\nlet v = Vec::from_iter(five_fives);\n\nassert_eq!(v, vec![5, 5, 5, 5, 5]);\n```","links":{"crate::iter":"1:5848:794"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8650:153","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"A"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2193":{"id":"0:2193","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[104,4],"end":[104,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::set","name":"set","id":"0:1644:1648","glob":true}},"1:8847:2170":{"id":"1:8847:2170","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":"The type of the elements being iterated over.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"1:13708:11147":{"id":"1:13708:11147","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:61603:4394"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:53108:11107","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3515:570":{"id":"1:3515:570","crate_id":1,"name":"div","span":null,"visibility":"default","docs":"Performs the `/` operation.\n\n# Example\n\n```\nassert_eq!(12 / 2, 6);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Div","id":"1:3512:4634","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13322:40422":{"id":"1:13322:40422","crate_id":1,"name":"into_searcher","span":null,"visibility":"default","docs":"Constructs the associated searcher from\n`self` and the `haystack` to search in.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1113:1585":{"id":"0:1113:1585","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[4127,13],"end":[4127,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1123:2660","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},"1:13783:42436":{"id":"1:13783:42436","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:13309:10820","prim@char":"1:61603:4394"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13696:2018":{"id":"1:13696:2018","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:51151:179"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:11166:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11166:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13795:42440":{"id":"1:13795:42440","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:61603:4394","self::pattern":"1:13309:10820"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1362:2170":{"id":"0:1362:2170","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4761,4],"end":[4761,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}}}},"1:2907:105":{"id":"1:2907:105","crate_id":1,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2908:420","1:2909:422"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23145:1284":{"id":"1:23145:1284","crate_id":1,"name":"simd_eq","span":null,"visibility":"default","docs":"Test if each lane is equal to the corresponding lane in `other`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdPartialEq","id":"1:23143:10957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:2893:3730":{"id":"1:2893:3730","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23206:10765":{"id":"1:23206:10765","crate_id":1,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:23196:10815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1805":{"id":"0:1805","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1147,0],"end":[1160,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2946:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1809:616"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:10779:10539":{"id":"1:10779:10539","crate_id":1,"name":"write_u128","span":null,"visibility":"default","docs":"Writes a single `u128` into this hasher.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3469:4530-0:2244:1804":{"id":"a:1:3469:4530-0:2244:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3469:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3551:979":{"id":"1:3551:979","crate_id":1,"name":"not","span":null,"visibility":"default","docs":"Performs the unary `!` operation.\n\n# Examples\n\n```\nassert_eq!(!true, false);\nassert_eq!(!false, true);\nassert_eq!(!1u8, 254);\nassert_eq!(!0u8, 255);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Not","id":"1:3549:4642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:8714:2225":{"id":"1:8714:2225","crate_id":1,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:8715:808","1:8716:1968"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:3653:230":{"id":"1:3653:230","crate_id":1,"name":"Target","span":null,"visibility":"default","docs":"The resulting type after dereferencing.","links":{},"attrs":["#[rustc_diagnostic_item = \"deref_target\"]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null}},"1:8716:1968":{"id":"1:8716:1968","crate_id":1,"name":"is_empty","span":null,"visibility":"default","docs":"Returns `true` if the iterator is empty.\n\nThis method has a default implementation using\n[`ExactSizeIterator::len()`], so you don't need to implement it yourself.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(exact_size_is_empty)]\n\nlet mut one_element = std::iter::once(0);\nassert!(!one_element.is_empty());\n\nassert_eq!(one_element.next(), Some(0));\nassert!(one_element.is_empty());\n\nassert_eq!(one_element.next(), None);\n```","links":{"`ExactSizeIterator::len()`":"1:8715:808"},"attrs":["#[unstable(feature = \"exact_size_is_empty\", issue = \"35428\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1801:1959":{"id":"0:1801:1959","crate_id":0,"name":"remove","span":{"filename":"src/set.rs","begin":[1107,4],"end":[1113,5]},"visibility":"public","docs":"Removes a value from the set. Returns whether the value was\npresent in the set.\n\nThe value may be any borrowed form of the set's value type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe value type.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set = HashSet::new();\n\nset.insert(2);\nassert_eq!(set.remove(&2), true);\nassert_eq!(set.remove(&2), false);\n```\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13326:40425":{"id":"1:13326:40425","crate_id":1,"name":"strip_prefix_of","span":null,"visibility":"default","docs":"Removes the pattern from the front of haystack, if it matches.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10474:4584":{"id":"1:10474:4584","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10475:1576","1:10476:40638","1:10478:4878"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3546:1132":{"id":"1:3546:1132","crate_id":1,"name":"rem_assign","span":null,"visibility":"default","docs":"Performs the `%=` operation.\n\n# Example\n\n```\nlet mut x: u32 = 12;\nx %= 10;\nassert_eq!(x, 2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10765:10534":{"id":"1:10765:10534","crate_id":1,"name":"hash_slice","span":null,"visibility":"default","docs":"Feeds a slice of this type into the given [`Hasher`].\n\nThis method is meant as a convenience, but its implementation is\nalso explicitly left unspecified. It isn't guaranteed to be\nequivalent to repeated calls of [`hash`] and implementations of\n[`Hash`] should keep that in mind and call [`hash`] themselves\nif the slice isn't treated as a whole unit in the [`PartialEq`]\nimplementation.\n\nFor example, a [`VecDeque`] implementation might naïvely call\n[`as_slices`] and then [`hash_slice`] on each slice, but this\nis wrong since the two slices can change with a call to\n[`make_contiguous`] without affecting the [`PartialEq`]\nresult. Since these slices aren't treated as singular\nunits, and instead part of a larger deque, this method cannot\nbe used.\n\n# Examples\n\n```\nuse std::collections::hash_map::DefaultHasher;\nuse std::hash::{Hash, Hasher};\n\nlet mut hasher = DefaultHasher::new();\nlet numbers = [6, 28, 496, 8128];\nHash::hash_slice(&numbers, &mut hasher);\nprintln!(\"Hash is {:x}!\", hasher.finish());\n```\n\n[`VecDeque`]: ../../std/collections/struct.VecDeque.html\n[`as_slices`]: ../../std/collections/struct.VecDeque.html#method.as_slices\n[`make_contiguous`]: ../../std/collections/struct.VecDeque.html#method.make_contiguous\n[`hash`]: Hash::hash\n[`hash_slice`]: Hash::hash_slice","links":{"`Hasher`":"1:10772:147","`PartialEq`":"1:2946:188","Hash::hash_slice":"1:10765:10534","Hash::hash":"1:10763:728"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["data",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"Self"}}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"H"},"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10772:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10532:672":{"id":"1:10532:672","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.\n\n# Examples\n\n```\nuse std::fmt;\n\nstruct Position {\n    longitude: f32,\n    latitude: f32,\n}\n\nimpl fmt::Display for Position {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"({}, {})\", self.longitude, self.latitude)\n    }\n}\n\nassert_eq!(\"(1.987, 2.983)\",\n           format!(\"{}\", Position { longitude: 1.987, latitude: 2.983, }));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10484:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:52212:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:2274:1662":{"id":"0:2274:1662","crate_id":0,"name":"layout","span":{"filename":"src/lib.rs","begin":[130,8],"end":[130,36]},"visibility":"default","docs":"The layout of the allocation request that failed.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"alloc::alloc::Layout","id":"1:54116:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"1:8692:9970":{"id":"1:8692:9970","crate_id":1,"name":"next_back","span":null,"visibility":"default","docs":"Removes and returns an element from the end of the iterator.\n\nReturns `None` when there are no more elements.\n\nThe [trait-level] docs contain more details.\n\n[trait-level]: DoubleEndedIterator\n\n# Examples\n\nBasic usage:\n\n```\nlet numbers = vec![1, 2, 3, 4, 5, 6];\n\nlet mut iter = numbers.iter();\n\nassert_eq!(Some(&1), iter.next());\nassert_eq!(Some(&6), iter.next_back());\nassert_eq!(Some(&5), iter.next_back());\nassert_eq!(Some(&2), iter.next());\nassert_eq!(Some(&3), iter.next());\nassert_eq!(Some(&4), iter.next());\nassert_eq!(None, iter.next());\nassert_eq!(None, iter.next_back());\n```\n\n# Remarks\n\nThe elements yielded by `DoubleEndedIterator`'s methods may differ from\nthe ones yielded by [`Iterator`]'s methods:\n\n```\nlet vec = vec![(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b')];\nlet uniq_by_fst_comp = || {\n    let mut seen = std::collections::HashSet::new();\n    vec.iter().copied().filter(move |x| seen.insert(x.0))\n};\n\nassert_eq!(uniq_by_fst_comp().last(), Some((2, 'a')));\nassert_eq!(uniq_by_fst_comp().next_back(), Some((2, 'b')));\n\nassert_eq!(\n    uniq_by_fst_comp().fold(vec![], |mut v, x| {v.push(x); v}),\n    vec![(1, 'a'), (2, 'a')]\n);\nassert_eq!(\n    uniq_by_fst_comp().rfold(vec![], |mut v, x| {v.push(x); v}),\n    vec![(2, 'b'), (1, 'c')]\n);\n```","links":{"`Iterator`":"1:8846:160","DoubleEndedIterator":"1:8691:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23038:40532":{"id":"1:23038:40532","crate_id":1,"name":"simd_clamp","span":null,"visibility":"default","docs":"Restrict each lane to a certain interval unless it is NaN.\n\nFor each lane in `self`, returns the corresponding lane in `max` if the lane is\ngreater than `max`, and the corresponding lane in `min` if the lane is less\nthan `min`.  Otherwise returns the lane in `self`.","links":{},"attrs":["#[must_use =\n\"method returns a new vector and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["min",{"kind":"generic","inner":"Self"}],["max",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23085:40922":{"id":"1:23085:40922","crate_id":1,"name":"reduce_and","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"and\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23070:10945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:23070:10945":{"id":"1:23070:10945","crate_id":1,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:23071:10893","1:23072:40917","1:23073:1261","1:23074:1262","1:23075:37189","1:23076:41049","1:23077:41050","1:23078:41051","1:23079:41052","1:23080:41053","1:23081:40918","1:23082:40919","1:23083:40920","1:23084:40921","1:23085:40922","1:23086:40923","1:23087:40924"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:3412:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"1:23119:10815","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:10808:147":{"id":"1:10808:147","crate_id":1,"name":"Hasher","span":null,"visibility":"default","docs":"Type of the hasher that will be created.","links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:10772:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:2279:616":{"id":"0:2279:616","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[121,16],"end":[121,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3315:41305":{"id":"1:3315:41305","crate_id":1,"name":"provide","span":null,"visibility":"default","docs":"Provides type based access to context intended for error reports.\n\nUsed in conjunction with [`Demand::provide_value`] and [`Demand::provide_ref`] to extract\nreferences to member variables from `dyn Error` trait objects.\n\n# Example\n\n```rust\n#![feature(provide_any)]\n#![feature(error_generic_member_access)]\nuse core::fmt;\nuse core::any::Demand;\n\n#[derive(Debug)]\nstruct MyBacktrace {\n    // ...\n}\n\nimpl MyBacktrace {\n    fn new() -> MyBacktrace {\n        // ...\n        # MyBacktrace {}\n    }\n}\n\n#[derive(Debug)]\nstruct SourceError {\n    // ...\n}\n\nimpl fmt::Display for SourceError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"Example Source Error\")\n    }\n}\n\nimpl std::error::Error for SourceError {}\n\n#[derive(Debug)]\nstruct Error {\n    source: SourceError,\n    backtrace: MyBacktrace,\n}\n\nimpl fmt::Display for Error {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"Example Error\")\n    }\n}\n\nimpl std::error::Error for Error {\n    fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n        demand\n            .provide_ref::<MyBacktrace>(&self.backtrace)\n            .provide_ref::<dyn std::error::Error + 'static>(&self.source);\n    }\n}\n\nfn main() {\n    let backtrace = MyBacktrace::new();\n    let source = SourceError {};\n    let error = Error { source, backtrace };\n    let dyn_error = &error as &dyn std::error::Error;\n    let backtrace_ref = dyn_error.request_ref::<MyBacktrace>().unwrap();\n\n    assert!(core::ptr::eq(&error.backtrace, backtrace_ref));\n}\n```","links":{"`Demand::provide_ref`":"1:4276:50464","`Demand::provide_value`":"1:4272:50461"},"attrs":["#[unstable(feature = \"error_generic_member_access\", issue = \"99301\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"1:4264:10811","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3934:138":{"id":"1:3934:138","crate_id":1,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:3936:699"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:13806:42444":{"id":"1:13806:42444","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1913:4087":{"id":"0:1913:4087","crate_id":0,"name":"SymmetricDifference","span":{"filename":"src/set.rs","begin":[1499,0],"end":[1501,1]},"visibility":"public","docs":"A lazy iterator producing elements in the symmetric difference of `HashSet`s.\n\nThis `struct` is created by the [`symmetric_difference`] method on\n[`HashSet`]. See its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"a:1:3469:4530-0:539:144":{"id":"a:1:3469:4530-0:539:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3469:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3469:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3469:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3469:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3469:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashMap","id":"0:539:144","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1760:291":{"id":"0:1760:291","crate_id":0,"name":"allocator","span":{"filename":"src/set.rs","begin":[459,4],"end":[461,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1286:2171":{"id":"0:1286:2171","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[4572,4],"end":[4572,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:752:2502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}}}},"b:1:4203-0:2270:1655":{"id":"b:1:4203-0:2270:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4201:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:4205:1470"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1754:2444":{"id":"0:1754:2444","crate_id":0,"name":"with_hasher","span":{"filename":"src/set.rs","begin":[413,4],"end":[417,5]},"visibility":"public","docs":"Creates a new empty hash set which will use the given hasher to hash\nkeys.\n\nThe hash set is also created with the default initial capacity.\n\nWarning: `hasher` is normally randomly generated, and\nis designed to allow `HashSet`s to be resistant to attacks that\ncause many collisions and very poor performance. Setting it\nmanually using this function can expose a DoS attack vector.\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashMap to be useful, see its documentation for details.\n\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut set = HashSet::with_hasher(s);\nset.insert(2);\n```\n\n[`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["hasher",{"kind":"generic","inner":"S"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2192:1651":{"id":"0:2192:1651","crate_id":0,"name":"hash_set","span":{"filename":"src/lib.rs","begin":[102,0],"end":[102,16]},"visibility":"public","docs":"A hash set implemented as a `HashMap` where the value is `()`.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:2193"],"is_stripped":false}},"1:8859:9979":{"id":"1:8859:9979","crate_id":1,"name":"nth","span":null,"visibility":"default","docs":"Returns the `n`th element of the iterator.\n\nLike most indexing operations, the count starts from zero, so `nth(0)`\nreturns the first value, `nth(1)` the second, and so on.\n\nNote that all preceding elements, as well as the returned element, will be\nconsumed from the iterator. That means that the preceding elements will be\ndiscarded, and also that calling `nth(0)` multiple times on the same iterator\nwill return different elements.\n\n`nth()` will return [`None`] if `n` is greater than or equal to the length of the\niterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().nth(1), Some(&2));\n```\n\nCalling `nth()` multiple times doesn't rewind the iterator:\n\n```\nlet a = [1, 2, 3];\n\nlet mut iter = a.iter();\n\nassert_eq!(iter.nth(1), Some(&2));\nassert_eq!(iter.nth(1), None);\n```\n\nReturning `None` if there are less than `n + 1` elements:\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.iter().nth(10), None);\n```","links":{"`None`":"1:51151:179"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:4203-0:2244:1804":{"id":"b:1:4203-0:2244:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:4201:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:4205:1470"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1725:420":{"id":"0:1725:420","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[120,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13805:42443":{"id":"1:13805:42443","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13327:40427":{"id":"1:13327:40427","crate_id":1,"name":"strip_suffix_of","span":null,"visibility":"default","docs":"Removes the pattern from the back of haystack, if it matches.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13334:10819","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:4:862-0:845:2474":{"id":"b:4:862-0:845:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:858:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["4:864:3398","4:865:3822","4:866:10635"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3917:4654":{"id":"1:3917:4654","crate_id":1,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3848:4653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:23078:41051":{"id":"1:23078:41051","crate_id":1,"name":"is_positive","span":null,"visibility":"default","docs":"Returns true for each positive lane and false if it is zero or negative.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdInt","id":"1:23070:10945","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10781:10541":{"id":"1:10781:10541","crate_id":1,"name":"write_i8","span":null,"visibility":"default","docs":"Writes a single `i8` into this hasher.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13707:42415":{"id":"1:13707:42415","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13706:42414"},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23029:41723":{"id":"1:23029:41723","crate_id":1,"name":"is_nan","span":null,"visibility":"default","docs":"Returns true for each lane if its value is `NaN`.","links":{},"attrs":["#[must_use =\n\"method returns a new mask and does not mutate the original value\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Mask","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23017:10956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:1:3250-0:2270:1655":{"id":"b:1:3250-0:2270:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3209:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3219:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3253:128","1:3254:1456"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11174:768":{"id":"1:11174:768","crate_id":1,"name":"index_mut","span":null,"visibility":"default","docs":"Returns a mutable reference to the output at this location, panicking\nif out of bounds.","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"1:11166:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:10542:672":{"id":"1:10542:672","crate_id":1,"name":"fmt","span":null,"visibility":"default","docs":"Formats the value using the given formatter.","links":{},"attrs":["#[rustc_diagnostic_item = \"pointer_trait_fmt\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:10484:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:52212:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13766:42428":{"id":"1:13766:42428","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13309:10820","prim@char":"1:61603:4394","`DoubleEndedIterator`":"1:8691:121","str::rmatch_indices":"1:13769:42429"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:53288:11117","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13337:42101":{"id":"1:13337:42101","crate_id":1,"name":"next_match_back","span":null,"visibility":"default","docs":"Finds the next [`Match`][SearchStep::Match] result.\nSee [`next_back()`][ReverseSearcher::next_back].","links":{"SearchStep::Match":"1:53519:10023","ReverseSearcher::next_back":"1:13336:9970"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:51149:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13328:10823":{"id":"1:13328:10823","crate_id":1,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["1:13330:10843","1:13331:949","1:13332:40779","1:13333:40780"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:10476:40638":{"id":"1:10476:40638","crate_id":1,"name":"write_char","span":null,"visibility":"default","docs":"Writes a [`char`] into this writer, returning whether the write succeeded.\n\nA single [`char`] may be encoded as more than one byte.\nThis method can only succeed if the entire byte sequence was successfully\nwritten, and this method will not return until all data has been\nwritten or an error occurs.\n\n# Errors\n\nThis function will return an instance of [`Error`] on error.\n\n# Examples\n\n```\nuse std::fmt::{Error, Write};\n\nfn writer<W: Write>(f: &mut W, c: char) -> Result<(), Error> {\n    f.write_char(c)\n}\n\nlet mut buf = String::new();\nwriter(&mut buf, 'a').unwrap();\nwriter(&mut buf, 'b').unwrap();\nassert_eq!(&buf, \"ab\");\n```","links":{"`Error`":"1:52212:128","`char`":"1:61603:4394"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["c",{"kind":"primitive","inner":"char"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"1:52212:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"4:6195:43099":{"id":"4:6195:43099","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:447:11312","`String`":"4:8508:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"4:447:11312","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"4:8253:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"4:8508:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:3402:220-0:2270:1655":{"id":"a:1:3402:220-0:2270:1655","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3402:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:2270:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1838":{"id":"0:1838","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1224,0],"end":[1246,1]},"visibility":{"restricted":{"parent":"0:1644:1648","path":"::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2951:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10762:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10807:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_one","extend_reserve"],"trait":{"name":"Extend","id":"1:8659:3665","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1842:3686"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:9040:10009":{"id":"1:9040:10009","crate_id":1,"name":"product","span":null,"visibility":"default","docs":"Iterates over the entire iterator, multiplying all the elements\n\nAn empty iterator returns the one value of the type.\n\n# Panics\n\nWhen calling `product()` and a primitive integer type is being returned,\nmethod will panic if the computation overflows and debug assertions are\nenabled.\n\n# Examples\n\n```\nfn factorial(n: u32) -> u32 {\n    (1..=n).product()\n}\nassert_eq!(factorial(0), 1);\nassert_eq!(factorial(1), 1);\nassert_eq!(factorial(5), 120);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"P"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Product","id":"1:8613:4478","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1296:783":{"id":"0:1296:783","crate_id":0,"name":"into_iter","span":{"filename":"src/map.rs","begin":[4634,4],"end":[4636,5]},"visibility":"default","docs":"Creates an iterator over the entries of a `HashMap` in arbitrary order\nwith mutable references to the values. The iterator element type is\n`(&'a K, &'a mut V)`.\n\nReturn the same `IterMut` struct as by the [`iter_mut`] method on\n[`HashMap`].\n\n[`iter_mut`]: struct.HashMap.html#method.iter_mut\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet mut map: HashMap<_, _> = [(\"a\", 1), (\"b\", 2), (\"c\", 3)].into();\n\nfor (key, value) in &mut map {\n    println!(\"Key: {}, Value: {}\", key, value);\n    *value *= 2;\n}\n\nlet mut vec = map.iter().collect::<Vec<_>>();\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(&\"a\", &2), (&\"b\", &4), (&\"c\", &6)]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:766:2511","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:10545:4594":{"id":"1:10545:4594","crate_id":1,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10546:672"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:23115:40923":{"id":"1:23115:40923","crate_id":1,"name":"reduce_or","span":null,"visibility":"default","docs":"Returns the cumulative bitwise \"or\" across the lanes of the vector.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdUint","id":"1:23106:10958","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1205:2673":{"id":"0:1205:2673","crate_id":0,"name":"OccupiedEntryRef","span":{"filename":"src/map.rs","begin":[4434,0],"end":[4439,1]},"visibility":"public","docs":"A view into an occupied entry in a `HashMap`.\nIt is part of the [`EntryRef`] enum.\n\n[`EntryRef`]: enum.EntryRef.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap, OccupiedEntryRef};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\".to_owned(), 10), (\"b\".into(), 20), (\"c\".into(), 30)]);\n\nlet key = String::from(\"a\");\nlet _entry_o: OccupiedEntryRef<_, _, _, _> = map.entry_ref(&key).insert(100);\nassert_eq!(map.len(), 3);\n\n// Existing key (insert and update)\nmatch map.entry_ref(\"a\") {\n    EntryRef::Vacant(_) => unreachable!(),\n    EntryRef::Occupied(mut view) => {\n        assert_eq!(view.get(), &100);\n        let v = view.get_mut();\n        *v *= 10;\n        assert_eq!(view.insert(1111), 1000);\n    }\n}\n\nassert_eq!(map[\"a\"], 1111);\nassert_eq!(map.len(), 3);\n\n// Existing key (take)\nmatch map.entry_ref(\"c\") {\n    EntryRef::Vacant(_) => unreachable!(),\n    EntryRef::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"c\".to_owned(), 30));\n    }\n}\nassert_eq!(map.get(\"c\"), None);\nassert_eq!(map.len(), 2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:76:1803","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2907:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":[]}},"0:616:2551":{"id":"0:616:2551","crate_id":0,"name":"retain","span":{"filename":"src/map.rs","begin":[826,4],"end":[839,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate. Keeps the\nallocated memory for reuse.\n\nIn other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\nThe elements are visited in unsorted (and unspecified) order.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();\nassert_eq!(map.len(), 8);\nlet capacity_before_retain = map.capacity();\n\nmap.retain(|&k, _| k % 2 == 0);\n\n// We can see, that the number of elements inside map is changed.\nassert_eq!(map.len(), 4);\n// But map capacity is equal to old one.\nassert_eq!(map.capacity(), capacity_before_retain);\n\nlet mut vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();\nvec.sort_unstable();\nassert_eq!(vec, [(0, 0), (2, 20), (4, 40), (6, 60)]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3235-0:1716:146":{"id":"b:1:3235-0:1716:146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3212:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3209:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3238:3401"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:607:1917":{"id":"0:607:1917","crate_id":0,"name":"capacity","span":{"filename":"src/map.rs","begin":[524,4],"end":[526,5]},"visibility":"public","docs":"Returns the number of elements the map can hold without reallocating.\n\nThis number is a lower bound; the `HashMap<K, V>` might be able to hold\nmore, but is guaranteed to be able to hold at least this many.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet map: HashMap<i32, i32> = HashMap::with_capacity(100);\nassert_eq!(map.len(), 0);\nassert!(map.capacity() >= 100);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:14527:41904":{"id":"1:14527:41904","crate_id":1,"name":"shrink","span":null,"visibility":"default","docs":"Attempts to shrink the memory block.\n\nReturns a new [`NonNull<[u8]>`][NonNull] containing a pointer and the actual size of the allocated\nmemory. The pointer is suitable for holding data described by `new_layout`. To accomplish\nthis, the allocator may shrink the allocation referenced by `ptr` to fit the new layout.\n\nIf this returns `Ok`, then ownership of the memory block referenced by `ptr` has been\ntransferred to this allocator. The memory may or may not have been freed, and should be\nconsidered unusable.\n\nIf this method returns `Err`, then ownership of the memory block has not been transferred to\nthis allocator, and the contents of the memory block are unaltered.\n\n# Safety\n\n* `ptr` must denote a block of memory [*currently allocated*] via this allocator.\n* `old_layout` must [*fit*] that block of memory (The `new_layout` argument need not fit it.).\n* `new_layout.size()` must be smaller than or equal to `old_layout.size()`.\n\nNote that `new_layout.align()` need not be the same as `old_layout.align()`.\n\n[*currently allocated*]: #currently-allocated-memory\n[*fit*]: #memory-fitting\n\n# Errors\n\nReturns `Err` if the new layout does not meet the allocator's size and alignment\nconstraints of the allocator, or if shrinking otherwise fails.\n\nImplementations are encouraged to return `Err` on memory exhaustion rather than panicking or\naborting, but this is not a strict requirement. (Specifically: it is *legal* to implement\nthis trait atop an underlying native allocation library that aborts on memory exhaustion.)\n\nClients wishing to abort computation in response to an allocation error are encouraged to\ncall the [`handle_alloc_error`] function, rather than directly invoking `panic!` or similar.\n\n[`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html","links":{"NonNull":"1:2417:1796"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2417:1796","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["old_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:54116:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:54116:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:51274:211","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:2417:1796","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:54145:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:3214:693":{"id":"1:3214:693","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Converts to this type from the input type.","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:3973:4661":{"id":"1:3973:4661","crate_id":1,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:13330:10843":{"id":"1:13330:10843","crate_id":1,"name":"haystack","span":null,"visibility":"default","docs":"Getter for the underlying string to be searched in\n\nWill always return the same [`&str`][str].","links":{"str":"1:61609:4399"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:3469:4530-0:1716:146":{"id":"a:1:3469:4530-0:1716:146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3469:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3469:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:3469:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:3469:4530","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"HashSet","id":"0:1716:146","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"S"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:8695:9973":{"id":"1:8695:9973","crate_id":1,"name":"try_rfold","span":null,"visibility":"default","docs":"This is the reverse version of [`Iterator::try_fold()`]: it takes\nelements starting from the back of the iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [\"1\", \"2\", \"3\"];\nlet sum = a.iter()\n    .map(|&s| s.parse::<i32>())\n    .try_rfold(0, |acc, x| x.and_then(|y| Ok(acc + y)));\nassert_eq!(sum, Ok(6));\n```\n\nShort-circuiting:\n\n```\nlet a = [\"1\", \"rust\", \"3\"];\nlet mut it = a.iter();\nlet sum = it\n    .by_ref()\n    .map(|&s| s.parse::<i32>())\n    .try_rfold(0, |acc, x| x.and_then(|y| Ok(acc + y)));\nassert!(sum.is_err());\n\n// Because it short-circuited, the remaining elements are still\n// available through the iterator.\nassert_eq!(it.next_back(), Some(&\"1\"));\n```","links":{"`Iterator::try_fold()`":"1:8932:9997"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3929:233","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:13331:949":{"id":"1:13331:949","crate_id":1,"name":"next","span":null,"visibility":"default","docs":"Performs the next search step starting from the front.\n\n- Returns [`Match(a, b)`][SearchStep::Match] if `haystack[a..b]` matches\n  the pattern.\n- Returns [`Reject(a, b)`][SearchStep::Reject] if `haystack[a..b]` can\n  not match the pattern, even partially.\n- Returns [`Done`][SearchStep::Done] if every byte of the haystack has\n  been visited.\n\nThe stream of [`Match`][SearchStep::Match] and\n[`Reject`][SearchStep::Reject] values up to a [`Done`][SearchStep::Done]\nwill contain index ranges that are adjacent, non-overlapping,\ncovering the whole haystack, and laying on utf8 boundaries.\n\nA [`Match`][SearchStep::Match] result needs to contain the whole matched\npattern, however [`Reject`][SearchStep::Reject] results may be split up\ninto arbitrary many adjacent fragments. Both ranges may have zero length.\n\nAs an example, the pattern `\"aaa\"` and the haystack `\"cbaaaaab\"`\nmight produce the stream\n`[Reject(0, 1), Reject(1, 2), Match(2, 5), Reject(5, 8)]`","links":{"SearchStep::Match":"1:53519:10023","SearchStep::Reject":"1:53523:12731","SearchStep::Done":"1:53527:12709"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SearchStep","id":"1:53518:10822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1743:1968":{"id":"0:1743:1968","crate_id":0,"name":"is_empty","span":{"filename":"src/set.rs","begin":[279,4],"end":[281,5]},"visibility":"public","docs":"Returns `true` if the set contains no elements.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut v = HashSet::new();\nassert!(v.is_empty());\nv.insert(1);\nassert!(!v.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2888-0:2244:1804":{"id":"b:1:2888-0:2244:1804","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:3407:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2882:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:2244:1804","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2890:2281"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:3402:220-0:845:2474":{"id":"a:1:3402:220-0:845:2474","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:3414:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:3402:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:845:2474","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:13774:42431":{"id":"1:13774:42431","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:8699:9974":{"id":"1:8699:9974","crate_id":1,"name":"rfold","span":null,"visibility":"default","docs":"An iterator method that reduces the iterator's elements to a single,\nfinal value, starting from the back.\n\nThis is the reverse version of [`Iterator::fold()`]: it takes elements\nstarting from the back of the iterator.\n\n`rfold()` takes two arguments: an initial value, and a closure with two\narguments: an 'accumulator', and an element. The closure returns the value that\nthe accumulator should have for the next iteration.\n\nThe initial value is the value the accumulator will have on the first\ncall.\n\nAfter applying this closure to every element of the iterator, `rfold()`\nreturns the accumulator.\n\nThis operation is sometimes called 'reduce' or 'inject'.\n\nFolding is useful whenever you have a collection of something, and want\nto produce a single value from it.\n\nNote: `rfold()` combines elements in a *right-associative* fashion. For associative\noperators like `+`, the order the elements are combined in is not important, but for non-associative\noperators like `-` the order will affect the final result.\nFor a *left-associative* version of `rfold()`, see [`Iterator::fold()`].\n\n# Examples\n\nBasic usage:\n\n```\nlet a = [1, 2, 3];\n\n// the sum of all of the elements of a\nlet sum = a.iter()\n           .rfold(0, |acc, &x| acc + x);\n\nassert_eq!(sum, 6);\n```\n\nThis example demonstrates the right-associative nature of `rfold()`:\nit builds a string, starting with an initial value\nand continuing with each element from the back until the front:\n\n```\nlet numbers = [1, 2, 3, 4, 5];\n\nlet zero = \"0\".to_string();\n\nlet result = numbers.iter().rfold(zero, |acc, &x| {\n    format!(\"({x} + {acc})\")\n});\n\nassert_eq!(result, \"(1 + (2 + (3 + (4 + (5 + 0)))))\");\n```","links":{"`Iterator::fold()`":"1:8943:9999"},"attrs":["#[doc(alias = \"foldr\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3682:132","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Iterator","id":"1:8846:160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:23041:40920":{"id":"1:23041:40920","crate_id":1,"name":"reduce_max","span":null,"visibility":"default","docs":"Returns the maximum lane in the vector.\n\nReturns values based on equality, so a vector containing both `0.` and `-0.` may\nreturn either.\n\nThis function will not return `NaN` unless all lanes are `NaN`.\n\n# Examples\n\n```\n# #![feature(portable_simd)]\n# #[cfg(feature = \"as_crate\")] use core_simd::simd;\n# #[cfg(not(feature = \"as_crate\"))] use core::simd;\n# use simd::{f32x2, SimdFloat};\nlet v = f32x2::from_array([1., 2.]);\nassert_eq!(v.reduce_max(), 2.);\n\n// NaN values are skipped...\nlet v = f32x2::from_array([1., f32::NAN]);\nassert_eq!(v.reduce_max(), 1.);\n\n// ...unless all values are NaN\nlet v = f32x2::from_array([f32::NAN, f32::NAN]);\nassert!(v.reduce_max().is_nan());\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Scalar","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SimdFloat","id":"1:23017:10956","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:11172:2041":{"id":"1:11172:2041","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"default","docs":"Returns a mutable reference to the output at this location, without\nperforming any bounds checking.\nCalling this method with an out-of-bounds index or a dangling `slice` pointer\nis *[undefined behavior]* even if the resulting reference is not used.\n\n[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","links":{},"attrs":["#[unstable(feature = \"slice_index_methods\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["slice",{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"SliceIndex","id":"1:11166:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}},"1:3530:275":{"id":"1:3530:275","crate_id":1,"name":"add_assign","span":null,"visibility":"default","docs":"Performs the `+=` operation.\n\n# Example\n\n```\nlet mut x: u32 = 12;\nx += 1;\nassert_eq!(x, 13);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"generic","inner":"Rhs"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:13736:40738":{"id":"1:13736:40738","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:61603:4394","self::pattern":"1:13309:10820"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:13101:11080","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13319:10821","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1172:2659":{"id":"0:1172:2659","crate_id":0,"name":"Occupied","span":{"filename":"src/map.rs","begin":[4338,4],"end":[4338,53]},"visibility":"default","docs":"An occupied entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\nlet mut map: HashMap<_, _> = [(\"a\".to_owned(), 100), (\"b\".into(), 200)].into();\n\nmatch map.entry_ref(\"a\") {\n    EntryRef::Vacant(_) => unreachable!(),\n    EntryRef::Occupied(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:1174:1585"]}},"1:10807:2282":{"id":"1:10807:2282","crate_id":1,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:10808:147","1:10809:2410","1:10810:2411"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:3402:220":{"id":"1:3402:220","crate_id":1,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"9:6254:12431":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:11451:11080":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:7780:11344":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:53634:10833":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:42420:4531":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:54931:10906":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:5399:4534":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11383:2511":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:8323:11305":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:49614:10805":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"4:4712:244":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:11528:11082":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:53421:11125":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:2289:4578":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"9:6201:12403":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:55033:12738":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"4:8508:224":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"1:23259:10893":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:50672:4474":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"9:6284:12453":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:25518:10961":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"9:81:33858":{"crate_id":9,"path":["libc","unix","DIR"],"kind":"enum"},"1:53861:11140":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:10762:143":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:24040:10764":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:53430:11126":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:447:11312":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:54885:10926":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:50005:10987":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"9:4196:11910":{"crate_id":9,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:50321:4500":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"9:1726:11820":{"crate_id":9,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:49972:11280":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:51745:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:23394:10815":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:54819:12736":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:22830:41986":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:54116:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:53746:11206":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"9:4142:11877":{"crate_id":9,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"4:4727:11554":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"9:5514:12258":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"4:5917:11308":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"1:9496:4748":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:50024:11196":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:23143:10957":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"9:579:11662":{"crate_id":9,"path":["libc","unix","pollfd"],"kind":"struct"},"1:52167:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"4:7754:11343":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"9:4417:12022":{"crate_id":9,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:3595:4648":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:50661:4472":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:13537:110":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:3497:4633":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"9:5714:12359":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:24391:12617":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"9:4595:12109":{"crate_id":9,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:50293:4486":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"9:150:33924":{"crate_id":9,"path":["libc","unix","FILE"],"kind":"enum"},"1:56154:10916":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:51409:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:7326:2538":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:49896:11283":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"9:6486:12548":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:24756:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"4:3113:3398":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:53156:11083":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"9:4681:12150":{"crate_id":9,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:51333:2171":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"4:5959:11559":{"crate_id":4,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:56188:10898":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:50380:4488":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:3848:4653":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"4:3375:95":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:55171:12740":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"4:995:96":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:61602:4393":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"4:0:287":{"crate_id":4,"path":["alloc"],"kind":"module"},"1:14036:139":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"9:4655:12134":{"crate_id":9,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:53188:11113":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:53306:11118":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:3917:4654":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:49854:10982":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"9:538:11633":{"crate_id":9,"path":["libc","unix","rusage"],"kind":"struct"},"4:3119:13103":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:8193:4461":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:54133:4454":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"9:526:11628":{"crate_id":9,"path":["libc","unix","timespec"],"kind":"struct"},"1:22802:4925":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:56874:10914":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:8426:4465":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"4:8293:44796":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:3946:4658":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:4997:10768":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:14521:1803":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:1069:11416":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:8344:2171":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"9:1614:11748":{"crate_id":9,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:3410:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:3404:2502":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"4:8397:1655":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:49926:11278":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:55264:10928":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:51190:2502":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:50330:4501":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"9:7225:12590":{"crate_id":9,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:52182:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:3685:133":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:24383:12616":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:3518:4637":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"9:4276:11948":{"crate_id":9,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:2788:591":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:51493:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:3591:4647":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"9:1551:11706":{"crate_id":9,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:61624:4412":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:56078:10909":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:61604:4395":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"5:109:11463":{"crate_id":5,"path":["ahash","fallback_hash","AHasherStr"],"kind":"struct"},"9:619:11684":{"crate_id":9,"path":["libc","unix","servent"],"kind":"struct"},"9:4702:12157":{"crate_id":9,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:4884:11555":{"crate_id":1,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:23942:41984":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:53048:11100":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"9:1673:11792":{"crate_id":9,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:22870:42049":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:57242:9951":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:7935:4480":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:5135:11025":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:8846:160":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"9:4643:12129":{"crate_id":9,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"4:867:109":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"9:7189:12583":{"crate_id":9,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:52173:134":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:50391:4504":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:14051:152":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"9:6307:12454":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:3114:44867":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:23206:10765":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:51661:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:53569:10831":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:49949:11279":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:53288:11117":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:2138:590":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:23731:10895":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:3682:132":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:3414:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:54993:10927":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:50643:4468":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10211:11066":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:49845:12706":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"4:8472:11372":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:2907:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"9:4325:11975":{"crate_id":9,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"9:5604:12315":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:60140:245":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"9:5631:12328":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:51619:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:5801:19003":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:50255:4496":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"9:1757:11833":{"crate_id":9,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:50019:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"9:7200:12587":{"crate_id":9,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:2882:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:24474:12630":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:50429:4506":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:24300:11014":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:24954:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:49422:201":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:55094:10907":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:51909:4590":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"9:4086:11839":{"crate_id":9,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"9:5808:12396":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"9:5659:12342":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:3556:3942":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:50223:4493":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:870:10527":{"crate_id":5,"path":["ahash","fallback_hash","AHasher"],"kind":"struct"},"1:5822:10954":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:50163:4482":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:24822:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:24987:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"4:8442:11371":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:61616:4404":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"9:4388:12014":{"crate_id":9,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:52956:11094":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:52697:11298":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"4:8425:102":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:3524:4636":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"9:4486:12049":{"crate_id":9,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:61621:4409":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:50194:4484":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:49979:11281":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:52471:147":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:11601:11084":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"9:4129:11867":{"crate_id":9,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:24408:14514":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:55153:10896":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:3412:107":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:10474:4584":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:3956:10865":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:11408:11079":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"9:506:2095":{"crate_id":9,"path":["libc","unix","group"],"kind":"struct"},"1:52501:12730":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:24921:11021":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:52200:108":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:52927:11091":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:3411:4077":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:50627:4464":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:23070:10945":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:32626:1795":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:51274:211":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:5325:4604":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"9:6441:12524":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:55583:12741":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:13385:10827":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"9:6380:12479":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:3934:138":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:5253:11028":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"9:520:11625":{"crate_id":9,"path":["libc","unix","timeval"],"kind":"struct"},"4:4782:11554":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:61620:4408":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:56124:10913":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:8253:1804":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:49504:202":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:53260:11087":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:49965:11127":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:53712:10836":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"9:4634:12123":{"crate_id":9,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:53733:10838":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"9:0:813":{"crate_id":9,"path":["libc"],"kind":"module"},"9:4284:11953":{"crate_id":9,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"9:5793:12385":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"9:4264:11943":{"crate_id":9,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"9:4357:11990":{"crate_id":9,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:24036:10815":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:53392:11122":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:23106:10958":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:53108:11107":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:14665:1598":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"4:5499:11555":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:53698:10835":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"4:2852:11432":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:8262:2171":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:3203:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:13066:11119":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"4:1698:2171":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"9:5557:12287":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:53857:11138":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:24507:11180":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:4954:10817":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:2995:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"9:4427:12023":{"crate_id":9,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:24789:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:53138:11079":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:3847:2511":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:10151:672":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:3679:131":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"4:3123:13104":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:11156:10815":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:11656:11087":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:32720:11191":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"9:1619:11750":{"crate_id":9,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"9:7177:12581":{"crate_id":9,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:52270:4588":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:10812:4625":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"9:6356:12467":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"4:1765:199":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"4:2278:11551":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"9:4755:12177":{"crate_id":9,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"4:5921:11306":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"1:24279:12605":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:61610:4400":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:3140:10815":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:32592:1794":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:61627:4415":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:42371:1815":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"9:4351:11988":{"crate_id":9,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:3450:11358":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:54963:10939":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:55888:10933":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:52867:11085":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"9:4116:11857":{"crate_id":9,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"4:3471:4105":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:10000:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:51317:2502":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:8691:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"9:4214:11922":{"crate_id":9,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:6786:11411":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:52936:11092":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"7:158:11549":{"crate_id":7,"path":["getrandom","use_file","DropGuard"],"kind":"struct"},"1:41215:4925":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"4:178:1788":{"crate_id":4,"path":["alloc","alloc","handle_alloc_error"],"kind":"function"},"1:11642:11086":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:55486:10897":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:24495:11181":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:52483:12726":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"4:7218:11564":{"crate_id":4,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"5:97:11462":{"crate_id":5,"path":["ahash","fallback_hash","AHasherFixed"],"kind":"struct"},"1:51248:4746":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"9:5537:12271":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:57044:10917":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"9:4571:12095":{"crate_id":9,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:24332:12611":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:51181:2170":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:3929:233":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"9:4663:12139":{"crate_id":9,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:23348:10815":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"9:4625:12120":{"crate_id":9,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"4:4391:2511":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:8609:4479":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:51215:4745":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"9:5704:12356":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:11359:2502":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:55764:10941":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"9:1906:35253":{"crate_id":9,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:1925:1793":{"crate_id":1,"path":["core","mem"],"kind":"module"},"9:5767:12370":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8659:3665":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:10541:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:53402:11123":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:50370:4503":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"9:4496:12056":{"crate_id":9,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"9:5652:12341":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:53540:10825":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"4:4045:11549":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:52149:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:55440:10912":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"9:6470:12541":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"9:154:33925":{"crate_id":9,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:2527:4451":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"4:1724:2484":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"9:5645:12339":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"9:6915:12560":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"9:611:11679":{"crate_id":9,"path":["libc","unix","tms"],"kind":"struct"},"9:4092:11840":{"crate_id":9,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"9:4649:12131":{"crate_id":9,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:55134:12739":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:52454:12725":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:10473:211":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"4:1561:2822":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:2417:1796":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:23736:30961":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:3577:4644":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:56796:10930":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:0:500":{"crate_id":1,"path":["core"],"kind":"module"},"4:3914:11549":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:3212:136":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:12202:11102":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"7:0:10521":{"crate_id":7,"path":["getrandom"],"kind":"module"},"1:2174:1078":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"9:5624:12327":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:10543:4593":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:4010:4662":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"9:7183:12582":{"crate_id":9,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:57120:10902":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:6733:4495":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"4:2408:11429":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:13328:10823":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"4:8485:11373":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:49666:10992":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"9:605:11676":{"crate_id":9,"path":["libc","unix","itimerval"],"kind":"struct"},"4:858:231":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:9995:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:52286:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"4:2296:11360":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:49548:4652":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:3665:3938":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:53006:11096":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"9:1655:11780":{"crate_id":9,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"9:5473:12237":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"9:4336:11981":{"crate_id":9,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:13334:10819":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:3445:4096":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:61415:12773":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:13101:11080":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:0:10520":{"crate_id":6,"path":["once_cell"],"kind":"module"},"1:2946:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"4:2631:11433":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"4:6770:11384":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"1:49360:4660":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:50264:4497":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:53766:11207":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:50652:4470":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:321:211":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:3587:4646":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:72:11338":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:3940:4656":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:55410:10908":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"9:1687:11803":{"crate_id":9,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"0:2273:1660":{"crate_id":0,"path":["hashbrown","TryReserveError","AllocError"],"kind":"variant"},"1:52993:4481":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"9:1581:11726":{"crate_id":9,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:1532:2662":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:54060:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:10537:4591":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"9:1569:11717":{"crate_id":9,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:32444:11233":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:53908:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"4:8519:11315":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"9:6432:12521":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:3834:2502":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"9:5436:12223":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"9:4524:12071":{"crate_id":9,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:57082:10937":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:55064:10919":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:8585:2580":{"crate_id":4,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:2951:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"9:4344:11986":{"crate_id":9,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:55684:12744":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:22815:41986":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"4:7926:243":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:28328:10864":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:4201:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"4:1166:11549":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:5379:4605":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"9:1544:11703":{"crate_id":9,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:12773:11259":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"4:3416:11357":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:57219:9950":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:25053:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"4:1715:2474":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:24481:11238":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"9:6909:12558":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:61622:4410":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:53518:10822":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:14401:206":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"4:4683:11552":{"crate_id":4,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"1:49482:203":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:3571:4643":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:51149:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:61606:4396":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:50099:11571":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:9618:10821":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:3544:4640":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:51535:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:8350:2171":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"9:5455:12225":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:10679:13008":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:25020:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:52493:12729":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"4:1677:2502":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"4:1547:2660":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:8650:153":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:53446:11128":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8714:2225":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"9:4743:12172":{"crate_id":9,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"9:4247:11937":{"crate_id":9,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:55508:10900":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:24208:11164":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:54095:11150":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:0:443":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"4:1754:2601":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"4:8409:11369":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:53437:11127":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:2019:2580":{"crate_id":4,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"9:1705:11810":{"crate_id":9,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:57138:4669":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:12990:11112":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:56338:10922":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:52462:4626":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:50203:4491":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"9:4202:11913":{"crate_id":9,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:51198:2511":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:3566:3944":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:42411:10810":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:49986:11282":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"4:2388:44797":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"9:1593:11734":{"crate_id":9,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:10535:4590":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:50634:4466":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"9:7142:12573":{"crate_id":9,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:49918:11129":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:7970:11564":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:57158:9945":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:14162:13009":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"9:7171:12580":{"crate_id":9,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:53586:10832":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:3408:4526":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:3419:1792":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:50213:4492":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:55116:10911":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:3957:11422":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:53455:11129":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:57178:9947":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"8:0:1775":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:49580:4655":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:24368:11010":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:4966:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"4:7056:11313":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:53019:11097":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:53941:11218":{"crate_id":1,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"9:4619:12119":{"crate_id":9,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:24445:14515":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:8502:12596":{"crate_id":4,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"6:213:12995":{"crate_id":6,"path":["once_cell","race","OnceBool"],"kind":"struct"},"1:55316:10935":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:53242:11086":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:49882:10985":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:54863:10938":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:8410:13403":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:50273:4507":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"9:4479:12045":{"crate_id":9,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"9:4505:12061":{"crate_id":9,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:4:1006":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:51342:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:8530:11316":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"4:791:12996":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:55462:10915":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"9:6243:12427":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:11670:11088":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"4:1743:2594":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:1474:1797":{"crate_id":1,"path":["core","hint"],"kind":"module"},"9:5773:12371":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:23405:10893":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"9:5500:12257":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"9:5404:12205":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:879:2286":{"crate_id":5,"path":["ahash","random_state","RandomState"],"kind":"struct"},"1:3215:237":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:53082:11202":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:61613:4401":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:54145:1660":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:3652:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:14:1898":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:32662:11190":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:53869:11143":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:13319:10821":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:2145:4543":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"9:600:11674":{"crate_id":9,"path":["libc","unix","sigval"],"kind":"struct"},"4:8315:199":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:52234:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:2303:10806":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:32826:11192":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"4:4528:2502":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:8646:137":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"4:4026:2580":{"crate_id":4,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:42407:11436":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:55015:10931":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:1774:11426":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:32632:4547":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"9:5665:12345":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"4:6509:232":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:3141:10785":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:49438:199":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:3206:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"9:573:11659":{"crate_id":9,"path":["libc","unix","iovec"],"kind":"struct"},"9:1714:11816":{"crate_id":9,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:207:12994":{"crate_id":6,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"1:57204:9949":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:53412:11124":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:14086:40875":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:25086:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:53342:11120":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:23119:10815":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"9:4749:12174":{"crate_id":9,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:0:1595":{"crate_id":5,"path":["ahash"],"kind":"module"},"9:1599:11736":{"crate_id":9,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:55842:10929":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:51266:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:49906:11284":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:53096:10870":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:52946:11093":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:6810:4485":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:10539:4592":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:8354:4462":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:54839:12737":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"9:4237:11931":{"crate_id":9,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"9:5430:12220":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:8613:4478":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:22847:42051":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:37:11025":{"crate_id":6,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"1:3456:4529":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:51787:11201":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:24137:11162":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:55294:10932":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:85:11461":{"crate_id":5,"path":["ahash","fallback_hash","AHasherU64"],"kind":"struct"},"9:6362:12468":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:14234:40419":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"9:4530:12074":{"crate_id":9,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"9:1519:11693":{"crate_id":9,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"9:6504:12551":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"9:4175:11901":{"crate_id":9,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:50410:4505":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"9:586:11666":{"crate_id":9,"path":["libc","unix","winsize"],"kind":"struct"},"4:6351:11343":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"4:1733:2491":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:2043:11555":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"9:6225:12420":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"3:0:4436":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"9:6324:12456":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"9:5412:12207":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:10527:110":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"4:8268:11417":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"4:7494:2171":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:3719:4659":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:10484:135":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"9:4726:12164":{"crate_id":9,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"9:4691:12151":{"crate_id":9,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"9:4555:12086":{"crate_id":9,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:51257:4737":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:49407:4651":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:50129:4481":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:50172:3941":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:9121:4476":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:10772:147":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:3973:4661":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"4:998:11415":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:53929:11217":{"crate_id":1,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:55630:12742":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"9:6887:12557":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:5248:11027":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"9:4549:12084":{"crate_id":9,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"4:5404:205":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:2982:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"9:6341:12461":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:8285:11418":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:24888:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:13050:11116":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:53723:10837":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:61615:4403":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:53877:11142":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:61614:4402":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"9:4105:11849":{"crate_id":9,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:53555:10828":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:3676:2169":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:57147:9944":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:7568:11549":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"9:4190:11908":{"crate_id":9,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"9:4517:12068":{"crate_id":9,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:12169:11101":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:3469:4530":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"4:4600:11398":{"crate_id":4,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"4:3563:2580":{"crate_id":4,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:3402:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"9:4270:11945":{"crate_id":9,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:10524:110":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:1310:11428":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:54103:11151":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"9:4733:12167":{"crate_id":9,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"4:3823:163":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"9:564:11653":{"crate_id":9,"path":["libc","unix","hostent"],"kind":"struct"},"1:3561:3943":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:61628:4416":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:53206:11114":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"9:1537:11701":{"crate_id":9,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"9:4541:12081":{"crate_id":9,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:61617:4405":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:56936:10934":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:61603:4394":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"9:5519:12259":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:3583:4645":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:4329:11549":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"9:1733:11823":{"crate_id":9,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"9:6261:12435":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:52693:11299":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:8126:10861":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"4:8307:2171":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:22849:42054":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:55532:10901":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:53881:11136":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"9:4582:12103":{"crate_id":9,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"4:3115:12592":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:53038:11099":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:14127:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:53360:11121":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:53865:11139":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:51577:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:53889:11215":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"9:4407:12015":{"crate_id":9,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:49866:10983":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:61626:4414":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:2885:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:3532:4641":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:53114:11108":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:52918:11090":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:22868:42053":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"9:1524:11695":{"crate_id":9,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"9:6456:12532":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"9:4181:11903":{"crate_id":9,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"9:4221:11926":{"crate_id":9,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:50311:4499":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:3209:150":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:3286:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"4:5873:11549":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:11563:11083":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:56544:10942":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:5973:11562":{"crate_id":4,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:10206:11065":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:8277:2538":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:60075:245":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:50241:12715":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:54052:12735":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:5315:11033":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:23930:10763":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:13309:10820":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:3741:4650":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:49462:200":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:61625:4413":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:51923:4591":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:2340:11430":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"9:6477:12544":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"9:4297:11959":{"crate_id":9,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:61619:4407":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"9:1741:11827":{"crate_id":9,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:3528:3847":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:53124:11109":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:49607:10804":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:50109:13010":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:59705:10758":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:4942:10816":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:9497:4747":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:4252:10812":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:61601:4392":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"9:1530:11698":{"crate_id":9,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"9:4451:12033":{"crate_id":9,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:60088:245":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:23017:10956":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"9:6347:12463":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:24316:12607":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:23196:10815":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:56686:10910":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"9:5486:12246":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:3437:4087":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:7228:4508":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:4590:2171":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:13339:10824":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"9:5375:12181":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:49839:11128":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:12749:11294":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:3512:4634":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"9:514:11622":{"crate_id":9,"path":["libc","unix","utimbuf"],"kind":"struct"},"9:1720:11819":{"crate_id":9,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"9:6234:12426":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:51703:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"9:5442:12224":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:10533:4589":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"9:627:11689":{"crate_id":9,"path":["libc","unix","protoent"],"kind":"struct"},"4:8456:11197":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:61623:4411":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:23403:10894":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:49943:11128":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:5370:11034":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:4299:2538":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"4:6750:69":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:53853:11135":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:3411:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:41194:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:61607:4397":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"9:5527:12264":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:49526:204":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"9:5592:12310":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:51930:4592":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"9:1560:11711":{"crate_id":9,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:57272:9953":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"9:7154:12575":{"crate_id":9,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"9:558:11650":{"crate_id":9,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:60101:245":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"7:150:166":{"crate_id":7,"path":["getrandom","use_file","Mutex"],"kind":"struct"},"0:2271:1658":{"crate_id":0,"path":["hashbrown","TryReserveError","CapacityOverflow"],"kind":"variant"},"1:61608:4398":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:60114:245":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:52446:4627":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:50284:4498":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:3507:4635":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"9:4229:11928":{"crate_id":9,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:3536:4639":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:3969:11423":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:57334:9955":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:51206:2171":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:61618:4406":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:49333:4663":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:13027:11115":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:50351:4502":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"0:2192:1651":{"crate_id":0,"path":["hashbrown","hash_set"],"kind":"module"},"9:6932:12571":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:14350:11152":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:50052:11198":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:50232:4494":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:49587:10813":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:51367:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:56000:10921":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"9:1662:11784":{"crate_id":9,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"4:1086:2502":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"9:594:11671":{"crate_id":9,"path":["libc","unix","linger"],"kind":"struct"},"1:3540:4638":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:52212:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:12308:11577":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"9:5616:12322":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:60062:245":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"9:7148:12574":{"crate_id":9,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:13248:10868":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10768:143":{"crate_id":1,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"9:4307:11966":{"crate_id":9,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"9:4439:12032":{"crate_id":9,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"9:4257:11940":{"crate_id":9,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:9125:4477":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:79:11472":{"crate_id":6,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"1:32648:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:57295:9954":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:254:10528":{"crate_id":5,"path":["ahash","specialize","CallHasher"],"kind":"trait"},"1:50185:4483":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"9:7160:12576":{"crate_id":9,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"4:1923:11549":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:54909:10918":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:10545:4594":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"9:4671:12144":{"crate_id":9,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:4264:10811":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"0:0:1675":{"crate_id":0,"path":["hashbrown"],"kind":"module"},"1:24855:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:25119:11167":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:57193:9948":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:60127:245":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"4:1270:13402":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"7:66:128":{"crate_id":7,"path":["getrandom","error","Error"],"kind":"struct"},"4:7372:11549":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"9:5681:12350":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:51451:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"9:5673:12347":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"4:158:287":{"crate_id":4,"path":["alloc","alloc","alloc"],"kind":"function"},"1:3407:2408":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"9:4710:12159":{"crate_id":9,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:3502:3945":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:8021:4490":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:1687:2511":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:53028:11098":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"0:2270:1655":{"crate_id":0,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:3737:2283":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:51325:2511":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:23355:30942":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"9:7213:12588":{"crate_id":9,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"9:532:11630":{"crate_id":9,"path":["libc","unix","rlimit"],"kind":"struct"},"1:55661:12743":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:5244:208":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"9:6411:12506":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"4:1290:11427":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:61436:12774":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"9:7100:12572":{"crate_id":9,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:51916:4589":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"9:1697:11809":{"crate_id":9,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"0:2190:1649":{"crate_id":0,"path":["hashbrown","hash_map"],"kind":"module"},"4:6857:11555":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:55218:10940":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:3600:4649":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"9:5466:12233":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"4:159:530":{"crate_id":4,"path":["alloc","alloc","dealloc"],"kind":"function"},"1:55918:10936":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"9:4169:11900":{"crate_id":9,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:9495:4749":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"9:4611:12116":{"crate_id":9,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:2312:4577":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"4:6573:2538":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"4:1516:2657":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"9:4565:12092":{"crate_id":9,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:179:11459":{"crate_id":6,"path":["once_cell","race","once_box","OnceBox"],"kind":"struct"},"1:24429:14506":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:3219:236":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:50036:11197":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:3549:4642":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"9:4319:11972":{"crate_id":9,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"9:4369:11999":{"crate_id":9,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:7790:11345":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:53661:10834":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:52967:11095":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"9:1627:11755":{"crate_id":9,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"4:8602:11339":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:54042:206":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:53873:11141":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:6977:41970":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:14340:10769":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:14568:4930":{"crate_id":1,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"1:10807:2282":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:23200:10762":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:10531:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:53885:11137":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:386:11379":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"9:4290:11956":{"crate_id":9,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"9:4601:12112":{"crate_id":9,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"9:665:34274":{"crate_id":9,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:5422:4606":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:24356:11009":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:5848:794":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:57167:9946":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:11684:11089":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:5099:11024":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"9:6209:12408":{"crate_id":9,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:61609:4399":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:3310:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"9:4465:12044":{"crate_id":9,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:11166:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:49621:4604":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:55364:10920":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:7995:11568":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"4:5620:11384":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"1:9118:1791":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:57257:9952":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:11490:11081":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"4:1640:94":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:56998:10899":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"9:4588:12106":{"crate_id":9,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:5179:4603":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"}},"external_crates":{"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"ahash","html_root_url":null},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"once_cell","html_root_url":null},"7":{"name":"getrandom","html_root_url":"https://docs.rs/getrandom/0.2.8/"},"9":{"name":"libc","html_root_url":null},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":22}