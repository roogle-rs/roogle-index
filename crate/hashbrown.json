{"root":"0:0:1715","crate_version":"0.13.2","includes_private":false,"index":{"a:1:2684:220-0:1057:2749":{"id":"a:1:2684:220-0:1057:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1057:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1591:1713":{"id":"0:1591:1713","crate_id":0,"name":"new_in","span":{"filename":"src/set.rs","begin":[222,4],"end":[226,5]},"visibility":"public","docs":"Creates an empty `HashSet`.\n\nThe hash set is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`], for example with\n[`with_hasher_in`](HashSet::with_hasher_in) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet set: HashSet<i32> = HashSet::new();\n```","links":{"`ahash::RandomState`":"5:813:10576","`HashSet`":"0:1573:144","HashSet::with_hasher_in":"0:1618:2509"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1856:588":{"id":"0:1856:588","crate_id":0,"name":"drop","span":{"filename":"src/set.rs","begin":[1756,4],"end":[1762,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:4812-0:1031:2747":{"id":"a:1:8249:4812-0:1031:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:1397:3283":{"id":"0:1397:3283","crate_id":0,"name":"or_insert_with","span":{"filename":"src/map.rs","begin":[5776,4],"end":[5785,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\n\n// nonexistent key\nmap.entry_ref(\"poneyland\").or_insert_with(|| 3);\nassert_eq!(map[\"poneyland\"], 3);\n\n// existing key\n*map.entry_ref(\"poneyland\").or_insert_with(|| 10) *= 2;\nassert_eq!(map[\"poneyland\"], 6);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:2066","args":{"parenthesized":{"inputs":[],"output":{"generic":"V"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:4617-0:1957:2744":{"id":"a:1:2741:4617-0:1957:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1957:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1635:63":{"id":"0:1635:63","crate_id":0,"name":"union","span":{"filename":"src/set.rs","begin":[827,4],"end":[838,5]},"visibility":"public","docs":"Visits the values representing the union,\ni.e., all the values in `self` or `other`, without duplicates.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Print 1, 2, 3, 4 in arbitrary order.\nfor x in a.union(&b) {\n    println!(\"{}\", x);\n}\n\nlet union: HashSet<_> = a.union(&b).collect();\nassert_eq!(union, [1, 2, 3, 4].iter().collect());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12037:4741":{"id":"1:12037:4741","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43343:11405","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:545:2074":{"id":"0:545:2074","crate_id":0,"name":"get","span":{"filename":"src/map.rs","begin":[1345,4],"end":[1354,5]},"visibility":"public","docs":"Returns a reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get(&1), Some(&\"a\"));\nassert_eq!(map.get(&2), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:858:1606":{"id":"0:858:1606","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[3006,13],"end":[3006,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"0:524:2643":{"id":"0:524:2643","crate_id":0,"name":"retain","span":{"filename":"src/map.rs","begin":[954,4],"end":[967,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate. Keeps the\nallocated memory for reuse.\n\nIn other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\nThe elements are visited in unsorted (and unspecified) order.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();\nassert_eq!(map.len(), 8);\n\nmap.retain(|&k, _| k % 2 == 0);\n\n// We can see, that the number of elements inside map is changed.\nassert_eq!(map.len(), 4);\n\nlet mut vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();\nvec.sort_unstable();\nassert_eq!(vec, [(0, 0), (2, 20), (4, 40), (6, 60)]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2929:2008","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:751:668":{"id":"0:751:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[2565,4],"end":[2569,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1874":{"id":"0:1874","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1799,0],"end":[1822,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1879:2230","0:1880:953","0:1881:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8249:4812-0:1072:2759":{"id":"a:1:8249:4812-0:1072:2759","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:12012:2020":{"id":"1:12012:2020","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1879:2230":{"id":"0:1879:2230","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1805,4],"end":[1805,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:1186:668":{"id":"0:1186:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4665,4],"end":[4673,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1730:367":{"id":"0:1730:367","crate_id":0,"name":"bitxor","span":{"filename":"src/set.rs","begin":[1478,4],"end":[1480,5]},"visibility":"default","docs":"Returns the symmetric difference of `self` and `rhs` as a new `HashSet<T, S>`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a ^ &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:4811-0:779:2632":{"id":"a:1:8250:4811-0:779:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1006:668":{"id":"0:1006:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4162,4],"end":[4164,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:453:142":{"id":"0:453:142","crate_id":0,"name":"HashMap","span":{"filename":"src/map.rs","begin":[188,0],"end":[191,1]},"visibility":"public","docs":"A hash map implemented with quadratic probing and SIMD lookup.\n\nThe default hashing algorithm is currently [`AHash`], though this is\nsubject to change at any point in the future. This hash function is very\nfast for all types of keys, but this algorithm will typically *not* protect\nagainst attacks such as HashDoS.\n\nThe hashing algorithm can be replaced on a per-`HashMap` basis using the\n[`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many\nalternative algorithms are available on crates.io, such as the [`fnv`] crate.\n\nIt is required that the keys implement the [`Eq`] and [`Hash`] traits, although\nthis can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.\nIf you implement these yourself, it is important that the following\nproperty holds:\n\n```text\nk1 == k2 -> hash(k1) == hash(k2)\n```\n\nIn other words, if two keys are equal, their hashes must be equal.\n\nIt is a logic error for a key to be modified in such a way that the key's\nhash, as determined by the [`Hash`] trait, or its equality, as determined by\nthe [`Eq`] trait, changes while it is in the map. This is normally only\npossible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n\nIt is also a logic error for the [`Hash`] implementation of a key to panic.\nThis is generally only possible if the trait is implemented manually. If a\npanic does occur then the contents of the `HashMap` may become corrupted and\nsome items may be dropped from the table.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\n// Type inference lets us omit an explicit type signature (which\n// would be `HashMap<String, String>` in this example).\nlet mut book_reviews = HashMap::new();\n\n// Review some books.\nbook_reviews.insert(\n    \"Adventures of Huckleberry Finn\".to_string(),\n    \"My favorite book.\".to_string(),\n);\nbook_reviews.insert(\n    \"Grimms' Fairy Tales\".to_string(),\n    \"Masterpiece.\".to_string(),\n);\nbook_reviews.insert(\n    \"Pride and Prejudice\".to_string(),\n    \"Very enjoyable.\".to_string(),\n);\nbook_reviews.insert(\n    \"The Adventures of Sherlock Holmes\".to_string(),\n    \"Eye lyked it alot.\".to_string(),\n);\n\n// Check for a specific one.\n// When collections store owned values (String), they can still be\n// queried using references (&str).\nif !book_reviews.contains_key(\"Les Misérables\") {\n    println!(\"We've got {} reviews, but Les Misérables ain't one.\",\n             book_reviews.len());\n}\n\n// oops, this review has a lot of spelling mistakes, let's delete it.\nbook_reviews.remove(\"The Adventures of Sherlock Holmes\");\n\n// Look up the values associated with some keys.\nlet to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];\nfor &book in &to_find {\n    match book_reviews.get(book) {\n        Some(review) => println!(\"{}: {}\", book, review),\n        None => println!(\"{} is unreviewed.\", book)\n    }\n}\n\n// Look up the value for a key (will panic if the key is not found).\nprintln!(\"Review for Jane: {}\", book_reviews[\"Pride and Prejudice\"]);\n\n// Iterate over everything.\nfor (book, review) in &book_reviews {\n    println!(\"{}: \\\"{}\\\"\", book, review);\n}\n```\n\n`HashMap` also implements an [`Entry API`](#method.entry), which allows\nfor more complex methods of getting, setting, updating and removing keys and\ntheir values:\n\n```\nuse hashbrown::HashMap;\n\n// type inference lets us omit an explicit type signature (which\n// would be `HashMap<&str, u8>` in this example).\nlet mut player_stats = HashMap::new();\n\nfn random_stat_buff() -> u8 {\n    // could actually return some random value here - let's just return\n    // some fixed value for now\n    42\n}\n\n// insert a key only if it doesn't already exist\nplayer_stats.entry(\"health\").or_insert(100);\n\n// insert a key using a function that provides a new value only if it\n// doesn't already exist\nplayer_stats.entry(\"defence\").or_insert_with(random_stat_buff);\n\n// update a key, guarding against the key possibly not being set\nlet stat = player_stats.entry(\"attack\").or_insert(100);\n*stat += random_stat_buff();\n```\n\nThe easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].\nWe must also derive [`PartialEq`].\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n[`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html\n[`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n[`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html\n[`default`]: #method.default\n[`with_hasher`]: #method.with_hasher\n[`with_capacity_and_hasher`]: #method.with_capacity_and_hasher\n[`fnv`]: https://crates.io/crates/fnv\n[`AHash`]: https://crates.io/crates/ahash\n\n```\nuse hashbrown::HashMap;\n\n#[derive(Hash, Eq, PartialEq, Debug)]\nstruct Viking {\n    name: String,\n    country: String,\n}\n\nimpl Viking {\n    /// Creates a new Viking.\n    fn new(name: &str, country: &str) -> Viking {\n        Viking { name: name.to_string(), country: country.to_string() }\n    }\n}\n\n// Use a HashMap to store the vikings' health points.\nlet mut vikings = HashMap::new();\n\nvikings.insert(Viking::new(\"Einar\", \"Norway\"), 25);\nvikings.insert(Viking::new(\"Olaf\", \"Denmark\"), 24);\nvikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12);\n\n// Use derived implementation to print the status of the vikings.\nfor (viking, health) in &vikings {\n    println!(\"{:?} has {} hp\", viking, health);\n}\n```\n\nA `HashMap` with fixed list of elements can be initialized from an array:\n\n```\nuse hashbrown::HashMap;\n\nlet timber_resources: HashMap<&str, i32> = [(\"Norway\", 100), (\"Denmark\", 50), (\"Iceland\", 10)]\n    .iter().cloned().collect();\n// use the values stored in map\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"DefaultHashBuilder","id":"0:452:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:489","0:494","0:500","0:506","0:531","0:612","a:1:2684:220-0:453:142","a:1:8249:4812-0:453:142","a:1:8250:4811-0:453:142","a:1:2701:228-0:453:142","a:1:2741:4617-0:453:142","b:0:2056-0:453:142","b:1:2251-0:453:142","b:1:2542-0:453:142","b:1:2248-0:453:142","b:1:2538-0:453:142","b:1:2553-0:453:142","b:1:2548-0:453:142","b:1:3319-0:453:142","b:4:684-0:453:142","0:460","0:1472","0:638","0:1205","0:1463","0:652","0:644","0:1677","0:627","0:1447","0:1455","0:1187","0:1196","0:619","0:632"]}}},"0:1935":{"id":"0:1935","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1943,0],"end":[1950,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1939:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1736:2596":{"id":"0:1736:2596","crate_id":0,"name":"Iter","span":{"filename":"src/set.rs","begin":[1522,0],"end":[1524,1]},"visibility":"public","docs":"An iterator over the items of a `HashSet`.\n\nThis `struct` is created by the [`iter`] method on [`HashSet`].\nSee its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`iter`]: struct.HashSet.html#method.iter","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:1736:2596","a:1:8249:4812-0:1736:2596","a:1:8250:4811-0:1736:2596","a:1:2701:228-0:1736:2596","a:1:2741:4617-0:1736:2596","b:1:2251-0:1736:2596","b:1:2542-0:1736:2596","b:1:2248-0:1736:2596","b:1:2538-0:1736:2596","b:1:2553-0:1736:2596","b:1:7206-0:1736:2596","b:1:2548-0:1736:2596","b:1:3319-0:1736:2596","b:4:684-0:1736:2596","0:1812","0:1806","0:1800","0:1797","0:1810"]}}},"b:1:2538-0:1072:2759":{"id":"b:1:2538-0:1072:2759","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2684:220-0:725:2689":{"id":"a:1:2684:220-0:725:2689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:904:3248":{"id":"0:904:3248","crate_id":0,"name":"from_key_hashed_nocheck","span":{"filename":"src/map.rs","begin":[3246,4],"end":[3251,5]},"visibility":"public","docs":"Creates a `RawEntryMut` from the given key and its hash.\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nlet key = \"a\";\nlet hash = compute_hash(map.hasher(), &key);\nlet entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_key_hashed_nocheck(hash, &key);\nentry.insert(key, 100);\nassert_eq!(map[&\"a\"], 100);\n```","links":{},"attrs":["#[inline]","#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hash",{"primitive":"u64"}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:4617-0:1148:2763":{"id":"a:1:2741:4617-0:1148:2763","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1148:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2741:4617-0:1770:4177":{"id":"a:1:2741:4617-0:1770:4177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:948":{"id":"0:948","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3592,0],"end":[3989,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:954:1691","0:955:3334","0:956:3340","0:957:2074","0:958:3348","0:959:2076","0:960:2777","0:961:2785","0:962:3275","0:963:1714","0:964:3369","0:965:2011","0:966:2013","0:967:3317"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:36:1851":{"id":"0:36:1851","crate_id":0,"name":"Allocator","span":{"filename":"src/raw/alloc.rs","begin":[37,4],"end":[40,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_safety_doc)]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":true,"items":["0:37:2300","0:38:2207"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:978:3393":{"id":"0:978:3393","crate_id":0,"name":"insert_hashed_nocheck","span":{"filename":"src/map.rs","begin":[4051,4],"end":[4062,5]},"visibility":"public","docs":"Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\nlet key = \"c\";\nlet hash = compute_hash(map.hasher(), &key);\n\nmatch map.raw_entry_mut().from_key_hashed_nocheck(hash, &key) {\n    RawEntryMut::Occupied(_) => panic!(),\n    RawEntryMut::Vacant(v) => assert_eq!(\n        v.insert_hashed_nocheck(hash, key, 300),\n        (&mut \"c\", &mut 300)\n    ),\n}\n\nassert_eq!(map[&\"c\"], 300);\n```","links":{},"attrs":["#[inline]","#[allow(clippy :: shadow_unrelated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hash",{"primitive":"u64"}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:940:1714":{"id":"0:940:1714","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[3412,4],"end":[3424,5]},"visibility":"public","docs":"Sets the value of the entry, and returns a RawOccupiedEntryMut.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nlet entry = map.raw_entry_mut().from_key(\"horseyland\").insert(\"horseyland\", 37);\n\nassert_eq!(entry.remove_entry(), (\"horseyland\", 37));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1799:423":{"id":"0:1799:423","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[1657,4],"end":[1661,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:1740:2231":{"id":"b:1:2553-0:1740:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2251-0:1984:2749":{"id":"b:1:2251-0:1984:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1984:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2548-0:1736:2596":{"id":"b:1:2548-0:1736:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1237:811":{"id":"0:1237:811","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[4824,4],"end":[4826,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:1148:2763":{"id":"a:1:2684:220-0:1148:2763","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1148:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:522:2020":{"id":"0:522:2020","crate_id":0,"name":"is_empty","span":{"filename":"src/map.rs","begin":[882,4],"end":[884,5]},"visibility":"public","docs":"Returns `true` if the map contains no elements.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut a = HashMap::new();\nassert!(a.is_empty());\na.insert(1, \"a\");\nassert!(!a.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1372:3634":{"id":"0:1372:3634","crate_id":0,"name":"replace_entry","span":{"filename":"src/map.rs","begin":[5473,4],"end":[5480,5]},"visibility":"public","docs":"Replaces the entry, returning the old key and value. The new key in the hash map will be\nthe key used to create this entry.\n\n# Panics\n\nWill panic if this OccupiedEntry was created through [`Entry::insert`].\n\n# Examples\n\n```\n use hashbrown::hash_map::{Entry, HashMap};\n use std::rc::Rc;\n\n let mut map: HashMap<Rc<String>, u32> = HashMap::new();\n let key_one = Rc::new(\"Stringthing\".to_string());\n let key_two = Rc::new(\"Stringthing\".to_string());\n\n map.insert(key_one.clone(), 15);\n assert!(Rc::strong_count(&key_one) == 2 && Rc::strong_count(&key_two) == 1);\n\n match map.entry(key_two.clone()) {\n     Entry::Occupied(entry) => {\n         let (old_key, old_value): (Rc<String>, u32) = entry.replace_entry(16);\n         assert!(Rc::ptr_eq(&key_one, &old_key) && old_value == 15);\n     }\n     Entry::Vacant(_) => panic!(),\n }\n\n assert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);\n assert_eq!(map[&\"Stringthing\".to_owned()], 16);\n```","links":{"`Entry::insert`":"0:1341:1714"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"generic":"V"}]],"output":{"tuple":[{"generic":"K"},{"generic":"V"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:538:2726":{"id":"0:538:2726","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/map.rs","begin":[1214,4],"end":[1217,5]},"visibility":"public","docs":"Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<i32, i32> = HashMap::with_capacity(100);\nmap.insert(1, 2);\nmap.insert(3, 4);\nassert!(map.capacity() >= 100);\nmap.shrink_to_fit();\nassert!(map.capacity() >= 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:1776:4195":{"id":"b:1:2538-0:1776:4195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2548-0:1770:4177":{"id":"b:1:2548-0:1770:4177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2684:220-0:766:2578":{"id":"a:1:2684:220-0:766:2578","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1133":{"id":"0:1133","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4556,0],"end":[4564,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12052:2009":{"id":"1:12052:2009","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41396:179","prim@char":"1:51699:419","self::pattern":"1:11712:13346"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12134:19508":{"id":"1:12134:19508","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:881:3206":{"id":"b:1:2548-0:881:3206","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:881:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8250:4811-0:725:2689":{"id":"a:1:8250:4811-0:725:2689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2741:4617-0:779:2632":{"id":"a:1:2741:4617-0:779:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2251-0:1031:2747":{"id":"b:1:2251-0:1031:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1141":{"id":"0:1141","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4566,0],"end":[4575,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1147:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2538-0:1744:2632":{"id":"b:1:2538-0:1744:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1846":{"id":"0:1846","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1744,0],"end":[1749,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1849:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1325:811":{"id":"0:1325:811","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[4960,4],"end":[4962,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12122:19501":{"id":"1:12122:19501","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:51699:419","self::pattern":"1:11712:13346"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1385:1714":{"id":"0:1385:1714","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[5665,4],"end":[5677,5]},"visibility":"public","docs":"Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nif let Entry::Vacant(o) = map.entry(\"poneyland\") {\n    o.insert(37);\n}\nassert_eq!(map[\"poneyland\"], 37);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:537:2037":{"id":"0:537:2037","crate_id":0,"name":"try_reserve","span":{"filename":"src/map.rs","begin":[1192,4],"end":[1195,5]},"visibility":"public","docs":"Tries to reserve capacity for at least `additional` more elements to be inserted\nin the given `HashMap<K,V>`. The collection may reserve more space to avoid\nfrequent reallocations.\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, isize> = HashMap::new();\n// Map is empty and doesn't allocate memory\nassert_eq!(map.capacity(), 0);\n\nmap.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n\n// And now map can hold at least 10 elements\nassert!(map.capacity() >= 10);\n```\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned:\n```\n# fn test() {\nuse hashbrown::HashMap;\nuse hashbrown::TryReserveError;\nlet mut map: HashMap<i32, i32> = HashMap::new();\n\nmatch map.try_reserve(usize::MAX) {\n    Err(error) => match error {\n        TryReserveError::CapacityOverflow => {}\n        _ => panic!(\"TryReserveError::AllocError ?\"),\n    },\n    _ => panic!(),\n}\n# }\n# fn main() {\n#     #[cfg(not(miri))]\n#     test()\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2701:228-0:766:2578":{"id":"a:1:2701:228-0:766:2578","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:954:1691":{"id":"0:954:1691","crate_id":0,"name":"key","span":{"filename":"src/map.rs","begin":[3608,4],"end":[3610,5]},"visibility":"public","docs":"Gets a reference to the key in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => assert_eq!(o.key(), &\"a\")\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:1756:4186":{"id":"b:1:2251-0:1756:4186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1308":{"id":"0:1308","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4938,0],"end":[4944,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1311:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1641:4210":{"id":"0:1641:4210","crate_id":0,"name":"get_or_insert","span":{"filename":"src/set.rs","begin":[911,4],"end":[919,5]},"visibility":"public","docs":"Inserts the given `value` into the set if it is not present, then\nreturns a reference to the value in the set.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert_eq!(set.len(), 3);\nassert_eq!(set.get_or_insert(2), &2);\nassert_eq!(set.get_or_insert(100), &100);\nassert_eq!(set.len(), 4); // 100 was inserted\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1787:2230":{"id":"0:1787:2230","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1614,4],"end":[1614,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"b:1:2553-0:660:2596":{"id":"b:1:2553-0:660:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:1072:2759":{"id":"b:1:2248-0:1072:2759","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2129:613":{"id":"0:2129:613","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[154,16],"end":[154,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1782":{"id":"0:1782","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1613,0],"end":[1621,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:1787:2230","0:1788:2231","0:1789:784"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1217:2230":{"id":"0:1217:2230","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4776,4],"end":[4776,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}},"0:1652:4257":{"id":"0:1652:4257","crate_id":0,"name":"is_subset","span":{"filename":"src/set.rs","begin":[1065,4],"end":[1067,5]},"visibility":"public","docs":"Returns `true` if the set is a subset of another,\ni.e., `other` contains at least all the values in `self`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet mut set = HashSet::new();\n\nassert_eq!(set.is_subset(&sup), true);\nset.insert(2);\nassert_eq!(set.is_subset(&sup), true);\nset.insert(4);\nassert_eq!(set.is_subset(&sup), false);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1252":{"id":"0:1252","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4852,0],"end":[4857,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7263:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1256:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1587:1965":{"id":"0:1587:1965","crate_id":0,"name":"with_capacity","span":{"filename":"src/set.rs","begin":[189,4],"end":[193,5]},"visibility":"public","docs":"Creates an empty `HashSet` with the specified capacity.\n\nThe hash set will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash set will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`], for example with\n[`with_capacity_and_hasher`](HashSet::with_capacity_and_hasher) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet set: HashSet<i32> = HashSet::with_capacity(10);\nassert!(set.capacity() >= 10);\n```","links":{"HashSet::with_capacity_and_hasher":"0:1612:2488","`ahash::RandomState`":"5:813:10576","`HashSet`":"0:1573:144"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:702":{"id":"0:702","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2480,0],"end":[2491,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:706:2230","0:707:953","0:709:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1402:3293":{"id":"0:1402:3293","crate_id":0,"name":"and_modify","span":{"filename":"src/map.rs","begin":[5867,4],"end":[5878,5]},"visibility":"public","docs":"Provides in-place mutable access to an occupied entry before any\npotential inserts into the map.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\n\nmap.entry_ref(\"poneyland\")\n   .and_modify(|e| { *e += 1 })\n   .or_insert(42);\nassert_eq!(map[\"poneyland\"], 42);\n\nmap.entry_ref(\"poneyland\")\n   .and_modify(|e| { *e += 1 })\n   .or_insert(42);\nassert_eq!(map[\"poneyland\"], 43);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:2066","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1631:4176":{"id":"0:1631:4176","crate_id":0,"name":"symmetric_difference","span":{"filename":"src/set.rs","begin":[771,4],"end":[775,5]},"visibility":"public","docs":"Visits the values representing the symmetric difference,\ni.e., the values that are in `self` or in `other` but not in both.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Print 1, 4 in arbitrary order.\nfor x in a.symmetric_difference(&b) {\n    println!(\"{}\", x);\n}\n\nlet diff1: HashSet<_> = a.symmetric_difference(&b).collect();\nlet diff2: HashSet<_> = b.symmetric_difference(&a).collect();\n\nassert_eq!(diff1, diff2);\nassert_eq!(diff1, [1, 4].iter().collect());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12020:19472":{"id":"1:12020:19472","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12035:11499":{"id":"1:12035:11499","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:51699:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43327:11477","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:573:2841":{"id":"0:573:2841","crate_id":0,"name":"get_many_key_value_mut","span":{"filename":"src/map.rs","begin":[1660,4],"end":[1669,5]},"visibility":"public","docs":"Attempts to get mutable references to `N` values in the map at once, with immutable\nreferences to the corresponding keys.\n\nReturns an array of length `N` with the results of each query. For soundness, at most one\nmutable reference will be returned to any value. `None` will be returned if any of the keys\nare duplicates or missing.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut libraries = HashMap::new();\nlibraries.insert(\"Bodleian Library\".to_string(), 1602);\nlibraries.insert(\"Athenæum\".to_string(), 1807);\nlibraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\nlibraries.insert(\"Library of Congress\".to_string(), 1800);\n\nlet got = libraries.get_many_key_value_mut([\n    \"Bodleian Library\",\n    \"Herzogin-Anna-Amalia-Bibliothek\",\n]);\nassert_eq!(\n    got,\n    Some([\n        (&\"Bodleian Library\".to_string(), &mut 1602),\n        (&\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), &mut 1691),\n    ]),\n);\n// Missing keys result in None\nlet got = libraries.get_many_key_value_mut([\n    \"Bodleian Library\",\n    \"Gewandhaus\",\n]);\nassert_eq!(got, None);\n\n// Duplicate keys result in None\nlet got = libraries.get_many_key_value_mut([\n    \"Bodleian Library\",\n    \"Herzogin-Anna-Amalia-Bibliothek\",\n    \"Herzogin-Anna-Amalia-Bibliothek\",\n]);\nassert_eq!(got, None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ks",{"array":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}},"len":"N"}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]},"len":"N"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:687:2231":{"id":"a:1:2684:220-0:687:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1804:953":{"id":"0:1804:953","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1667,4],"end":[1669,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7206-0:1770:4177":{"id":"b:1:7206-0:1770:4177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2538-0:766:2578":{"id":"b:1:2538-0:766:2578","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2684:220-0:753:2568":{"id":"a:1:2684:220-0:753:2568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2128":{"id":"0:2128","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[154,16],"end":[154,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2312:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2129:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1682":{"id":"0:1682","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1288,0],"end":[1300,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7198:134","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1686:697"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:520:2586":{"id":"0:520:2586","crate_id":0,"name":"iter_mut","span":{"filename":"src/map.rs","begin":[836,4],"end":[844,5]},"visibility":"public","docs":"An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nThe iterator element type is `(&'a K, &'a mut V)`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\n\n// Update all values\nfor (_, val) in map.iter_mut() {\n    *val *= 2;\n}\n\nassert_eq!(map.len(), 3);\nlet mut vec: Vec<(&str, i32)> = Vec::new();\n\nfor (key, val) in &map {\n    println!(\"key: {} val: {}\", key, val);\n    vec.push((*key, *val));\n}\n\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(\"a\", 2), (\"b\", 4), (\"c\", 6)]);\n\nassert_eq!(map.len(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7206-0:1749:2668":{"id":"b:1:7206-0:1749:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1318:2230":{"id":"0:1318:2230","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4947,4],"end":[4947,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"0:1025":{"id":"0:1025","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4251,0],"end":[4258,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1030:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1831:668":{"id":"0:1831:668","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1714,4],"end":[1717,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1573:144":{"id":"0:1573:144","crate_id":0,"name":"HashSet","span":{"filename":"src/set.rs","begin":[116,0],"end":[118,1]},"visibility":"public","docs":"A hash set implemented as a `HashMap` where the value is `()`.\n\nAs with the [`HashMap`] type, a `HashSet` requires that the elements\nimplement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by\nusing `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,\nit is important that the following property holds:\n\n```text\nk1 == k2 -> hash(k1) == hash(k2)\n```\n\nIn other words, if two keys are equal, their hashes must be equal.\n\n\nIt is a logic error for an item to be modified in such a way that the\nitem's hash, as determined by the [`Hash`] trait, or its equality, as\ndetermined by the [`Eq`] trait, changes while it is in the set. This is\nnormally only possible through [`Cell`], [`RefCell`], global state, I/O, or\nunsafe code.\n\nIt is also a logic error for the [`Hash`] implementation of a key to panic.\nThis is generally only possible if the trait is implemented manually. If a\npanic does occur then the contents of the `HashSet` may become corrupted and\nsome items may be dropped from the table.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n// Type inference lets us omit an explicit type signature (which\n// would be `HashSet<String>` in this example).\nlet mut books = HashSet::new();\n\n// Add some books.\nbooks.insert(\"A Dance With Dragons\".to_string());\nbooks.insert(\"To Kill a Mockingbird\".to_string());\nbooks.insert(\"The Odyssey\".to_string());\nbooks.insert(\"The Great Gatsby\".to_string());\n\n// Check for a specific one.\nif !books.contains(\"The Winds of Winter\") {\n    println!(\"We have {} books, but The Winds of Winter ain't one.\",\n             books.len());\n}\n\n// Remove a book.\nbooks.remove(\"The Odyssey\");\n\n// Iterate over everything.\nfor book in &books {\n    println!(\"{}\", book);\n}\n```\n\nThe easiest way to use `HashSet` with a custom type is to derive\n[`Eq`] and [`Hash`]. We must also derive [`PartialEq`]. This will in the\nfuture be implied by [`Eq`].\n\n```\nuse hashbrown::HashSet;\n#[derive(Hash, Eq, PartialEq, Debug)]\nstruct Viking {\n    name: String,\n    power: usize,\n}\n\nlet mut vikings = HashSet::new();\n\nvikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });\nvikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });\nvikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });\nvikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });\n\n// Use derived implementation to print the vikings.\nfor x in &vikings {\n    println!(\"{:?}\", x);\n}\n```\n\nA `HashSet` with fixed list of elements can be initialized from an array:\n\n```\nuse hashbrown::HashSet;\n\nlet viking_names: HashSet<&'static str> =\n    [ \"Einar\", \"Olaf\", \"Harald\" ].iter().cloned().collect();\n// use the values stored in the set\n```\n\n[`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n[`HashMap`]: struct.HashMap.html\n[`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html\n[`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"DefaultHashBuilder","id":"0:452:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1584","0:1588","0:1593","0:1608","0:1613","0:1621","a:1:2684:220-0:1573:144","a:1:8249:4812-0:1573:144","a:1:8250:4811-0:1573:144","a:1:2701:228-0:1573:144","a:1:2741:4617-0:1573:144","b:0:2056-0:1573:144","b:1:2251-0:1573:144","b:1:2542-0:1573:144","b:1:2248-0:1573:144","b:1:2538-0:1573:144","b:1:2553-0:1573:144","b:1:2548-0:1573:144","b:1:3319-0:1573:144","b:4:684-0:1573:144","0:1578","0:1682","0:1709","0:1662","0:1677","0:1714","0:1695","0:1668","0:1672","0:1731","0:1790","0:1782","0:1688","0:1726","0:1720","0:1702"]}}},"0:1369:3348":{"id":"0:1369:3348","crate_id":0,"name":"into_mut","span":{"filename":"src/map.rs","begin":[5387,4],"end":[5389,5]},"visibility":"public","docs":"Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself.\n\nIf you need multiple references to the `OccupiedEntry`, see [`get_mut`].\n\n[`get_mut`]: #method.get_mut\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap};\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nassert_eq!(map[\"poneyland\"], 12);\n\nlet value: &mut u32;\nmatch map.entry(\"poneyland\") {\n    Entry::Occupied(entry) => value = entry.into_mut(),\n    Entry::Vacant(_) => panic!(),\n}\n*value += 10;\n\nassert_eq!(map[\"poneyland\"], 22);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1460:3771":{"id":"0:1460:3771","crate_id":0,"name":"extend","span":{"filename":"src/map.rs","begin":[6494,4],"end":[6509,5]},"visibility":"default","docs":"Inserts all new key-values from the iterator to existing `HashMap<K, V, S, A>`.\nReplace values with existing keys with new values returned from the iterator.\n\n# Examples\n\n```\nuse hashbrown::hash_map::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, 100);\n\nlet some_iter = [(1, 1), (2, 2)].into_iter();\nmap.extend(some_iter);\n// Replace values with existing keys with new values returned from the iterator.\n// So that the map.get(&1) doesn't return Some(&100).\nassert_eq!(map.get(&1), Some(&1));\n\nlet some_vec: Vec<_> = vec![(3, 3), (4, 4)];\nmap.extend(some_vec);\n\nlet some_arr = [(5, 5), (6, 6)];\nmap.extend(some_arr);\nlet old_map_len = map.len();\n\n// You can also extend from another HashMap\nlet mut new_map = HashMap::new();\nnew_map.extend(map);\nassert_eq!(new_map.len(), old_map_len);\n\nlet mut vec: Vec<_> = new_map.into_iter().collect();\n// The `IntoIter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:4812-0:850:3197":{"id":"a:1:8249:4812-0:850:3197","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:2684:220-0:1763:4167":{"id":"a:1:2684:220-0:1763:4167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12132:19506":{"id":"1:12132:19506","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:4812-0:674:2605":{"id":"a:1:8249:4812-0:674:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2553-0:1957:2744":{"id":"b:1:2553-0:1957:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1957:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1256:811":{"id":"0:1256:811","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[4854,4],"end":[4856,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1598:795":{"id":"0:1598:795","crate_id":0,"name":"iter","span":{"filename":"src/set.rs","begin":[292,4],"end":[296,5]},"visibility":"public","docs":"An iterator visiting all elements in arbitrary order.\nThe iterator element type is `&'a T`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet mut set = HashSet::new();\nset.insert(\"a\");\nset.insert(\"b\");\n\n// Will print in an arbitrary order.\nfor x in set.iter() {\n    println!(\"{}\", x);\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:651:769":{"id":"0:651:769","crate_id":0,"name":"index","span":{"filename":"src/map.rs","begin":[2277,4],"end":[2279,5]},"visibility":"default","docs":"Returns a reference to the value corresponding to the supplied key.\n\n# Panics\n\nPanics if the key is not present in the `HashMap`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(\"a\", \"One\"), (\"b\", \"Two\")].into();\n\nassert_eq!(map[&\"a\"], \"One\");\nassert_eq!(map[&\"b\"], \"Two\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1358:3588":{"id":"0:1358:3588","crate_id":0,"name":"or_default","span":{"filename":"src/map.rs","begin":[5245,4],"end":[5254,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the default value if empty,\nand returns a mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, Option<u32>> = HashMap::new();\n\n// nonexistent key\nmap.entry(\"poneyland\").or_default();\nassert_eq!(map[\"poneyland\"], None);\n\nmap.insert(\"horseland\", Some(3));\n\n// existing key\nassert_eq!(map.entry(\"horseland\").or_default(), &mut Some(3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1662":{"id":"0:1662","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1246,0],"end":[1259,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2312:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1666:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2538-0:850:3197":{"id":"b:1:2538-0:850:3197","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2548-0:1740:2231":{"id":"b:1:2548-0:1740:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:1744:2632":{"id":"b:1:2248-0:1744:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8249:4812-0:1973:2747":{"id":"a:1:8249:4812-0:1973:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2553-0:1984:2749":{"id":"b:1:2553-0:1984:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1984:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12032:19474":{"id":"1:12032:19474","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:51705:1397","crate::ops::IndexMut":"1:2985:4715","str::slice_unchecked":"1:12031:19473"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:2007:2074":{"id":"0:2007:2074","crate_id":0,"name":"get","span":{"filename":"src/set.rs","begin":[2247,4],"end":[2249,5]},"visibility":"public","docs":"Gets a reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet};\n\nlet mut set: HashSet<&str> = HashSet::new();\nset.entry(\"poneyland\").or_insert();\n\nmatch set.entry(\"poneyland\") {\n    Entry::Vacant(_) => panic!(),\n    Entry::Occupied(entry) => assert_eq!(entry.get(), &\"poneyland\"),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:551:2785":{"id":"0:551:2785","crate_id":0,"name":"get_key_value_mut","span":{"filename":"src/map.rs","begin":[1424,4],"end":[1433,5]},"visibility":"public","docs":"Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.\n\nThe supplied key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nlet (k, v) = map.get_key_value_mut(&1).unwrap();\nassert_eq!(k, &1);\nassert_eq!(v, &mut \"a\");\n*v = \"b\";\nassert_eq!(map.get_key_value_mut(&1), Some((&1, &mut \"b\")));\nassert_eq!(map.get_key_value_mut(&2), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:1984:2749":{"id":"b:1:3319-0:1984:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1984:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:1031:2747":{"id":"b:1:2248-0:1031:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2701:228-0:1072:2759":{"id":"a:1:2701:228-0:1072:2759","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:498:1713":{"id":"0:498:1713","crate_id":0,"name":"new_in","span":{"filename":"src/map.rs","begin":[398,4],"end":[400,5]},"visibility":"public","docs":"Creates an empty `HashMap` using the given allocator.\n\nThe hash map is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`], for example with\n[`with_hasher_in`](HashMap::with_hasher_in) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\n# #[cfg(feature = \"bumpalo\")]\n# fn test() {\nuse hashbrown::{HashMap, BumpWrapper};\nuse bumpalo::Bump;\n\nlet bump = Bump::new();\nlet mut map = HashMap::new_in(BumpWrapper(&bump));\n\n// The created HashMap holds none elements\nassert_eq!(map.len(), 0);\n\n// The created HashMap also doesn't allocate memory\nassert_eq!(map.capacity(), 0);\n\n// Now we insert element inside created HashMap\nmap.insert(\"One\", 1);\n// We can see that the HashMap holds 1 element\nassert_eq!(map.len(), 1);\n// And it also allocates some capacity\nassert!(map.capacity() > 1);\n# }\n# fn main() {\n#     #[cfg(feature = \"bumpalo\")]\n#     test()\n# }\n```","links":{"HashMap::with_hasher_in":"0:512:2509","`ahash::RandomState`":"5:813:10576","`HashMap`":"0:453:142"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:4617-0:881:3206":{"id":"a:1:2741:4617-0:881:3206","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:881:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:605:1714":{"id":"0:605:1714","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[1788,4],"end":[1797,5]},"visibility":"public","docs":"Inserts a key-value pair into the map.\n\nIf the map did not have this key present, [`None`] is returned.\n\nIf the map did have this key present, the value is updated, and the old\nvalue is returned. The key is not updated, though; this matters for\ntypes that can be `==` without being identical. See the [`std::collections`]\n[module-level documentation] for more.\n\n[`None`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.None\n[`std::collections`]: https://doc.rust-lang.org/std/collections/index.html\n[module-level documentation]: https://doc.rust-lang.org/std/collections/index.html#insert-and-complex-keys\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nassert_eq!(map.insert(37, \"a\"), None);\nassert_eq!(map.is_empty(), false);\n\nmap.insert(37, \"b\");\nassert_eq!(map.insert(37, \"c\"), Some(\"b\"));\nassert_eq!(map[&37], \"c\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"generic":"K"}],["v",{"generic":"V"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:4811-0:1113:2760":{"id":"a:1:8250:4811-0:1113:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:798":{"id":"0:798","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2750,0],"end":[2763,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2929:2008","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:804:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2251-0:453:142":{"id":"b:1:2251-0:453:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:684-0:1776:4195":{"id":"b:4:684-0:1776:4195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:686:3482","4:687:3907","4:688:10712"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:0:2056-0:453:142":{"id":"b:0:2056-0:453:142","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,0],"end":[151,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2059:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"Q"}}}},"0:1057:2749":{"id":"0:1057:2749","crate_id":0,"name":"VacantEntry","span":{"filename":"src/map.rs","begin":[4363,0],"end":[4367,1]},"visibility":"public","docs":"A view into a vacant entry in a `HashMap`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap, VacantEntry};\n\nlet mut map = HashMap::<&str, i32>::new();\n\nlet entry_v: VacantEntry<_, _, _> = match map.entry(\"a\") {\n    Entry::Vacant(view) => view,\n    Entry::Occupied(_) => unreachable!(),\n};\nentry_v.insert(10);\nassert!(map[&\"a\"] == 10 && map.len() == 1);\n\n// Nonexistent key (insert and update)\nmatch map.entry(\"b\") {\n    Entry::Occupied(_) => unreachable!(),\n    Entry::Vacant(view) => {\n        let value = view.insert(2);\n        assert_eq!(*value, 2);\n        *value = 20;\n    }\n}\nassert!(map[&\"b\"] == 20 && map.len() == 2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1377","a:1:2684:220-0:1057:2749","a:1:8249:4812-0:1057:2749","a:1:8250:4811-0:1057:2749","a:1:2701:228-0:1057:2749","a:1:2741:4617-0:1057:2749","b:1:2251-0:1057:2749","b:1:2542-0:1057:2749","b:1:2248-0:1057:2749","b:1:2538-0:1057:2749","b:1:2553-0:1057:2749","b:1:2548-0:1057:2749","b:1:3319-0:1057:2749","0:1066"]}}},"0:1967:1606":{"id":"0:1967:1606","crate_id":0,"name":"0","span":{"filename":"src/set.rs","begin":[2057,11],"end":[2057,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"VacantEntry","id":"0:1984:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"1:12049:19480":{"id":"1:12049:19480","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:51699:419","self::pattern":"1:11712:13346"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:13352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:4811-0:753:2568":{"id":"a:1:8250:4811-0:753:2568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2701:228-0:1756:4186":{"id":"a:1:2701:228-0:1756:4186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:820:2250":{"id":"0:820:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[2787,4],"end":[2789,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:725:2689":{"id":"b:1:2553-0:725:2689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1463":{"id":"0:1463","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[6535,0],"end":[6596,1]},"visibility":"default","docs":"Inserts all new key-values from the iterator and replaces values with existing\nkeys with new values returned from the iterator.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7211:3750","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1469:3771"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2538-0:838:2585":{"id":"b:1:2538-0:838:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2251-0:1057:2749":{"id":"b:1:2251-0:1057:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1057:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:956:3340":{"id":"0:956:3340","crate_id":0,"name":"into_key","span":{"filename":"src/map.rs","begin":[3673,4],"end":[3675,5]},"visibility":"public","docs":"Converts the entry into a mutable reference to the key in the entry\nwith a lifetime bound to the map itself.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\nuse std::rc::Rc;\n\nlet key_one = Rc::new(\"a\");\nlet key_two = Rc::new(\"a\");\n\nlet mut map: HashMap<Rc<&str>, u32> = HashMap::new();\nmap.insert(key_one.clone(), 10);\n\nassert_eq!(map[&key_one], 10);\nassert!(Rc::strong_count(&key_one) == 2 && Rc::strong_count(&key_two) == 1);\n\nlet inside_key: &mut Rc<&str>;\n\nmatch map.raw_entry_mut().from_key(&key_one) {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => inside_key = o.into_key(),\n}\n*inside_key = key_two.clone();\n\nassert_eq!(map[&key_two], 10);\nassert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:610:2013":{"id":"0:610:2013","crate_id":0,"name":"remove_entry","span":{"filename":"src/map.rs","begin":[1965,4],"end":[1971,5]},"visibility":"public","docs":"Removes a key from the map, returning the stored key and value if the\nkey was previously in the map. Keeps the allocated memory for reuse.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\n// The map is empty\nassert!(map.is_empty() && map.capacity() == 0);\n\nmap.insert(1, \"a\");\n\nassert_eq!(map.remove_entry(&1), Some((1, \"a\")));\nassert_eq!(map.remove(&1), None);\n\n// Now map hold none elements\nassert!(map.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:4812-0:862:3202":{"id":"a:1:8249:4812-0:862:3202","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:2684:220-0:889:3001":{"id":"a:1:2684:220-0:889:3001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:889:3001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12039:16202":{"id":"1:12039:16202","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12038:16208"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43640:11497","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:687:2231":{"id":"b:1:2542-0:687:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1645:4223":{"id":"0:1645:4223","crate_id":0,"name":"get_or_insert_with","span":{"filename":"src/set.rs","begin":[972,4],"end":[984,5]},"visibility":"public","docs":"Inserts a value computed from `f` into the set if the given `value` is\nnot present, then returns a reference to the value in the set.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]\n    .iter().map(|&pet| pet.to_owned()).collect();\n\nassert_eq!(set.len(), 3);\nfor &pet in &[\"cat\", \"dog\", \"fish\"] {\n    let value = set.get_or_insert_with(pet, str::to_owned);\n    assert_eq!(value, pet);\n}\nassert_eq!(set.len(), 4); // a new \"fish\" was inserted\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}],["f",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:2066","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1272:2250":{"id":"0:1272:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[4878,4],"end":[4880,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:876":{"id":"0:876","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3097,0],"end":[3104,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1668":{"id":"0:1668","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1261,0],"end":[1267,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1749:2668":{"id":"0:1749:2668","crate_id":0,"name":"DrainFilter","span":{"filename":"src/set.rs","begin":[1555,0],"end":[1561,1]},"visibility":"public","docs":"A draining iterator over entries of a `HashSet` which don't satisfy the predicate `f`.\n\nThis `struct` is created by the [`drain_filter`] method on [`HashSet`]. See its\ndocumentation for more.\n\n[`drain_filter`]: struct.HashSet.html#method.drain_filter\n[`HashSet`]: struct.HashSet.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2929:2008","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["a:1:2684:220-0:1749:2668","a:1:8249:4812-0:1749:2668","a:1:8250:4811-0:1749:2668","a:1:2701:228-0:1749:2668","a:1:2741:4617-0:1749:2668","b:1:2251-0:1749:2668","b:1:2542-0:1749:2668","b:1:2248-0:1749:2668","b:1:2538-0:1749:2668","b:1:2553-0:1749:2668","b:1:7206-0:1749:2668","b:1:2548-0:1749:2668","b:1:3319-0:1749:2668","0:1857","0:1851","0:1865"]}}},"b:1:2538-0:1573:144":{"id":"b:1:2538-0:1573:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1886:668":{"id":"0:1886:668","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1830,4],"end":[1832,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2008:2011":{"id":"0:2008:2011","crate_id":0,"name":"remove","span":{"filename":"src/set.rs","begin":[2276,4],"end":[2278,5]},"visibility":"public","docs":"Takes the value out of the entry, and returns it.\nKeeps the allocated memory for reuse.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_set::Entry;\n\nlet mut set: HashSet<&str> = HashSet::new();\n// The set is empty\nassert!(set.is_empty() && set.capacity() == 0);\n\nset.entry(\"poneyland\").or_insert();\nlet capacity_before_remove = set.capacity();\n\nif let Entry::Occupied(o) = set.entry(\"poneyland\") {\n    assert_eq!(o.remove(), \"poneyland\");\n}\n\nassert_eq!(set.contains(\"poneyland\"), false);\n// Now set hold none elements but capacity is equal to the old one\nassert!(set.len() == 0 && set.capacity() == capacity_before_remove);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12043:3865":{"id":"1:12043:3865","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:51699:419","self::pattern":"1:11712:13346"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2248-0:779:2632":{"id":"b:1:2248-0:779:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2701:228-0:889:3001":{"id":"a:1:2701:228-0:889:3001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:889:3001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:526:2667":{"id":"0:526:2667","crate_id":0,"name":"drain_filter","span":{"filename":"src/map.rs","begin":[1015,4],"end":[1026,5]},"visibility":"public","docs":"Drains elements which are true under the given predicate,\nand returns an iterator over the removed items.\n\nIn other words, move all pairs `(k, v)` such that `f(&k, &mut v)` returns `true` out\ninto another iterator.\n\nNote that `drain_filter` lets you mutate every value in the filter closure, regardless of\nwhether you choose to keep or remove it.\n\nWhen the returned DrainedFilter is dropped, any remaining elements that satisfy\nthe predicate are dropped from the table.\n\nIt is unspecified how many more elements will be subjected to the closure\nif a panic occurs in the closure, or a panic occurs while dropping an element,\nor if the `DrainFilter` value is leaked.\n\nKeeps the allocated memory for reuse.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x)).collect();\n\nlet drained: HashMap<i32, i32> = map.drain_filter(|k, _v| k % 2 == 0).collect();\n\nlet mut evens = drained.keys().cloned().collect::<Vec<_>>();\nlet mut odds = map.keys().cloned().collect::<Vec<_>>();\nevens.sort();\nodds.sort();\n\nassert_eq!(evens, vec![0, 2, 4, 6]);\nassert_eq!(odds, vec![1, 3, 5, 7]);\n\nlet mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x)).collect();\n\n{   // Iterator is dropped without being consumed.\n    let d = map.drain_filter(|k, _v| k % 2 != 0);\n}\n\n// But the map lens have been reduced by half\n// even if we do not use DrainFilter iterator.\nassert_eq!(map.len(), 4);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2929:2008","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:4812-0:725:2689":{"id":"a:1:8249:4812-0:725:2689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2248-0:1736:2596":{"id":"b:1:2248-0:1736:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2684:220-0:2120:1695":{"id":"a:1:2684:220-0:2120:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:932:3251":{"id":"0:932:3251","crate_id":0,"name":"from_hash","span":{"filename":"src/map.rs","begin":[3390,4],"end":[3395,5]},"visibility":"public","docs":"Access an immutable entry by hash and matching function.\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::HashMap;\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\nlet key = \"a\";\nlet hash = compute_hash(map.hasher(), &key);\nassert_eq!(map.raw_entry().from_hash(hash, |k| k == &key), Some((&\"a\", &100)));\n```","links":{},"attrs":["#[inline]","#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hash",{"primitive":"u64"}],["is_match",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2929:2008","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:4811-0:843:2985":{"id":"a:1:8250:4811-0:843:2985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1000:668":{"id":"0:1000:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4153,4],"end":[4158,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12023:2074":{"id":"1:12023:2074","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1218:953":{"id":"0:1218:953","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[4779,4],"end":[4788,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1435":{"id":"0:1435","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[6336,0],"end":[6430,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1148:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1443:1691","0:1444:3340","0:1445:1714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2548-0:838:2585":{"id":"b:1:2548-0:838:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:643:60":{"id":"0:643:60","crate_id":0,"name":"default","span":{"filename":"src/map.rs","begin":[2246,4],"end":[2248,5]},"visibility":"default","docs":"Creates an empty `HashMap<K, V, S, A>`, with the `Default` value for the hasher and allocator.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse std::collections::hash_map::RandomState;\n\n// You can specify all types of HashMap, including hasher and allocator.\n// Created map is empty and don't allocate memory\nlet map: HashMap<u32, String> = Default::default();\nassert_eq!(map.capacity(), 0);\nlet map: HashMap<u32, String, RandomState> = HashMap::default();\nassert_eq!(map.capacity(), 0);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1335":{"id":"0:1335","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4977,0],"end":[5222,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1341:1714","0:1342:3272","0:1343:3283","0:1345:3568","0:1347:1691","0:1348:3293","0:1350:3316"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:687:3907":{"id":"4:687:3907","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2701:228-0:687:2231":{"id":"a:1:2701:228-0:687:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1934:668":{"id":"0:1934:668","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1938,4],"end":[1940,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1820:2250":{"id":"0:1820:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1701,4],"end":[1703,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1891":{"id":"0:1891","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1843,0],"end":[1851,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1895:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:1770:4177":{"id":"b:1:3319-0:1770:4177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:761:423":{"id":"0:761:423","crate_id":0,"name":"clone","span":{"filename":"src/map.rs","begin":[2607,4],"end":[2611,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:500":{"id":"0:500","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[459,0],"end":[543,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:504:2539","0:505:2488"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2741:4617-0:1072:2759":{"id":"a:1:2741:4617-0:1072:2759","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1373:3657":{"id":"0:1373:3657","crate_id":0,"name":"replace_key","span":{"filename":"src/map.rs","begin":[5527,4],"end":[5530,5]},"visibility":"public","docs":"Replaces the key in the hash map with the key used to create this entry.\n\n# Panics\n\nWill panic if this OccupiedEntry was created through [`Entry::insert`].\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap};\nuse std::rc::Rc;\n\nlet mut map: HashMap<Rc<String>, usize> = HashMap::with_capacity(6);\nlet mut keys_one: Vec<Rc<String>> = Vec::with_capacity(6);\nlet mut keys_two: Vec<Rc<String>> = Vec::with_capacity(6);\n\nfor (value, key) in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"].into_iter().enumerate() {\n    let rc_key = Rc::new(key.to_owned());\n    keys_one.push(rc_key.clone());\n    map.insert(rc_key.clone(), value);\n    keys_two.push(Rc::new(key.to_owned()));\n}\n\nassert!(\n    keys_one.iter().all(|key| Rc::strong_count(key) == 2)\n        && keys_two.iter().all(|key| Rc::strong_count(key) == 1)\n);\n\nreclaim_memory(&mut map, &keys_two);\n\nassert!(\n    keys_one.iter().all(|key| Rc::strong_count(key) == 1)\n        && keys_two.iter().all(|key| Rc::strong_count(key) == 2)\n);\n\nfn reclaim_memory(map: &mut HashMap<Rc<String>, usize>, keys: &[Rc<String>]) {\n    for key in keys {\n        if let Entry::Occupied(entry) = map.entry(key.clone()) {\n        // Replaces the entry's key with our version of it in `keys`.\n            entry.replace_key();\n        }\n    }\n}\n```","links":{"`Entry::insert`":"0:1341:1714"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"K"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1072:2759":{"id":"0:1072:2759","crate_id":0,"name":"EntryRef","span":{"filename":"src/map.rs","begin":[4427,0],"end":[4460,1]},"visibility":"public","docs":"A view into a single entry in a map, which may either be vacant or occupied,\nwith any borrowed form of the map's key type.\n\n\nThis `enum` is constructed from the [`entry_ref`] method on [`HashMap`].\n\n[`Hash`] and [`Eq`] on the borrowed form of the map's key type *must* match those\nfor the key type. It also require that key may be constructed from the borrowed\nform through the [`From`] trait.\n\n[`HashMap`]: struct.HashMap.html\n[`entry_ref`]: struct.HashMap.html#method.entry_ref\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n[`From`]: https://doc.rust-lang.org/std/convert/trait.From.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap, OccupiedEntryRef};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\".to_owned(), 10), (\"b\".into(), 20), (\"c\".into(), 30)]);\nassert_eq!(map.len(), 3);\n\n// Existing key (insert)\nlet key = String::from(\"a\");\nlet entry: EntryRef<_, _, _, _> = map.entry_ref(&key);\nlet _raw_o: OccupiedEntryRef<_, _, _, _> = entry.insert(1);\nassert_eq!(map.len(), 3);\n// Nonexistent key (insert)\nmap.entry_ref(\"d\").insert(4);\n\n// Existing key (or_insert)\nlet v = map.entry_ref(\"b\").or_insert(2);\nassert_eq!(std::mem::replace(v, 2), 20);\n// Nonexistent key (or_insert)\nmap.entry_ref(\"e\").or_insert(5);\n\n// Existing key (or_insert_with)\nlet v = map.entry_ref(\"c\").or_insert_with(|| 3);\nassert_eq!(std::mem::replace(v, 3), 30);\n// Nonexistent key (or_insert_with)\nmap.entry_ref(\"f\").or_insert_with(|| 6);\n\nprintln!(\"Our HashMap: {:?}\", map);\n\nfor (key, value) in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"].into_iter().zip(1..=6) {\n    assert_eq!(map[key], value)\n}\nassert_eq!(map.len(), 6);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"variants_stripped":false,"variants":["0:1080:2746","0:1083:2748"],"impls":["0:1387","0:1406","a:1:2684:220-0:1072:2759","a:1:8249:4812-0:1072:2759","a:1:8250:4811-0:1072:2759","a:1:2701:228-0:1072:2759","a:1:2741:4617-0:1072:2759","b:1:2251-0:1072:2759","b:1:2542-0:1072:2759","b:1:2248-0:1072:2759","b:1:2538-0:1072:2759","b:1:2553-0:1072:2759","b:1:2548-0:1072:2759","b:1:3319-0:1072:2759","0:1086"]}}},"a:1:2741:4617-0:1756:4186":{"id":"a:1:2741:4617-0:1756:4186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1642:4219":{"id":"0:1642:4219","crate_id":0,"name":"get_or_insert_owned","span":{"filename":"src/set.rs","begin":[940,4],"end":[951,5]},"visibility":"public","docs":"Inserts an owned copy of the given `value` into the set if it is not\npresent, then returns a reference to the value in the set.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]\n    .iter().map(|&pet| pet.to_owned()).collect();\n\nassert_eq!(set.len(), 3);\nfor &pet in &[\"cat\", \"dog\", \"fish\"] {\n    let value = set.get_or_insert_owned(pet);\n    assert_eq!(value, pet);\n}\nassert_eq!(set.len(), 4); // a new \"fish\" was inserted\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"4:680:231","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:644":{"id":"0:644","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2251,0],"end":[2280,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:2981:2339","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:650:186","0:651:769"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1825":{"id":"0:1825","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1711,0],"end":[1711,65]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1415":{"id":"0:1415","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[5980,0],"end":[6334,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1423:1691","0:1424:2013","0:1425:2074","0:1426:2076","0:1427:3348","0:1428:1714","0:1429:2011","0:1430:3634","0:1431:3657","0:1432:3317"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2684:220-0:453:142":{"id":"a:1:2684:220-0:453:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2542-0:1113:2760":{"id":"b:1:2542-0:1113:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5382":{"id":"4:5382","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5383:20183","4:5384:2132","4:5387:20184","4:5390:20185","4:5398:20186","4:5399:20187","4:5400:4564","4:5401:20188","4:5402:20189"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8250:4811-0:1013:2744":{"id":"a:1:8250:4811-0:1013:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3319-0:790:2668":{"id":"b:1:3319-0:790:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2701:228-0:1057:2749":{"id":"a:1:2701:228-0:1057:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1057:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1251:2250":{"id":"0:1251:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[4848,4],"end":[4850,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:766:2578":{"id":"b:1:2542-0:766:2578","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:766:2578":{"id":"b:1:2248-0:766:2578","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:790:2668":{"id":"0:790:2668","crate_id":0,"name":"DrainFilter","span":{"filename":"src/map.rs","begin":[2742,0],"end":[2748,1]},"visibility":"public","docs":"A draining iterator over entries of a `HashMap` which don't satisfy the predicate\n`f(&k, &mut v)` in arbitrary order. The iterator element type is `(K, V)`.\n\nThis `struct` is created by the [`drain_filter`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`drain_filter`]: struct.HashMap.html#method.drain_filter\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<i32, &str> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut drain_filter = map.drain_filter(|k, _v| k % 2 != 0);\nlet mut vec = vec![drain_filter.next(), drain_filter.next()];\n\n// The `DrainFilter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some((1, \"a\")),Some((3, \"c\"))]);\n\n// It is fused iterator\nassert_eq!(drain_filter.next(), None);\nassert_eq!(drain_filter.next(), None);\ndrop(drain_filter);\n\nassert_eq!(map.len(), 1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2929:2008","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["a:1:2684:220-0:790:2668","a:1:8249:4812-0:790:2668","a:1:8250:4811-0:790:2668","a:1:2701:228-0:790:2668","a:1:2741:4617-0:790:2668","b:1:2251-0:790:2668","b:1:2542-0:790:2668","b:1:2248-0:790:2668","b:1:2538-0:790:2668","b:1:2553-0:790:2668","b:1:7206-0:790:2668","b:1:2548-0:790:2668","b:1:3319-0:790:2668","0:821","0:813","0:798"]}}},"0:1319:953":{"id":"0:1319:953","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[4950,4],"end":[4952,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:1057:2749":{"id":"b:1:2548-0:1057:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1057:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1321":{"id":"0:1321","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4958,0],"end":[4963,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7263:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1325:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1083:2748":{"id":"0:1083:2748","crate_id":0,"name":"Vacant","span":{"filename":"src/map.rs","begin":[4459,4],"end":[4459,49]},"visibility":"default","docs":"A vacant entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\nlet mut map: HashMap<String, i32> = HashMap::new();\n\nmatch map.entry_ref(\"a\") {\n    EntryRef::Occupied(_) => unreachable!(),\n    EntryRef::Vacant(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:1085:1606"]},"discriminant":null}}},"b:1:3319-0:1573:144":{"id":"b:1:3319-0:1573:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1925:2250":{"id":"0:1925:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1919,4],"end":[1921,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1241":{"id":"0:1241","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4830,0],"end":[4838,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1244:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1944":{"id":"0:1944","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1960,0],"end":[1969,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1948:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:765:668":{"id":"0:765:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[2615,4],"end":[2617,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12093:19489":{"id":"1:12093:19489","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11712:13346","`DoubleEndedIterator`":"1:7240:121","prim@char":"1:51699:419","str::rmatch_indices":"1:12096:19490"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43507:11489","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1377":{"id":"0:1377","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[5612,0],"end":[5697,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"VacantEntry","id":"0:1057:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1383:1691","0:1384:3340","0:1385:1714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:738":{"id":"0:738","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2555,0],"end":[2560,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7263:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:742:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8250:4811-0:766:2578":{"id":"a:1:8250:4811-0:766:2578","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1383:1691":{"id":"0:1383:1691","crate_id":0,"name":"key","span":{"filename":"src/map.rs","begin":[5625,4],"end":[5627,5]},"visibility":"public","docs":"Gets a reference to the key that would be used when inserting a value\nthrough the `VacantEntry`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nassert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:4812-0:889:3001":{"id":"a:1:8249:4812-0:889:3001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:889:3001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2542-0:881:3206":{"id":"b:1:2542-0:881:3206","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:881:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8250:4811-0:1031:2747":{"id":"a:1:8250:4811-0:1031:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3319-0:687:2231":{"id":"b:1:3319-0:687:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:889:3001":{"id":"b:1:2553-0:889:3001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:889:3001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:819:953":{"id":"0:819:953","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[2782,4],"end":[2784,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7318:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12069:19482":{"id":"1:12069:19482","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11712:13346","str::split":"1:12060:2242","prim@char":"1:51699:419","`DoubleEndedIterator`":"1:7240:121","str::rsplit_terminator":"1:12072:19483"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43407:11483","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1815":{"id":"0:1815","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1689,0],"end":[1704,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1818:2230","0:1819:953","0:1820:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:889:3001":{"id":"b:1:3319-0:889:3001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:889:3001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1261":{"id":"0:1261","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4860,0],"end":[4864,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1265:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2548-0:1031:2747":{"id":"b:1:2548-0:1031:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2542-0:1744:2632":{"id":"b:1:2542-0:1744:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2684:220-0:843:2985":{"id":"a:1:2684:220-0:843:2985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1301":{"id":"0:1301","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4930,0],"end":[4935,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7263:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1304:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:2056-0:2120:1695":{"id":"b:0:2056-0:2120:1695","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,0],"end":[151,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2059:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"Q"}}}},"b:1:2553-0:838:2585":{"id":"b:1:2553-0:838:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1428:1714":{"id":"0:1428:1714","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[6133,4],"end":[6135,5]},"visibility":"public","docs":"Sets the value of the entry, and returns the entry's old value.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nmap.entry_ref(\"poneyland\").or_insert(12);\n\nif let EntryRef::Occupied(mut o) = map.entry_ref(\"poneyland\") {\n    assert_eq!(o.insert(15), 12);\n}\n\nassert_eq!(map[\"poneyland\"], 15);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"V"}]],"output":{"generic":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:684-0:1736:2596":{"id":"b:4:684-0:1736:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["4:686:3482","4:687:3907","4:688:10712"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1195:784":{"id":"0:1195:784","crate_id":0,"name":"into_iter","span":{"filename":"src/map.rs","begin":[4703,4],"end":[4705,5]},"visibility":"default","docs":"Creates an iterator over the entries of a `HashMap` in arbitrary order.\nThe iterator element type is `(&'a K, &'a V)`.\n\nReturn the same `Iter` struct as by the [`iter`] method on [`HashMap`].\n\n[`iter`]: struct.HashMap.html#method.iter\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet map_one: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\nlet mut map_two = HashMap::new();\n\nfor (key, value) in &map_one {\n    println!(\"Key: {}, Value: {}\", key, value);\n    map_two.insert_unique_unchecked(*key, *value);\n}\n\nassert_eq!(map_one, map_two);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1686:697":{"id":"0:1686:697","crate_id":0,"name":"from_iter","span":{"filename":"src/set.rs","begin":[1295,4],"end":[1299,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2017:1714":{"id":"0:2017:1714","crate_id":0,"name":"insert","span":{"filename":"src/set.rs","begin":[2369,4],"end":[2375,5]},"visibility":"public","docs":"Sets the value of the entry with the VacantEntry's value.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_set::Entry;\n\nlet mut set: HashSet<&str> = HashSet::new();\n\nif let Entry::Vacant(o) = set.entry(\"poneyland\") {\n    o.insert();\n}\nassert!(set.contains(\"poneyland\"));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1359":{"id":"0:1359","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[5257,0],"end":[5610,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1365:1691","0:1366:2013","0:1367:2074","0:1368:2076","0:1369:3348","0:1370:1714","0:1371:2011","0:1372:3634","0:1373:3657","0:1374:3317"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1824:811":{"id":"0:1824:811","crate_id":0,"name":"len","span":{"filename":"src/set.rs","begin":[1707,4],"end":[1709,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:2120:1695":{"id":"b:1:2553-0:2120:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2741:4617-0:862:3202":{"id":"a:1:2741:4617-0:862:3202","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2251-0:779:2632":{"id":"b:1:2251-0:779:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:523:2125":{"id":"0:523:2125","crate_id":0,"name":"drain","span":{"filename":"src/map.rs","begin":[925,4],"end":[929,5]},"visibility":"public","docs":"Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.\n\nIf the returned iterator is dropped before being fully consumed, it\ndrops the remaining key-value pairs. The returned iterator keeps a\nmutable borrow on the vector to optimize its implementation.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut a = HashMap::new();\na.insert(1, \"a\");\na.insert(2, \"b\");\nlet capacity_before_drain = a.capacity();\n\nfor (k, v) in a.drain().take(1) {\n    assert!(k == 1 || k == 2);\n    assert!(v == \"a\" || v == \"b\");\n}\n\n// As we can see, the map is empty and contains no element.\nassert!(a.is_empty() && a.len() == 0);\n// But map capacity is equal to old one.\nassert_eq!(a.capacity(), capacity_before_drain);\n\nlet mut a = HashMap::new();\na.insert(1, \"a\");\na.insert(2, \"b\");\n\n{   // Iterator is dropped without being consumed.\n    let d = a.drain();\n}\n\n// But the map is empty even if we do not use Drain iterator.\nassert!(a.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:4811-0:838:2585":{"id":"a:1:8250:4811-0:838:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2701:228-0:674:2605":{"id":"a:1:2701:228-0:674:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1147:668":{"id":"0:1147:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4569,4],"end":[4574,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1174":{"id":"0:1174","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4652,0],"end":[4660,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1179:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:775":{"id":"0:775","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2662,0],"end":[2666,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:778:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2553-0:1148:2763":{"id":"b:1:2553-0:1148:2763","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1148:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1232:953":{"id":"0:1232:953","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[4807,4],"end":[4816,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2701:228-0:850:3197":{"id":"a:1:2701:228-0:850:3197","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8249:4812-0:1148:2763":{"id":"a:1:8249:4812-0:1148:2763","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1148:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:1602:2643":{"id":"0:1602:2643","crate_id":0,"name":"retain","span":{"filename":"src/set.rs","begin":[370,4],"end":[375,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` such that `f(&e)` returns `false`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet xs = [1,2,3,4,5,6];\nlet mut set: HashSet<i32> = xs.iter().cloned().collect();\nset.retain(|&k| k % 2 == 0);\nassert_eq!(set.len(), 3);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2929:2008","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:697:2682":{"id":"b:1:2538-0:697:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1478:3771":{"id":"0:1478:3771","crate_id":0,"name":"extend","span":{"filename":"src/map.rs","begin":[6641,4],"end":[6643,5]},"visibility":"default","docs":"Inserts all new key-values from the iterator to existing `HashMap<K, V, S, A>`.\nReplace values with existing keys with new values returned from the iterator.\nThe keys and values must implement [`Copy`] trait.\n\n[`Copy`]: https://doc.rust-lang.org/core/marker/trait.Copy.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, 100);\n\nlet arr = [(1, 1), (2, 2)];\nlet some_iter = arr.iter();\nmap.extend(some_iter);\n// Replace values with existing keys with new values returned from the iterator.\n// So that the map.get(&1) doesn't return Some(&100).\nassert_eq!(map.get(&1), Some(&1));\n\nlet some_vec: Vec<_> = vec![(3, 3), (4, 4)];\nmap.extend(&some_vec);\n\nlet some_arr = [(5, 5), (6, 6)];\nmap.extend(&some_arr);\n\nlet mut vec: Vec<_> = map.into_iter().collect();\n// The `IntoIter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:658:694":{"id":"0:658:694","crate_id":0,"name":"from","span":{"filename":"src/map.rs","begin":[2298,4],"end":[2300,5]},"visibility":"default","docs":"# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map1 = HashMap::from([(1, 2), (3, 4)]);\nlet map2: HashMap<_, _> = [(1, 2), (3, 4)].into();\nassert_eq!(map1, map2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:843:2985":{"id":"b:1:2553-0:843:2985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5646:1455":{"id":"4:5646:1455","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:4811-0:674:2605":{"id":"a:1:8250:4811-0:674:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2251-0:1573:144":{"id":"b:1:2251-0:1573:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1862:953":{"id":"0:1862:953","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1772,4],"end":[1776,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:7318:159","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12011:811":{"id":"1:12011:811","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:51699:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:862:3202":{"id":"b:1:2548-0:862:3202","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1731":{"id":"0:1731","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1483,0],"end":[1513,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"1:2758:4030","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1734:186","0:1735:1416"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2251-0:1166:2909":{"id":"b:1:2251-0:1166:2909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1621":{"id":"0:1621","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[618,0],"end":[1244,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1625:2032","0:1626:2037","0:1627:2726","0:1628:2022","0:1629:4166","0:1631:4176","0:1633:4185","0:1635:63","0:1637:3865","0:1639:2074","0:1641:4210","0:1642:4219","0:1645:4223","0:1649:2743","0:1650:4250","0:1652:4257","0:1654:4264","0:1655:1714","0:1656:2892","0:1657:2132","0:1658:2011","0:1660:3824"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2542-0:453:142":{"id":"b:1:2542-0:453:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8249:4812-0:687:2231":{"id":"a:1:8249:4812-0:687:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1709":{"id":"0:1709","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1371,0],"end":[1383,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1713:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1957:2744":{"id":"0:1957:2744","crate_id":0,"name":"Entry","span":{"filename":"src/set.rs","begin":[2025,0],"end":[2058,1]},"visibility":"public","docs":"A view into a single entry in a set, which may either be vacant or occupied.\n\nThis `enum` is constructed from the [`entry`] method on [`HashSet`].\n\n[`HashSet`]: struct.HashSet.html\n[`entry`]: struct.HashSet.html#method.entry\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet, OccupiedEntry};\n\nlet mut set = HashSet::new();\nset.extend([\"a\", \"b\", \"c\"]);\nassert_eq!(set.len(), 3);\n\n// Existing value (insert)\nlet entry: Entry<_, _> = set.entry(\"a\");\nlet _raw_o: OccupiedEntry<_, _> = entry.insert();\nassert_eq!(set.len(), 3);\n// Nonexistent value (insert)\nset.entry(\"d\").insert();\n\n// Existing value (or_insert)\nset.entry(\"b\").or_insert();\n// Nonexistent value (or_insert)\nset.entry(\"e\").or_insert();\n\nprintln!(\"Our HashSet: {:?}\", set);\n\nlet mut vec: Vec<_> = set.iter().copied().collect();\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\", \"d\", \"e\"]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"variants_stripped":false,"variants":["0:1962:2746","0:1965:2748"],"impls":["0:1995","a:1:2684:220-0:1957:2744","a:1:8249:4812-0:1957:2744","a:1:8250:4811-0:1957:2744","a:1:2701:228-0:1957:2744","a:1:2741:4617-0:1957:2744","b:1:2251-0:1957:2744","b:1:2542-0:1957:2744","b:1:2248-0:1957:2744","b:1:2538-0:1957:2744","b:1:2553-0:1957:2744","b:1:2548-0:1957:2744","b:1:3319-0:1957:2744","0:1968"]}}},"b:1:2538-0:1013:2744":{"id":"b:1:2538-0:1013:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2548-0:889:3001":{"id":"b:1:2548-0:889:3001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:889:3001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:7206-0:1740:2231":{"id":"b:1:7206-0:1740:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:540:2743":{"id":"0:540:2743","crate_id":0,"name":"entry","span":{"filename":"src/map.rs","begin":[1268,4],"end":[1284,5]},"visibility":"public","docs":"Gets the given key's corresponding entry in the map for in-place manipulation.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut letters = HashMap::new();\n\nfor ch in \"a short treatise on fungi\".chars() {\n    let counter = letters.entry(ch).or_insert(0);\n    *counter += 1;\n}\n\nassert_eq!(letters[&'s'], 2);\nassert_eq!(letters[&'t'], 3);\nassert_eq!(letters[&'u'], 1);\nassert_eq!(letters.get(&'y'), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}]],"output":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:979:3416":{"id":"0:979:3416","crate_id":0,"name":"insert_with_hasher","span":{"filename":"src/map.rs","begin":[4101,4],"end":[4115,5]},"visibility":"public","docs":"Set the value of an entry with a custom hasher function.\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nfn make_hasher<K, S>(hash_builder: &S) -> impl Fn(&K) -> u64 + '_\nwhere\n    K: Hash + ?Sized,\n    S: BuildHasher,\n{\n    move |key: &K| {\n        use core::hash::Hasher;\n        let mut state = hash_builder.build_hasher();\n        key.hash(&mut state);\n        state.finish()\n    }\n}\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nlet key = \"a\";\nlet hash_builder = map.hasher().clone();\nlet hash = make_hasher(&hash_builder)(&key);\n\nmatch map.raw_entry_mut().from_hash(hash, |q| q == &key) {\n    RawEntryMut::Occupied(_) => panic!(),\n    RawEntryMut::Vacant(v) => assert_eq!(\n        v.insert_with_hasher(hash, key, 100, make_hasher(&hash_builder)),\n        (&mut \"a\", &mut 100)\n    ),\n}\nmap.extend([(\"b\", 200), (\"c\", 300), (\"d\", 400), (\"e\", 500), (\"f\", 600)]);\nassert_eq!(map[&\"a\"], 100);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hash",{"primitive":"u64"}],["key",{"generic":"K"}],["value",{"generic":"V"}],["hasher",{"generic":"H"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"H"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"1:2926:2025","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}],"output":{"primitive":"u64"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12013:19468":{"id":"1:12013:19468","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:4617-0:1749:2668":{"id":"a:1:2741:4617-0:1749:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:778:668":{"id":"0:778:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[2663,4],"end":[2665,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1031:2747":{"id":"0:1031:2747","crate_id":0,"name":"OccupiedEntry","span":{"filename":"src/map.rs","begin":[4300,0],"end":[4305,1]},"visibility":"public","docs":"A view into an occupied entry in a `HashMap`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap, OccupiedEntry};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\", 10), (\"b\", 20), (\"c\", 30)]);\n\nlet _entry_o: OccupiedEntry<_, _, _> = map.entry(\"a\").insert(100);\nassert_eq!(map.len(), 3);\n\n// Existing key (insert and update)\nmatch map.entry(\"a\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(mut view) => {\n        assert_eq!(view.get(), &100);\n        let v = view.get_mut();\n        *v *= 10;\n        assert_eq!(view.insert(1111), 1000);\n    }\n}\n\nassert_eq!(map[&\"a\"], 1111);\nassert_eq!(map.len(), 3);\n\n// Existing key (take)\nmatch map.entry(\"c\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"c\", 30));\n    }\n}\nassert_eq!(map.get(&\"c\"), None);\nassert_eq!(map.len(), 2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1359","a:1:8249:4812-0:1031:2747","a:1:8250:4811-0:1031:2747","a:1:2741:4617-0:1031:2747","b:1:2251-0:1031:2747","b:1:2542-0:1031:2747","b:1:2248-0:1031:2747","b:1:2538-0:1031:2747","b:1:2553-0:1031:2747","b:1:2548-0:1031:2747","b:1:3319-0:1031:2747","0:1051","0:1046","0:1041"]}}},"4:5384:2132":{"id":"4:5384:2132","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:766:2578":{"id":"0:766:2578","crate_id":0,"name":"Values","span":{"filename":"src/map.rs","begin":[2648,0],"end":[2650,1]},"visibility":"public","docs":"An iterator over the values of a `HashMap` in arbitrary order.\nThe iterator element type is `&'a V`.\n\nThis `struct` is created by the [`values`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`values`]: struct.HashMap.html#method.values\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut values = map.values();\nlet mut vec = vec![values.next(), values.next(), values.next()];\n\n// The `Values` iterator produces values in arbitrary order, so the\n// values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some(&\"a\"), Some(&\"b\"), Some(&\"c\")]);\n\n// It is fused iterator\nassert_eq!(values.next(), None);\nassert_eq!(values.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:766:2578","a:1:8249:4812-0:766:2578","a:1:8250:4811-0:766:2578","a:1:2701:228-0:766:2578","a:1:2741:4617-0:766:2578","b:1:2251-0:766:2578","b:1:2542-0:766:2578","b:1:2248-0:766:2578","b:1:2538-0:766:2578","b:1:2553-0:766:2578","b:1:7206-0:766:2578","b:1:2548-0:766:2578","b:1:3319-0:766:2578","b:4:684-0:766:2578","0:1287","0:1280","0:771","0:1291","0:775"]}}},"a:1:8250:4811-0:889:3001":{"id":"a:1:8250:4811-0:889:3001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:889:3001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1869":{"id":"0:1869","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1789,0],"end":[1797,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1873:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2542-0:1973:2747":{"id":"b:1:2542-0:1973:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1707:3771":{"id":"0:1707:3771","crate_id":0,"name":"extend","span":{"filename":"src/set.rs","begin":[1354,4],"end":[1356,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1179:668":{"id":"0:1179:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4653,4],"end":[4659,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2056":{"id":"0:2056","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,0],"end":[151,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"core::borrow::Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"for":{"generic":"Q"},"items":["0:2059:1690"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12138:19510":{"id":"1:12138:19510","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4533:19510"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43674:11403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:566:2091":{"id":"0:566:2091","crate_id":0,"name":"get_many_unchecked_mut","span":{"filename":"src/map.rs","begin":[1605,4],"end":[1614,5]},"visibility":"public","docs":"Attempts to get mutable references to `N` values in the map at once, without validating that\nthe values are unique.\n\nReturns an array of length `N` with the results of each query. `None` will be returned if\nany of the keys are missing.\n\nFor a safe alternative see [`get_many_mut`](`HashMap::get_many_mut`).\n\n# Safety\n\nCalling this method with overlapping keys is *[undefined behavior]* even if the resulting\nreferences are not used.\n\n[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut libraries = HashMap::new();\nlibraries.insert(\"Bodleian Library\".to_string(), 1602);\nlibraries.insert(\"Athenæum\".to_string(), 1807);\nlibraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\nlibraries.insert(\"Library of Congress\".to_string(), 1800);\n\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"Library of Congress\",\n]);\nassert_eq!(\n    got,\n    Some([\n        &mut 1807,\n        &mut 1800,\n    ]),\n);\n\n// Missing keys result in None\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"New York Public Library\",\n]);\nassert_eq!(got, None);\n```","links":{"`HashMap::get_many_mut`":"0:559:2083"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ks",{"array":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}},"len":"N"}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}},"len":"N"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12087:4514":{"id":"1:12087:4514","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11712:13346","`DoubleEndedIterator`":"1:7240:121","prim@char":"1:51699:419","str::matches":"1:12087:4514"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43561:11492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5383:20183":{"id":"4:5383:20183","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:280:10982","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"4:7004:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:280:10982","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"4:7004:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1374:3317":{"id":"0:1374:3317","crate_id":0,"name":"replace_entry_with","span":{"filename":"src/map.rs","begin":[5581,4],"end":[5609,5]},"visibility":"public","docs":"Provides shared access to the key and owned access to the value of\nthe entry and allows to replace or remove it based on the\nvalue of the returned option.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nmap.insert(\"poneyland\", 42);\n\nlet entry = match map.entry(\"poneyland\") {\n    Entry::Occupied(e) => {\n        e.replace_entry_with(|k, v| {\n            assert_eq!(k, &\"poneyland\");\n            assert_eq!(v, 42);\n            Some(v + 1)\n        })\n    }\n    Entry::Vacant(_) => panic!(),\n};\n\nmatch entry {\n    Entry::Occupied(e) => {\n        assert_eq!(e.key(), &\"poneyland\");\n        assert_eq!(e.get(), &43);\n    }\n    Entry::Vacant(_) => panic!(),\n}\n\nassert_eq!(map[\"poneyland\"], 43);\n\nlet entry = match map.entry(\"poneyland\") {\n    Entry::Occupied(e) => e.replace_entry_with(|_k, _v| None),\n    Entry::Vacant(_) => panic!(),\n};\n\nmatch entry {\n    Entry::Vacant(e) => {\n        assert_eq!(e.key(), &\"poneyland\");\n    }\n    Entry::Occupied(_) => panic!(),\n}\n\nassert!(!map.contains_key(\"poneyland\"));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:2066","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"generic":"V"}],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:1740:2231":{"id":"b:1:2538-0:1740:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1620:2024":{"id":"0:1620:2024","crate_id":0,"name":"hasher","span":{"filename":"src/set.rs","begin":[613,4],"end":[615,5]},"visibility":"public","docs":"Returns a reference to the set's [`BuildHasher`].\n\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet hasher = DefaultHashBuilder::default();\nlet set: HashSet<i32> = HashSet::with_hasher(hasher);\nlet hasher: &DefaultHashBuilder = set.hasher();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"S"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1066":{"id":"0:1066","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4369,0],"end":[4373,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1057:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1071:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2548-0:753:2568":{"id":"b:1:2548-0:753:2568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1917:423":{"id":"0:1917:423","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[1899,4],"end":[1903,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2701:228-0:660:2596":{"id":"a:1:2701:228-0:660:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1677":{"id":"0:1677","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1279,0],"end":[1286,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"tuple":[]}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1681:694"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:1973:2747":{"id":"b:1:3319-0:1973:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2741:4617-0:1744:2632":{"id":"a:1:2741:4617-0:1744:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:555:2076":{"id":"0:555:2076","crate_id":0,"name":"get_mut","span":{"filename":"src/map.rs","begin":[1486,4],"end":[1495,5]},"visibility":"public","docs":"Returns a mutable reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nif let Some(x) = map.get_mut(&1) {\n    *x = \"b\";\n}\nassert_eq!(map[&1], \"b\");\n\nassert_eq!(map.get_mut(&2), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1273":{"id":"0:1273","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4882,0],"end":[4887,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7263:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1276:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2248-0:1763:4167":{"id":"b:1:2248-0:1763:4167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2548-0:687:2231":{"id":"b:1:2548-0:687:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2741:4617-0:687:2231":{"id":"a:1:2741:4617-0:687:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:638":{"id":"0:638","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2225,0],"end":[2249,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:643:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2251-0:766:2578":{"id":"b:1:2251-0:766:2578","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12060:2242":{"id":"1:12060:2242","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11712:13346","`DoubleEndedIterator`":"1:7240:121","prim@char":"1:51699:419","str::split_whitespace":"1:12038:16208","str::rsplit":"1:12066:19481"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43357:11133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:1736:2596":{"id":"b:1:2542-0:1736:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1912:668":{"id":"0:1912:668","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1892,4],"end":[1894,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:453:142":{"id":"b:1:3319-0:453:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:627":{"id":"0:627","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2205,0],"end":[2212,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:513:2526":{"id":"0:513:2526","crate_id":0,"name":"with_capacity_and_hasher_in","span":{"filename":"src/map.rs","begin":[615,4],"end":[620,5]},"visibility":"public","docs":"Creates an empty `HashMap` with the specified capacity, using `hash_builder`\nto hash the keys. It will be allocated with the given allocator.\n\nThe hash map will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash map will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`].\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut map = HashMap::with_capacity_and_hasher(10, s);\nmap.insert(1, 2);\n```","links":{"`ahash::RandomState`":"5:813:10576","`HashMap`":"0:453:142"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hash_builder",{"generic":"S"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7206-0:779:2632":{"id":"b:1:7206-0:779:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1612:2488":{"id":"0:1612:2488","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/set.rs","begin":[505,4],"end":[509,5]},"visibility":"public","docs":"Creates an empty `HashSet` with the specified capacity, using\n`hasher` to hash the keys.\n\nThe hash set will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash set will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`].\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashSet to be useful, see its documentation for details.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut set = HashSet::with_capacity_and_hasher(10, s);\nset.insert(1);\n```","links":{"`ahash::RandomState`":"5:813:10576","`HashSet`":"0:1573:144"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hasher",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2001:3272":{"id":"0:2001:3272","crate_id":0,"name":"or_insert","span":{"filename":"src/set.rs","begin":[2197,4],"end":[2205,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting if it was vacant.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<&str> = HashSet::new();\n\n// nonexistent key\nset.entry(\"poneyland\").or_insert();\nassert!(set.contains(\"poneyland\"));\n\n// existing key\nset.entry(\"poneyland\").or_insert();\nassert!(set.contains(\"poneyland\"));\nassert_eq!(set.len(), 1);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2248-0:1013:2744":{"id":"b:1:2248-0:1013:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:514:2024":{"id":"0:514:2024","crate_id":0,"name":"hasher","span":{"filename":"src/map.rs","begin":[637,4],"end":[639,5]},"visibility":"public","docs":"Returns a reference to the map's [`BuildHasher`].\n\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet hasher = DefaultHashBuilder::default();\nlet map: HashMap<i32, i32> = HashMap::with_hasher(hasher);\nlet hasher: &DefaultHashBuilder = map.hasher();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"S"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1204:784":{"id":"0:1204:784","crate_id":0,"name":"into_iter","span":{"filename":"src/map.rs","begin":[4740,4],"end":[4742,5]},"visibility":"default","docs":"Creates an iterator over the entries of a `HashMap` in arbitrary order\nwith mutable references to the values. The iterator element type is\n`(&'a K, &'a mut V)`.\n\nReturn the same `IterMut` struct as by the [`iter_mut`] method on\n[`HashMap`].\n\n[`iter_mut`]: struct.HashMap.html#method.iter_mut\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet mut map: HashMap<_, _> = [(\"a\", 1), (\"b\", 2), (\"c\", 3)].into();\n\nfor (key, value) in &mut map {\n    println!(\"Key: {}, Value: {}\", key, value);\n    *value *= 2;\n}\n\nlet mut vec = map.iter().collect::<Vec<_>>();\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(&\"a\", &2), (&\"b\", &4), (&\"c\", &6)]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1613":{"id":"0:1613","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[512,0],"end":[616,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1617:290","0:1618:2509","0:1619:2526","0:1620:2024"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1965:2748":{"id":"0:1965:2748","crate_id":0,"name":"Vacant","span":{"filename":"src/set.rs","begin":[2057,4],"end":[2057,36]},"visibility":"default","docs":"A vacant entry.\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet};\nlet mut set: HashSet<&str> = HashSet::new();\n\nmatch set.entry(\"a\") {\n    Entry::Occupied(_) => unreachable!(),\n    Entry::Vacant(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:1967:1606"]},"discriminant":null}}},"1:12096:19490":{"id":"1:12096:19490","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11712:13346","`DoubleEndedIterator`":"1:7240:121","prim@char":"1:51699:419","str::match_indices":"1:12093:19489"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43525:11490","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:13352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:1166:2909":{"id":"b:1:2538-0:1166:2909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2684:220-0:881:3206":{"id":"a:1:2684:220-0:881:3206","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:881:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3319-0:660:2596":{"id":"b:1:3319-0:660:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:946:3316":{"id":"0:946:3316","crate_id":0,"name":"and_replace_entry_with","span":{"filename":"src/map.rs","begin":[3581,4],"end":[3589,5]},"visibility":"public","docs":"Provides shared access to the key and owned access to the value of\nan occupied entry and allows to replace or remove it based on the\nvalue of the returned option.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::RawEntryMut;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nlet entry = map\n    .raw_entry_mut()\n    .from_key(\"poneyland\")\n    .and_replace_entry_with(|_k, _v| panic!());\n\nmatch entry {\n    RawEntryMut::Vacant(_) => {},\n    RawEntryMut::Occupied(_) => panic!(),\n}\n\nmap.insert(\"poneyland\", 42);\n\nlet entry = map\n    .raw_entry_mut()\n    .from_key(\"poneyland\")\n    .and_replace_entry_with(|k, v| {\n        assert_eq!(k, &\"poneyland\");\n        assert_eq!(v, 42);\n        Some(v + 1)\n    });\n\nmatch entry {\n    RawEntryMut::Occupied(e) => {\n        assert_eq!(e.key(), &\"poneyland\");\n        assert_eq!(e.get(), &43);\n    },\n    RawEntryMut::Vacant(_) => panic!(),\n}\n\nassert_eq!(map[\"poneyland\"], 43);\n\nlet entry = map\n    .raw_entry_mut()\n    .from_key(\"poneyland\")\n    .and_replace_entry_with(|_k, _v| None);\n\nmatch entry {\n    RawEntryMut::Vacant(_) => {},\n    RawEntryMut::Occupied(_) => panic!(),\n}\n\nassert!(!map.contains_key(\"poneyland\"));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:2066","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"generic":"V"}],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:1756:4186":{"id":"b:1:2538-0:1756:4186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3319-0:1749:2668":{"id":"b:1:3319-0:1749:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2548-0:1749:2668":{"id":"b:1:2548-0:1749:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:944:3293":{"id":"0:944:3293","crate_id":0,"name":"and_modify","span":{"filename":"src/map.rs","begin":[3509,4],"end":[3523,5]},"visibility":"public","docs":"Provides in-place mutable access to an occupied entry before any\npotential inserts into the map.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nmap.raw_entry_mut()\n   .from_key(\"poneyland\")\n   .and_modify(|_k, v| { *v += 1 })\n   .or_insert(\"poneyland\", 42);\nassert_eq!(map[\"poneyland\"], 42);\n\nmap.raw_entry_mut()\n   .from_key(\"poneyland\")\n   .and_modify(|_k, v| { *v += 1 })\n   .or_insert(\"poneyland\", 0);\nassert_eq!(map[\"poneyland\"], 43);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:2066","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7206-0:1756:4186":{"id":"b:1:7206-0:1756:4186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1658:2011":{"id":"0:1658:2011","crate_id":0,"name":"remove","span":{"filename":"src/set.rs","begin":[1188,4],"end":[1193,5]},"visibility":"public","docs":"Removes a value from the set. Returns whether the value was\npresent in the set.\n\nThe value may be any borrowed form of the set's value type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe value type.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set = HashSet::new();\n\nset.insert(2);\nassert_eq!(set.remove(&2), true);\nassert_eq!(set.remove(&2), false);\n```\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:710":{"id":"0:710","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2493,0],"end":[2498,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7263:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:714:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1849:668":{"id":"0:1849:668","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1745,4],"end":[1748,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:1013:2744":{"id":"b:1:2251-0:1013:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:7206-0:1736:2596":{"id":"b:1:7206-0:1736:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2542-0:1148:2763":{"id":"b:1:2542-0:1148:2763","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1148:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1983:668":{"id":"0:1983:668","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[2110,4],"end":[2114,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1954:2230":{"id":"0:1954:2230","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1977,4],"end":[1977,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:925:3247":{"id":"0:925:3247","crate_id":0,"name":"from_key","span":{"filename":"src/map.rs","begin":[3319,4],"end":[3326,5]},"visibility":"public","docs":"Access an immutable entry by key.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\nlet key = \"a\";\nassert_eq!(map.raw_entry().from_key(&key), Some((&\"a\", &100)));\n```","links":{},"attrs":["#[inline]","#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2015:2074":{"id":"0:2015:2074","crate_id":0,"name":"get","span":{"filename":"src/set.rs","begin":[2330,4],"end":[2332,5]},"visibility":"public","docs":"Gets a reference to the value that would be used when inserting\nthrough the `VacantEntry`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<&str> = HashSet::new();\nassert_eq!(set.entry(\"poneyland\").get(), &\"poneyland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:4617-0:1057:2749":{"id":"a:1:2741:4617-0:1057:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1057:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3319-0:1166:2909":{"id":"b:1:3319-0:1166:2909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8249:4812-0:1740:2231":{"id":"a:1:8249:4812-0:1740:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:519:795":{"id":"0:519:795","crate_id":0,"name":"iter","span":{"filename":"src/map.rs","begin":[791,4],"end":[799,5]},"visibility":"public","docs":"An iterator visiting all key-value pairs in arbitrary order.\nThe iterator element type is `(&'a K, &'a V)`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\nassert_eq!(map.len(), 3);\nlet mut vec: Vec<(&str, i32)> = Vec::new();\n\nfor (key, val) in map.iter() {\n    println!(\"key: {} val: {}\", key, val);\n    vec.push((*key, *val));\n}\n\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(\"a\", 1), (\"b\", 2), (\"c\", 3)]);\n\nassert_eq!(map.len(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2059:1690":{"id":"0:2059:1690","crate_id":0,"name":"equivalent","span":{"filename":"src/lib.rs","begin":[148,4],"end":[150,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:962:3275":{"id":"0:962:3275","crate_id":0,"name":"into_key_value","span":{"filename":"src/map.rs","begin":[3834,4],"end":[3839,5]},"visibility":"public","docs":"Converts the OccupiedEntry into a mutable reference to the key and value in the entry\nwith a lifetime bound to the map itself.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\nuse std::rc::Rc;\n\nlet key_one = Rc::new(\"a\");\nlet key_two = Rc::new(\"a\");\n\nlet mut map: HashMap<Rc<&str>, u32> = HashMap::new();\nmap.insert(key_one.clone(), 10);\n\nassert_eq!(map[&key_one], 10);\nassert!(Rc::strong_count(&key_one) == 2 && Rc::strong_count(&key_two) == 1);\n\nlet inside_key: &mut Rc<&str>;\nlet inside_value: &mut u32;\nmatch map.raw_entry_mut().from_key(&key_one) {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => {\n        let tuple = o.into_key_value();\n        inside_key = tuple.0;\n        inside_value = tuple.1;\n    }\n}\n*inside_key = key_two.clone();\n*inside_value = 100;\nassert_eq!(map[&key_two], 100);\nassert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:1740:2231":{"id":"b:1:3319-0:1740:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2542-0:1756:4186":{"id":"b:1:2542-0:1756:4186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:1973:2747":{"id":"b:1:2553-0:1973:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2544:694":{"id":"1:2544:694","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:1166:2909":{"id":"b:1:2542-0:1166:2909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2251-0:725:2689":{"id":"b:1:2251-0:725:2689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1406":{"id":"0:1406","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[5947,0],"end":[5978,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1414:3588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2701:228-0:881:3206":{"id":"a:1:2701:228-0:881:3206","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:881:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12116:19499":{"id":"1:12116:19499","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:51699:419","self::pattern":"1:11712:13346"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:13352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:1072:2759":{"id":"b:1:2251-0:1072:2759","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1695":{"id":"0:1695","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1323,0],"end":[1345,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7211:3750","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1699:3771"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1334:668":{"id":"0:1334:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4972,4],"end":[4974,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1895:423":{"id":"0:1895:423","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[1845,4],"end":[1850,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2121:1698":{"id":"0:2121:1698","crate_id":0,"name":"CapacityOverflow","span":{"filename":"src/lib.rs","begin":[158,4],"end":[158,20]},"visibility":"default","docs":"Error due to the computed capacity exceeding the collection's maximum\n(usually `isize::MAX` bytes).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:1:8250:4811-0:1057:2749":{"id":"a:1:8250:4811-0:1057:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1057:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2553-0:1736:2596":{"id":"b:1:2553-0:1736:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1211:2231":{"id":"0:1211:2231","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[4747,4],"end":[4747,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"0:1444:3340":{"id":"0:1444:3340","crate_id":0,"name":"into_key","span":{"filename":"src/map.rs","begin":[6373,4],"end":[6378,5]},"visibility":"public","docs":"Take ownership of the key.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nlet key: &str = \"poneyland\";\n\nmatch map.entry_ref(key) {\n    EntryRef::Occupied(_) => panic!(),\n    EntryRef::Vacant(v) => assert_eq!(v.into_key(), \"poneyland\".to_owned()),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"K"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:4811-0:1749:2668":{"id":"a:1:8250:4811-0:1749:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1800":{"id":"0:1800","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1663,0],"end":[1674,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["0:1803:2230","0:1804:953","0:1805:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2251-0:1749:2668":{"id":"b:1:2251-0:1749:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:650:186":{"id":"0:650:186","crate_id":0,"name":"Output","span":{"filename":"src/map.rs","begin":[2258,4],"end":[2258,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"V"}}}},"b:1:2542-0:1573:144":{"id":"b:1:2542-0:1573:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:779:2632":{"id":"b:1:2553-0:779:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2741:4617-0:725:2689":{"id":"a:1:2741:4617-0:725:2689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2251-0:1148:2763":{"id":"b:1:2251-0:1148:2763","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1148:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2047:1670":{"id":"0:2047:1670","crate_id":0,"name":"hash_map","span":{"filename":"src/lib.rs","begin":[85,0],"end":[85,16]},"visibility":"public","docs":"A hash map implemented with quadratic probing and SIMD lookup.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:2048-0:427:859"],"is_stripped":false}}},"0:1586:939":{"id":"0:1586:939","crate_id":0,"name":"new","span":{"filename":"src/set.rs","begin":[158,4],"end":[162,5]},"visibility":"public","docs":"Creates an empty `HashSet`.\n\nThe hash set is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`], for example with\n[`with_hasher`](HashSet::with_hasher) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet set: HashSet<i32> = HashSet::new();\n```","links":{"`ahash::RandomState`":"5:813:10576","`HashSet`":"0:1573:144","HashSet::with_hasher":"0:1611:2539"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:4811-0:697:2682":{"id":"a:1:8250:4811-0:697:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1735:1416":{"id":"0:1735:1416","crate_id":0,"name":"sub","span":{"filename":"src/set.rs","begin":[1510,4],"end":[1512,5]},"visibility":"default","docs":"Returns the difference of `self` and `rhs` as a new `HashSet<T, S>`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a - &b;\n\nlet mut i = 0;\nlet expected = [1, 2];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:742:811":{"id":"0:742:811","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[2557,4],"end":[2559,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:994:668":{"id":"0:994:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4144,4],"end":[4149,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1654:4264":{"id":"0:1654:4264","crate_id":0,"name":"is_superset","span":{"filename":"src/set.rs","begin":[1090,4],"end":[1092,5]},"visibility":"public","docs":"Returns `true` if the set is a superset of another,\ni.e., `self` contains at least all the values in `other`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet sub: HashSet<_> = [1, 2].iter().cloned().collect();\nlet mut set = HashSet::new();\n\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(0);\nset.insert(1);\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(2);\nassert_eq!(set.is_superset(&sub), true);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:4811-0:1573:144":{"id":"a:1:8250:4811-0:1573:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2542-0:838:2585":{"id":"b:1:2542-0:838:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:762":{"id":"0:762","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2614,0],"end":[2618,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:765:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1795:2231":{"id":"0:1795:2231","crate_id":0,"name":"IntoIter","span":{"filename":"src/set.rs","begin":[1625,4],"end":[1625,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"0:1592:1966":{"id":"0:1592:1966","crate_id":0,"name":"with_capacity_in","span":{"filename":"src/set.rs","begin":[253,4],"end":[257,5]},"visibility":"public","docs":"Creates an empty `HashSet` with the specified capacity.\n\nThe hash set will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash set will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`], for example with\n[`with_capacity_and_hasher_in`](HashSet::with_capacity_and_hasher_in) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet set: HashSet<i32> = HashSet::with_capacity(10);\nassert!(set.capacity() >= 10);\n```","links":{"`ahash::RandomState`":"5:813:10576","`HashSet`":"0:1573:144","HashSet::with_capacity_and_hasher_in":"0:1619:2526"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1172:2743":{"id":"0:1172:2743","crate_id":0,"name":"entry","span":{"filename":"src/map.rs","begin":[4647,4],"end":[4647,44]},"visibility":"public","docs":"The entry in the map that was already occupied.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"b:1:7206-0:674:2605":{"id":"b:1:7206-0:674:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:652":{"id":"0:652","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2284,0],"end":[2301,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"DefaultHashBuilder","id":"0:452:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:658:694"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1939:423":{"id":"0:1939:423","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[1945,4],"end":[1949,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:843:2985":{"id":"b:1:2538-0:843:2985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12033:19475":{"id":"1:12033:19475","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12034:19476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1202:2230":{"id":"0:1202:2230","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4709,4],"end":[4709,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}}},"0:1194:2231":{"id":"0:1194:2231","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[4678,4],"end":[4678,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"0:1962:2746":{"id":"0:1962:2746","crate_id":0,"name":"Occupied","span":{"filename":"src/set.rs","begin":[2042,4],"end":[2042,40]},"visibility":"default","docs":"An occupied entry.\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet};\nlet mut set: HashSet<_> = [\"a\", \"b\"].into();\n\nmatch set.entry(\"a\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:1964:1606"]},"discriminant":null}}},"0:515:1961":{"id":"0:515:1961","crate_id":0,"name":"capacity","span":{"filename":"src/map.rs","begin":[655,4],"end":[657,5]},"visibility":"public","docs":"Returns the number of elements the map can hold without reallocating.\n\nThis number is a lower bound; the `HashMap<K, V>` might be able to hold\nmore, but is guaranteed to be able to hold at least this many.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet map: HashMap<i32, i32> = HashMap::with_capacity(100);\nassert_eq!(map.len(), 0);\nassert!(map.capacity() >= 100);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1770:4177":{"id":"0:1770:4177","crate_id":0,"name":"SymmetricDifference","span":{"filename":"src/set.rs","begin":[1598,0],"end":[1600,1]},"visibility":"public","docs":"A lazy iterator producing elements in the symmetric difference of `HashSet`s.\n\nThis `struct` is created by the [`symmetric_difference`] method on\n[`HashSet`]. See its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:1770:4177","a:1:8249:4812-0:1770:4177","a:1:8250:4811-0:1770:4177","a:1:2701:228-0:1770:4177","a:1:2741:4617-0:1770:4177","b:1:2251-0:1770:4177","b:1:2542-0:1770:4177","b:1:2248-0:1770:4177","b:1:2538-0:1770:4177","b:1:2553-0:1770:4177","b:1:7206-0:1770:4177","b:1:2548-0:1770:4177","b:1:3319-0:1770:4177","b:4:684-0:1770:4177","0:1918","0:1926","0:1930","0:1913"]}}},"0:511:290":{"id":"0:511:290","crate_id":0,"name":"allocator","span":{"filename":"src/map.rs","begin":[548,4],"end":[550,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12103:19493":{"id":"1:12103:19493","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1593":{"id":"0:1593","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[260,0],"end":[432,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1597:1961","0:1598:795","0:1599:811","0:1600:2020","0:1601:2125","0:1602:2643","0:1605:2667","0:1607:2017"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2538-0:1736:2596":{"id":"b:1:2538-0:1736:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:896":{"id":"0:896","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3197,0],"end":[3252,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:902:3247","0:904:3248"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1071:668":{"id":"0:1071:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4370,4],"end":[4372,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1812":{"id":"0:1812","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1683,0],"end":[1687,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["0:1814:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2538-0:660:2596":{"id":"b:1:2538-0:660:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:959:2076":{"id":"0:959:2076","crate_id":0,"name":"get_mut","span":{"filename":"src/map.rs","begin":[3738,4],"end":[3740,5]},"visibility":"public","docs":"Gets a mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(mut o) => *o.get_mut() += 900,\n}\n\nassert_eq!(map[&\"a\"], 1000);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:674:2605":{"id":"b:1:2548-0:674:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1426:2076":{"id":"0:1426:2076","crate_id":0,"name":"get_mut","span":{"filename":"src/map.rs","begin":[6082,4],"end":[6084,5]},"visibility":"public","docs":"Gets a mutable reference to the value in the entry.\n\nIf you need a reference to the `OccupiedEntryRef` which may outlive the\ndestruction of the `EntryRef` value, see [`into_mut`].\n\n[`into_mut`]: #method.into_mut\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nmap.entry_ref(\"poneyland\").or_insert(12);\n\nassert_eq!(map[\"poneyland\"], 12);\nif let EntryRef::Occupied(mut o) = map.entry_ref(\"poneyland\") {\n    *o.get_mut() += 10;\n    assert_eq!(*o.get(), 22);\n\n    // We can use the same Entry multiple times.\n    *o.get_mut() += 2;\n}\n\nassert_eq!(map[\"poneyland\"], 24);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1085:1606":{"id":"0:1085:1606","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[4459,11],"end":[4459,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"VacantEntryRef","id":"0:1148:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"0:1125":{"id":"0:1125","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4547,0],"end":[4555,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1828":{"id":"0:1828","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1713,0],"end":[1718,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1831:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2251-0:1776:4195":{"id":"b:1:2251-0:1776:4195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:1148:2763":{"id":"b:1:2248-0:1148:2763","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1148:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:862:3202":{"id":"b:1:2553-0:862:3202","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:1749:2668":{"id":"b:1:2248-0:1749:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2548-0:1984:2749":{"id":"b:1:2548-0:1984:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1984:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:838:2585":{"id":"b:1:2248-0:838:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1995":{"id":"0:1995","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2153,0],"end":[2228,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Entry","id":"0:1957:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2000:1714","0:2001:3272","0:2002:2074"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1544:1669":{"id":"0:1544:1669","crate_id":0,"name":"set","span":{"filename":"src/set.rs","begin":[1,0],"end":[2889,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1573:144","0:1736:2596","0:1740:2231","0:1744:2632","0:1749:2668","0:1756:4186","0:1763:4167","0:1770:4177","0:1776:4195","0:1957:2744","0:1973:2747","0:1984:2749"],"is_stripped":true}}},"b:1:2542-0:2120:1695":{"id":"b:1:2542-0:2120:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:988:668":{"id":"0:988:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4138,4],"end":[4140,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:1973:2747":{"id":"a:1:2684:220-0:1973:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1756:4186":{"id":"0:1756:4186","crate_id":0,"name":"Intersection","span":{"filename":"src/set.rs","begin":[1570,0],"end":[1575,1]},"visibility":"public","docs":"A lazy iterator producing elements in the intersection of `HashSet`s.\n\nThis `struct` is created by the [`intersection`] method on [`HashSet`].\nSee its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`intersection`]: struct.HashSet.html#method.intersection","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:1756:4186","a:1:8249:4812-0:1756:4186","a:1:8250:4811-0:1756:4186","a:1:2701:228-0:1756:4186","a:1:2741:4617-0:1756:4186","b:1:2251-0:1756:4186","b:1:2542-0:1756:4186","b:1:2248-0:1756:4186","b:1:2538-0:1756:4186","b:1:2553-0:1756:4186","b:1:7206-0:1756:4186","b:1:2548-0:1756:4186","b:1:3319-0:1756:4186","b:4:684-0:1756:4186","0:1874","0:1887","0:1869","0:1882"]}}},"0:881:3206":{"id":"0:881:3206","crate_id":0,"name":"RawVacantEntryMut","span":{"filename":"src/map.rs","begin":[3154,0],"end":[3157,1]},"visibility":"public","docs":"A view into a vacant entry in a `HashMap`.\nIt is part of the [`RawEntryMut`] enum.\n\n[`RawEntryMut`]: enum.RawEntryMut.html\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut, RawVacantEntryMut};\n\nlet mut map = HashMap::<&str, i32>::new();\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet raw_v: RawVacantEntryMut<_, _, _> = match map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(view) => view,\n    RawEntryMut::Occupied(_) => unreachable!(),\n};\nraw_v.insert(\"a\", 10);\nassert!(map[&\"a\"] == 10 && map.len() == 1);\n\n// Nonexistent key (insert and update)\nlet hash = compute_hash(map.hasher(), &\"b\");\nmatch map.raw_entry_mut().from_key_hashed_nocheck(hash, &\"b\") {\n    RawEntryMut::Occupied(_) => unreachable!(),\n    RawEntryMut::Vacant(view) => {\n        let (k, value) = view.insert(\"b\", 2);\n        assert_eq!((*k, *value), (\"b\", 2));\n        *value = 20;\n    }\n}\nassert!(map[&\"b\"] == 20 && map.len() == 2);\n\nlet hash = compute_hash(map.hasher(), &\"c\");\nmatch map.raw_entry_mut().from_hash(hash, |q| *q == \"c\") {\n    RawEntryMut::Occupied(_) => unreachable!(),\n    RawEntryMut::Vacant(view) => {\n        assert_eq!(view.insert(\"c\", 30), (&mut \"c\", &mut 30));\n    }\n}\nassert!(map[&\"c\"] == 30 && map.len() == 3);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:971","a:1:2684:220-0:881:3206","a:1:8249:4812-0:881:3206","a:1:8250:4811-0:881:3206","a:1:2701:228-0:881:3206","a:1:2741:4617-0:881:3206","b:1:2251-0:881:3206","b:1:2542-0:881:3206","b:1:2248-0:881:3206","b:1:2538-0:881:3206","b:1:2553-0:881:3206","b:1:2548-0:881:3206","b:1:3319-0:881:3206","0:1001"]}}},"a:1:8249:4812-0:1776:4195":{"id":"a:1:8249:4812-0:1776:4195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1326":{"id":"0:1326","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4964,0],"end":[4964,72]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:1736:2596":{"id":"b:1:3319-0:1736:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2542-0:1072:2759":{"id":"b:1:2542-0:1072:2759","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1699:3771":{"id":"0:1699:3771","crate_id":0,"name":"extend","span":{"filename":"src/set.rs","begin":[1330,4],"end":[1332,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:1973:2747":{"id":"b:1:2538-0:1973:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1234":{"id":"0:1234","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4822,0],"end":[4827,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7263:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1237:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:465:423":{"id":"0:465:423","crate_id":0,"name":"clone","span":{"filename":"src/map.rs","begin":[194,4],"end":[199,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1582:423":{"id":"0:1582:423","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[121,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:1072:2759":{"id":"b:1:2553-0:1072:2759","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2538-0:889:3001":{"id":"b:1:2538-0:889:3001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:889:3001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2701:228-0:725:2689":{"id":"a:1:2701:228-0:725:2689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2248-0:843:2985":{"id":"b:1:2248-0:843:2985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:1031:2747":{"id":"b:1:2553-0:1031:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1649:2743":{"id":"0:1649:2743","crate_id":0,"name":"entry","span":{"filename":"src/set.rs","begin":[1020,4],"end":[1025,5]},"visibility":"public","docs":"Gets the given value's corresponding entry in the set for in-place manipulation.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_set::Entry::*;\n\nlet mut singles = HashSet::new();\nlet mut dupes = HashSet::new();\n\nfor ch in \"a short treatise on fungi\".chars() {\n    if let Vacant(dupe_entry) = dupes.entry(ch) {\n        // We haven't already seen a duplicate, so\n        // check if we've at least seen it once.\n        match singles.entry(ch) {\n            Vacant(single_entry) => {\n                // We found a new character for the first time.\n                single_entry.insert()\n            }\n            Occupied(single_entry) => {\n                // We've already seen this once, \"move\" it to dupes.\n                single_entry.remove();\n                dupe_entry.insert();\n            }\n        }\n    }\n}\n\nassert!(!singles.contains(&'t') && dupes.contains(&'t'));\nassert!(singles.contains(&'u') && !dupes.contains(&'u'));\nassert!(!singles.contains(&'v') && !dupes.contains(&'v'));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Entry","id":"0:1957:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:714:811":{"id":"0:714:811","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[2495,4],"end":[2497,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1285:953":{"id":"0:1285:953","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[4894,4],"end":[4900,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:838:2585":{"id":"b:1:3319-0:838:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1266":{"id":"0:1266","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4866,0],"end":[4881,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1270:2230","0:1271:953","0:1272:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2538-0:1031:2747":{"id":"b:1:2538-0:1031:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1220":{"id":"0:1220","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4794,0],"end":[4799,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7263:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1223:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:843:2985":{"id":"b:1:3319-0:843:2985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1041":{"id":"0:1041","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4307,0],"end":[4314,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:7206-0:766:2578":{"id":"b:1:7206-0:766:2578","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1431:3657":{"id":"0:1431:3657","crate_id":0,"name":"replace_key","span":{"filename":"src/map.rs","begin":[6247,4],"end":[6253,5]},"visibility":"public","docs":"Replaces the key in the hash map with the key used to create this entry.\n\n# Panics\n\nWill panic if this OccupiedEntryRef was created through [`EntryRef::insert`].\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\nuse std::rc::Rc;\n\nlet mut map: HashMap<Rc<str>, usize> = HashMap::with_capacity(6);\nlet mut keys: Vec<Rc<str>> = Vec::with_capacity(6);\n\nfor (value, key) in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"].into_iter().enumerate() {\n    let rc_key: Rc<str> = Rc::from(key);\n    keys.push(rc_key.clone());\n    map.insert(rc_key.clone(), value);\n}\n\nassert!(keys.iter().all(|key| Rc::strong_count(key) == 2));\n\n// It doesn't matter that we kind of use a vector with the same keys,\n// because all keys will be newly created from the references\nreclaim_memory(&mut map, &keys);\n\nassert!(keys.iter().all(|key| Rc::strong_count(key) == 1));\n\nfn reclaim_memory(map: &mut HashMap<Rc<str>, usize>, keys: &[Rc<str>]) {\n    for key in keys {\n        if let EntryRef::Occupied(entry) = map.entry_ref(key.as_ref()) {\n            // Replaces the entry's key with our version of it in `keys`.\n            entry.replace_key();\n        }\n    }\n}\n```","links":{"`EntryRef::insert`":"0:1395:1714"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"K"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1902:953":{"id":"0:1902:953","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1862,4],"end":[1869,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:965:2011":{"id":"0:965:2011","crate_id":0,"name":"remove","span":{"filename":"src/map.rs","begin":[3910,4],"end":[3912,5]},"visibility":"public","docs":"Takes the value out of the entry, and returns it.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => assert_eq!(o.remove(), 100),\n}\nassert_eq!(map.get(&\"a\"), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:660:2596":{"id":"0:660:2596","crate_id":0,"name":"Iter","span":{"filename":"src/map.rs","begin":[2331,0],"end":[2334,1]},"visibility":"public","docs":"An iterator over the entries of a `HashMap` in arbitrary order.\nThe iterator element type is `(&'a K, &'a V)`.\n\nThis `struct` is created by the [`iter`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`iter`]: struct.HashMap.html#method.iter\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut iter = map.iter();\nlet mut vec = vec![iter.next(), iter.next(), iter.next()];\n\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some((&1, &\"a\")), Some((&2, &\"b\")), Some((&3, &\"c\"))]);\n\n// It is fused iterator\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:660:2596","a:1:8249:4812-0:660:2596","a:1:8250:4811-0:660:2596","a:1:2701:228-0:660:2596","a:1:2741:4617-0:660:2596","b:1:2251-0:660:2596","b:1:2542-0:660:2596","b:1:2248-0:660:2596","b:1:2538-0:660:2596","b:1:2553-0:660:2596","b:1:7206-0:660:2596","b:1:2548-0:660:2596","b:1:3319-0:660:2596","b:4:684-0:660:2596","0:1220","0:666","0:1213","0:670","0:1224"]}}},"0:1019:2746":{"id":"0:1019:2746","crate_id":0,"name":"Occupied","span":{"filename":"src/map.rs","begin":[4233,4],"end":[4233,43]},"visibility":"default","docs":"An occupied entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap};\nlet mut map: HashMap<_, _> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.entry(\"a\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:1021:1606"]},"discriminant":null}}},"0:734:2230":{"id":"0:734:2230","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[2543,4],"end":[2543,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"V"}}}},"b:4:684-0:1756:4186":{"id":"b:4:684-0:1756:4186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:686:3482","4:687:3907","4:688:10712"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:934":{"id":"0:934","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3398,0],"end":[3590,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:940:1714","0:941:3272","0:942:3283","0:944:3293","0:946:3316"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12038:16208":{"id":"1:12038:16208","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12039:16202"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43631:11496","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12063:16190":{"id":"1:12063:16190","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:51699:419","self::pattern":"1:11712:13346"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11535:11136","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:790:2668":{"id":"a:1:2684:220-0:790:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1342:3272":{"id":"0:1342:3272","crate_id":0,"name":"or_insert","span":{"filename":"src/map.rs","begin":[5024,4],"end":[5033,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\n// nonexistent key\nmap.entry(\"poneyland\").or_insert(3);\nassert_eq!(map[\"poneyland\"], 3);\n\n// existing key\n*map.entry(\"poneyland\").or_insert(10) *= 2;\nassert_eq!(map[\"poneyland\"], 6);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:453:142":{"id":"b:1:2548-0:453:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:725:2689":{"id":"0:725:2689","crate_id":0,"name":"IntoValues","span":{"filename":"src/map.rs","begin":[2538,0],"end":[2540,1]},"visibility":"public","docs":"An owning iterator over the values of a `HashMap` in arbitrary order.\nThe iterator element type is `V`.\n\nThis `struct` is created by the [`into_values`] method on [`HashMap`].\nSee its documentation for more. The map cannot be used after calling that method.\n\n[`into_values`]: struct.HashMap.html#method.into_values\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut values = map.into_values();\nlet mut vec = vec![values.next(), values.next(), values.next()];\n\n// The `IntoValues` iterator produces values in arbitrary order, so\n// the values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some(\"a\"), Some(\"b\"), Some(\"c\")]);\n\n// It is fused iterator\nassert_eq!(values.next(), None);\nassert_eq!(values.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:725:2689","a:1:8249:4812-0:725:2689","a:1:8250:4811-0:725:2689","a:1:2701:228-0:725:2689","a:1:2741:4617-0:725:2689","b:1:2251-0:725:2689","b:1:2542-0:725:2689","b:1:2248-0:725:2689","b:1:2538-0:725:2689","b:1:2553-0:725:2689","b:1:7206-0:725:2689","b:1:2548-0:725:2689","b:1:3319-0:725:2689","0:743","0:738","0:747","0:730"]}}},"0:1672":{"id":"0:1672","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1269,0],"end":[1277,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1676:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8249:4812-0:1744:2632":{"id":"a:1:8249:4812-0:1744:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2134:668":{"id":"0:2134:668","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[154,31],"end":[154,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:850:3197":{"id":"b:1:2251-0:850:3197","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2741:4617-0:697:2682":{"id":"a:1:2741:4617-0:697:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8249:4812-0:1763:4167":{"id":"a:1:8249:4812-0:1763:4167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1979":{"id":"0:1979","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2109,0],"end":[2115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1983:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12036:11512":{"id":"1:12036:11512","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:51699:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43333:11478","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1597:1961":{"id":"0:1597:1961","crate_id":0,"name":"capacity","span":{"filename":"src/set.rs","begin":[271,4],"end":[273,5]},"visibility":"public","docs":"Returns the number of elements the set can hold without reallocating.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet set: HashSet<i32> = HashSet::with_capacity(100);\nassert!(set.capacity() >= 100);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7206-0:753:2568":{"id":"b:1:7206-0:753:2568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1371:2011":{"id":"0:1371:2011","crate_id":0,"name":"remove","span":{"filename":"src/map.rs","begin":[5437,4],"end":[5439,5]},"visibility":"public","docs":"Takes the value out of the entry, and returns it.\nKeeps the allocated memory for reuse.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n// The map is empty\nassert!(map.is_empty() && map.capacity() == 0);\n\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    assert_eq!(o.remove(), 12);\n}\n\nassert_eq!(map.contains_key(\"poneyland\"), false);\n// Now map hold none elements\nassert!(map.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:559:2083":{"id":"0:559:2083","crate_id":0,"name":"get_many_mut","span":{"filename":"src/map.rs","begin":[1553,4],"end":[1558,5]},"visibility":"public","docs":"Attempts to get mutable references to `N` values in the map at once.\n\nReturns an array of length `N` with the results of each query. For soundness, at most one\nmutable reference will be returned to any value. `None` will be returned if any of the\nkeys are duplicates or missing.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut libraries = HashMap::new();\nlibraries.insert(\"Bodleian Library\".to_string(), 1602);\nlibraries.insert(\"Athenæum\".to_string(), 1807);\nlibraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\nlibraries.insert(\"Library of Congress\".to_string(), 1800);\n\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"Library of Congress\",\n]);\nassert_eq!(\n    got,\n    Some([\n        &mut 1807,\n        &mut 1800,\n    ]),\n);\n\n// Missing keys result in None\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"New York Public Library\",\n]);\nassert_eq!(got, None);\n\n// Duplicate keys result in None\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"Athenæum\",\n]);\nassert_eq!(got, None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ks",{"array":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}},"len":"N"}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}},"len":"N"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1693:694":{"id":"0:1693:694","crate_id":0,"name":"from","span":{"filename":"src/set.rs","begin":[1318,4],"end":[1320,5]},"visibility":"default","docs":"# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet set1 = HashSet::from([1, 2, 3, 4]);\nlet set2: HashSet<_> = [1, 2, 3, 4].into();\nassert_eq!(set1, set2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:697:2682":{"id":"b:1:2548-0:697:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1365:1691":{"id":"0:1365:1691","crate_id":0,"name":"key","span":{"filename":"src/map.rs","begin":[5274,4],"end":[5276,5]},"visibility":"public","docs":"Gets a reference to the key in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap};\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nmatch map.entry(\"poneyland\") {\n    Entry::Vacant(_) => panic!(),\n    Entry::Occupied(entry) => assert_eq!(entry.key(), &\"poneyland\"),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2248-0:1740:2231":{"id":"b:1:2248-0:1740:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1948:668":{"id":"0:1948:668","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1966,4],"end":[1968,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1790":{"id":"0:1790","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1623,0],"end":[1653,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1794:2230","0:1795:2231","0:1796:784"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2684:220-0:1573:144":{"id":"a:1:2684:220-0:1573:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2251-0:862:3202":{"id":"b:1:2251-0:862:3202","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:505:2488":{"id":"0:505:2488","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/map.rs","begin":[537,4],"end":[542,5]},"visibility":"public","docs":"Creates an empty `HashMap` with the specified capacity, using `hash_builder`\nto hash the keys.\n\nThe hash map will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash map will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`].\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashMap to be useful, see its documentation for details.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut map = HashMap::with_capacity_and_hasher(10, s);\nassert_eq!(map.len(), 0);\nassert!(map.capacity() >= 10);\n\nmap.insert(1, 2);\n```","links":{"`ahash::RandomState`":"5:813:10576","`HashMap`":"0:453:142"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:4617-0:1740:2231":{"id":"a:1:2741:4617-0:1740:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1625:2032":{"id":"0:1625:2032","crate_id":0,"name":"reserve","span":{"filename":"src/set.rs","begin":[646,4],"end":[648,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.\n\n# Panics\n\nPanics if the new capacity exceeds [`isize::MAX`] bytes and [`abort`] the program\nin case of allocation error. Use [`try_reserve`](HashSet::try_reserve) instead\nif you want to handle memory allocation failure.\n\n[`isize::MAX`]: https://doc.rust-lang.org/std/primitive.isize.html\n[`abort`]: https://doc.rust-lang.org/alloc/alloc/fn.handle_alloc_error.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet mut set: HashSet<i32> = HashSet::new();\nset.reserve(10);\nassert!(set.capacity() >= 10);\n```","links":{"HashSet::try_reserve":"0:1626:2037"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:1957:2744":{"id":"b:1:2548-0:1957:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1957:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:971":{"id":"0:971","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3991,0],"end":[4135,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:881:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:977:1714","0:978:3393","0:979:3416"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2542-0:1740:2231":{"id":"b:1:2542-0:1740:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1955:953":{"id":"0:1955:953","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1980,4],"end":[1982,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1629:4166":{"id":"0:1629:4166","crate_id":0,"name":"difference","span":{"filename":"src/set.rs","begin":[742,4],"end":[747,5]},"visibility":"public","docs":"Visits the values representing the difference,\ni.e., the values that are in `self` but not in `other`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Can be seen as `a - b`.\nfor x in a.difference(&b) {\n    println!(\"{}\", x); // Print 1\n}\n\nlet diff: HashSet<_> = a.difference(&b).collect();\nassert_eq!(diff, [1].iter().collect());\n\n// Note that difference is not symmetric,\n// and `b - a` means something else:\nlet diff: HashSet<_> = b.difference(&a).collect();\nassert_eq!(diff, [4].iter().collect());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1819:953":{"id":"0:1819:953","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1693,4],"end":[1699,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:684-0:2120:1695":{"id":"b:4:684-0:2120:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:686:3482","4:687:3907","4:688:10712"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1688":{"id":"0:1688","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1304,0],"end":[1321,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"DefaultHashBuilder","id":"0:452:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1693:694"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2542-0:1957:2744":{"id":"b:1:2542-0:1957:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1957:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:460":{"id":"0:460","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[193,0],"end":[207,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:465:423","0:466:425"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:680":{"id":"0:680","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2389,0],"end":[2389,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1972:668":{"id":"0:1972:668","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[2061,4],"end":[2066,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:4617-0:453:142":{"id":"a:1:2741:4617-0:453:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8250:4811-0:453:142":{"id":"a:1:8250:4811-0:453:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2542-0:697:2682":{"id":"b:1:2542-0:697:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2016:4429":{"id":"0:2016:4429","crate_id":0,"name":"into_value","span":{"filename":"src/set.rs","begin":[2349,4],"end":[2351,5]},"visibility":"public","docs":"Take ownership of the value.\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet};\n\nlet mut set: HashSet<&str> = HashSet::new();\n\nmatch set.entry(\"poneyland\") {\n    Entry::Occupied(_) => panic!(),\n    Entry::Vacant(v) => assert_eq!(v.into_value(), \"poneyland\"),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1250:953":{"id":"0:1250:953","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[4844,4],"end":[4846,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:753:2568":{"id":"b:1:2251-0:753:2568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5401:20188":{"id":"4:5401:20188","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12133:19507"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1880:953":{"id":"0:1880:953","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1808,4],"end":[1815,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12019:19471":{"id":"1:12019:19471","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11279:13354"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2557:1477":{"id":"1:2557:1477","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:606:2892":{"id":"0:606:2892","crate_id":0,"name":"insert_unique_unchecked","span":{"filename":"src/map.rs","begin":[1849,4],"end":[1856,5]},"visibility":"public","docs":"Insert a key-value pair into the map without checking\nif the key already exists in the map.\n\nReturns a reference to the key and value just inserted.\n\nThis operation is safe if a key does not exist in the map.\n\nHowever, if a key exists in the map already, the behavior is unspecified:\nthis operation may panic, loop forever, or any following operation with the map\nmay panic, loop forever or return arbitrary result.\n\nThat said, this operation (and following operations) are guaranteed to\nnot violate memory safety.\n\nThis operation is faster than regular insert, because it does not perform\nlookup before insertion.\n\nThis operation is useful during initial population of the map.\nFor example, when constructing a map from another map, we know\nthat keys are unique.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map1 = HashMap::new();\nassert_eq!(map1.insert(1, \"a\"), None);\nassert_eq!(map1.insert(2, \"b\"), None);\nassert_eq!(map1.insert(3, \"c\"), None);\nassert_eq!(map1.len(), 3);\n\nlet mut map2 = HashMap::new();\n\nfor (key, value) in map1.into_iter() {\n    map2.insert_unique_unchecked(key, value);\n}\n\nlet (key, value) = map2.insert_unique_unchecked(4, \"d\");\nassert_eq!(key, &4);\nassert_eq!(value, &mut \"d\");\n*value = \"e\";\n\nassert_eq!(map2[&1], \"a\");\nassert_eq!(map2[&2], \"b\");\nassert_eq!(map2[&3], \"c\");\nassert_eq!(map2[&4], \"e\");\nassert_eq!(map2.len(), 4);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"generic":"K"}],["v",{"generic":"V"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:1763:4167":{"id":"b:1:2251-0:1763:4167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2542-0:753:2568":{"id":"b:1:2542-0:753:2568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1396:3272":{"id":"0:1396:3272","crate_id":0,"name":"or_insert","span":{"filename":"src/map.rs","begin":[5746,4],"end":[5755,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\n\n// nonexistent key\nmap.entry_ref(\"poneyland\").or_insert(3);\nassert_eq!(map[\"poneyland\"], 3);\n\n// existing key\n*map.entry_ref(\"poneyland\").or_insert(10) *= 2;\nassert_eq!(map[\"poneyland\"], 6);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2701:228-0:790:2668":{"id":"a:1:2701:228-0:790:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1676:668":{"id":"0:1676:668","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1274,4],"end":[1276,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:725:2689":{"id":"b:1:2542-0:725:2689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:1749:2668":{"id":"b:1:2553-0:1749:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8249:4812-0:753:2568":{"id":"a:1:8249:4812-0:753:2568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8250:4811-0:850:3197":{"id":"a:1:8250:4811-0:850:3197","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:735:953":{"id":"0:735:953","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[2546,4],"end":[2548,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:871":{"id":"0:871","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3089,0],"end":[3096,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1180":{"id":"0:1180","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4662,0],"end":[4674,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1186:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1887":{"id":"0:1887","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1835,0],"end":[1841,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:608:2011":{"id":"0:608:2011","crate_id":0,"name":"remove","span":{"filename":"src/map.rs","begin":[1926,4],"end":[1935,5]},"visibility":"public","docs":"Removes a key from the map, returning the value at the key if the key\nwas previously in the map. Keeps the allocated memory for reuse.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\n// The map is empty\nassert!(map.is_empty() && map.capacity() == 0);\n\nmap.insert(1, \"a\");\n\nassert_eq!(map.remove(&1), Some(\"a\"));\nassert_eq!(map.remove(&1), None);\n\n// Now map holds none elements\nassert!(map.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1903:2250":{"id":"0:1903:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1872,4],"end":[1875,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:1148:2763":{"id":"b:1:3319-0:1148:2763","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1148:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2251-0:1736:2596":{"id":"b:1:2251-0:1736:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3319-0:1756:4186":{"id":"b:1:3319-0:1756:4186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2542-0:889:3001":{"id":"b:1:2542-0:889:3001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:889:3001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2701:228-0:1770:4177":{"id":"a:1:2701:228-0:1770:4177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8250:4811-0:1776:4195":{"id":"a:1:8250:4811-0:1776:4195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12107:19496":{"id":"1:12107:19496","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:51699:419","self::pattern":"1:11712:13346"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11737:13351","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1600:2020":{"id":"0:1600:2020","crate_id":0,"name":"is_empty","span":{"filename":"src/set.rs","begin":[328,4],"end":[330,5]},"visibility":"public","docs":"Returns `true` if the set contains no elements.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut v = HashSet::new();\nassert!(v.is_empty());\nv.insert(1);\nassert!(!v.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:684-0:1770:4177":{"id":"b:4:684-0:1770:4177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:686:3482","4:687:3907","4:688:10712"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:504:2539":{"id":"0:504:2539","crate_id":0,"name":"with_hasher","span":{"filename":"src/map.rs","begin":[495,4],"end":[500,5]},"visibility":"public","docs":"Creates an empty `HashMap` which will use the given hash builder to hash\nkeys.\n\nThe hash map is initially created with a capacity of 0, so it will not\nallocate until it is first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`].\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashMap to be useful, see its documentation for details.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut map = HashMap::with_hasher(s);\nassert_eq!(map.len(), 0);\nassert_eq!(map.capacity(), 0);\n\nmap.insert(1, 2);\n```","links":{"`ahash::RandomState`":"5:813:10576","`HashMap`":"0:453:142"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1021:1606":{"id":"0:1021:1606","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[4233,13],"end":[4233,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"0:1368:2076":{"id":"0:1368:2076","crate_id":0,"name":"get_mut","span":{"filename":"src/map.rs","begin":[5356,4],"end":[5358,5]},"visibility":"public","docs":"Gets a mutable reference to the value in the entry.\n\nIf you need a reference to the `OccupiedEntry` which may outlive the\ndestruction of the `Entry` value, see [`into_mut`].\n\n[`into_mut`]: #method.into_mut\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nassert_eq!(map[\"poneyland\"], 12);\nif let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n    *o.get_mut() += 10;\n    assert_eq!(*o.get(), 22);\n\n    // We can use the same Entry multiple times.\n    *o.get_mut() += 2;\n}\n\nassert_eq!(map[\"poneyland\"], 24);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1836:2230":{"id":"0:1836:2230","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1721,4],"end":[1721,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"K"}}}},"b:1:2553-0:687:2231":{"id":"b:1:2553-0:687:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1313":{"id":"0:1313","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4946,0],"end":[4957,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1318:2230","0:1319:953","0:1320:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2548-0:843:2985":{"id":"b:1:2548-0:843:2985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1821":{"id":"0:1821","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1705,0],"end":[1710,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7263:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1824:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:861:1606":{"id":"0:861:1606","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[3020,11],"end":[3020,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:881:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"b:1:3319-0:1113:2760":{"id":"b:1:3319-0:1113:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12029:2097":{"id":"1:12029:2097","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1628:2022":{"id":"0:1628:2022","crate_id":0,"name":"shrink_to","span":{"filename":"src/set.rs","begin":[714,4],"end":[716,5]},"visibility":"public","docs":"Shrinks the capacity of the set with a lower limit. It will drop\ndown no lower than the supplied limit while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.\n\nPanics if the current capacity is smaller than the supplied\nminimum capacity.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set = HashSet::with_capacity(100);\nset.insert(1);\nset.insert(2);\nassert!(set.capacity() >= 100);\nset.shrink_to(10);\nassert!(set.capacity() >= 10);\nset.shrink_to(0);\nassert!(set.capacity() >= 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["min_capacity",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:964:3369":{"id":"0:964:3369","crate_id":0,"name":"insert_key","span":{"filename":"src/map.rs","begin":[3890,4],"end":[3892,5]},"visibility":"public","docs":"Sets the value of the entry, and returns the entry's old value.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\nuse std::rc::Rc;\n\nlet key_one = Rc::new(\"a\");\nlet key_two = Rc::new(\"a\");\n\nlet mut map: HashMap<Rc<&str>, u32> = HashMap::new();\nmap.insert(key_one.clone(), 10);\n\nassert_eq!(map[&key_one], 10);\nassert!(Rc::strong_count(&key_one) == 2 && Rc::strong_count(&key_two) == 1);\n\nmatch map.raw_entry_mut().from_key(&key_one) {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(mut o) => {\n        let old_key = o.insert_key(key_two.clone());\n        assert!(Rc::ptr_eq(&old_key, &key_one));\n    }\n}\nassert_eq!(map[&key_two], 10);\nassert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}]],"output":{"generic":"K"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1013:2744":{"id":"0:1013:2744","crate_id":0,"name":"Entry","span":{"filename":"src/map.rs","begin":[4216,0],"end":[4249,1]},"visibility":"public","docs":"A view into a single entry in a map, which may either be vacant or occupied.\n\nThis `enum` is constructed from the [`entry`] method on [`HashMap`].\n\n[`HashMap`]: struct.HashMap.html\n[`entry`]: struct.HashMap.html#method.entry\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap, OccupiedEntry};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\", 10), (\"b\", 20), (\"c\", 30)]);\nassert_eq!(map.len(), 3);\n\n// Existing key (insert)\nlet entry: Entry<_, _, _> = map.entry(\"a\");\nlet _raw_o: OccupiedEntry<_, _, _> = entry.insert(1);\nassert_eq!(map.len(), 3);\n// Nonexistent key (insert)\nmap.entry(\"d\").insert(4);\n\n// Existing key (or_insert)\nlet v = map.entry(\"b\").or_insert(2);\nassert_eq!(std::mem::replace(v, 2), 20);\n// Nonexistent key (or_insert)\nmap.entry(\"e\").or_insert(5);\n\n// Existing key (or_insert_with)\nlet v = map.entry(\"c\").or_insert_with(|| 3);\nassert_eq!(std::mem::replace(v, 3), 30);\n// Nonexistent key (or_insert_with)\nmap.entry(\"f\").or_insert_with(|| 6);\n\nprintln!(\"Our HashMap: {:?}\", map);\n\nlet mut vec: Vec<_> = map.iter().map(|(&k, &v)| (k, v)).collect();\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4), (\"e\", 5), (\"f\", 6)]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"variants_stripped":false,"variants":["0:1019:2746","0:1022:2748"],"impls":["0:1335","0:1352","a:1:2684:220-0:1013:2744","a:1:8249:4812-0:1013:2744","a:1:8250:4811-0:1013:2744","a:1:2701:228-0:1013:2744","a:1:2741:4617-0:1013:2744","b:1:2251-0:1013:2744","b:1:2542-0:1013:2744","b:1:2248-0:1013:2744","b:1:2538-0:1013:2744","b:1:2553-0:1013:2744","b:1:2548-0:1013:2744","b:1:3319-0:1013:2744","0:1025"]}}},"0:1940":{"id":"0:1940","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1952,0],"end":[1958,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1173:2045":{"id":"0:1173:2045","crate_id":0,"name":"value","span":{"filename":"src/map.rs","begin":[4649,4],"end":[4649,16]},"visibility":"public","docs":"The value which was not inserted, because the entry was already occupied.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"V"}}},"b:1:3319-0:779:2632":{"id":"b:1:3319-0:779:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12081:19486":{"id":"1:12081:19486","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1637:3865":{"id":"0:1637:3865","crate_id":0,"name":"contains","span":{"filename":"src/set.rs","begin":[859,4],"end":[864,5]},"visibility":"public","docs":"Returns `true` if the set contains a value.\n\nThe value may be any borrowed form of the set's value type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe value type.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert_eq!(set.contains(&1), true);\nassert_eq!(set.contains(&4), false);\n```\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:707:953":{"id":"0:707:953","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[2484,4],"end":[2486,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:660:2596":{"id":"b:1:2542-0:660:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1113:2760":{"id":"0:1113:2760","crate_id":0,"name":"OccupiedEntryRef","span":{"filename":"src/map.rs","begin":[4540,0],"end":[4545,1]},"visibility":"public","docs":"A view into an occupied entry in a `HashMap`.\nIt is part of the [`EntryRef`] enum.\n\n[`EntryRef`]: enum.EntryRef.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap, OccupiedEntryRef};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\".to_owned(), 10), (\"b\".into(), 20), (\"c\".into(), 30)]);\n\nlet key = String::from(\"a\");\nlet _entry_o: OccupiedEntryRef<_, _, _, _> = map.entry_ref(&key).insert(100);\nassert_eq!(map.len(), 3);\n\n// Existing key (insert and update)\nmatch map.entry_ref(\"a\") {\n    EntryRef::Vacant(_) => unreachable!(),\n    EntryRef::Occupied(mut view) => {\n        assert_eq!(view.get(), &100);\n        let v = view.get_mut();\n        *v *= 10;\n        assert_eq!(view.insert(1111), 1000);\n    }\n}\n\nassert_eq!(map[\"a\"], 1111);\nassert_eq!(map.len(), 3);\n\n// Existing key (take)\nmatch map.entry_ref(\"c\") {\n    EntryRef::Vacant(_) => unreachable!(),\n    EntryRef::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"c\".to_owned(), 30));\n    }\n}\nassert_eq!(map.get(\"c\"), None);\nassert_eq!(map.len(), 2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1415","a:1:8249:4812-0:1113:2760","a:1:8250:4811-0:1113:2760","a:1:2741:4617-0:1113:2760","b:1:2251-0:1113:2760","b:1:2542-0:1113:2760","b:1:2248-0:1113:2760","b:1:2538-0:1113:2760","b:1:2553-0:1113:2760","b:1:2548-0:1113:2760","b:1:3319-0:1113:2760","0:1141","0:1125","0:1133"]}}},"b:1:3319-0:766:2578":{"id":"b:1:3319-0:766:2578","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12016:19470":{"id":"1:12016:19470","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12014:19469"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:779:2632":{"id":"a:1:2684:220-0:779:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1617:290":{"id":"0:1617:290","crate_id":0,"name":"allocator","span":{"filename":"src/set.rs","begin":[518,4],"end":[520,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:4811-0:1072:2759":{"id":"a:1:8250:4811-0:1072:2759","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2248-0:687:2231":{"id":"b:1:2248-0:687:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1231:2230":{"id":"0:1231:2230","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4804,4],"end":[4804,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}}},"b:1:7206-0:660:2596":{"id":"b:1:7206-0:660:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:8249:4812-0:843:2985":{"id":"a:1:8249:4812-0:843:2985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:8249:4812-0:881:3206":{"id":"a:1:8249:4812-0:881:3206","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:881:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:8250:4811-0:1763:4167":{"id":"a:1:8250:4811-0:1763:4167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2701:228-0:1166:2909":{"id":"a:1:2701:228-0:1166:2909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:512:2509":{"id":"0:512:2509","crate_id":0,"name":"with_hasher_in","span":{"filename":"src/map.rs","begin":[580,4],"end":[585,5]},"visibility":"public","docs":"Creates an empty `HashMap` which will use the given hash builder to hash\nkeys. It will be allocated with the given allocator.\n\nThe hash map is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`].\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut map = HashMap::with_hasher(s);\nmap.insert(1, 2);\n```","links":{"`ahash::RandomState`":"5:813:10576","`HashMap`":"0:453:142"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hash_builder",{"generic":"S"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1655:1714":{"id":"0:1655:1714","crate_id":0,"name":"insert","span":{"filename":"src/set.rs","begin":[1112,4],"end":[1114,5]},"visibility":"public","docs":"Adds a value to the set.\n\nIf the set did not have this value present, `true` is returned.\n\nIf the set did have this value present, `false` is returned.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set = HashSet::new();\n\nassert_eq!(set.insert(2), true);\nassert_eq!(set.insert(2), false);\nassert_eq!(set.len(), 1);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:1749:2668":{"id":"a:1:2684:220-0:1749:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:818:2230":{"id":"0:818:2230","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[2779,4],"end":[2779,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"b:1:2553-0:850:3197":{"id":"b:1:2553-0:850:3197","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:1770:4177":{"id":"b:1:2248-0:1770:4177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:753:2568":{"id":"b:1:2553-0:753:2568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1148:2763":{"id":"0:1148:2763","crate_id":0,"name":"VacantEntryRef","span":{"filename":"src/map.rs","begin":[4607,0],"end":[4611,1]},"visibility":"public","docs":"A view into a vacant entry in a `HashMap`.\nIt is part of the [`EntryRef`] enum.\n\n[`EntryRef`]: enum.EntryRef.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap, VacantEntryRef};\n\nlet mut map = HashMap::<String, i32>::new();\n\nlet entry_v: VacantEntryRef<_, _, _, _> = match map.entry_ref(\"a\") {\n    EntryRef::Vacant(view) => view,\n    EntryRef::Occupied(_) => unreachable!(),\n};\nentry_v.insert(10);\nassert!(map[\"a\"] == 10 && map.len() == 1);\n\n// Nonexistent key (insert and update)\nmatch map.entry_ref(\"b\") {\n    EntryRef::Occupied(_) => unreachable!(),\n    EntryRef::Vacant(view) => {\n        let value = view.insert(2);\n        assert_eq!(*value, 2);\n        *value = 20;\n    }\n}\nassert!(map[\"b\"] == 20 && map.len() == 2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1435","a:1:2684:220-0:1148:2763","a:1:8249:4812-0:1148:2763","a:1:8250:4811-0:1148:2763","a:1:2701:228-0:1148:2763","a:1:2741:4617-0:1148:2763","b:1:2251-0:1148:2763","b:1:2542-0:1148:2763","b:1:2248-0:1148:2763","b:1:2538-0:1148:2763","b:1:2553-0:1148:2763","b:1:2548-0:1148:2763","b:1:3319-0:1148:2763","0:1159"]}}},"0:706:2230":{"id":"0:706:2230","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[2481,4],"end":[2481,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"K"}}}},"a:1:8250:4811-0:1770:4177":{"id":"a:1:8250:4811-0:1770:4177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1918":{"id":"0:1918","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1906,0],"end":[1922,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1923:2230","0:1924:953","0:1925:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2548-0:779:2632":{"id":"b:1:2548-0:779:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1298:2230":{"id":"0:1298:2230","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4915,4],"end":[4915,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}}}},"a:1:2741:4617-0:889:3001":{"id":"a:1:2741:4617-0:889:3001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:889:3001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2538-0:1113:2760":{"id":"b:1:2538-0:1113:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8250:4811-0:862:3202":{"id":"a:1:8250:4811-0:862:3202","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1833":{"id":"0:1833","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1720,0],"end":[1735,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1836:2230","0:1837:953","0:1838:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1291":{"id":"0:1291","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4912,0],"end":[4912,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:506":{"id":"0:506","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[545,0],"end":[1107,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:511:290","0:512:2509","0:513:2526","0:514:2024","0:515:1961","0:516:2567","0:517:1562","0:518:2584","0:519:795","0:520:2586","0:521:811","0:522:2020","0:523:2125","0:524:2643","0:526:2667","0:528:2017","0:529:2681","0:530:2688"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:850:3197":{"id":"0:850:3197","crate_id":0,"name":"RawEntryMut","span":{"filename":"src/map.rs","begin":[2992,0],"end":[3021,1]},"visibility":"public","docs":"A view into a single entry in a map, which may either be vacant or occupied.\n\nThis is a lower-level version of [`Entry`].\n\nThis `enum` is constructed through the [`raw_entry_mut`] method on [`HashMap`],\nthen calling one of the methods of that [`RawEntryBuilderMut`].\n\n[`HashMap`]: struct.HashMap.html\n[`Entry`]: enum.Entry.html\n[`raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut\n[`RawEntryBuilderMut`]: struct.RawEntryBuilderMut.html\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut, RawOccupiedEntryMut};\n\nlet mut map = HashMap::new();\nmap.extend([('a', 1), ('b', 2), ('c', 3)]);\nassert_eq!(map.len(), 3);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\n// Existing key (insert)\nlet raw: RawEntryMut<_, _, _> = map.raw_entry_mut().from_key(&'a');\nlet _raw_o: RawOccupiedEntryMut<_, _, _> = raw.insert('a', 10);\nassert_eq!(map.len(), 3);\n\n// Nonexistent key (insert)\nmap.raw_entry_mut().from_key(&'d').insert('d', 40);\nassert_eq!(map.len(), 4);\n\n// Existing key (or_insert)\nlet hash = compute_hash(map.hasher(), &'b');\nlet kv = map\n    .raw_entry_mut()\n    .from_key_hashed_nocheck(hash, &'b')\n    .or_insert('b', 20);\nassert_eq!(kv, (&mut 'b', &mut 2));\n*kv.1 = 20;\nassert_eq!(map.len(), 4);\n\n// Nonexistent key (or_insert)\nlet hash = compute_hash(map.hasher(), &'e');\nlet kv = map\n    .raw_entry_mut()\n    .from_key_hashed_nocheck(hash, &'e')\n    .or_insert('e', 50);\nassert_eq!(kv, (&mut 'e', &mut 50));\nassert_eq!(map.len(), 5);\n\n// Existing key (or_insert_with)\nlet hash = compute_hash(map.hasher(), &'c');\nlet kv = map\n    .raw_entry_mut()\n    .from_hash(hash, |q| q == &'c')\n    .or_insert_with(|| ('c', 30));\nassert_eq!(kv, (&mut 'c', &mut 3));\n*kv.1 = 30;\nassert_eq!(map.len(), 5);\n\n// Nonexistent key (or_insert_with)\nlet hash = compute_hash(map.hasher(), &'f');\nlet kv = map\n    .raw_entry_mut()\n    .from_hash(hash, |q| q == &'f')\n    .or_insert_with(|| ('f', 60));\nassert_eq!(kv, (&mut 'f', &mut 60));\nassert_eq!(map.len(), 6);\n\nprintln!(\"Our HashMap: {:?}\", map);\n\nlet mut vec: Vec<_> = map.iter().map(|(&k, &v)| (k, v)).collect();\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [('a', 10), ('b', 20), ('c', 30), ('d', 40), ('e', 50), ('f', 60)]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:856:2746","0:859:2748"],"impls":["0:934","a:1:2684:220-0:850:3197","a:1:8249:4812-0:850:3197","a:1:8250:4811-0:850:3197","a:1:2701:228-0:850:3197","a:1:2741:4617-0:850:3197","b:1:2251-0:850:3197","b:1:2542-0:850:3197","b:1:2248-0:850:3197","b:1:2538-0:850:3197","b:1:2553-0:850:3197","b:1:2548-0:850:3197","b:1:3319-0:850:3197","0:989"]}}},"b:1:7206-0:725:2689":{"id":"b:1:7206-0:725:2689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:3319-0:1744:2632":{"id":"b:1:3319-0:1744:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1904":{"id":"0:1904","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1878,0],"end":[1884,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2551:128":{"id":"1:2551:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:1030:668":{"id":"0:1030:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4252,4],"end":[4257,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1404:3316":{"id":"0:1404:3316","crate_id":0,"name":"and_replace_entry_with","span":{"filename":"src/map.rs","begin":[5935,4],"end":[5944,5]},"visibility":"public","docs":"Provides shared access to the key and owned access to the value of\nan occupied entry and allows to replace or remove it based on the\nvalue of the returned option.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\n\nlet entry = map\n    .entry_ref(\"poneyland\")\n    .and_replace_entry_with(|_k, _v| panic!());\n\nmatch entry {\n    EntryRef::Vacant(e) => {\n        assert_eq!(e.key(), \"poneyland\");\n    }\n    EntryRef::Occupied(_) => panic!(),\n}\n\nmap.insert(\"poneyland\".to_string(), 42);\n\nlet entry = map\n    .entry_ref(\"poneyland\")\n    .and_replace_entry_with(|k, v| {\n        assert_eq!(k, \"poneyland\");\n        assert_eq!(v, 42);\n        Some(v + 1)\n    });\n\nmatch entry {\n    EntryRef::Occupied(e) => {\n        assert_eq!(e.key(), \"poneyland\");\n        assert_eq!(e.get(), &43);\n    }\n    EntryRef::Vacant(_) => panic!(),\n}\n\nassert_eq!(map[\"poneyland\"], 43);\n\nlet entry = map\n    .entry_ref(\"poneyland\")\n    .and_replace_entry_with(|_k, _v| None);\n\nmatch entry {\n    EntryRef::Vacant(e) => assert_eq!(e.key(), \"poneyland\"),\n    EntryRef::Occupied(_) => panic!(),\n}\n\nassert!(!map.contains_key(\"poneyland\"));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:2066","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}},{"generic":"V"}],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2701:228-0:1776:4195":{"id":"a:1:2701:228-0:1776:4195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:499:1966":{"id":"0:499:1966","crate_id":0,"name":"with_capacity_in","span":{"filename":"src/map.rs","begin":[454,4],"end":[456,5]},"visibility":"public","docs":"Creates an empty `HashMap` with the specified capacity using the given allocator.\n\nThe hash map will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash map will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`], for example with\n[`with_capacity_and_hasher_in`](HashMap::with_capacity_and_hasher_in) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\n# #[cfg(feature = \"bumpalo\")]\n# fn test() {\nuse hashbrown::{HashMap, BumpWrapper};\nuse bumpalo::Bump;\n\nlet bump = Bump::new();\nlet mut map = HashMap::with_capacity_in(5, BumpWrapper(&bump));\n\n// The created HashMap holds none elements\nassert_eq!(map.len(), 0);\n// But it can hold at least 5 elements without reallocating\nlet empty_map_capacity = map.capacity();\nassert!(empty_map_capacity >= 5);\n\n// Now we insert some 5 elements inside created HashMap\nmap.insert(\"One\",   1);\nmap.insert(\"Two\",   2);\nmap.insert(\"Three\", 3);\nmap.insert(\"Four\",  4);\nmap.insert(\"Five\",  5);\n\n// We can see that the HashMap holds 5 elements\nassert_eq!(map.len(), 5);\n// But its capacity isn't changed\nassert_eq!(map.capacity(), empty_map_capacity)\n# }\n# fn main() {\n#     #[cfg(feature = \"bumpalo\")]\n#     test()\n# }\n```","links":{"`ahash::RandomState`":"5:813:10576","HashMap::with_capacity_and_hasher_in":"0:513:2526","`HashMap`":"0:453:142"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2248-0:1573:144":{"id":"b:1:2248-0:1573:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:1057:2749":{"id":"b:1:2553-0:1057:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1057:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1423:1691":{"id":"0:1423:1691","crate_id":0,"name":"key","span":{"filename":"src/map.rs","begin":[5997,4],"end":[6002,5]},"visibility":"public","docs":"Gets a reference to the key in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nmap.entry_ref(\"poneyland\").or_insert(12);\n\nmatch map.entry_ref(\"poneyland\") {\n    EntryRef::Vacant(_) => panic!(),\n    EntryRef::Occupied(entry) => assert_eq!(entry.key(), \"poneyland\"),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:4811-0:1148:2763":{"id":"a:1:8250:4811-0:1148:2763","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1148:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2248-0:1984:2749":{"id":"b:1:2248-0:1984:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1984:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:516:2567":{"id":"0:516:2567","crate_id":0,"name":"keys","span":{"filename":"src/map.rs","begin":[687,4],"end":[689,5]},"visibility":"public","docs":"An iterator visiting all keys in arbitrary order.\nThe iterator element type is `&'a K`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\nassert_eq!(map.len(), 3);\nlet mut vec: Vec<&str> = Vec::new();\n\nfor key in map.keys() {\n    println!(\"{}\", key);\n    vec.push(*key);\n}\n\n// The `Keys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\"]);\n\nassert_eq!(map.len(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:518:2584":{"id":"0:518:2584","crate_id":0,"name":"values_mut","span":{"filename":"src/map.rs","begin":[757,4],"end":[761,5]},"visibility":"public","docs":"An iterator visiting all values mutably in arbitrary order.\nThe iterator element type is `&'a mut V`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\n\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\n\nfor val in map.values_mut() {\n    *val = *val + 10;\n}\n\nassert_eq!(map.len(), 3);\nlet mut vec: Vec<i32> = Vec::new();\n\nfor val in map.values() {\n    println!(\"{}\", val);\n    vec.push(*val);\n}\n\n// The `Values` iterator produces values in arbitrary order, so the\n// values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [11, 12, 13]);\n\nassert_eq!(map.len(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1924:953":{"id":"0:1924:953","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1915,4],"end":[1917,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1968":{"id":"0:1968","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2060,0],"end":[2067,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1957:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1972:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12025:2076":{"id":"1:12025:2076","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41396:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:779:2632":{"id":"0:779:2632","crate_id":0,"name":"Drain","span":{"filename":"src/map.rs","begin":[2696,0],"end":[2698,1]},"visibility":"public","docs":"A draining iterator over the entries of a `HashMap` in arbitrary\norder. The iterator element type is `(K, V)`.\n\nThis `struct` is created by the [`drain`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`drain`]: struct.HashMap.html#method.drain\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut drain_iter = map.drain();\nlet mut vec = vec![drain_iter.next(), drain_iter.next(), drain_iter.next()];\n\n// The `Drain` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some((1, \"a\")), Some((2, \"b\")), Some((3, \"c\"))]);\n\n// It is fused iterator\nassert_eq!(drain_iter.next(), None);\nassert_eq!(drain_iter.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:779:2632","a:1:8249:4812-0:779:2632","a:1:8250:4811-0:779:2632","a:1:2701:228-0:779:2632","a:1:2741:4617-0:779:2632","b:1:2251-0:779:2632","b:1:2542-0:779:2632","b:1:2248-0:779:2632","b:1:2538-0:779:2632","b:1:2553-0:779:2632","b:1:7206-0:779:2632","b:1:2548-0:779:2632","b:1:3319-0:779:2632","0:1313","0:1326","0:1330","0:1321"]}}},"b:1:2538-0:2120:1695":{"id":"b:1:2538-0:2120:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12119:19500":{"id":"1:12119:19500","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:51699:419","self::pattern":"1:11712:13346"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:13352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:4812-0:779:2632":{"id":"a:1:8249:4812-0:779:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2684:220-0:1957:2744":{"id":"a:1:2684:220-0:1957:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1957:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1809:811":{"id":"0:1809:811","crate_id":0,"name":"len","span":{"filename":"src/set.rs","begin":[1677,4],"end":[1679,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7206-0:790:2668":{"id":"b:1:7206-0:790:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:955:3334":{"id":"0:955:3334","crate_id":0,"name":"key_mut","span":{"filename":"src/map.rs","begin":[3639,4],"end":[3641,5]},"visibility":"public","docs":"Gets a mutable reference to the key in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\nuse std::rc::Rc;\n\nlet key_one = Rc::new(\"a\");\nlet key_two = Rc::new(\"a\");\n\nlet mut map: HashMap<Rc<&str>, u32> = HashMap::new();\nmap.insert(key_one.clone(), 10);\n\nassert_eq!(map[&key_one], 10);\nassert!(Rc::strong_count(&key_one) == 2 && Rc::strong_count(&key_two) == 1);\n\nmatch map.raw_entry_mut().from_key(&key_one) {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(mut o) => {\n        *o.key_mut() = key_two.clone();\n    }\n}\nassert_eq!(map[&key_two], 10);\nassert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:4617-0:1776:4195":{"id":"a:1:2741:4617-0:1776:4195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8249:4812-0:1984:2749":{"id":"a:1:8249:4812-0:1984:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1984:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:2120:1695":{"id":"0:2120:1695","crate_id":0,"name":"TryReserveError","span":{"filename":"src/lib.rs","begin":[155,0],"end":[165,1]},"visibility":"public","docs":"The error type for `try_reserve` methods.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:2121:1698","0:2123:1700"],"impls":["a:1:2684:220-0:2120:1695","a:1:8249:4812-0:2120:1695","a:1:8250:4811-0:2120:1695","a:1:2701:228-0:2120:1695","a:1:2741:4617-0:2120:1695","b:0:2056-0:2120:1695","b:1:2251-0:2120:1695","b:1:2542-0:2120:1695","b:1:2248-0:2120:1695","b:1:2538-0:2120:1695","b:1:2553-0:2120:1695","b:1:2548-0:2120:1695","b:1:3319-0:2120:1695","b:4:684-0:2120:1695","0:2125","0:2127","0:2131","0:2130","0:2128","0:2133"]}}},"0:1626:2037":{"id":"0:1626:2037","crate_id":0,"name":"try_reserve","span":{"filename":"src/set.rs","begin":[667,4],"end":[669,5]},"visibility":"public","docs":"Tries to reserve capacity for at least `additional` more elements to be inserted\nin the given `HashSet<K,V>`. The collection may reserve more space to avoid\nfrequent reallocations.\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet mut set: HashSet<i32> = HashSet::new();\nset.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12034:19476":{"id":"1:12034:19476","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12033:19475"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2010":{"id":"0:2010","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2317,0],"end":[2387,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"VacantEntry","id":"0:1984:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2015:2074","0:2016:4429","0:2017:1714"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8250:4811-0:1740:2231":{"id":"a:1:8250:4811-0:1740:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2248-0:725:2689":{"id":"b:1:2248-0:725:2689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1345:3568":{"id":"0:1345:3568","crate_id":0,"name":"or_insert_with_key","span":{"filename":"src/map.rs","begin":[5088,4],"end":[5100,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting, if empty, the result of the default function.\nThis method allows for generating key-derived values for insertion by providing the default\nfunction a reference to the key that was moved during the `.entry(key)` method call.\n\nThe reference to the moved key is provided so that cloning or copying the key is\nunnecessary, unlike with `.or_insert_with(|| ... )`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, usize> = HashMap::new();\n\n// nonexistent key\nmap.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());\nassert_eq!(map[\"poneyland\"], 9);\n\n// existing key\n*map.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count() * 10) *= 2;\nassert_eq!(map[\"poneyland\"], 18);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:2066","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}],"output":{"generic":"V"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2248-0:1113:2760":{"id":"b:1:2248-0:1113:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:670":{"id":"0:670","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2347,0],"end":[2351,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:673:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8250:4811-0:1756:4186":{"id":"a:1:8250:4811-0:1756:4186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1584":{"id":"0:1584","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[133,0],"end":[194,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"DefaultHashBuilder","id":"0:452:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1586:939","0:1587:1965"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1022:2748":{"id":"0:1022:2748","crate_id":0,"name":"Vacant","span":{"filename":"src/map.rs","begin":[4248,4],"end":[4248,39]},"visibility":"default","docs":"A vacant entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap};\nlet mut map: HashMap<&str, i32> = HashMap::new();\n\nmatch map.entry(\"a\") {\n    Entry::Occupied(_) => unreachable!(),\n    Entry::Vacant(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:1024:1606"]},"discriminant":null}}},"b:1:2553-0:1763:4167":{"id":"b:1:2553-0:1763:4167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:521:811":{"id":"0:521:811","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[865,4],"end":[867,5]},"visibility":"public","docs":"Returns the number of elements in the map.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut a = HashMap::new();\nassert_eq!(a.len(), 0);\na.insert(1, \"a\");\nassert_eq!(a.len(), 1);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2127":{"id":"0:2127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[154,16],"end":[154,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2694:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:725:2689":{"id":"b:1:3319-0:725:2689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2548-0:1744:2632":{"id":"b:1:2548-0:1744:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12056:10025":{"id":"1:12056:10025","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41396:179","prim@char":"1:51699:419","self::pattern":"1:11712:13346"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:13352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:1736:2596":{"id":"a:1:2684:220-0:1736:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1430:3634":{"id":"0:1430:3634","crate_id":0,"name":"replace_entry","span":{"filename":"src/map.rs","begin":[6196,4],"end":[6206,5]},"visibility":"public","docs":"Replaces the entry, returning the old key and value. The new key in the hash map will be\nthe key used to create this entry.\n\n# Panics\n\nWill panic if this OccupiedEntryRef was created through [`EntryRef::insert`].\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\nuse std::rc::Rc;\n\nlet mut map: HashMap<Rc<str>, u32> = HashMap::new();\nlet key: Rc<str> = Rc::from(\"Stringthing\");\n\nmap.insert(key.clone(), 15);\nassert_eq!(Rc::strong_count(&key), 2);\n\nmatch map.entry_ref(\"Stringthing\") {\n    EntryRef::Occupied(entry) => {\n        let (old_key, old_value): (Rc<str>, u32) = entry.replace_entry(16);\n        assert!(Rc::ptr_eq(&key, &old_key) && old_value == 15);\n    }\n    EntryRef::Vacant(_) => panic!(),\n}\n\nassert_eq!(Rc::strong_count(&key), 1);\nassert_eq!(map[\"Stringthing\"], 16);\n```","links":{"`EntryRef::insert`":"0:1395:1714"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"generic":"V"}]],"output":{"tuple":[{"generic":"K"},{"generic":"V"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:838:2585":{"id":"b:1:2251-0:838:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3319-0:1013:2744":{"id":"b:1:3319-0:1013:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2741:4617-0:1763:4167":{"id":"a:1:2741:4617-0:1763:4167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1227":{"id":"0:1227","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4803,0],"end":[4821,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1231:2230","0:1232:953","0:1233:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2131":{"id":"0:2131","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[154,27],"end":[154,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1964:1606":{"id":"0:1964:1606","crate_id":0,"name":"0","span":{"filename":"src/set.rs","begin":[2042,13],"end":[2042,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"0:1082:1606":{"id":"0:1082:1606","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[4444,13],"end":[4444,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"a:1:2701:228-0:1957:2744":{"id":"a:1:2701:228-0:1957:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1957:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2248-0:660:2596":{"id":"b:1:2248-0:660:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:790:2668":{"id":"b:1:2553-0:790:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2133":{"id":"0:2133","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[154,31],"end":[154,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2134:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:709:2250":{"id":"0:709:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[2488,4],"end":[2490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1744:2632":{"id":"0:1744:2632","crate_id":0,"name":"Drain","span":{"filename":"src/set.rs","begin":[1544,0],"end":[1546,1]},"visibility":"public","docs":"A draining iterator over the items of a `HashSet`.\n\nThis `struct` is created by the [`drain`] method on [`HashSet`].\nSee its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`drain`]: struct.HashSet.html#method.drain","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:1744:2632","a:1:8249:4812-0:1744:2632","a:1:8250:4811-0:1744:2632","a:1:2701:228-0:1744:2632","a:1:2741:4617-0:1744:2632","b:1:2251-0:1744:2632","b:1:2542-0:1744:2632","b:1:2248-0:1744:2632","b:1:2538-0:1744:2632","b:1:2553-0:1744:2632","b:1:7206-0:1744:2632","b:1:2548-0:1744:2632","b:1:3319-0:1744:2632","0:1846","0:1843","0:1833","0:1839"]}}},"0:1046":{"id":"0:1046","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4315,0],"end":[4322,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1861:2230":{"id":"0:1861:2230","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1769,4],"end":[1769,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"K"}}}},"0:1276:811":{"id":"0:1276:811","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[4884,4],"end":[4886,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:4617-0:838:2585":{"id":"a:1:2741:4617-0:838:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:466:425":{"id":"0:466:425","crate_id":0,"name":"clone_from","span":{"filename":"src/map.rs","begin":[201,4],"end":[206,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1320:2250":{"id":"0:1320:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[4954,4],"end":[4956,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2000:1714":{"id":"0:2000:1714","crate_id":0,"name":"insert","span":{"filename":"src/set.rs","begin":[2167,4],"end":[2176,5]},"visibility":"public","docs":"Sets the value of the entry, and returns an OccupiedEntry.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<&str> = HashSet::new();\nlet entry = set.entry(\"horseyland\").insert();\n\nassert_eq!(entry.get(), &\"horseyland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1472":{"id":"0:1472","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[6600,0],"end":[6656,1]},"visibility":"default","docs":"Inserts all new key-values from the iterator and replaces values with existing\nkeys with new values returned from the iterator.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7211:3750","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1478:3771"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2548-0:1573:144":{"id":"b:1:2548-0:1573:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8250:4811-0:881:3206":{"id":"a:1:8250:4811-0:881:3206","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:881:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1212:784":{"id":"0:1212:784","crate_id":0,"name":"into_iter","span":{"filename":"src/map.rs","begin":[4768,4],"end":[4772,5]},"visibility":"default","docs":"Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(\"a\", 1), (\"b\", 2), (\"c\", 3)].into();\n\n// Not possible with .iter()\nlet mut vec: Vec<(&str, i32)> = map.into_iter().collect();\n// The `IntoIter` iterator produces items in arbitrary order, so\n// the items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(\"a\", 1), (\"b\", 2), (\"c\", 3)]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:4812-0:2120:1695":{"id":"a:1:8249:4812-0:2120:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2542-0:790:2668":{"id":"b:1:2542-0:790:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:536:2032":{"id":"0:536:2032","crate_id":0,"name":"reserve","span":{"filename":"src/map.rs","begin":[1142,4],"end":[1145,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.\n\n# Panics\n\nPanics if the new capacity exceeds [`isize::MAX`] bytes and [`abort`] the program\nin case of allocation error. Use [`try_reserve`](HashMap::try_reserve) instead\nif you want to handle memory allocation failure.\n\n[`isize::MAX`]: https://doc.rust-lang.org/std/primitive.isize.html\n[`abort`]: https://doc.rust-lang.org/alloc/alloc/fn.handle_alloc_error.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet mut map: HashMap<&str, i32> = HashMap::new();\n// Map is empty and doesn't allocate memory\nassert_eq!(map.capacity(), 0);\n\nmap.reserve(10);\n\n// And now map can hold at least 10 elements\nassert!(map.capacity() >= 10);\n```","links":{"HashMap::try_reserve":"0:537:2037"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5390:20185":{"id":"4:5390:20185","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:660:2596":{"id":"a:1:2684:220-0:660:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2548-0:1013:2744":{"id":"b:1:2548-0:1013:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2009:2132":{"id":"0:2009:2132","crate_id":0,"name":"replace","span":{"filename":"src/set.rs","begin":[2312,4],"end":[2314,5]},"visibility":"public","docs":"Replaces the entry, returning the old value. The new value in the hash map will be\nthe value used to create this entry.\n\n# Panics\n\nWill panic if this OccupiedEntry was created through [`Entry::insert`].\n\n# Examples\n\n```\n use hashbrown::hash_set::{Entry, HashSet};\n use std::rc::Rc;\n\n let mut set: HashSet<Rc<String>> = HashSet::new();\n let key_one = Rc::new(\"Stringthing\".to_string());\n let key_two = Rc::new(\"Stringthing\".to_string());\n\n set.insert(key_one.clone());\n assert!(Rc::strong_count(&key_one) == 2 && Rc::strong_count(&key_two) == 1);\n\n match set.entry(key_two.clone()) {\n     Entry::Occupied(entry) => {\n         let old_key: Rc<String> = entry.replace();\n         assert!(Rc::ptr_eq(&key_one, &old_key));\n     }\n     Entry::Vacant(_) => panic!(),\n }\n\n assert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);\n assert!(set.contains(&\"Stringthing\".to_owned()));\n```","links":{"`Entry::insert`":"0:2000:1714"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:494":{"id":"0:494","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[350,0],"end":[457,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"DefaultHashBuilder","id":"0:452:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:498:1713","0:499:1966"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:957:2074":{"id":"0:957:2074","crate_id":0,"name":"get","span":{"filename":"src/map.rs","begin":[3692,4],"end":[3694,5]},"visibility":"public","docs":"Gets a reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => assert_eq!(o.get(), &100),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:813":{"id":"0:813","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2774,0],"end":[2790,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2929:2008","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:818:2230","0:819:953","0:820:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1794:2230":{"id":"0:1794:2230","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1624,4],"end":[1624,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:995":{"id":"0:995","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4152,0],"end":[4159,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1000:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2548-0:1166:2909":{"id":"b:1:2548-0:1166:2909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2251-0:1113:2760":{"id":"b:1:2251-0:1113:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:553:2790":{"id":"0:553:2790","crate_id":0,"name":"contains_key","span":{"filename":"src/map.rs","begin":[1455,4],"end":[1460,5]},"visibility":"public","docs":"Returns `true` if the map contains a value for the specified key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.contains_key(&1), true);\nassert_eq!(map.contains_key(&2), false);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:4617-0:1031:2747":{"id":"a:1:2741:4617-0:1031:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:719":{"id":"0:719","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2502,0],"end":[2508,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:723:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2548-0:790:2668":{"id":"b:1:2548-0:790:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:715":{"id":"0:715","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2500,0],"end":[2500,71]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:547:2777":{"id":"0:547:2777","crate_id":0,"name":"get_key_value","span":{"filename":"src/map.rs","begin":[1376,4],"end":[1385,5]},"visibility":"public","docs":"Returns the key-value pair corresponding to the supplied key.\n\nThe supplied key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\nassert_eq!(map.get_key_value(&2), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:906":{"id":"0:906","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3254,0],"end":[3303,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:912:3251"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2701:228-0:1013:2744":{"id":"a:1:2701:228-0:1013:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1425:2074":{"id":"0:1425:2074","crate_id":0,"name":"get","span":{"filename":"src/map.rs","begin":[6050,4],"end":[6052,5]},"visibility":"public","docs":"Gets a reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nmap.entry_ref(\"poneyland\").or_insert(12);\n\nmatch map.entry_ref(\"poneyland\") {\n    EntryRef::Vacant(_) => panic!(),\n    EntryRef::Occupied(entry) => assert_eq!(entry.get(), &12),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1210:2230":{"id":"0:1210:2230","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4746,4],"end":[4746,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"0:1882":{"id":"0:1882","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1824,0],"end":[1833,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1886:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2553-0:1756:4186":{"id":"b:1:2553-0:1756:4186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1803:2230":{"id":"0:1803:2230","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1664,4],"end":[1664,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}}}}},"1:12072:19483":{"id":"1:12072:19483","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11712:13346","str::split":"1:12060:2242","prim@char":"1:51699:419","str::split_terminator":"1:12069:19482"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43425:11484","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:13352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12090:19488":{"id":"1:12090:19488","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11712:13346","`DoubleEndedIterator`":"1:7240:121","prim@char":"1:51699:419","str::matches":"1:12087:4514"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43579:11493","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:13352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12130:19504":{"id":"1:12130:19504","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:1776:4195":{"id":"b:1:3319-0:1776:4195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2124:1702":{"id":"0:2124:1702","crate_id":0,"name":"layout","span":{"filename":"src/lib.rs","begin":[163,8],"end":[163,36]},"visibility":"default","docs":"The layout of the allocation request that failed.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"alloc::alloc::Layout","id":"1:44347:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:1:2251-0:697:2682":{"id":"b:1:2251-0:697:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1330":{"id":"0:1330","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4966,0],"end":[4975,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1334:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1024:1606":{"id":"0:1024:1606","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[4248,11],"end":[4248,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"VacantEntry","id":"0:1057:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"0:1341:1714":{"id":"0:1341:1714","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[4991,4],"end":[5003,5]},"visibility":"public","docs":"Sets the value of the entry, and returns an OccupiedEntry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nlet entry = map.entry(\"horseyland\").insert(37);\n\nassert_eq!(entry.key(), &\"horseyland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"generic":"V"}]],"output":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:4617-0:660:2596":{"id":"a:1:2741:4617-0:660:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1370:1714":{"id":"0:1370:1714","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[5409,4],"end":[5411,5]},"visibility":"public","docs":"Sets the value of the entry, and returns the entry's old value.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n    assert_eq!(o.insert(15), 12);\n}\n\nassert_eq!(map[\"poneyland\"], 15);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"V"}]],"output":{"generic":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12084:19487":{"id":"1:12084:19487","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:13352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1619:2526":{"id":"0:1619:2526","crate_id":0,"name":"with_capacity_and_hasher_in","span":{"filename":"src/set.rs","begin":[592,4],"end":[596,5]},"visibility":"public","docs":"Creates an empty `HashSet` with the specified capacity, using\n`hasher` to hash the keys.\n\nThe hash set will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash set will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`].\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashSet to be useful, see its documentation for details.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut set = HashSet::with_capacity_and_hasher(10, s);\nset.insert(1);\n```","links":{"`ahash::RandomState`":"5:813:10576","`HashSet`":"0:1573:144"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hasher",{"generic":"S"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12031:19473":{"id":"1:12031:19473","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:51705:1397","str::slice_mut_unchecked":"1:12032:19474","crate::ops::Index":"1:2981:2339"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1092:668":{"id":"0:1092:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4465,4],"end":[4470,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5398:20186":{"id":"4:5398:20186","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:660:2596":{"id":"b:1:2251-0:660:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:697:2682":{"id":"b:1:2248-0:697:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1913":{"id":"0:1913","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1897,0],"end":[1904,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1917:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8250:4811-0:1736:2596":{"id":"a:1:8250:4811-0:1736:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1187":{"id":"0:1187","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4676,0],"end":[4706,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:1193:2230","0:1194:2231","0:1195:784"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1265:668":{"id":"0:1265:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4861,4],"end":[4863,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:612":{"id":"0:612","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1974,0],"end":[2186,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:617:2984","0:618:3000"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1806":{"id":"0:1806","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1675,0],"end":[1680,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7263:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["0:1809:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1300:2250":{"id":"0:1300:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[4926,4],"end":[4928,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2248-0:1057:2749":{"id":"b:1:2248-0:1057:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1057:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:1166:2909":{"id":"b:1:2248-0:1166:2909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2548-0:725:2689":{"id":"b:1:2548-0:725:2689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2741:4617-0:753:2568":{"id":"a:1:2741:4617-0:753:2568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2250:1693":{"id":"1:2250:1693","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1666:613":{"id":"0:1666:613","crate_id":0,"name":"eq","span":{"filename":"src/set.rs","begin":[1252,4],"end":[1258,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:1984:2749":{"id":"b:1:2542-0:1984:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1984:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1896":{"id":"0:1896","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1853,0],"end":[1876,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1901:2230","0:1902:953","0:1903:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2684:220-0:1770:4177":{"id":"a:1:2684:220-0:1770:4177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1810":{"id":"0:1810","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1681,0],"end":[1681,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:723:668":{"id":"0:723:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[2503,4],"end":[2507,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:4617-0:1973:2747":{"id":"a:1:2741:4617-0:1973:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2538-0:790:2668":{"id":"b:1:2538-0:790:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1304:811":{"id":"0:1304:811","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[4932,4],"end":[4934,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2051-0:453:142":{"id":"0:2051-0:453:142","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::map::HashMap","name":"HashMap","id":"0:453:142","glob":false}}},"b:1:2251-0:790:2668":{"id":"b:1:2251-0:790:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12041:19478":{"id":"1:12041:19478","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43621:11495","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1352":{"id":"0:1352","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[5224,0],"end":[5255,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1358:3588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2556:128":{"id":"1:2556:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32020:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:2548-0:766:2578":{"id":"b:1:2548-0:766:2578","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1080:2746":{"id":"0:1080:2746","crate_id":0,"name":"Occupied","span":{"filename":"src/map.rs","begin":[4444,4],"end":[4444,53]},"visibility":"default","docs":"An occupied entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\nlet mut map: HashMap<_, _> = [(\"a\".to_owned(), 100), (\"b\".into(), 200)].into();\n\nmatch map.entry_ref(\"a\") {\n    EntryRef::Vacant(_) => unreachable!(),\n    EntryRef::Occupied(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:1082:1606"]},"discriminant":null}}},"b:1:2548-0:1072:2759":{"id":"b:1:2548-0:1072:2759","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1864:2250":{"id":"0:1864:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1779,4],"end":[1781,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2123:1700":{"id":"0:2123:1700","crate_id":0,"name":"AllocError","span":{"filename":"src/lib.rs","begin":[161,4],"end":[164,5]},"visibility":"default","docs":"The memory allocator returned an error","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"struct":{"fields":["0:2124:1702"],"fields_stripped":false}},"discriminant":null}}},"0:1583:425":{"id":"0:1583:425","crate_id":0,"name":"clone_from","span":{"filename":"src/set.rs","begin":[127,4],"end":[129,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:1770:4177":{"id":"b:1:2538-0:1770:4177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:684-0:660:2596":{"id":"b:4:684-0:660:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["4:686:3482","4:687:3907","4:688:10712"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:966:2013":{"id":"0:966:2013","crate_id":0,"name":"remove_entry","span":{"filename":"src/map.rs","begin":[3930,4],"end":[3932,5]},"visibility":"public","docs":"Take the ownership of the key and value from the map.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => assert_eq!(o.remove_entry(), (\"a\", 100)),\n}\nassert_eq!(map.get(&\"a\"), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"K"},{"generic":"V"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1233:2250":{"id":"0:1233:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[4818,4],"end":[4820,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1720":{"id":"0:1720","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1418,0],"end":[1449,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitAnd","id":"1:2812:4027","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:1724:186","0:1725:362"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1842:811":{"id":"0:1842:811","crate_id":0,"name":"len","span":{"filename":"src/set.rs","begin":[1738,4],"end":[1740,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:804:588":{"id":"0:804:588","crate_id":0,"name":"drop","span":{"filename":"src/map.rs","begin":[2756,4],"end":[2762,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:4617-0:2120:1695":{"id":"a:1:2741:4617-0:2120:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:743":{"id":"0:743","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2562,0],"end":[2562,73]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1949":{"id":"0:1949","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1971,0],"end":[1987,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1954:2230","0:1955:953","0:1956:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1627:2726":{"id":"0:1627:2726","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/set.rs","begin":[688,4],"end":[690,5]},"visibility":"public","docs":"Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set = HashSet::with_capacity(100);\nset.insert(1);\nset.insert(2);\nassert!(set.capacity() >= 100);\nset.shrink_to_fit();\nassert!(set.capacity() >= 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:2300":{"id":"0:37:2300","crate_id":0,"name":"allocate","span":{"filename":"src/raw/alloc.rs","begin":[38,8],"end":[38,70]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["layout",{"resolved_path":{"name":"Layout","id":"1:44347:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonNull","id":"1:1821:1844","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}},{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:673:668":{"id":"0:673:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[2348,4],"end":[2350,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2552:1478":{"id":"1:2552:1478","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:697:2682":{"id":"0:697:2682","crate_id":0,"name":"IntoKeys","span":{"filename":"src/map.rs","begin":[2476,0],"end":[2478,1]},"visibility":"public","docs":"An owning iterator over the keys of a `HashMap` in arbitrary order.\nThe iterator element type is `K`.\n\nThis `struct` is created by the [`into_keys`] method on [`HashMap`].\nSee its documentation for more.\nThe map cannot be used after calling that method.\n\n[`into_keys`]: struct.HashMap.html#method.into_keys\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut keys = map.into_keys();\nlet mut vec = vec![keys.next(), keys.next(), keys.next()];\n\n// The `IntoKeys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some(1), Some(2), Some(3)]);\n\n// It is fused iterator\nassert_eq!(keys.next(), None);\nassert_eq!(keys.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:697:2682","a:1:8249:4812-0:697:2682","a:1:8250:4811-0:697:2682","a:1:2701:228-0:697:2682","a:1:2741:4617-0:697:2682","b:1:2251-0:697:2682","b:1:2542-0:697:2682","b:1:2248-0:697:2682","b:1:2538-0:697:2682","b:1:2553-0:697:2682","b:1:7206-0:697:2682","b:1:2548-0:697:2682","b:1:3319-0:697:2682","0:702","0:715","0:719","0:710"]}}},"b:1:3319-0:850:3197":{"id":"b:1:3319-0:850:3197","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8249:4812-0:1013:2744":{"id":"a:1:8249:4812-0:1013:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:1159":{"id":"0:1159","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4613,0],"end":[4619,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1148:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1165:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8249:4812-0:1770:4177":{"id":"a:1:8249:4812-0:1770:4177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1702":{"id":"0:1702","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1347,0],"end":[1369,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7211:3750","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1707:3771"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12101:19492":{"id":"1:12101:19492","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:427:859":{"id":"0:427:859","crate_id":0,"name":"map","span":{"filename":"src/map.rs","begin":[1,0],"end":[8512,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:452:2341","0:453:142","0:660:2596","0:674:2605","0:687:2231","0:697:2682","0:725:2689","0:753:2568","0:766:2578","0:779:2632","0:790:2668","0:838:2585","0:843:2985","0:850:3197","0:862:3202","0:881:3206","0:889:3001","0:1013:2744","0:1031:2747","0:1057:2749","0:1072:2759","0:1113:2760","0:1148:2763","0:1166:2909"],"is_stripped":true}}},"0:1633:4185":{"id":"0:1633:4185","crate_id":0,"name":"intersection","span":{"filename":"src/set.rs","begin":[796,4],"end":[806,5]},"visibility":"public","docs":"Visits the values representing the intersection,\ni.e., the values that are both in `self` and `other`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Print 2, 3 in arbitrary order.\nfor x in a.intersection(&b) {\n    println!(\"{}\", x);\n}\n\nlet intersection: HashSet<_> = a.intersection(&b).collect();\nassert_eq!(intersection, [2, 3].iter().collect());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1443:1691":{"id":"0:1443:1691","crate_id":0,"name":"key","span":{"filename":"src/map.rs","begin":[6350,4],"end":[6355,5]},"visibility":"public","docs":"Gets a reference to the key that would be used when inserting a value\nthrough the `VacantEntryRef`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nlet key: &str = \"poneyland\";\nassert_eq!(map.entry_ref(key).key(), \"poneyland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:4812-0:1113:2760":{"id":"a:1:8249:4812-0:1113:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:2003":{"id":"0:2003","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2230,0],"end":[2315,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2007:2074","0:2008:2011","0:2009:2132"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1290:811":{"id":"0:1290:811","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[4908,4],"end":[4910,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:859:2748":{"id":"0:859:2748","crate_id":0,"name":"Vacant","span":{"filename":"src/map.rs","begin":[3020,4],"end":[3020,45]},"visibility":"default","docs":"A vacant entry.\n\n# Examples\n\n```\nuse hashbrown::{hash_map::RawEntryMut, HashMap};\nlet mut map: HashMap<&str, i32> = HashMap::new();\n\nmatch map.raw_entry_mut().from_key(\"a\") {\n    RawEntryMut::Occupied(_) => unreachable!(),\n    RawEntryMut::Vacant(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:861:1606"]},"discriminant":null}}},"0:1713:60":{"id":"0:1713:60","crate_id":0,"name":"default","span":{"filename":"src/set.rs","begin":[1378,4],"end":[1382,5]},"visibility":"default","docs":"Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12014:19469":{"id":"1:12014:19469","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:942:3283":{"id":"0:942:3283","crate_id":0,"name":"or_insert_with","span":{"filename":"src/map.rs","begin":[3471,4],"end":[3484,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns mutable references to the key and value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, String> = HashMap::new();\n\nmap.raw_entry_mut().from_key(\"poneyland\").or_insert_with(|| {\n    (\"poneyland\", \"hoho\".to_string())\n});\n\nassert_eq!(map[\"poneyland\"], \"hoho\".to_string());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"F"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:2066","args":{"parenthesized":{"inputs":[],"output":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:1763:4167":{"id":"b:1:2542-0:1763:4167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:7209:2231":{"id":"1:7209:2231","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"b:1:2538-0:862:3202":{"id":"b:1:2538-0:862:3202","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1012:668":{"id":"0:1012:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4168,4],"end":[4170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1599:811":{"id":"0:1599:811","crate_id":0,"name":"len","span":{"filename":"src/set.rs","begin":[311,4],"end":[313,5]},"visibility":"public","docs":"Returns the number of elements in the set.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut v = HashSet::new();\nassert_eq!(v.len(), 0);\nv.insert(1);\nassert_eq!(v.len(), 1);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:684-0:1573:144":{"id":"b:4:684-0:1573:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:686:3482","4:687:3907","4:688:10712"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2251-0:1770:4177":{"id":"b:1:2251-0:1770:4177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1294":{"id":"0:1294","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4914,0],"end":[4929,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1298:2230","0:1299:953","0:1300:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1424:2013":{"id":"0:1424:2013","crate_id":0,"name":"remove_entry","span":{"filename":"src/map.rs","begin":[6029,4],"end":[6031,5]},"visibility":"public","docs":"Take the ownership of the key and value from the map.\nKeeps the allocated memory for reuse.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\n// The map is empty\nassert!(map.is_empty() && map.capacity() == 0);\n\nmap.entry_ref(\"poneyland\").or_insert(12);\n\nif let EntryRef::Occupied(o) = map.entry_ref(\"poneyland\") {\n    // We delete the entry from the map.\n    assert_eq!(o.remove_entry(), (\"poneyland\".to_owned(), 12));\n}\n\nassert_eq!(map.contains_key(\"poneyland\"), false);\n// Now map hold none elements but capacity is equal to the old one\nassert!(map.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"K"},{"generic":"V"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12078:19485":{"id":"1:12078:19485","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:51699:419","str::splitn":"1:12075:19484","self::pattern":"1:11712:13346"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43479:11487","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:13352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:530:2688":{"id":"0:530:2688","crate_id":0,"name":"into_values","span":{"filename":"src/map.rs","begin":[1102,4],"end":[1106,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the values in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `V`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\n\nlet mut vec: Vec<i32> = map.into_values().collect();\n\n// The `IntoValues` iterator produces values in arbitrary order, so\n// the values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [1, 2, 3]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1726":{"id":"0:1726","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1451,0],"end":[1481,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitXor","id":"1:2822:4029","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1729:186","0:1730:367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2741:4617-0:850:3197":{"id":"a:1:2741:4617-0:850:3197","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:989":{"id":"0:989","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4143,0],"end":[4150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:994:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:617:2984":{"id":"0:617:2984","crate_id":0,"name":"raw_entry_mut","span":{"filename":"src/map.rs","begin":[2073,4],"end":[2075,5]},"visibility":"public","docs":"Creates a raw entry builder for the HashMap.\n\nRaw entries provide the lowest level of control for searching and\nmanipulating a map. They must be manually initialized with a hash and\nthen manually searched. After this, insertions into a vacant entry\nstill require an owned key to be provided.\n\nRaw entries are useful for such exotic situations as:\n\n* Hash memoization\n* Deferring the creation of an owned key until it is known to be required\n* Using a search key that doesn't work with the Borrow trait\n* Using custom comparison logic without newtype wrappers\n\nBecause raw entries provide much more low-level control, it's much easier\nto put the HashMap into an inconsistent state which, while memory-safe,\nwill cause the map to produce seemingly random results. Higher-level and\nmore foolproof APIs like `entry` should be preferred when possible.\n\nIn particular, the hash used to initialized the raw entry must still be\nconsistent with the hash of the key that is ultimately stored in the entry.\nThis is because implementations of HashMap may need to recompute hashes\nwhen resizing, at which point only the keys are available.\n\nRaw entries give mutable access to the keys. This must not be used\nto modify how the key would compare or hash, as the map will not re-evaluate\nwhere the key should go, meaning the keys may become \"lost\" if their\nlocation does not reflect their state. For instance, if you change a key\nso that the map now contains keys which compare equal, search may start\nacting erratically, with two keys randomly masking each other. Implementations\nare free to assume this doesn't happen (within the limits of memory-safety).\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\", 100), (\"b\", 200), (\"c\", 300)]);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\n// Existing key (insert and update)\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(mut view) => {\n        assert_eq!(view.get(), &100);\n        let v = view.get_mut();\n        let new_v = (*v) * 10;\n        *v = new_v;\n        assert_eq!(view.insert(1111), 1000);\n    }\n}\n\nassert_eq!(map[&\"a\"], 1111);\nassert_eq!(map.len(), 3);\n\n// Existing key (take)\nlet hash = compute_hash(map.hasher(), &\"c\");\nmatch map.raw_entry_mut().from_key_hashed_nocheck(hash, &\"c\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"c\", 300));\n    }\n}\nassert_eq!(map.raw_entry().from_key(&\"c\"), None);\nassert_eq!(map.len(), 2);\n\n// Nonexistent key (insert and update)\nlet key = \"d\";\nlet hash = compute_hash(map.hasher(), &key);\nmatch map.raw_entry_mut().from_hash(hash, |q| *q == key) {\n    RawEntryMut::Occupied(_) => unreachable!(),\n    RawEntryMut::Vacant(view) => {\n        let (k, value) = view.insert(\"d\", 4000);\n        assert_eq!((*k, *value), (\"d\", 4000));\n        *value = 40000;\n    }\n}\nassert_eq!(map[&\"d\"], 40000);\nassert_eq!(map.len(), 3);\n\nmatch map.raw_entry_mut().from_hash(hash, |q| *q == key) {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"d\", 40000));\n    }\n}\nassert_eq!(map.get(&\"d\"), None);\nassert_eq!(map.len(), 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2050-0:1544:1669":{"id":"0:2050-0:1544:1669","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[104,4],"end":[104,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::set","name":"set","id":"0:1544:1669","glob":true}}},"b:4:684-0:753:2568":{"id":"b:4:684-0:753:2568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["4:686:3482","4:687:3907","4:688:10712"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:747":{"id":"0:747","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2564,0],"end":[2570,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:751:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8250:4811-0:1744:2632":{"id":"a:1:8250:4811-0:1744:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1238":{"id":"0:1238","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4828,0],"end":[4828,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:1715":{"id":"0:0:1715","crate_id":0,"name":"hashbrown","span":{"filename":"src/lib.rs","begin":[1,0],"end":[183,1]},"visibility":"public","docs":"This crate is a Rust port of Google's high-performance [SwissTable] hash\nmap, adapted to make it a drop-in replacement for Rust's standard `HashMap`\nand `HashSet` types.\n\nThe original C++ version of [SwissTable] can be found [here], and this\n[CppCon talk] gives an overview of how the algorithm works.\n\n[SwissTable]: https://abseil.io/blog/20180927-swisstables\n[here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h\n[CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4","links":{},"attrs":["#![no_std]","#![allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nmust_use_candidate, clippy :: option_if_let_else, clippy :: redundant_else,\nclippy :: manual_map, clippy :: missing_safety_doc, clippy ::\nmissing_errors_doc)]","#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:2047:1670","0:2049:1672","0:2051-0:453:142","0:2052-0:1573:144","0:2053:1683","0:2120:1695"],"is_stripped":false}}},"0:1280":{"id":"0:1280","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4890,0],"end":[4905,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1284:2230","0:1285:953","0:1286:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1789:784":{"id":"0:1789:784","crate_id":0,"name":"into_iter","span":{"filename":"src/set.rs","begin":[1618,4],"end":[1620,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:4812-0:1736:2596":{"id":"a:1:8249:4812-0:1736:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2553-0:1166:2909":{"id":"b:1:2553-0:1166:2909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2684:220-0:1756:4186":{"id":"a:1:2684:220-0:1756:4186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:539:2022":{"id":"0:539:2022","crate_id":0,"name":"shrink_to","span":{"filename":"src/map.rs","begin":[1243,4],"end":[1246,5]},"visibility":"public","docs":"Shrinks the capacity of the map with a lower limit. It will drop\ndown no lower than the supplied limit while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.\n\nThis function does nothing if the current capacity is smaller than the\nsupplied minimum capacity.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<i32, i32> = HashMap::with_capacity(100);\nmap.insert(1, 2);\nmap.insert(3, 4);\nassert!(map.capacity() >= 100);\nmap.shrink_to(10);\nassert!(map.capacity() >= 10);\nmap.shrink_to(0);\nassert!(map.capacity() >= 2);\nmap.shrink_to(10);\nassert!(map.capacity() >= 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["min_capacity",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:1763:4167":{"id":"b:1:2548-0:1763:4167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:983":{"id":"0:983","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4137,0],"end":[4141,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:988:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2248-0:753:2568":{"id":"b:1:2248-0:753:2568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2251-0:674:2605":{"id":"b:1:2251-0:674:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2538-0:1957:2744":{"id":"b:1:2538-0:1957:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1957:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:1973:2747":{"id":"b:1:2248-0:1973:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2049:1672":{"id":"0:2049:1672","crate_id":0,"name":"hash_set","span":{"filename":"src/lib.rs","begin":[102,0],"end":[102,16]},"visibility":"public","docs":"A hash set implemented as a `HashMap` where the value is `()`.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:2050-0:1544:1669"],"is_stripped":false}}},"a:1:2701:228-0:1984:2749":{"id":"a:1:2701:228-0:1984:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1984:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1249:2230":{"id":"0:1249:2230","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4841,4],"end":[4841,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"a:1:2701:228-0:1573:144":{"id":"a:1:2701:228-0:1573:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1224":{"id":"0:1224","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4801,0],"end":[4801,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2701:228-0:843:2985":{"id":"a:1:2701:228-0:843:2985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2701:228-0:779:2632":{"id":"a:1:2701:228-0:779:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2130":{"id":"0:2130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[154,27],"end":[154,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2695:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:528:2017":{"id":"0:528:2017","crate_id":0,"name":"clear","span":{"filename":"src/map.rs","begin":[1048,4],"end":[1050,5]},"visibility":"public","docs":"Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut a = HashMap::new();\na.insert(1, \"a\");\nlet capacity_before_clear = a.capacity();\n\na.clear();\n\n// Map is empty.\nassert!(a.is_empty());\n// But map capacity is equal to old one.\nassert_eq!(a.capacity(), capacity_before_clear);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:1776:4195":{"id":"b:1:2548-0:1776:4195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:838:2585":{"id":"0:838:2585","crate_id":0,"name":"ValuesMut","span":{"filename":"src/map.rs","begin":[2845,0],"end":[2847,1]},"visibility":"public","docs":"A mutable iterator over the values of a `HashMap` in arbitrary order.\nThe iterator element type is `&'a mut V`.\n\nThis `struct` is created by the [`values_mut`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`values_mut`]: struct.HashMap.html#method.values_mut\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<_, _> = [(1, \"One\".to_owned()), (2, \"Two\".into())].into();\n\nlet mut values = map.values_mut();\nvalues.next().map(|v| v.push_str(\" Mississippi\"));\nvalues.next().map(|v| v.push_str(\" Mississippi\"));\n\n// It is fused iterator\nassert_eq!(values.next(), None);\nassert_eq!(values.next(), None);\n\nassert_eq!(map.get(&1).unwrap(), &\"One Mississippi\".to_owned());\nassert_eq!(map.get(&2).unwrap(), &\"Two Mississippi\".to_owned());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:838:2585","a:1:8249:4812-0:838:2585","a:1:8250:4811-0:838:2585","a:1:2701:228-0:838:2585","a:1:2741:4617-0:838:2585","b:1:2251-0:838:2585","b:1:2542-0:838:2585","b:1:2248-0:838:2585","b:1:2538-0:838:2585","b:1:2553-0:838:2585","b:1:7206-0:838:2585","b:1:2548-0:838:2585","b:1:3319-0:838:2585","0:1308","0:1305","0:1301","0:1294"]}}},"0:687:2231":{"id":"0:687:2231","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[2432,0],"end":[2434,1]},"visibility":"public","docs":"An owning iterator over the entries of a `HashMap` in arbitrary order.\nThe iterator element type is `(K, V)`.\n\nThis `struct` is created by the [`into_iter`] method on [`HashMap`]\n(provided by the [`IntoIterator`] trait). See its documentation for more.\nThe map cannot be used after calling that method.\n\n[`into_iter`]: struct.HashMap.html#method.into_iter\n[`HashMap`]: struct.HashMap.html\n[`IntoIterator`]: https://doc.rust-lang.org/core/iter/trait.IntoIterator.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut iter = map.into_iter();\nlet mut vec = vec![iter.next(), iter.next(), iter.next()];\n\n// The `IntoIter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some((1, \"a\")), Some((2, \"b\")), Some((3, \"c\"))]);\n\n// It is fused iterator\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:687:2231","a:1:8249:4812-0:687:2231","a:1:8250:4811-0:687:2231","a:1:2701:228-0:687:2231","a:1:2741:4617-0:687:2231","b:1:2251-0:687:2231","b:1:2542-0:687:2231","b:1:2248-0:687:2231","b:1:2538-0:687:2231","b:1:2553-0:687:2231","b:1:7206-0:687:2231","b:1:2548-0:687:2231","b:1:3319-0:687:2231","0:1261","0:1245","0:1252","0:1257"]}}},"0:1219:2250":{"id":"0:1219:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[4790,4],"end":[4792,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:1763:4167":{"id":"b:1:2538-0:1763:4167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1203:2231":{"id":"0:1203:2231","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[4710,4],"end":[4710,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"b:1:3319-0:674:2605":{"id":"b:1:3319-0:674:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:580:2844":{"id":"0:580:2844","crate_id":0,"name":"get_many_key_value_unchecked_mut","span":{"filename":"src/map.rs","begin":[1715,4],"end":[1724,5]},"visibility":"public","docs":"Attempts to get mutable references to `N` values in the map at once, with immutable\nreferences to the corresponding keys, without validating that the values are unique.\n\nReturns an array of length `N` with the results of each query. `None` will be returned if\nany of the keys are missing.\n\nFor a safe alternative see [`get_many_key_value_mut`](`HashMap::get_many_key_value_mut`).\n\n# Safety\n\nCalling this method with overlapping keys is *[undefined behavior]* even if the resulting\nreferences are not used.\n\n[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut libraries = HashMap::new();\nlibraries.insert(\"Bodleian Library\".to_string(), 1602);\nlibraries.insert(\"Athenæum\".to_string(), 1807);\nlibraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\nlibraries.insert(\"Library of Congress\".to_string(), 1800);\n\nlet got = libraries.get_many_key_value_mut([\n    \"Bodleian Library\",\n    \"Herzogin-Anna-Amalia-Bibliothek\",\n]);\nassert_eq!(\n    got,\n    Some([\n        (&\"Bodleian Library\".to_string(), &mut 1602),\n        (&\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), &mut 1691),\n    ]),\n);\n// Missing keys result in None\nlet got = libraries.get_many_key_value_mut([\n    \"Bodleian Library\",\n    \"Gewandhaus\",\n]);\nassert_eq!(got, None);\n```","links":{"`HashMap::get_many_key_value_mut`":"0:573:2841"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ks",{"array":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}},"len":"N"}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]},"len":"N"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:881:3206":{"id":"b:1:3319-0:881:3206","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:881:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:961:2785":{"id":"0:961:2785","crate_id":0,"name":"get_key_value_mut","span":{"filename":"src/map.rs","begin":[3793,4],"end":[3798,5]},"visibility":"public","docs":"Gets a mutable reference to the key and value in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\nuse std::rc::Rc;\n\nlet key_one = Rc::new(\"a\");\nlet key_two = Rc::new(\"a\");\n\nlet mut map: HashMap<Rc<&str>, u32> = HashMap::new();\nmap.insert(key_one.clone(), 10);\n\nassert_eq!(map[&key_one], 10);\nassert!(Rc::strong_count(&key_one) == 2 && Rc::strong_count(&key_two) == 1);\n\nmatch map.raw_entry_mut().from_key(&key_one) {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(mut o) => {\n        let (inside_key, inside_value) = o.get_key_value_mut();\n        *inside_key = key_two.clone();\n        *inside_value = 100;\n    }\n}\nassert_eq!(map[&key_two], 100);\nassert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1348:3293":{"id":"0:1348:3293","crate_id":0,"name":"and_modify","span":{"filename":"src/map.rs","begin":[5145,4],"end":[5156,5]},"visibility":"public","docs":"Provides in-place mutable access to an occupied entry before any\npotential inserts into the map.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nmap.entry(\"poneyland\")\n   .and_modify(|e| { *e += 1 })\n   .or_insert(42);\nassert_eq!(map[\"poneyland\"], 42);\n\nmap.entry(\"poneyland\")\n   .and_modify(|e| { *e += 1 })\n   .or_insert(42);\nassert_eq!(map[\"poneyland\"], 43);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:2066","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1001":{"id":"0:1001","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4161,0],"end":[4165,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:881:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1006:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1714":{"id":"0:1714","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1385,0],"end":[1416,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"1:2817:4028","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:1718:186","0:1719:364"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2251-0:881:3206":{"id":"b:1:2251-0:881:3206","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:881:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3319-0:1072:2759":{"id":"b:1:3319-0:1072:2759","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:902:3247":{"id":"0:902:3247","crate_id":0,"name":"from_key","span":{"filename":"src/map.rs","begin":[3213,4],"end":[3220,5]},"visibility":"public","docs":"Creates a `RawEntryMut` from the given key.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nlet key = \"a\";\nlet entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_key(&key);\nentry.insert(key, 100);\nassert_eq!(map[&\"a\"], 100);\n```","links":{},"attrs":["#[inline]","#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1384:3340":{"id":"0:1384:3340","crate_id":0,"name":"into_key","span":{"filename":"src/map.rs","begin":[5644,4],"end":[5646,5]},"visibility":"public","docs":"Take ownership of the key.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap};\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nmatch map.entry(\"poneyland\") {\n    Entry::Occupied(_) => panic!(),\n    Entry::Vacant(v) => assert_eq!(v.into_key(), \"poneyland\"),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"K"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:1057:2749":{"id":"b:1:2542-0:1057:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1057:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1681:694":{"id":"0:1681:694","crate_id":0,"name":"from","span":{"filename":"src/set.rs","begin":[1283,4],"end":[1285,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["map",{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"tuple":[]}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1608":{"id":"0:1608","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[434,0],"end":[510,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1611:2539","0:1612:2488"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2538-0:1984:2749":{"id":"b:1:2538-0:1984:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1984:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1367:2074":{"id":"0:1367:2074","crate_id":0,"name":"get","span":{"filename":"src/map.rs","begin":[5324,4],"end":[5326,5]},"visibility":"public","docs":"Gets a reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nmatch map.entry(\"poneyland\") {\n    Entry::Vacant(_) => panic!(),\n    Entry::Occupied(entry) => assert_eq!(entry.get(), &12),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1607:2017":{"id":"0:1607:2017","crate_id":0,"name":"clear","span":{"filename":"src/set.rs","begin":[429,4],"end":[431,5]},"visibility":"public","docs":"Clears the set, removing all values.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut v = HashSet::new();\nv.insert(1);\nv.clear();\nassert!(v.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:4811-0:790:2668":{"id":"a:1:8250:4811-0:790:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2701:228-0:1740:2231":{"id":"a:1:2701:228-0:1740:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:7206-0:1776:4195":{"id":"b:1:7206-0:1776:4195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2538-0:453:142":{"id":"b:1:2538-0:453:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:1573:144":{"id":"b:1:2553-0:1573:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:1756:4186":{"id":"b:1:2248-0:1756:4186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:958:3348":{"id":"0:958:3348","crate_id":0,"name":"into_mut","span":{"filename":"src/map.rs","begin":[3717,4],"end":[3719,5]},"visibility":"public","docs":"Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nlet value: &mut u32;\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => value = o.into_mut(),\n}\n*value += 900;\n\nassert_eq!(map[&\"a\"], 1000);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1455":{"id":"0:1455","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[6452,0],"end":[6531,1]},"visibility":"default","docs":"Inserts all new key-values from the iterator and replaces values with existing\nkeys with new values returned from the iterator.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7211:3750","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1460:3771"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:688:10712":{"id":"4:688:10712","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:889:3001":{"id":"0:889:3001","crate_id":0,"name":"RawEntryBuilder","span":{"filename":"src/map.rs","begin":[3193,0],"end":[3195,1]},"visibility":"public","docs":"A builder for computing where in a [`HashMap`] a key-value pair would be stored.\n\nSee the [`HashMap::raw_entry`] docs for usage examples.\n\n[`HashMap::raw_entry`]: struct.HashMap.html#method.raw_entry\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryBuilder};\nuse core::hash::{BuildHasher, Hash};\n\nlet mut map = HashMap::new();\nmap.extend([(1, 10), (2, 20), (3, 30)]);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nfor k in 0..6 {\n    let hash = compute_hash(map.hasher(), &k);\n    let v = map.get(&k).cloned();\n    let kv = v.as_ref().map(|v| (&k, v));\n\n    println!(\"Key: {} and value: {:?}\", k, v);\n    let builder: RawEntryBuilder<_, _, _> = map.raw_entry();\n    assert_eq!(builder.from_key(&k), kv);\n    assert_eq!(map.raw_entry().from_hash(hash, |q| *q == k), kv);\n    assert_eq!(map.raw_entry().from_key_hashed_nocheck(hash, &k), kv);\n}\n```","links":{"`HashMap`":"0:453:142"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:919","a:1:2684:220-0:889:3001","a:1:8249:4812-0:889:3001","a:1:8250:4811-0:889:3001","a:1:2701:228-0:889:3001","a:1:2741:4617-0:889:3001","b:1:2251-0:889:3001","b:1:2542-0:889:3001","b:1:2248-0:889:3001","b:1:2538-0:889:3001","b:1:2553-0:889:3001","b:1:2548-0:889:3001","b:1:3319-0:889:3001","0:1007"]}}},"b:1:3319-0:1763:4167":{"id":"b:1:3319-0:1763:4167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2538-0:1148:2763":{"id":"b:1:2538-0:1148:2763","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1148:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2538-0:725:2689":{"id":"b:1:2538-0:725:2689","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2538-0:1749:2668":{"id":"b:1:2538-0:1749:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2701:228-0:1973:2747":{"id":"a:1:2701:228-0:1973:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1639:2074":{"id":"0:1639:2074","crate_id":0,"name":"get","span":{"filename":"src/set.rs","begin":[885,4],"end":[894,5]},"visibility":"public","docs":"Returns a reference to the value in the set, if any, that is equal to the given value.\n\nThe value may be any borrowed form of the set's value type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe value type.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert_eq!(set.get(&2), Some(&2));\nassert_eq!(set.get(&4), None);\n```\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1051":{"id":"0:1051","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4324,0],"end":[4331,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1056:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1432:3317":{"id":"0:1432:3317","crate_id":0,"name":"replace_entry_with","span":{"filename":"src/map.rs","begin":[6304,4],"end":[6333,5]},"visibility":"public","docs":"Provides shared access to the key and owned access to the value of\nthe entry and allows to replace or remove it based on the\nvalue of the returned option.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nmap.insert(\"poneyland\".to_string(), 42);\n\nlet entry = match map.entry_ref(\"poneyland\") {\n    EntryRef::Occupied(e) => {\n        e.replace_entry_with(|k, v| {\n            assert_eq!(k, \"poneyland\");\n            assert_eq!(v, 42);\n            Some(v + 1)\n        })\n    }\n    EntryRef::Vacant(_) => panic!(),\n};\n\nmatch entry {\n    EntryRef::Occupied(e) => {\n        assert_eq!(e.key(), \"poneyland\");\n        assert_eq!(e.get(), &43);\n    }\n    EntryRef::Vacant(_) => panic!(),\n}\n\nassert_eq!(map[\"poneyland\"], 43);\n\nlet entry = match map.entry_ref(\"poneyland\") {\n    EntryRef::Occupied(e) => e.replace_entry_with(|_k, _v| None),\n    EntryRef::Vacant(_) => panic!(),\n};\n\nmatch entry {\n    EntryRef::Vacant(e) => {\n        assert_eq!(e.key(), \"poneyland\");\n    }\n    EntryRef::Occupied(_) => panic!(),\n}\n\nassert!(!map.contains_key(\"poneyland\"));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:2066","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}},{"generic":"V"}],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1814:668":{"id":"0:1814:668","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1684,4],"end":[1686,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2248-0:1957:2744":{"id":"b:1:2248-0:1957:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1957:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1719:364":{"id":"0:1719:364","crate_id":0,"name":"bitor","span":{"filename":"src/set.rs","begin":[1413,4],"end":[1415,5]},"visibility":"default","docs":"Returns the union of `self` and `rhs` as a new `HashSet<T, S>`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a | &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 3, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2253:3815":{"id":"1:2253:3815","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1956:2250":{"id":"0:1956:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1984,4],"end":[1986,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1007":{"id":"0:1007","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4167,0],"end":[4171,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:889:3001","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1012:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12099:19491":{"id":"1:12099:19491","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3321:1491":{"id":"1:3321:1491","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39341:11264","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:1744:2632":{"id":"b:1:2251-0:1744:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12113:19498":{"id":"1:12113:19498","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:51699:419","self::pattern":"1:11712:13346"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2248-0:453:142":{"id":"b:1:2248-0:453:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1286:2250":{"id":"0:1286:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[4902,4],"end":[4904,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:541:2757":{"id":"0:541:2757","crate_id":0,"name":"entry_ref","span":{"filename":"src/map.rs","begin":[1304,4],"end":[1323,5]},"visibility":"public","docs":"Gets the given key's corresponding entry by reference in the map for in-place manipulation.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut words: HashMap<String, usize> = HashMap::new();\nlet source = [\"poneyland\", \"horseyland\", \"poneyland\", \"poneyland\"];\nfor (i, &s) in source.iter().enumerate() {\n    let counter = words.entry_ref(s).or_insert(0);\n    *counter += 1;\n}\n\nassert_eq!(words[\"poneyland\"], 3);\nassert_eq!(words[\"horseyland\"], 1);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1605:2667":{"id":"0:1605:2667","crate_id":0,"name":"drain_filter","span":{"filename":"src/set.rs","begin":[403,4],"end":[414,5]},"visibility":"public","docs":"Drains elements which are true under the given predicate,\nand returns an iterator over the removed items.\n\nIn other words, move all elements `e` such that `f(&e)` returns `true` out\ninto another iterator.\n\nWhen the returned DrainedFilter is dropped, any remaining elements that satisfy\nthe predicate are dropped from the set.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<i32> = (0..8).collect();\nlet drained: HashSet<i32> = set.drain_filter(|v| v % 2 == 0).collect();\n\nlet mut evens = drained.into_iter().collect::<Vec<_>>();\nlet mut odds = set.into_iter().collect::<Vec<_>>();\nevens.sort();\nodds.sort();\n\nassert_eq!(evens, vec![0, 2, 4, 6]);\nassert_eq!(odds, vec![1, 3, 5, 7]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2929:2008","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1796:784":{"id":"0:1796:784","crate_id":0,"name":"into_iter","span":{"filename":"src/set.rs","begin":[1648,4],"end":[1652,5]},"visibility":"default","docs":"Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet mut set = HashSet::new();\nset.insert(\"a\".to_string());\nset.insert(\"b\".to_string());\n\n// Not possible to collect to a Vec<String> with a regular `.iter()`.\nlet v: Vec<String> = set.into_iter().collect();\n\n// Will print in an arbitrary order.\nfor x in &v {\n    println!(\"{}\", x);\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:1957:2744":{"id":"b:1:2251-0:1957:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1957:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1223:811":{"id":"0:1223:811","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[4796,4],"end":[4798,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1725:362":{"id":"0:1725:362","crate_id":0,"name":"bitand","span":{"filename":"src/set.rs","begin":[1446,4],"end":[1448,5]},"visibility":"default","docs":"Returns the intersection of `self` and `rhs` as a new `HashSet<T, S>`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: HashSet<_> = vec![2, 3, 4].into_iter().collect();\n\nlet set = &a & &b;\n\nlet mut i = 0;\nlet expected = [2, 3];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2055:1690":{"id":"0:2055:1690","crate_id":0,"name":"equivalent","span":{"filename":"src/lib.rs","begin":[140,4],"end":[140,42]},"visibility":"default","docs":"Checks if this value is equivalent to the given key.\n\nReturns `true` if both values are equivalent, and `false` otherwise.\n\n# Correctness\n\nWhen this function returns `true`, both `self` and `key` must hash to\nthe same value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1656:2892":{"id":"0:1656:2892","crate_id":0,"name":"insert_unique_unchecked","span":{"filename":"src/set.rs","begin":[1136,4],"end":[1138,5]},"visibility":"public","docs":"Insert a value the set without checking if the value already exists in the set.\n\nReturns a reference to the value just inserted.\n\nThis operation is safe if a value does not exist in the set.\n\nHowever, if a value exists in the set already, the behavior is unspecified:\nthis operation may panic, loop forever, or any following operation with the set\nmay panic, loop forever or return arbitrary result.\n\nThat said, this operation (and following operations) are guaranteed to\nnot violate memory safety.\n\nThis operation is faster than regular insert, because it does not perform\nlookup before insertion.\n\nThis operation is useful during initial population of the set.\nFor example, when constructing a set from another set, we know\nthat values are unique.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2701:228-0:2120:1695":{"id":"a:1:2701:228-0:2120:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8249:4812-0:660:2596":{"id":"a:1:8249:4812-0:660:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2248-0:862:3202":{"id":"b:1:2248-0:862:3202","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:517:1562":{"id":"0:517:1562","crate_id":0,"name":"values","span":{"filename":"src/map.rs","begin":[719,4],"end":[721,5]},"visibility":"public","docs":"An iterator visiting all values in arbitrary order.\nThe iterator element type is `&'a V`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\nassert_eq!(map.len(), 3);\nlet mut vec: Vec<i32> = Vec::new();\n\nfor val in map.values() {\n    println!(\"{}\", val);\n    vec.push(*val);\n}\n\n// The `Values` iterator produces values in arbitrary order, so the\n// values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [1, 2, 3]);\n\nassert_eq!(map.len(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:1113:2760":{"id":"b:1:2548-0:1113:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1851":{"id":"0:1851","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1751,0],"end":[1763,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2929:2008","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2922:2229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1856:588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:7206-0:838:2585":{"id":"b:1:7206-0:838:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:774:423":{"id":"0:774:423","crate_id":0,"name":"clone","span":{"filename":"src/map.rs","begin":[2655,4],"end":[2659,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1399:3568":{"id":"0:1399:3568","crate_id":0,"name":"or_insert_with_key","span":{"filename":"src/map.rs","begin":[5807,4],"end":[5819,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting, if empty, the result of the default function.\nThis method allows for generating key-derived values for insertion by providing the default\nfunction an access to the borrower form of the key.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, usize> = HashMap::new();\n\n// nonexistent key\nmap.entry_ref(\"poneyland\").or_insert_with_key(|key| key.chars().count());\nassert_eq!(map[\"poneyland\"], 9);\n\n// existing key\n*map.entry_ref(\"poneyland\").or_insert_with_key(|key| key.chars().count() * 10) *= 2;\nassert_eq!(map[\"poneyland\"], 18);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:2066","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}],"output":{"generic":"V"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:607:2908":{"id":"0:607:2908","crate_id":0,"name":"try_insert","span":{"filename":"src/map.rs","begin":[1887,4],"end":[1896,5]},"visibility":"public","docs":"Tries to insert a key-value pair into the map, and returns\na mutable reference to the value in the entry.\n\n# Errors\n\nIf the map already had this key present, nothing is updated, and\nan error containing the occupied entry and the value is returned.\n\n# Examples\n\nBasic usage:\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::OccupiedError;\n\nlet mut map = HashMap::new();\nassert_eq!(map.try_insert(37, \"a\").unwrap(), &\"a\");\n\nmatch map.try_insert(37, \"b\") {\n    Err(OccupiedError { entry, value }) => {\n        assert_eq!(entry.key(), &37);\n        assert_eq!(entry.get(), &\"a\");\n        assert_eq!(value, \"b\");\n    }\n    _ => panic!()\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}},{"type":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:862:3202":{"id":"0:862:3202","crate_id":0,"name":"RawOccupiedEntryMut","span":{"filename":"src/map.rs","begin":[3083,0],"end":[3087,1]},"visibility":"public","docs":"A view into an occupied entry in a `HashMap`.\nIt is part of the [`RawEntryMut`] enum.\n\n[`RawEntryMut`]: enum.RawEntryMut.html\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut, RawOccupiedEntryMut};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\", 10), (\"b\", 20), (\"c\", 30)]);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet _raw_o: RawOccupiedEntryMut<_, _, _> = map.raw_entry_mut().from_key(&\"a\").insert(\"a\", 100);\nassert_eq!(map.len(), 3);\n\n// Existing key (insert and update)\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(mut view) => {\n        assert_eq!(view.get(), &100);\n        let v = view.get_mut();\n        let new_v = (*v) * 10;\n        *v = new_v;\n        assert_eq!(view.insert(1111), 1000);\n    }\n}\n\nassert_eq!(map[&\"a\"], 1111);\nassert_eq!(map.len(), 3);\n\n// Existing key (take)\nlet hash = compute_hash(map.hasher(), &\"c\");\nmatch map.raw_entry_mut().from_key_hashed_nocheck(hash, &\"c\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"c\", 30));\n    }\n}\nassert_eq!(map.raw_entry().from_key(&\"c\"), None);\nassert_eq!(map.len(), 2);\n\nlet hash = compute_hash(map.hasher(), &\"b\");\nmatch map.raw_entry_mut().from_hash(hash, |q| *q == \"b\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"b\", 20));\n    }\n}\nassert_eq!(map.get(&\"b\"), None);\nassert_eq!(map.len(), 1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:948","a:1:8249:4812-0:862:3202","a:1:8250:4811-0:862:3202","a:1:2741:4617-0:862:3202","b:1:2251-0:862:3202","b:1:2542-0:862:3202","b:1:2248-0:862:3202","b:1:2538-0:862:3202","b:1:2553-0:862:3202","b:1:2548-0:862:3202","b:1:3319-0:862:3202","0:876","0:871","0:995"]}}},"0:1734:186":{"id":"0:1734:186","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1488,4],"end":[1488,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"b:1:3319-0:697:2682":{"id":"b:1:3319-0:697:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1452:697":{"id":"0:1452:697","crate_id":0,"name":"from_iter","span":{"filename":"src/map.rs","begin":[6439,4],"end":[6447,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:838:2585":{"id":"a:1:2684:220-0:838:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1350:3316":{"id":"0:1350:3316","crate_id":0,"name":"and_replace_entry_with","span":{"filename":"src/map.rs","begin":[5213,4],"end":[5221,5]},"visibility":"public","docs":"Provides shared access to the key and owned access to the value of\nan occupied entry and allows to replace or remove it based on the\nvalue of the returned option.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nlet entry = map\n    .entry(\"poneyland\")\n    .and_replace_entry_with(|_k, _v| panic!());\n\nmatch entry {\n    Entry::Vacant(e) => {\n        assert_eq!(e.key(), &\"poneyland\");\n    }\n    Entry::Occupied(_) => panic!(),\n}\n\nmap.insert(\"poneyland\", 42);\n\nlet entry = map\n    .entry(\"poneyland\")\n    .and_replace_entry_with(|k, v| {\n        assert_eq!(k, &\"poneyland\");\n        assert_eq!(v, 42);\n        Some(v + 1)\n    });\n\nmatch entry {\n    Entry::Occupied(e) => {\n        assert_eq!(e.key(), &\"poneyland\");\n        assert_eq!(e.get(), &43);\n    }\n    Entry::Vacant(_) => panic!(),\n}\n\nassert_eq!(map[\"poneyland\"], 43);\n\nlet entry = map\n    .entry(\"poneyland\")\n    .and_replace_entry_with(|_k, _v| None);\n\nmatch entry {\n    Entry::Vacant(e) => assert_eq!(e.key(), &\"poneyland\"),\n    Entry::Occupied(_) => panic!(),\n}\n\nassert!(!map.contains_key(\"poneyland\"));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:2066","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"generic":"V"}],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1447":{"id":"0:1447","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[6432,0],"end":[6448,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2589:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7198:134","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1452:697"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1166:2909":{"id":"0:1166:2909","crate_id":0,"name":"OccupiedError","span":{"filename":"src/map.rs","begin":[4645,0],"end":[4650,1]},"visibility":"public","docs":"The error returned by [`try_insert`](HashMap::try_insert) when the key already exists.\n\nContains the occupied entry, and the value that was not inserted.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, OccupiedError};\n\nlet mut map: HashMap<_, _> = [(\"a\", 10), (\"b\", 20)].into();\n\n// try_insert method returns mutable reference to the value if keys are vacant,\n// but if the map did have key present, nothing is updated, and the provided\n// value is returned inside `Err(_)` variant\nmatch map.try_insert(\"a\", 100) {\n    Err(OccupiedError { mut entry, value }) => {\n        assert_eq!(entry.key(), &\"a\");\n        assert_eq!(value, 100);\n        assert_eq!(entry.insert(100), 10)\n    }\n    _ => unreachable!(),\n}\nassert_eq!(map[&\"a\"], 100);\n```","links":{"HashMap::try_insert":"0:607:2908"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1172:2743","0:1173:2045"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:1166:2909","a:1:8249:4812-0:1166:2909","a:1:8250:4811-0:1166:2909","a:1:2701:228-0:1166:2909","a:1:2741:4617-0:1166:2909","b:1:2251-0:1166:2909","b:1:2542-0:1166:2909","b:1:2248-0:1166:2909","b:1:2538-0:1166:2909","b:1:2553-0:1166:2909","b:1:2548-0:1166:2909","b:1:3319-0:1166:2909","b:4:5644-0:1166:2909","0:1174","0:1180"]}}},"0:1395:1714":{"id":"0:1395:1714","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[5713,4],"end":[5725,5]},"visibility":"public","docs":"Sets the value of the entry, and returns an OccupiedEntryRef.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nlet entry = map.entry_ref(\"horseyland\").insert(37);\n\nassert_eq!(entry.key(), \"horseyland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"generic":"V"}]],"output":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1984:2749":{"id":"0:1984:2749","crate_id":0,"name":"VacantEntry","span":{"filename":"src/set.rs","begin":[2143,0],"end":[2145,1]},"visibility":"public","docs":"A view into a vacant entry in a `HashSet`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet, VacantEntry};\n\nlet mut set = HashSet::<&str>::new();\n\nlet entry_v: VacantEntry<_, _> = match set.entry(\"a\") {\n    Entry::Vacant(view) => view,\n    Entry::Occupied(_) => unreachable!(),\n};\nentry_v.insert();\nassert!(set.contains(\"a\") && set.len() == 1);\n\n// Nonexistent key (insert)\nmatch set.entry(\"b\") {\n    Entry::Vacant(view) => view.insert(),\n    Entry::Occupied(_) => unreachable!(),\n}\nassert!(set.contains(\"b\") && set.len() == 2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:2010","a:1:2684:220-0:1984:2749","a:1:8249:4812-0:1984:2749","a:1:8250:4811-0:1984:2749","a:1:2701:228-0:1984:2749","a:1:2741:4617-0:1984:2749","b:1:2251-0:1984:2749","b:1:2542-0:1984:2749","b:1:2248-0:1984:2749","b:1:2538-0:1984:2749","b:1:2553-0:1984:2749","b:1:2548-0:1984:2749","b:1:3319-0:1984:2749","0:1990"]}}},"b:4:684-0:453:142":{"id":"b:4:684-0:453:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:686:3482","4:687:3907","4:688:10712"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:960:2777":{"id":"0:960:2777","crate_id":0,"name":"get_key_value","span":{"filename":"src/map.rs","begin":[3757,4],"end":[3762,5]},"visibility":"public","docs":"Gets a reference to the key and value in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => assert_eq!(o.get_key_value(), (&\"a\", &100)),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12027:16669":{"id":"1:12027:16669","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9813:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1271:953":{"id":"0:1271:953","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[4870,4],"end":[4876,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2701:228-0:753:2568":{"id":"a:1:2701:228-0:753:2568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1284:2230":{"id":"0:1284:2230","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4891,4],"end":[4891,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}}}},"a:1:2701:228-0:1744:2632":{"id":"a:1:2701:228-0:1744:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2553-0:1776:4195":{"id":"b:1:2553-0:1776:4195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5387:20184":{"id":"4:5387:20184","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12040:19477":{"id":"1:12040:19477","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43611:11494","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:4811-0:687:2231":{"id":"a:1:8250:4811-0:687:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2684:220-0:1744:2632":{"id":"a:1:2684:220-0:1744:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:2696:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1930":{"id":"0:1930","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1932,0],"end":[1941,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1934:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:624:613":{"id":"0:624:613","crate_id":0,"name":"eq","span":{"filename":"src/map.rs","begin":[2195,4],"end":[2202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:1770:4177":{"id":"b:1:2553-0:1770:4177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:5644-0:1166:2909":{"id":"b:4:5644-0:1166:2909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:9147:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5642:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:5646:1455"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2741:4617-0:1736:2596":{"id":"a:1:2741:4617-0:1736:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8249:4812-0:697:2682":{"id":"a:1:8249:4812-0:697:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1618:2509":{"id":"0:1618:2509","crate_id":0,"name":"with_hasher_in","span":{"filename":"src/set.rs","begin":[554,4],"end":[558,5]},"visibility":"public","docs":"Creates a new empty hash set which will use the given hasher to hash\nkeys.\n\nThe hash set is initially created with a capacity of 0, so it will not\nallocate until it is first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`].\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashSet to be useful, see its documentation for details.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut set = HashSet::with_hasher(s);\nset.insert(2);\n```","links":{"`ahash::RandomState`":"5:813:10576","`HashSet`":"0:1573:144"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hasher",{"generic":"S"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2126:423":{"id":"0:2126:423","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[154,9],"end":[154,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:2207":{"id":"0:38:2207","crate_id":0,"name":"deallocate","span":{"filename":"src/raw/alloc.rs","begin":[39,8],"end":[39,70]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ptr",{"resolved_path":{"name":"NonNull","id":"1:1821:1844","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}}],["layout",{"resolved_path":{"name":"Layout","id":"1:44347:161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":false}}},"0:1857":{"id":"0:1857","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1765,0],"end":[1782,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2929:2008","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1861:2230","0:1862:953","0:1864:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:686:3482":{"id":"4:686:3482","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:8249:4812-0:1057:2749":{"id":"a:1:8249:4812-0:1057:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1057:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:529:2681":{"id":"0:529:2681","crate_id":0,"name":"into_keys","span":{"filename":"src/map.rs","begin":[1074,4],"end":[1078,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the keys in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `K`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\n\nlet mut vec: Vec<&str> = map.into_keys().collect();\n\n// The `IntoKeys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\"]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:881:3206":{"id":"b:1:2538-0:881:3206","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:881:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1469:3771":{"id":"0:1469:3771","crate_id":0,"name":"extend","span":{"filename":"src/map.rs","begin":[6581,4],"end":[6583,5]},"visibility":"default","docs":"Inserts all new key-values from the iterator to existing `HashMap<K, V, S, A>`.\nReplace values with existing keys with new values returned from the iterator.\nThe keys and values must implement [`Copy`] trait.\n\n[`Copy`]: https://doc.rust-lang.org/core/marker/trait.Copy.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, 100);\n\nlet arr = [(1, 1), (2, 2)];\nlet some_iter = arr.iter().map(|(k, v)| (k, v));\nmap.extend(some_iter);\n// Replace values with existing keys with new values returned from the iterator.\n// So that the map.get(&1) doesn't return Some(&100).\nassert_eq!(map.get(&1), Some(&1));\n\nlet some_vec: Vec<_> = vec![(3, 3), (4, 4)];\nmap.extend(some_vec.iter().map(|(k, v)| (k, v)));\n\nlet some_arr = [(5, 5), (6, 6)];\nmap.extend(some_arr.iter().map(|(k, v)| (k, v)));\n\n// You can also extend from another HashMap\nlet mut new_map = HashMap::new();\nnew_map.extend(&map);\nassert_eq!(new_map, map);\n\nlet mut vec: Vec<_> = new_map.into_iter().collect();\n// The `IntoIter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12105:19494":{"id":"1:12105:19494","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1213":{"id":"0:1213","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4775,0],"end":[4793,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1217:2230","0:1218:953","0:1219:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1763:4167":{"id":"0:1763:4167","crate_id":0,"name":"Difference","span":{"filename":"src/set.rs","begin":[1584,0],"end":[1589,1]},"visibility":"public","docs":"A lazy iterator producing elements in the difference of `HashSet`s.\n\nThis `struct` is created by the [`difference`] method on [`HashSet`].\nSee its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`difference`]: struct.HashSet.html#method.difference","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:1763:4167","a:1:8249:4812-0:1763:4167","a:1:8250:4811-0:1763:4167","a:1:2701:228-0:1763:4167","a:1:2741:4617-0:1763:4167","b:1:2251-0:1763:4167","b:1:2542-0:1763:4167","b:1:2248-0:1763:4167","b:1:2538-0:1763:4167","b:1:2553-0:1763:4167","b:1:7206-0:1763:4167","b:1:2548-0:1763:4167","b:1:3319-0:1763:4167","b:4:684-0:1763:4167","0:1904","0:1896","0:1908","0:1891"]}}},"1:12128:19503":{"id":"1:12128:19503","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11673:127","`FromStr`":"1:11672:13169"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41538:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11672:13169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11672:13169","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1990":{"id":"0:1990","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2147,0],"end":[2151,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1984:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1994:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5402:20189":{"id":"4:5402:20189","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12134:19508"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1724:186":{"id":"0:1724:186","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1424,4],"end":[1424,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:1881:2250":{"id":"0:1881:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1818,4],"end":[1821,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:4812-0:766:2578":{"id":"a:1:8249:4812-0:766:2578","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:0:2056-0:1573:144":{"id":"b:0:2056-0:1573:144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,0],"end":[151,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2059:1690"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"Q"}}}},"1:12131:19505":{"id":"1:12131:19505","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39552:14472","Self::is_ascii":"1:12130:19504"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39552:14472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2002:2074":{"id":"0:2002:2074","crate_id":0,"name":"get","span":{"filename":"src/set.rs","begin":[2222,4],"end":[2227,5]},"visibility":"public","docs":"Returns a reference to this entry's value.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<&str> = HashSet::new();\nset.entry(\"poneyland\").or_insert();\n// existing key\nassert_eq!(set.entry(\"poneyland\").get(), &\"poneyland\");\n// nonexistent key\nassert_eq!(set.entry(\"horseland\").get(), &\"horseland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:753:2568":{"id":"b:1:2538-0:753:2568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3319-0:1057:2749":{"id":"b:1:3319-0:1057:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1057:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8249:4812-0:1166:2909":{"id":"a:1:8249:4812-0:1166:2909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:12125:19502":{"id":"1:12125:19502","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:51699:419","self::pattern":"1:11712:13346"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:13352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:674:2605":{"id":"0:674:2605","crate_id":0,"name":"IterMut","span":{"filename":"src/map.rs","begin":[2380,0],"end":[2384,1]},"visibility":"public","docs":"A mutable iterator over the entries of a `HashMap` in arbitrary order.\nThe iterator element type is `(&'a K, &'a mut V)`.\n\nThis `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`iter_mut`]: struct.HashMap.html#method.iter_mut\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<_, _> = [(1, \"One\".to_owned()), (2, \"Two\".into())].into();\n\nlet mut iter = map.iter_mut();\niter.next().map(|(_, v)| v.push_str(\" Mississippi\"));\niter.next().map(|(_, v)| v.push_str(\" Mississippi\"));\n\n// It is fused iterator\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), None);\n\nassert_eq!(map.get(&1).unwrap(), &\"One Mississippi\".to_owned());\nassert_eq!(map.get(&2).unwrap(), &\"Two Mississippi\".to_owned());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:8249:4812-0:674:2605","a:1:8250:4811-0:674:2605","a:1:2701:228-0:674:2605","a:1:2741:4617-0:674:2605","b:1:2251-0:674:2605","b:1:2542-0:674:2605","b:1:2248-0:674:2605","b:1:2538-0:674:2605","b:1:2553-0:674:2605","b:1:7206-0:674:2605","b:1:2548-0:674:2605","b:1:3319-0:674:2605","0:1241","0:680","0:1234","0:1238","0:1227"]}}},"0:452:2341":{"id":"0:452:2341","crate_id":0,"name":"DefaultHashBuilder","span":{"filename":"src/map.rs","begin":[13,0],"end":[13,77]},"visibility":"public","docs":"Default hasher for `HashMap`.","links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"core::hash::BuildHasherDefault","id":"1:9410:2342","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ahash::AHasher","id":"5:790:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:1245":{"id":"0:1245","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4840,0],"end":[4851,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1249:2230","0:1250:953","0:1251:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2701:228-0:838:2585":{"id":"a:1:2701:228-0:838:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2741:4617-0:1166:2909":{"id":"a:1:2741:4617-0:1166:2909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2548-0:660:2596":{"id":"b:1:2548-0:660:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2553-0:881:3206":{"id":"b:1:2553-0:881:3206","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:881:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1196":{"id":"0:1196","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4708,0],"end":[4743,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:1202:2230","0:1203:2231","0:1204:784"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2542-0:1749:2668":{"id":"b:1:2542-0:1749:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2701:228-0:1763:4167":{"id":"a:1:2701:228-0:1763:4167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2248-0:790:2668":{"id":"b:1:2248-0:790:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1843":{"id":"0:1843","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1742,0],"end":[1742,66]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:7206-0:1763:4167":{"id":"b:1:7206-0:1763:4167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:8250:4811-0:1973:2747":{"id":"a:1:8250:4811-0:1973:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2538-0:779:2632":{"id":"b:1:2538-0:779:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1387":{"id":"0:1387","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[5699,0],"end":[5945,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1395:1714","0:1396:3272","0:1397:3283","0:1399:3568","0:1401:1691","0:1402:3293","0:1404:3316"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2701:228-0:1148:2763":{"id":"a:1:2701:228-0:1148:2763","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1148:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1776:4195":{"id":"0:1776:4195","crate_id":0,"name":"Union","span":{"filename":"src/set.rs","begin":[1609,0],"end":[1611,1]},"visibility":"public","docs":"A lazy iterator producing elements in the union of `HashSet`s.\n\nThis `struct` is created by the [`union`] method on [`HashSet`].\nSee its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`union`]: struct.HashSet.html#method.union","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:1776:4195","a:1:8249:4812-0:1776:4195","a:1:8250:4811-0:1776:4195","a:1:2701:228-0:1776:4195","a:1:2741:4617-0:1776:4195","b:1:2251-0:1776:4195","b:1:2542-0:1776:4195","b:1:2248-0:1776:4195","b:1:2538-0:1776:4195","b:1:2553-0:1776:4195","b:1:7206-0:1776:4195","b:1:2548-0:1776:4195","b:1:3319-0:1776:4195","b:4:684-0:1776:4195","0:1940","0:1935","0:1944","0:1949"]}}},"0:2053:1683":{"id":"0:2053:1683","crate_id":0,"name":"Equivalent","span":{"filename":"src/lib.rs","begin":[131,0],"end":[141,1]},"visibility":"public","docs":"Key equivalence trait.\n\nThis trait defines the function used to compare the input value with the\nmap keys (or set values) during a lookup operation such as [`HashMap::get`]\nor [`HashSet::contains`].\nIt is provided with a blanket implementation based on the\n[`Borrow`](core::borrow::Borrow) trait.\n\n# Correctness\n\nEquivalent values must hash to the same value.","links":{"core::borrow::Borrow":"1:2242:97","`HashMap::get`":"0:545:2074","`HashSet::contains`":"0:1637:3865"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:2055:1690"],"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":["0:2056"]}}},"a:1:2701:228-0:453:142":{"id":"a:1:2701:228-0:453:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1611:2539":{"id":"0:1611:2539","crate_id":0,"name":"with_hasher","span":{"filename":"src/set.rs","begin":[467,4],"end":[471,5]},"visibility":"public","docs":"Creates a new empty hash set which will use the given hasher to hash\nkeys.\n\nThe hash set is initially created with a capacity of 0, so it will not\nallocate until it is first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`].\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashSet to be useful, see its documentation for details.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut set = HashSet::with_hasher(s);\nset.insert(2);\n```","links":{"`ahash::RandomState`":"5:813:10576","`HashSet`":"0:1573:144"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hasher",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:730":{"id":"0:730","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2542,0],"end":[2553,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["partition_in_place","min_by_key","flatten","filter","peekable","last","skip","gt","is_sorted_by","size_hint","sum","find_map","rev","is_partitioned","max_by","for_each","fuse","skip_while","advance_by","is_sorted_by_key","product","try_find","ge","try_fold","max_by_key","inspect","take_while","take","nth","collect","max","chain","__iterator_get_unchecked","cmp_by","lt","rposition","try_for_each","try_collect","step_by","map_while","intersperse","cmp","enumerate","eq","position","find","partial_cmp_by","unzip","fold","collect_into","count","scan","by_ref","intersperse_with","min","all","ne","eq_by","partial_cmp","cycle","reduce","partition","min_by","flat_map","filter_map","any","next_chunk","le","zip","map","copied","is_sorted","cloned","array_chunks","try_reduce"],"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:725:2689","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:734:2230","0:735:953","0:737:2250"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12046:19479":{"id":"1:12046:19479","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:51699:419","self::pattern":"1:11712:13346"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:843:2985":{"id":"b:1:2251-0:843:2985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:493:1965":{"id":"0:493:1965","crate_id":0,"name":"with_capacity","span":{"filename":"src/map.rs","begin":[344,4],"end":[346,5]},"visibility":"public","docs":"Creates an empty `HashMap` with the specified capacity.\n\nThe hash map will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash map will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`], for example with\n[`with_capacity_and_hasher`](HashMap::with_capacity_and_hasher) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet mut map: HashMap<&str, i32> = HashMap::with_capacity(10);\nassert_eq!(map.len(), 0);\nassert!(map.capacity() >= 10);\n```","links":{"`ahash::RandomState`":"5:813:10576","HashMap::with_capacity_and_hasher":"0:505:2488","`HashMap`":"0:453:142"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:697:2682":{"id":"b:1:2553-0:697:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3319-0:862:3202":{"id":"b:1:3319-0:862:3202","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1347:1691":{"id":"0:1347:1691","crate_id":0,"name":"key","span":{"filename":"src/map.rs","begin":[5117,4],"end":[5122,5]},"visibility":"public","docs":"Returns a reference to this entry's key.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nmap.entry(\"poneyland\").or_insert(3);\n// existing key\nassert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");\n// nonexistent key\nassert_eq!(map.entry(\"horseland\").key(), &\"horseland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:1957:2744":{"id":"b:1:3319-0:1957:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1957:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12110:19497":{"id":"1:12110:19497","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:51699:419","self::pattern":"1:11712:13346"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1305":{"id":"0:1305","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4936,0],"end":[4936,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:821":{"id":"0:821","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2792,0],"end":[2792,94]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2929:2008","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2538-0:1057:2749":{"id":"b:1:2538-0:1057:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1057:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2048-0:427:859":{"id":"0:2048-0:427:859","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[87,4],"end":[87,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::map","name":"map","id":"0:427:859","glob":true}}},"0:1299:953":{"id":"0:1299:953","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[4918,4],"end":[4924,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1923:2230":{"id":"0:1923:2230","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1912,4],"end":[1912,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:1873:423":{"id":"0:1873:423","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[1791,4],"end":[1796,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:967:3317":{"id":"0:967:3317","crate_id":0,"name":"replace_entry_with","span":{"filename":"src/map.rs","begin":[3968,4],"end":[3988,5]},"visibility":"public","docs":"Provides shared access to the key and owned access to the value of\nthe entry and allows to replace or remove it based on the\nvalue of the returned option.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nlet raw_entry = match map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => o.replace_entry_with(|k, v| {\n        assert_eq!(k, &\"a\");\n        assert_eq!(v, 100);\n        Some(v + 900)\n    }),\n};\nlet raw_entry = match raw_entry {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => o.replace_entry_with(|k, v| {\n        assert_eq!(k, &\"a\");\n        assert_eq!(v, 1000);\n        None\n    }),\n};\nmatch raw_entry {\n    RawEntryMut::Vacant(_) => { },\n    RawEntryMut::Occupied(_) => panic!(),\n};\nassert_eq!(map.get(&\"a\"), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:2066","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"generic":"V"}],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:1166:2909":{"id":"a:1:2684:220-0:1166:2909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12075:19484":{"id":"1:12075:19484","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:51699:419","self::pattern":"1:11712:13346","str::rsplitn":"1:12078:19485"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43461:11486","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:1984:2749":{"id":"a:1:2684:220-0:1984:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1984:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2684:220-0:697:2682":{"id":"a:1:2684:220-0:697:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2553-0:1113:2760":{"id":"b:1:2553-0:1113:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1865":{"id":"0:1865","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1784,0],"end":[1787,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2929:2008","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:531":{"id":"0:531","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1109,0],"end":[1972,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:536:2032","0:537:2037","0:538:2726","0:539:2022","0:540:2743","0:541:2757","0:545:2074","0:547:2777","0:551:2785","0:553:2790","0:555:2076","0:559:2083","0:566:2091","0:573:2841","0:580:2844","0:605:1714","0:606:2892","0:607:2908","0:608:2011","0:610:2013"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:4:684-0:766:2578":{"id":"b:4:684-0:766:2578","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["4:686:3482","4:687:3907","4:688:10712"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2542-0:850:3197":{"id":"b:1:2542-0:850:3197","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2542-0:1031:2747":{"id":"b:1:2542-0:1031:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2251-0:1740:2231":{"id":"b:1:2251-0:1740:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12137:13214":{"id":"1:12137:13214","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4536:13214"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43665:11394","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1650:4250":{"id":"0:1650:4250","crate_id":0,"name":"is_disjoint","span":{"filename":"src/set.rs","begin":[1044,4],"end":[1046,5]},"visibility":"public","docs":"Returns `true` if `self` has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet mut b = HashSet::new();\n\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(4);\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(1);\nassert_eq!(a.is_disjoint(&b), false);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1366:2013":{"id":"0:1366:2013","crate_id":0,"name":"remove_entry","span":{"filename":"src/map.rs","begin":[5303,4],"end":[5305,5]},"visibility":"public","docs":"Take the ownership of the key and value from the map.\nKeeps the allocated memory for reuse.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n// The map is empty\nassert!(map.is_empty() && map.capacity() == 0);\n\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    // We delete the entry from the map.\n    assert_eq!(o.remove_entry(), (\"poneyland\", 12));\n}\n\nassert_eq!(map.contains_key(\"poneyland\"), false);\n// Now map hold none elements\nassert!(map.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"K"},{"generic":"V"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:669:423":{"id":"0:669:423","crate_id":0,"name":"clone","span":{"filename":"src/map.rs","begin":[2339,4],"end":[2344,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1839":{"id":"0:1839","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1736,0],"end":[1741,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7263:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1842:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1205":{"id":"0:1205","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4745,0],"end":[4773,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1210:2230","0:1211:2231","0:1212:784"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:912:3251":{"id":"0:912:3251","crate_id":0,"name":"from_hash","span":{"filename":"src/map.rs","begin":[3279,4],"end":[3284,5]},"visibility":"public","docs":"Creates a `RawEntryMut` from the given hash and matching function.\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nlet key = \"a\";\nlet hash = compute_hash(map.hasher(), &key);\nlet entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(hash, |k| k == &key);\nentry.insert(key, 100);\nassert_eq!(map[&\"a\"], 100);\n```","links":{},"attrs":["#[inline]","#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hash",{"primitive":"u64"}],["is_match",{"generic":"F"}]],"output":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2929:2008","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"K"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'b","kind":{"lifetime":{"outlives":[]}}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1908":{"id":"0:1908","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1886,0],"end":[1895,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1912:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:977:1714":{"id":"0:977:1714","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[4010,4],"end":[4017,5]},"visibility":"public","docs":"Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"c\") {\n    RawEntryMut::Occupied(_) => panic!(),\n    RawEntryMut::Vacant(v) => assert_eq!(v.insert(\"c\", 300), (&mut \"c\", &mut 300)),\n}\n\nassert_eq!(map[&\"c\"], 300);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:4812-0:1573:144":{"id":"a:1:8249:4812-0:1573:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2125":{"id":"0:2125","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[154,9],"end":[154,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2126:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2542-0:862:3202":{"id":"b:1:2542-0:862:3202","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:862:3202","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:1776:4195":{"id":"b:1:2248-0:1776:4195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1427:3348":{"id":"0:1427:3348","crate_id":0,"name":"into_mut","span":{"filename":"src/map.rs","begin":[6111,4],"end":[6113,5]},"visibility":"public","docs":"Converts the OccupiedEntryRef into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself.\n\nIf you need multiple references to the `OccupiedEntryRef`, see [`get_mut`].\n\n[`get_mut`]: #method.get_mut\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nmap.entry_ref(\"poneyland\").or_insert(12);\n\nlet value: &mut u32;\nmatch map.entry_ref(\"poneyland\") {\n    EntryRef::Occupied(entry) => value = entry.into_mut(),\n    EntryRef::Vacant(_) => panic!(),\n}\n*value += 10;\n\nassert_eq!(map[\"poneyland\"], 22);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:4811-0:660:2596":{"id":"a:1:8250:4811-0:660:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1805:2250":{"id":"0:1805:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1671,4],"end":[1673,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2248-0:2120:1695":{"id":"b:1:2248-0:2120:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12106:19495":{"id":"1:12106:19495","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2094:1852":{"id":"0:2094:1852","crate_id":0,"name":"Global","span":{"filename":"src/raw/alloc.rs","begin":[43,4],"end":[43,22]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}}},"0:1926":{"id":"0:1926","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1924,0],"end":[1930,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2741:4617-0:1573:144":{"id":"a:1:2741:4617-0:1573:144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2684:220-0:1072:2759":{"id":"a:1:2684:220-0:1072:2759","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:737:2250":{"id":"0:737:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[2550,4],"end":[2552,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1838:2250":{"id":"0:1838:2250","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1732,4],"end":[1734,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:850:3197":{"id":"b:1:2548-0:850:3197","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1601:2125":{"id":"0:1601:2125","crate_id":0,"name":"drain","span":{"filename":"src/set.rs","begin":[350,4],"end":[354,5]},"visibility":"public","docs":"Clears the set, returning all elements in an iterator.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert!(!set.is_empty());\n\n// print 1, 2, 3 in an arbitrary order\nfor i in set.drain() {\n    println!(\"{}\", i);\n}\n\nassert!(set.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:632":{"id":"0:632","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2214,0],"end":[2223,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:637:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:919":{"id":"0:919","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3305,0],"end":[3396,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:889:3001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:925:3247","0:927:3248","0:932:3251"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12133:19507":{"id":"1:12133:19507","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:453:142":{"id":"b:1:2553-0:453:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2251-0:889:3001":{"id":"b:1:2251-0:889:3001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:889:3001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1257":{"id":"0:1257","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4858,0],"end":[4858,71]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1973:2747":{"id":"0:1973:2747","crate_id":0,"name":"OccupiedEntry","span":{"filename":"src/set.rs","begin":[2105,0],"end":[2107,1]},"visibility":"public","docs":"A view into an occupied entry in a `HashSet`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet, OccupiedEntry};\n\nlet mut set = HashSet::new();\nset.extend([\"a\", \"b\", \"c\"]);\n\nlet _entry_o: OccupiedEntry<_, _> = set.entry(\"a\").insert();\nassert_eq!(set.len(), 3);\n\n// Existing key\nmatch set.entry(\"a\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(view) => {\n        assert_eq!(view.get(), &\"a\");\n    }\n}\n\nassert_eq!(set.len(), 3);\n\n// Existing key (take)\nmatch set.entry(\"c\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(view) => {\n        assert_eq!(view.remove(), \"c\");\n    }\n}\nassert_eq!(set.get(&\"c\"), None);\nassert_eq!(set.len(), 2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:2003","a:1:2684:220-0:1973:2747","a:1:8249:4812-0:1973:2747","a:1:8250:4811-0:1973:2747","a:1:2701:228-0:1973:2747","a:1:2741:4617-0:1973:2747","b:1:2251-0:1973:2747","b:1:2542-0:1973:2747","b:1:2248-0:1973:2747","b:1:2538-0:1973:2747","b:1:2553-0:1973:2747","b:1:2548-0:1973:2747","b:1:3319-0:1973:2747","0:1979"]}}},"a:1:2741:4617-0:1984:2749":{"id":"a:1:2741:4617-0:1984:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1984:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8250:4811-0:1957:2744":{"id":"a:1:8250:4811-0:1957:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1957:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:753:2568":{"id":"0:753:2568","crate_id":0,"name":"Keys","span":{"filename":"src/map.rs","begin":[2600,0],"end":[2602,1]},"visibility":"public","docs":"An iterator over the keys of a `HashMap` in arbitrary order.\nThe iterator element type is `&'a K`.\n\nThis `struct` is created by the [`keys`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`keys`]: struct.HashMap.html#method.keys\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut keys = map.keys();\nlet mut vec = vec![keys.next(), keys.next(), keys.next()];\n\n// The `Keys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some(&1), Some(&2), Some(&3)]);\n\n// It is fused iterator\nassert_eq!(keys.next(), None);\nassert_eq!(keys.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:753:2568","a:1:8249:4812-0:753:2568","a:1:8250:4811-0:753:2568","a:1:2701:228-0:753:2568","a:1:2741:4617-0:753:2568","b:1:2251-0:753:2568","b:1:2542-0:753:2568","b:1:2248-0:753:2568","b:1:2538-0:753:2568","b:1:2553-0:753:2568","b:1:7206-0:753:2568","b:1:2548-0:753:2568","b:1:3319-0:753:2568","b:4:684-0:753:2568","0:762","0:1277","0:1266","0:1273","0:758"]}}},"1:12066:19481":{"id":"1:12066:19481","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11712:13346","`DoubleEndedIterator`":"1:7240:121","prim@char":"1:51699:419","str::split":"1:12060:2242"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43375:11137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11717:12025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11732:13352","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:687:2231":{"id":"b:1:2538-0:687:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1414:3588":{"id":"0:1414:3588","crate_id":0,"name":"or_default","span":{"filename":"src/map.rs","begin":[5968,4],"end":[5977,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the default value if empty,\nand returns a mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, Option<u32>> = HashMap::new();\n\n// nonexistent key\nmap.entry_ref(\"poneyland\").or_default();\nassert_eq!(map[\"poneyland\"], None);\n\nmap.insert(\"horseland\".to_string(), Some(3));\n\n// existing key\nassert_eq!(map.entry_ref(\"horseland\").or_default(), &mut Some(3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:7206-0:687:2231":{"id":"b:1:7206-0:687:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1244:668":{"id":"0:1244:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4835,4],"end":[4837,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1287":{"id":"0:1287","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4906,0],"end":[4911,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:7263:2284","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1290:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1588":{"id":"0:1588","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[197,0],"end":[258,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"DefaultHashBuilder","id":"0:452:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1591:1713","0:1592:1966"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2553-0:674:2605":{"id":"b:1:2553-0:674:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2741:4617-0:766:2578":{"id":"a:1:2741:4617-0:766:2578","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:771":{"id":"0:771","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2653,0],"end":[2660,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:774:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2741:4617-0:790:2668":{"id":"a:1:2741:4617-0:790:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8249:4812-0:838:2585":{"id":"a:1:8249:4812-0:838:2585","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:838:2585","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2248-0:881:3206":{"id":"b:1:2248-0:881:3206","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:881:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1311:668":{"id":"0:1311:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4939,4],"end":[4943,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1270:2230":{"id":"0:1270:2230","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4867,4],"end":[4867,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}}}}},"a:1:2684:220-0:1740:2231":{"id":"a:1:2684:220-0:1740:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1740:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2741:4617-0:674:2605":{"id":"a:1:2741:4617-0:674:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2548-0:1973:2747":{"id":"b:1:2548-0:1973:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2542-0:1013:2744":{"id":"b:1:2542-0:1013:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1740:2231":{"id":"0:1740:2231","crate_id":0,"name":"IntoIter","span":{"filename":"src/set.rs","begin":[1533,0],"end":[1535,1]},"visibility":"public","docs":"An owning iterator over the items of a `HashSet`.\n\nThis `struct` is created by the [`into_iter`] method on [`HashSet`]\n(provided by the `IntoIterator` trait). See its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`into_iter`]: struct.HashSet.html#method.into_iter","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2684:220-0:1740:2231","a:1:8249:4812-0:1740:2231","a:1:8250:4811-0:1740:2231","a:1:2701:228-0:1740:2231","a:1:2741:4617-0:1740:2231","b:1:2251-0:1740:2231","b:1:2542-0:1740:2231","b:1:2248-0:1740:2231","b:1:2538-0:1740:2231","b:1:2553-0:1740:2231","b:1:7206-0:1740:2231","b:1:2548-0:1740:2231","b:1:3319-0:1740:2231","0:1821","0:1815","0:1828","0:1825"]}}},"1:12022:2095":{"id":"1:12022:2095","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:51716:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:492:939":{"id":"0:492:939","crate_id":0,"name":"new","span":{"filename":"src/map.rs","begin":[314,4],"end":[316,5]},"visibility":"public","docs":"Creates an empty `HashMap`.\n\nThe hash map is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`], for example with\n[`with_hasher`](HashMap::with_hasher) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet mut map: HashMap<&str, i32> = HashMap::new();\nassert_eq!(map.len(), 0);\nassert_eq!(map.capacity(), 0);\n```","links":{"HashMap::with_hasher":"0:504:2539","`ahash::RandomState`":"5:813:10576","`HashMap`":"0:453:142"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1277":{"id":"0:1277","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4888,0],"end":[4888,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7588:1839","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1193:2230":{"id":"0:1193:2230","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4677,4],"end":[4677,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}},"b:1:2542-0:843:2985":{"id":"b:1:2542-0:843:2985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:7206-0:697:2682":{"id":"b:1:7206-0:697:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:2684:220-0:1013:2744":{"id":"a:1:2684:220-0:1013:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8250:4811-0:2120:1695":{"id":"a:1:8250:4811-0:2120:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2542-0:674:2605":{"id":"b:1:2542-0:674:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2251-0:2120:1695":{"id":"b:1:2251-0:2120:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2248-0:674:2605":{"id":"b:1:2248-0:674:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:7208:2230":{"id":"1:7208:2230","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:941:3272":{"id":"0:941:3272","crate_id":0,"name":"or_insert","span":{"filename":"src/map.rs","begin":[3443,4],"end":[3452,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the default if empty, and returns\nmutable references to the key and value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nmap.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 3);\nassert_eq!(map[\"poneyland\"], 3);\n\n*map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 10).1 *= 2;\nassert_eq!(map[\"poneyland\"], 6);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default_key",{"generic":"K"}],["default_val",{"generic":"V"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1343:3283":{"id":"0:1343:3283","crate_id":0,"name":"or_insert_with","span":{"filename":"src/map.rs","begin":[5054,4],"end":[5063,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\n// nonexistent key\nmap.entry(\"poneyland\").or_insert_with(|| 3);\nassert_eq!(map[\"poneyland\"], 3);\n\n// existing key\n*map.entry(\"poneyland\").or_insert_with(|| 10) *= 2;\nassert_eq!(map[\"poneyland\"], 6);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2932:2066","args":{"parenthesized":{"inputs":[],"output":{"generic":"V"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5399:20187":{"id":"4:5399:20187","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:280:10982","`String`":"4:7255:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:280:10982","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"4:7004:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:4812-0:790:2668":{"id":"a:1:8249:4812-0:790:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:790:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:2541:3485":{"id":"1:2541:3485","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2515:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:843:2985":{"id":"0:843:2985","crate_id":0,"name":"RawEntryBuilderMut","span":{"filename":"src/map.rs","begin":[2904,0],"end":[2906,1]},"visibility":"public","docs":"A builder for computing where in a [`HashMap`] a key-value pair would be stored.\n\nSee the [`HashMap::raw_entry_mut`] docs for usage examples.\n\n[`HashMap::raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut\n\n# Examples\n\n```\nuse hashbrown::hash_map::{RawEntryBuilderMut, RawEntryMut::Vacant, RawEntryMut::Occupied};\nuse hashbrown::HashMap;\nuse core::hash::{BuildHasher, Hash};\n\nlet mut map = HashMap::new();\nmap.extend([(1, 11), (2, 12), (3, 13), (4, 14), (5, 15), (6, 16)]);\nassert_eq!(map.len(), 6);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet builder: RawEntryBuilderMut<_, _, _> = map.raw_entry_mut();\n\n// Existing key\nmatch builder.from_key(&6) {\n    Vacant(_) => unreachable!(),\n    Occupied(view) => assert_eq!(view.get(), &16),\n}\n\nfor key in 0..12 {\n    let hash = compute_hash(map.hasher(), &key);\n    let value = map.get(&key).cloned();\n    let key_value = value.as_ref().map(|v| (&key, v));\n\n    println!(\"Key: {} and value: {:?}\", key, value);\n\n    match map.raw_entry_mut().from_key(&key) {\n        Occupied(mut o) => assert_eq!(Some(o.get_key_value()), key_value),\n        Vacant(_) => assert_eq!(value, None),\n    }\n    match map.raw_entry_mut().from_key_hashed_nocheck(hash, &key) {\n        Occupied(mut o) => assert_eq!(Some(o.get_key_value()), key_value),\n        Vacant(_) => assert_eq!(value, None),\n    }\n    match map.raw_entry_mut().from_hash(hash, |q| *q == key) {\n        Occupied(mut o) => assert_eq!(Some(o.get_key_value()), key_value),\n        Vacant(_) => assert_eq!(value, None),\n    }\n}\n\nassert_eq!(map.len(), 6);\n```","links":{"`HashMap`":"0:453:142"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:896","0:906","a:1:2684:220-0:843:2985","a:1:8249:4812-0:843:2985","a:1:8250:4811-0:843:2985","a:1:2701:228-0:843:2985","a:1:2741:4617-0:843:2985","b:1:2251-0:843:2985","b:1:2542-0:843:2985","b:1:2248-0:843:2985","b:1:2538-0:843:2985","b:1:2553-0:843:2985","b:1:2548-0:843:2985","b:1:3319-0:843:2985","0:983"]}}},"b:1:2251-0:687:2231":{"id":"b:1:2251-0:687:2231","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:687:2231","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1401:1691":{"id":"0:1401:1691","crate_id":0,"name":"key","span":{"filename":"src/map.rs","begin":[5836,4],"end":[5844,5]},"visibility":"public","docs":"Returns a reference to this entry's key.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nmap.entry_ref(\"poneyland\").or_insert(3);\n// existing key\nassert_eq!(map.entry_ref(\"poneyland\").key(), \"poneyland\");\n// nonexistent key\nassert_eq!(map.entry_ref(\"horseland\").key(), \"horseland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:4617-0:1113:2760":{"id":"a:1:2741:4617-0:1113:2760","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1113:2760","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1718:186":{"id":"0:1718:186","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1391,4],"end":[1391,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"b:1:2553-0:1013:2744":{"id":"b:1:2553-0:1013:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1578":{"id":"0:1578","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[120,0],"end":[130,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1582:423","0:1583:425"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1797":{"id":"0:1797","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1655,0],"end":[1662,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["0:1799:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:4:684-0:1763:4167":{"id":"b:4:684-0:1763:4167","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:680:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1763:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:686:3482","4:687:3907","4:688:10712"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2548-0:1148:2763":{"id":"b:1:2548-0:1148:2763","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1148:2763","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3319-0:2120:1695":{"id":"b:1:3319-0:2120:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:666":{"id":"0:666","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2337,0],"end":[2345,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:660:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:669:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:856:2746":{"id":"0:856:2746","crate_id":0,"name":"Occupied","span":{"filename":"src/map.rs","begin":[3006,4],"end":[3006,49]},"visibility":"default","docs":"An occupied entry.\n\n# Examples\n\n```\nuse hashbrown::{hash_map::RawEntryMut, HashMap};\nlet mut map: HashMap<_, _> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:858:1606"]},"discriminant":null}}},"a:1:8250:4811-0:1984:2749":{"id":"a:1:8250:4811-0:1984:2749","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1984:2749","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2684:220-0:1776:4195":{"id":"a:1:2684:220-0:1776:4195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:758":{"id":"0:758","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2605,0],"end":[2612,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:761:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8249:4812-0:1756:4186":{"id":"a:1:8249:4812-0:1756:4186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3319-0:1031:2747":{"id":"b:1:3319-0:1031:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1031:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:489":{"id":"0:489","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[287,0],"end":[347,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"DefaultHashBuilder","id":"0:452:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:492:939","0:493:1965"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:7210:784":{"id":"1:7210:784","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2248-0:850:3197":{"id":"b:1:2248-0:850:3197","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1837:953":{"id":"0:1837:953","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1724,4],"end":[1730,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1901:2230":{"id":"0:1901:2230","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1859,4],"end":[1859,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:1429:2011":{"id":"0:1429:2011","crate_id":0,"name":"remove","span":{"filename":"src/map.rs","begin":[6161,4],"end":[6163,5]},"visibility":"public","docs":"Takes the value out of the entry, and returns it.\nKeeps the allocated memory for reuse.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\n// The map is empty\nassert!(map.is_empty() && map.capacity() == 0);\n\nmap.entry_ref(\"poneyland\").or_insert(12);\n\nif let EntryRef::Occupied(o) = map.entry_ref(\"poneyland\") {\n    assert_eq!(o.remove(), 12);\n}\n\nassert_eq!(map.contains_key(\"poneyland\"), false);\n// Now map hold none elements but capacity is equal to the old one\nassert!(map.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1818:2230":{"id":"0:1818:2230","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1690,4],"end":[1690,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"K"}}}},"0:963:1714":{"id":"0:963:1714","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[3858,4],"end":[3860,5]},"visibility":"public","docs":"Sets the value of the entry, and returns the entry's old value.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(mut o) => assert_eq!(o.insert(1000), 100),\n}\n\nassert_eq!(map[&\"a\"], 1000);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"V"}]],"output":{"generic":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:1776:4195":{"id":"b:1:2542-0:1776:4195","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1776:4195","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2741:4617-0:843:2985":{"id":"a:1:2741:4617-0:843:2985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:843:2985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2251-0:1973:2747":{"id":"b:1:2251-0:1973:2747","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1973:2747","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2253:3815"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1788:2231":{"id":"0:1788:2231","crate_id":0,"name":"IntoIter","span":{"filename":"src/set.rs","begin":[1615,4],"end":[1615,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"1:12010":{"id":"1:12010","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12011:811","1:12012:2020","1:12013:19468","1:12014:19469","1:12016:19470","1:12019:19471","1:12020:19472","1:12021:314","1:12022:2095","1:12023:2074","1:12025:2076","1:12027:16669","1:12029:2097","1:12031:19473","1:12032:19474","1:12033:19475","1:12034:19476","1:12035:11499","1:12036:11512","1:12037:4741","1:12038:16208","1:12039:16202","1:12040:19477","1:12041:19478","1:12042:16207","1:12043:3865","1:12046:19479","1:12049:19480","1:12052:2009","1:12056:10025","1:12060:2242","1:12063:16190","1:12066:19481","1:12069:19482","1:12072:19483","1:12075:19484","1:12078:19485","1:12081:19486","1:12084:19487","1:12087:4514","1:12090:19488","1:12093:19489","1:12096:19490","1:12099:19491","1:12101:19492","1:12103:19493","1:12105:19494","1:12106:19495","1:12107:19496","1:12110:19497","1:12113:19498","1:12116:19499","1:12119:19500","1:12122:19501","1:12125:19502","1:12128:19503","1:12130:19504","1:12131:19505","1:12132:19506","1:12133:19507","1:12134:19508","1:12135:19509","1:12137:13214","1:12138:19510"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2553-0:1744:2632":{"id":"b:1:2553-0:1744:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2684:220-0:850:3197":{"id":"a:1:2684:220-0:850:3197","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:850:3197","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:637:668":{"id":"0:637:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[2220,4],"end":[2222,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1994:668":{"id":"0:1994:668","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[2148,4],"end":[2150,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:4812-0:453:142":{"id":"a:1:8249:4812-0:453:142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2701:228-0:697:2682":{"id":"a:1:2701:228-0:697:2682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:697:2682","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1086":{"id":"0:1086","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4462,0],"end":[4471,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9142:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1072:2759","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1092:668"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2542-0:1770:4177":{"id":"b:1:2542-0:1770:4177","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1770:4177","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2741:4617-0:1013:2744":{"id":"a:1:2741:4617-0:1013:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:4617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1013:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8249:4812-0:1957:2744":{"id":"a:1:8249:4812-0:1957:2744","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1957:2744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2542-0:779:2632":{"id":"b:1:2542-0:779:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:779:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2544:694"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1657:2132":{"id":"0:1657:2132","crate_id":0,"name":"replace","span":{"filename":"src/set.rs","begin":[1156,4],"end":[1164,5]},"visibility":"public","docs":"Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set = HashSet::new();\nset.insert(Vec::<i32>::new());\n\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 0);\nset.replace(Vec::with_capacity(10));\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 10);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8249:4812-0:1749:2668":{"id":"a:1:8249:4812-0:1749:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8249:4812","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:1056:668":{"id":"0:1056:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4325,4],"end":[4330,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:1756:4186":{"id":"b:1:2548-0:1756:4186","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1756:4186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2052-0:1573:144":{"id":"0:2052-0:1573:144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[118,0],"end":[118,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::set::HashSet","name":"HashSet","id":"0:1573:144","glob":false}}},"b:1:7206-0:1744:2632":{"id":"b:1:7206-0:1744:2632","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7318:159","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7202:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1744:2632","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:7208:2230","1:7209:2231","1:7210:784"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2548-0:2120:1695":{"id":"b:1:2548-0:2120:1695","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2120:1695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2551:128","1:2552:1478"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2701:228-0:1736:2596":{"id":"a:1:2701:228-0:1736:2596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1736:2596","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2248-0:889:3001":{"id":"b:1:2248-0:889:3001","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:889:3001","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2250:1693"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2701:228-0:1749:2668":{"id":"a:1:2701:228-0:1749:2668","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DrainFilter","id":"0:1749:2668","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12042:16207":{"id":"1:12042:16207","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43649:11498","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12135:19509":{"id":"1:12135:19509","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4535:19509"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43656:11404","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:753:2568":{"id":"b:1:3319-0:753:2568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:753:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3321:1491"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2538-0:674:2605":{"id":"b:1:2538-0:674:2605","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:674:2605","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2541:3485"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:618:3000":{"id":"0:618:3000","crate_id":0,"name":"raw_entry","span":{"filename":"src/map.rs","begin":[2122,4],"end":[2124,5]},"visibility":"public","docs":"Creates a raw immutable entry builder for the HashMap.\n\nRaw entries provide the lowest level of control for searching and\nmanipulating a map. They must be manually initialized with a hash and\nthen manually searched.\n\nThis is useful for\n* Hash memoization\n* Using a search key that doesn't work with the Borrow trait\n* Using custom comparison logic without newtype wrappers\n\nUnless you are in such a situation, higher-level and more foolproof APIs like\n`get` should be preferred.\n\nImmutable raw entries have very limited use; you might instead want `raw_entry_mut`.\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\", 100), (\"b\", 200), (\"c\", 300)]);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nfor k in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"] {\n    let hash = compute_hash(map.hasher(), k);\n    let v = map.get(&k).cloned();\n    let kv = v.as_ref().map(|v| (&k, v));\n\n    println!(\"Key: {} and value: {:?}\", k, v);\n\n    assert_eq!(map.raw_entry().from_key(&k), kv);\n    assert_eq!(map.raw_entry().from_hash(hash, |q| *q == k), kv);\n    assert_eq!(map.raw_entry().from_key_hashed_nocheck(hash, &k), kv);\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawEntryBuilder","id":"0:889:3001","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:927:3248":{"id":"0:927:3248","crate_id":0,"name":"from_key_hashed_nocheck","span":{"filename":"src/map.rs","begin":[3350,4],"end":[3355,5]},"visibility":"public","docs":"Access an immutable entry by a key and its hash.\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::HashMap;\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\nlet key = \"a\";\nlet hash = compute_hash(map.hasher(), &key);\nassert_eq!(map.raw_entry().from_key_hashed_nocheck(hash, &key), Some((&\"a\", &100)));\n```","links":{},"attrs":["#[inline]","#[allow(clippy :: wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hash",{"primitive":"u64"}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1660:3824":{"id":"0:1660:3824","crate_id":0,"name":"take","span":{"filename":"src/set.rs","begin":[1214,4],"end":[1223,5]},"visibility":"public","docs":"Removes and returns the value in the set, if any, that is equal to the given one.\n\nThe value may be any borrowed form of the set's value type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe value type.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert_eq!(set.take(&2), Some(2));\nassert_eq!(set.take(&2), None);\n```\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41394:181","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2053:1683","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:766:2578":{"id":"b:1:2553-0:766:2578","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:766:2578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2556:128","1:2557:1477"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:619":{"id":"0:619","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2188,0],"end":[2203,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2317:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2312:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"0:36:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2312:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:453:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:624:613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1729:186":{"id":"0:1729:186","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1456,4],"end":[1456,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashSet","id":"0:1573:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"resolved_path":{"name":"Global","id":"0:2094:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"4:5400:4564":{"id":"4:5400:4564","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7255:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7255:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1165:668":{"id":"0:1165:668","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4616,4],"end":[4618,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9117:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9106:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12021:314":{"id":"1:12021:314","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12022:2095","`u8`":"1:51716:1499"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1445:1714":{"id":"0:1445:1714","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[6398,4],"end":[6410,5]},"visibility":"public","docs":"Sets the value of the entry with the VacantEntryRef's key,\nand returns a mutable reference to it.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nlet key: &str = \"poneyland\";\n\nif let EntryRef::Vacant(o) = map.entry_ref(key) {\n    o.insert(37);\n}\nassert_eq!(map[\"poneyland\"], 37);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:9362:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:9405:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8250:4811-0:1166:2909":{"id":"a:1:8250:4811-0:1166:2909","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8250:4811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1166:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"1:51720:1495":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:2706:1840":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:8675:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:44283:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:9813:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:8251:4810":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:43621:11495":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:40473:4602":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:7352:11017":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:47862:10018":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:43236:11142":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:2354:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:30272:4635":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:21561:13401":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:880:2596":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:41243:11430":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:2833:4709":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:39302:4717":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:45592:11562":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:47610:11635":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"4:4167:11003":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:21443:18142":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:20990:13402":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:42167:4670":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:39192:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:14:1942":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:40408:4598":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:9149:4668":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:51712:742":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"4:6696:244":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:40699:4565":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:1612:10980":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:51722:1553":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"4:110:528":{"crate_id":4,"path":["alloc","alloc","dealloc"],"kind":"function"},"1:4110:12020":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:4386:4680":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:4366:11003":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"4:3124:4167":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:43343:11405":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:7595:4574":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:41309:17054":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:3163:4721":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:51705:1397":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:47770:10014":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:45968:11575":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"4:3163:19255":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:43327:11477":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:44080:11534":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:2981:2339":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:22260:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:9117:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:47648:11636":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:46212:11583":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:4019:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:43255:11143":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:9147:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:21088:13399":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:2151:589":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:47721:10011":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:2929:2008":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:47324:11630":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"4:1413:2578":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:2317:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:44326:11660":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:21803:11156":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:40356:4604":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:9985:2605":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:42674:4691":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:46111:11580":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:2780:4701":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:2805:4707":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:6977:4560":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3510:2632":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:3995:12018":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"4:4336:11005":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"4:2189:11105":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:9410:2342":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:3152:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:42658:4692":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:51699:419":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:40487:4603":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:11737:13351":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:42898:11468":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:45681:11566":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:7004:1852":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:41260:13275":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:51711:745":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:45622:11563":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:2847:4712":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:40286:4588":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11535:11136":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"4:7058:2231":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:4761:389":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:9368:141":{"crate_id":1,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1:21004:11145":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:6740:11016":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:6768:4556":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:46446:11595":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"0:2120:1695":{"crate_id":0,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:0:443":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:2515:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:40670:4559":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:45437:11556":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:4183:4678":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"4:1432:2682":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:2749:4621":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:21332:13403":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:40255:4026":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:7209:17056":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:30288:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:43778:11510":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:3370:13196":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"4:783:10983":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:51710:643":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:43656:11404":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:0:497":{"crate_id":1,"path":["core"],"kind":"module"},"1:20768:16532":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:40102:11409":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:8843:12448":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:2822:4029":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:2906:19036":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:43741:13367":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:1981:11095":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:51697:371":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:20549:18139":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:9107:4667":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:42913:11469":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:49668:13416":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:42433:14602":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:790:2343":{"crate_id":5,"path":["ahash","fallback_hash","AHasher"],"kind":"struct"},"1:43425:11484":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:1467:1841":{"crate_id":1,"path":["core","mem"],"kind":"module"},"1:20841:13411":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:1012:1845":{"crate_id":1,"path":["core","hint"],"kind":"module"},"1:4406:4623":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:21916:14615":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:2784:3932":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:30360:14619":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:10165:11137":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:30302:14622":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:40042:11394":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:23037:11187":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:11279:13354":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:2843:4711":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:41538:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:10258:11487":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:4602:13230":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:40133:17056":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:39176:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:41445:2230":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:2932:2066":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:20879:4646":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:21952:11180":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:21978:13170":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:39358:12040":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"4:5908:11003":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:45521:11559":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:45391:11554":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:2774:4702":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:45413:11555":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:45746:11568":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:20579:18773":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:41470:2231":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:12295:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:2684:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:10272:12031":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:5380:11003":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:43665:11394":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:6674:4587":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:39372:4679":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:2469:13907":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:11500:11491":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:813:10576":{"crate_id":5,"path":["ahash","random_state","RandomState"],"kind":"struct"},"1:9405:2338":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:5712:2632":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"1:1747:11124":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"7:135:11999":{"crate_id":7,"path":["once_cell","race","OnceRef"],"kind":"struct"},"1:45822:11571":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:41911:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:41203:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:12501:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:2741:4617":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:41631:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:12597:1851":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:43649:11498":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:47686:10008":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:4141:11092":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:1351:2596":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:43792:11513":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:40116:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"4:3088:95":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:7161:4576":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:21945:11177":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"4:6367:2231":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:46866:11601":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:2763:4700":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:41512:4809":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"4:6598:11021":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:2905:3482":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:7240:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:40268:4580":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:39161:4716":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"4:6097:13697":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:44291:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:4042:13215":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:9106:210":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"7:61:11997":{"crate_id":7,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"4:1197:2744":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:21337:13413":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"4:7225:11119":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:22557:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:30864:4989":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:2701:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:30232:1842":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:9370:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:41831:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:22590:11186":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:42421:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"4:1078:12552":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:3688:12006":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:1667:1087":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"4:7335:2668":{"crate_id":4,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:40438:4600":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"4:815:10986":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:9142:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:43407:11483":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:75:13723":{"crate_id":5,"path":["ahash","fallback_hash","AHasherU64"],"kind":"struct"},"1:9155:4671":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:41951:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"4:1995:12006":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:2744:4619":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:51713:743":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"7:174:10976":{"crate_id":7,"path":["once_cell","race","once_box","OnceBox"],"kind":"struct"},"1:2589:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"7:19:11092":{"crate_id":7,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"1:42393:11453":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:44104:11540":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:41345:13276":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:51719:1498":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"4:2169:21565":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:40718:4569":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:4332:4679":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:43921:11517":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:11424:11480":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:47747:10013":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:40677:11422":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:51717:1496":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:40121:11410":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:9159:4672":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:2506:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"4:3622:10980":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:4808:795":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:21431:11147":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:41530:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:44164:13374":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:51718:1497":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:43857:11515":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:39552:14472":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:43210:4578":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:42403:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:4007:12019":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"4:1454:198":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:3197:4726":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:43245:12049":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:2916:12326":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:2985:4715":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:46292:11584":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"4:1422:2585":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"4:3753:2668":{"crate_id":4,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"0:2123:1700":{"crate_id":0,"path":["hashbrown","TryReserveError","AllocError"],"kind":"variant"},"1:2242:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:20760:13404":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"1:40076:11408":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:2603:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:44076:11533":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:41394:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:41597:2231":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:40226:4578":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:39075:4728":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:2695:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:43674:11403":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:42917:11470":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:45561:11561":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:43375:11137":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:40693:4563":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"7:210:12001":{"crate_id":7,"path":["once_cell","race","OnceBool"],"kind":"struct"},"1:22491:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:1733:4664":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:1630:588":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:45543:11560":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:40389:4596":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:2898:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"4:689:111":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:5834:12327":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:2796:4703":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:46158:11581":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:42666:11462":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:2518:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:21854:11163":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:40012:11400":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"4:4399:11005":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"4:35:10978":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"4:7044:19256":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:44096:11538":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:0:1616":{"crate_id":5,"path":["ahash"],"kind":"module"},"4:2908:11102":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:41289:11437":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:43611:11494":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:44108:11541":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:1637:4632":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"4:5035:11010":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"1:43144:11139":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:40684:4561":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:3644:2231":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:41380:11448":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:40399:4597":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:2758:4030":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:21879:14609":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:43084:12045":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:3382:12017":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"4:7280:12016":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:8250:4811":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:40196:11031":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:40083:13237":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:9961:2596":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:43173:12047":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:2817:4028":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:22227:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:4433:4681":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:43809:11514":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"4:6180:11016":{"crate_id":4,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"4:0:286":{"crate_id":4,"path":["alloc"],"kind":"module"},"1:20564:18139":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"4:3521:163":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"4:109:286":{"crate_id":4,"path":["alloc","alloc","alloc"],"kind":"function"},"4:2407:11106":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:39365:12041":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:44112:11542":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:40367:4595":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:43479:11487":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:20536:4989":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:10053:11136":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:40347:4594":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:44364:4550":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:39379:11265":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"0:0:1715":{"crate_id":0,"path":["hashbrown"],"kind":"module"},"1:46716:11600":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:44273:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:42683:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:41751:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"4:5798:70":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:39998:11399":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:12382:12037":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"4:3276:2668":{"crate_id":4,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:42174:4671":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:10244:11486":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:2812:4027":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"4:265:10980":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:45938:11574":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"4:3150:4177":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"7:204:12000":{"crate_id":7,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"2:229:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:32020:1863":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"0:2049:1672":{"crate_id":0,"path":["hashbrown","hash_set"],"kind":"module"},"1:12330:14287":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:9526:11037":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:9145:112":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:7588:1839":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:42498:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:46416:11594":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:11672:13169":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:21900:14601":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:45792:11570":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:39114:4725":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:40338:4593":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"4:6446:10980":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:51706:1481":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:8817:668":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"4:7066:198":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"4:863:10988":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:2264:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:1821:1844":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:21116:11145":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:47072:11628":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:2245:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:40708:4567":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:41791:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:51703:312":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:51724:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:2738:4616":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:43153:12046":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:21862:11164":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:21114:13406":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:11783:13361":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"4:3184:4195":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"4:963:10980":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:1716:2668":{"crate_id":4,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:47526:11633":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"4:7095:2231":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:44131:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:22359:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:10130:12029":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:20909:13412":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"4:2912:12325":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:1314:94":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:22392:11185":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:10010:11133":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"4:780:96":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:3182:18862":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:20922:13907":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:40022:11401":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:45844:11572":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:30266:1843":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:9157:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:9161:4673":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:43333:11478":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:20804:13410":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:40315:4591":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:45491:11558":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:1463:12005":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:44100:11539":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:2768:4699":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:43163:11141":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:2163:4647":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:47732:10012":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:22425:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:1916:4548":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:9624:11045":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:2696:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:0:1823":{"crate_id":6,"path":["cfg_if"],"kind":"module"},"1:51702:1049":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"4:129:1836":{"crate_id":4,"path":["alloc","alloc","handle_alloc_error"],"kind":"function"},"4:7255:224":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"1:45662:11565":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:44088:11536":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:10092:12028":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:2746:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:46370:11593":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:40424:4599":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:7165:4575":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:87:13724":{"crate_id":5,"path":["ahash","fallback_hash","AHasherFixed"],"kind":"struct"},"1:5468:11003":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:45347:11552":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:51716:1499":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:2911:4024":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:9151:4669":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:39216:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:46682:11599":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:8838:16949":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2691:1685":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"4:7162:13666":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:7013:2231":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:42695:11463":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:41991:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"7:0:10570":{"crate_id":7,"path":["once_cell"],"kind":"module"},"4:4818:204":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:3142:4719":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:47572:11634":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:32056:12039":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"4:5191:10980":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:6721:12553":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:44152:11545":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"4:7150:1695":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:6585:4577":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:12357:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:43989:11532":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:41368:11445":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:43525:11490":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:4322:11029":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"4:680:231":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:5586:4582":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:20596:18775":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"0:2121:1698":{"crate_id":0,"path":["hashbrown","TryReserveError","CapacityOverflow"],"kind":"variant"},"1:40376:4583":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:11712:13346":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:43884:11516":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:6608:11022":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"4:1404:2568":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:3158:4186":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:47214:11629":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:51700:1515":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"4:2116:11099":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:41606:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"4:3775:10980":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:51698:936":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"4:5485:11012":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:4255:12021":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:3317:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:41581:2596":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:39334:4720":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"0:2047:1670":{"crate_id":0,"path":["hashbrown","hash_map"],"kind":"module"},"1:40296:4589":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:2788:4706":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:4782:17760":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:43631:11496":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"4:6294:10980":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:21665:11148":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:2161:4646":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:21559:13907":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:5528:4592":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:40149:11411":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:39280:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:5818:11010":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"4:7019:11114":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:3157:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:21966:11181":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:43507:11489":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"4:7195:11116":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:45892:11573":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"4:4207:2596":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:43461:11486":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:44334:11548":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:46652:11598":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:4321:245":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:46036:11578":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:21771:11150":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:4260:12022":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"4:211:10979":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:44084:11535":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"4:1366:2605":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:9295:12027":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:47675:10007":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"4:3117:2596":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:30836:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:45699:11567":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:43357:11133":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"4:1242:2909":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:99:13725":{"crate_id":5,"path":["ahash","fallback_hash","AHasherStr"],"kind":"struct"},"4:3547:2605":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:22326:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:47823:10017":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:42031:12026":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"4:3975:2632":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:42458:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:41871:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:40277:4581":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:42153:4669":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:51721:789":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:12308:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:39258:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:7263:2284":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:46189:11582":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:41671:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:7028:2632":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:9362:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:20869:13405":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:11717:12025":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:44389:11551":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:2753:4698":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:21839:17055":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:10771:12033":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"0:2053:1683":{"crate_id":0,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:2827:4708":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:10804:12034":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:42713:11467":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:41589:2605":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"4:7269:11122":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"4:7074:11115":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:8356:12025":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:45459:11557":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:11461:11485":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:11726:13353":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:43561:11492":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:2087:11097":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:11938:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:47464:11632":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:20770:4646":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:1756:4663":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:8249:4812":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:40246:4579":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:40306:4590":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:43935:13368":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:4251:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:51704:1367":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"4:7178:102":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:44092:11537":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"4:6248:2632":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:40163:13247":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"4:633:12002":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:42449:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:39961:11395":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:40034:11403":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"4:1382:2231":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:46528:11596":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:43265:12050":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:20742:13408":{"crate_id":1,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"1:32060:11255":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:7632:16947":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:3079:4718":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:41479:4808":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:43301:11473":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:7318:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:6917:4558":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:20938:13398":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:51714:744":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:41226:11428":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"4:5235:13684":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"1:47666:4733":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:47800:10016":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:2636:11110":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:20594:18778":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:6765:11025":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"4:5239:13685":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"5:148:13718":{"crate_id":5,"path":["ahash","random_state","DefaultRandomSource"],"kind":"struct"},"1:2470:13136":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:32147:4622":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:2512:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:43969:11530":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:46606:11597":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:43184:11471":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:2348:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:22458:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:20729:13407":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:2926:2025":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:12512:11050":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:51715:740":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"4:1058:12324":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:42160:4668":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:43315:11476":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:9803:13907":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:2692:4614":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:39236:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"4:4137:11003":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:43956:11524":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:20577:18777":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"4:4005:10980":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:30466:14606":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:47785:10015":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:10203:12030":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:2792:4704":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:2856:4714":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:7198:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:30041:13137":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:47402:11631":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:4377:11030":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:12703:1619":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"4:3534:2596":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:2851:4713":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:40206:12042":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:21827:11161":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:45367:11553":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:7036:10989":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:11732:13352":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:42476:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:2922:2229":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:47706:10010":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:9609:11041":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:39982:14620":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:22524:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:4:1014":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:20982:13907":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:7202:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:25847:11188":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:7211:3750":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:40057:13236":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:46060:11579":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"4:1443:2689":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:40050:11404":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:21083:13907":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:40726:4571":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:7591:4573":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:2312:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:3931:11003":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:45644:11564":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:41462:2605":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"4:280:10982":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:2509:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:2839:4710":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:40324:11415":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:42705:11466":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:51709:642":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:10286:12032":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:45990:11576":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"4:7238:11121":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"4:4914:11003":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:41332:11444":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:41521:4800":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:39955:11394":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:22293:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"3:0:4532":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:20984:13400":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:41711:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"4:7103:2231":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:43135:11138":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:43579:11493":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:1213:2749":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:9153:4670":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:2522:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:2694:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:40069:11407":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:1042:12551":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:21718:11149":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:11484:11488":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:43763:11503":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:40459:4601":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:41454:2596":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"4:3673:11095":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:51723:1126":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:11265:12035":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"4:2077:10994":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:21787:11151":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:3234:4727":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:46014:11577":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:5987:4605":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:11249:13315":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:44376:1700":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:44347:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:2800:4705":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:21107:13907":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"4:4047:2605":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"4:6579:11012":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:3129:19251":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:3169:4723":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:2963:4724":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:39341:11264":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:39970:11396":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:43640:11497":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:43946:11520":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:47695:10009":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:9592:11040":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:40448:4585":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:8670:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:1228:2747":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:43223:12048":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:1544:11003":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"4:5642:232":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"}},"external_crates":{"5":{"name":"ahash","html_root_url":null},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"once_cell","html_root_url":null},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}