{"root":"0:0:1867","crate_version":"0.14.3","includes_private":false,"index":{"b:1:2474-0:1020:3538":{"id":"b:1:2474-0:1020:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32890:5735-0:888:3994":{"id":"a:1:32890:5735-0:888:3994","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:888:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:33-5:1074:2006":{"id":"0:33-5:1074:2006","crate_id":0,"name":null,"span":{"filename":"src/raw/alloc.rs","begin":[31,47],"end":[31,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"allocator_api2::alloc::Global","name":"Global","id":"5:1074:2006","glob":false}}},"a:1:42469:5938-0:1155:3557":{"id":"a:1:42469:5938-0:1155:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1155:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2997:246-0:1791:5006":{"id":"a:1:2997:246-0:1791:5006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13028:20199":{"id":"1:13028:20199","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13029:20200"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:2456:1859":{"id":"b:1:2778-0:2456:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1779:3431":{"id":"0:1779:3431","crate_id":0,"name":"Drain","span":{"filename":"src/set.rs","begin":[1568,0],"end":[1570,1]},"visibility":"public","docs":"A draining iterator over the items of a `HashSet`.\n\nThis `struct` is created by the [`drain`] method on [`HashSet`].\nSee its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`drain`]: struct.HashSet.html#method.drain","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:1779:3431","a:1:2997:246-0:1779:3431","a:1:42469:5938-0:1779:3431","a:1:32833:237-0:1779:3431","a:1:32890:5735-0:1779:3431","b:1:3610-0:1779:3431","b:1:2471-0:1779:3431","b:1:2789-0:1779:3431","b:1:8044-0:1779:3431","b:1:2784-0:1779:3431","b:1:2778-0:1779:3431","b:1:2774-0:1779:3431","b:1:2474-0:1779:3431","0:1889","0:1875","0:1892","0:1885"]}}},"0:524:2304":{"id":"0:524:2304","crate_id":0,"name":"new_in","span":{"filename":"src/map.rs","begin":[370,4],"end":[372,5]},"visibility":"public","docs":"Creates an empty `HashMap` using the given allocator.\n\nThe hash map is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`], for example with\n[`with_hasher_in`](HashMap::with_hasher_in) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse bumpalo::Bump;\n\nlet bump = Bump::new();\nlet mut map = HashMap::new_in(&bump);\n\n// The created HashMap holds none elements\nassert_eq!(map.len(), 0);\n\n// The created HashMap also doesn't allocate memory\nassert_eq!(map.capacity(), 0);\n\n// Now we insert element inside created HashMap\nmap.insert(\"One\", 1);\n// We can see that the HashMap holds 1 element\nassert_eq!(map.len(), 1);\n// And it also allocates some capacity\nassert!(map.capacity() > 1);\n```","links":{"HashMap::with_hasher_in":"0:538:3309","`ahash::RandomState`":"6:1315:11846","`HashMap`":"0:483:154"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:482:3153":{"id":"0:482:3153","crate_id":0,"name":"DefaultHashBuilder","span":{"filename":"src/map.rs","begin":[15,0],"end":[15,77]},"visibility":"public","docs":"Default hasher for `HashMap`.","links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"core::hash::BuildHasherDefault","id":"1:10395:3154","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"ahash::AHasher","id":"6:1268:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:1651:2371":{"id":"0:1651:2371","crate_id":0,"name":"hasher","span":{"filename":"src/set.rs","begin":[615,4],"end":[617,5]},"visibility":"public","docs":"Returns a reference to the set's [`BuildHasher`].\n\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet hasher = DefaultHashBuilder::default();\nlet set: HashSet<i32> = HashSet::with_hasher(hasher);\nlet hasher: &DefaultHashBuilder = set.hasher();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"S"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1660:4986":{"id":"0:1660:4986","crate_id":0,"name":"difference","span":{"filename":"src/set.rs","begin":[744,4],"end":[749,5]},"visibility":"public","docs":"Visits the values representing the difference,\ni.e., the values that are in `self` but not in `other`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Can be seen as `a - b`.\nfor x in a.difference(&b) {\n    println!(\"{}\", x); // Print 1\n}\n\nlet diff: HashSet<_> = a.difference(&b).collect();\nassert_eq!(diff, [1].iter().collect());\n\n// Note that difference is not symmetric,\n// and `b - a` means something else:\nlet diff: HashSet<_> = b.difference(&a).collect();\nassert_eq!(diff, [4].iter().collect());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1478:2410":{"id":"0:1478:2410","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[6403,4],"end":[6415,5]},"visibility":"public","docs":"Sets the value of the entry with the VacantEntryRef's key,\nand returns a mutable reference to it.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nlet key: &str = \"poneyland\";\n\nif let EntryRef::Vacant(o) = map.entry_ref(key) {\n    o.insert(37);\n}\nassert_eq!(map[\"poneyland\"], 37);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:1805:4997":{"id":"b:1:2474-0:1805:4997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2008:3008":{"id":"0:2008:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[2052,4],"end":[2054,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:2240:3543":{"id":"b:1:2778-0:2240:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1629:862":{"id":"0:1629:862","crate_id":0,"name":"iter","span":{"filename":"src/set.rs","begin":[291,4],"end":[295,5]},"visibility":"public","docs":"An iterator visiting all elements in arbitrary order.\nThe iterator element type is `&'a T`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet mut set = HashSet::new();\nset.insert(\"a\");\nset.insert(\"b\");\n\n// Will print in an arbitrary order.\nfor x in set.iter() {\n    println!(\"{}\", x);\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13003":{"id":"1:13003","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13004:882","1:13005:2365","1:13006:21520","1:13007:21521","1:13009:21522","1:13012:21346","1:13013:21523","1:13014:334","1:13015:2474","1:13016:2453","1:13018:2455","1:13020:18091","1:13022:2476","1:13024:21524","1:13025:21525","1:13026:20195","1:13027:20196","1:13028:20199","1:13029:20200","1:13031:12747","1:13032:12760","1:13033:5866","1:13034:17167","1:13035:17191","1:13036:21526","1:13037:21527","1:13038:17187","1:13039:4650","1:13042:20211","1:13045:20212","1:13048:2355","1:13052:11204","1:13056:2982","1:13059:17188","1:13062:20203","1:13065:21528","1:13068:21529","1:13071:20205","1:13074:20207","1:13077:20209","1:13080:20210","1:13083:5633","1:13086:21530","1:13089:21531","1:13092:21532","1:13095:21533","1:13097:21534","1:13099:21535","1:13101:21536","1:13102:21537","1:13103:21538","1:13106:21539","1:13109:20213","1:13112:20214","1:13115:21540","1:13118:21541","1:13121:21542","1:13124:21543","1:13126:21375","1:13127:21376","1:13128:21378","1:13129:21379","1:13130:21380","1:13131:21382","1:13132:21383","1:13133:21384","1:13134:21544","1:13136:14494","1:13137:21545"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2784-0:869:3990":{"id":"b:1:2784-0:869:3990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2997:246-0:2240:3543":{"id":"a:1:2997:246-0:2240:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2019:1764":{"id":"0:2019:1764","crate_id":0,"name":"0","span":{"filename":"src/set.rs","begin":[2118,13],"end":[2118,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"0:1306:174":{"id":"0:1306:174","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4877,4],"end":[4877,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}}}},"0:1604:156":{"id":"0:1604:156","crate_id":0,"name":"HashSet","span":{"filename":"src/set.rs","begin":[115,0],"end":[117,1]},"visibility":"public","docs":"A hash set implemented as a `HashMap` where the value is `()`.\n\nAs with the [`HashMap`] type, a `HashSet` requires that the elements\nimplement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by\nusing `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,\nit is important that the following property holds:\n\n```text\nk1 == k2 -> hash(k1) == hash(k2)\n```\n\nIn other words, if two keys are equal, their hashes must be equal.\n\n\nIt is a logic error for an item to be modified in such a way that the\nitem's hash, as determined by the [`Hash`] trait, or its equality, as\ndetermined by the [`Eq`] trait, changes while it is in the set. This is\nnormally only possible through [`Cell`], [`RefCell`], global state, I/O, or\nunsafe code.\n\nIt is also a logic error for the [`Hash`] implementation of a key to panic.\nThis is generally only possible if the trait is implemented manually. If a\npanic does occur then the contents of the `HashSet` may become corrupted and\nsome items may be dropped from the table.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n// Type inference lets us omit an explicit type signature (which\n// would be `HashSet<String>` in this example).\nlet mut books = HashSet::new();\n\n// Add some books.\nbooks.insert(\"A Dance With Dragons\".to_string());\nbooks.insert(\"To Kill a Mockingbird\".to_string());\nbooks.insert(\"The Odyssey\".to_string());\nbooks.insert(\"The Great Gatsby\".to_string());\n\n// Check for a specific one.\nif !books.contains(\"The Winds of Winter\") {\n    println!(\"We have {} books, but The Winds of Winter ain't one.\",\n             books.len());\n}\n\n// Remove a book.\nbooks.remove(\"The Odyssey\");\n\n// Iterate over everything.\nfor book in &books {\n    println!(\"{}\", book);\n}\n```\n\nThe easiest way to use `HashSet` with a custom type is to derive\n[`Eq`] and [`Hash`]. We must also derive [`PartialEq`]. This will in the\nfuture be implied by [`Eq`].\n\n```\nuse hashbrown::HashSet;\n#[derive(Hash, Eq, PartialEq, Debug)]\nstruct Viking {\n    name: String,\n    power: usize,\n}\n\nlet mut vikings = HashSet::new();\n\nvikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });\nvikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });\nvikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });\nvikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });\n\n// Use derived implementation to print the vikings.\nfor x in &vikings {\n    println!(\"{:?}\", x);\n}\n```\n\nA `HashSet` with fixed list of elements can be initialized from an array:\n\n```\nuse hashbrown::HashSet;\n\nlet viking_names: HashSet<&'static str> =\n    [ \"Einar\", \"Olaf\", \"Harald\" ].iter().cloned().collect();\n// use the values stored in the set\n```\n\n[`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n[`HashMap`]: struct.HashMap.html\n[`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html\n[`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"super::map::DefaultHashBuilder","id":"0:482:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1615","0:1619","0:1624","0:1639","0:1644","0:1652","a:1:42468:5939-0:1604:156","a:1:2997:246-0:1604:156","a:1:42469:5938-0:1604:156","a:1:32833:237-0:1604:156","a:1:32890:5735-0:1604:156","b:0:2388-0:1604:156","b:1:3610-0:1604:156","b:1:2471-0:1604:156","b:1:2789-0:1604:156","b:1:2784-0:1604:156","b:1:2778-0:1604:156","b:1:2774-0:1604:156","b:1:2474-0:1604:156","b:4:725-0:1604:156","0:1697","0:1703","0:1761","0:1609","0:1723","0:1817","0:1755","0:1749","0:1737","0:1707","0:1744","0:1717","0:1825","0:1766","0:1730","0:1712"]}}},"0:1428:2410":{"id":"0:1428:2410","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[5723,4],"end":[5735,5]},"visibility":"public","docs":"Sets the value of the entry, and returns an OccupiedEntryRef.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nlet entry = map.entry_ref(\"horseyland\").insert(37);\n\nassert_eq!(entry.key(), \"horseyland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"generic":"V"}]],"output":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3610-0:1784:3465":{"id":"b:1:3610-0:1784:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2286":{"id":"0:2286","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1885,0],"end":[1889,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:2288:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2027:724":{"id":"0:2027:724","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[2137,4],"end":[2142,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:1173:3702":{"id":"b:1:2474-0:1173:3702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1320":{"id":"0:1320","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4908,0],"end":[4931,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1324:174","0:1325:1062","0:1326:3008","0:1327:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:961:1855":{"id":"0:961:1855","crate_id":0,"name":"key","span":{"filename":"src/map.rs","begin":[3558,4],"end":[3560,5]},"visibility":"public","docs":"Gets a reference to the key in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => assert_eq!(o.key(), &\"a\")\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1657:2388":{"id":"0:1657:2388","crate_id":0,"name":"try_reserve","span":{"filename":"src/set.rs","begin":[669,4],"end":[671,5]},"visibility":"public","docs":"Tries to reserve capacity for at least `additional` more elements to be inserted\nin the given `HashSet<K,V>`. The collection may reserve more space to avoid\nfrequent reallocations.\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet mut set: HashSet<i32> = HashSet::new();\nset.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42487:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3610-0:1775:2963":{"id":"b:1:3610-0:1775:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2023":{"id":"0:2023","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2136,0],"end":[2143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2012:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2027:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2144:882":{"id":"0:2144:882","crate_id":0,"name":"len","span":{"filename":"src/table.rs","begin":[638,4],"end":[640,5]},"visibility":"public","docs":"Returns the number of elements in the table.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\nlet mut v = HashTable::new();\nassert_eq!(v.len(), 0);\nv.insert_unique(hasher(&1), 1, hasher);\nassert_eq!(v.len(), 1);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:2311:2963":{"id":"a:1:42469:5938-0:2311:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2328":{"id":"0:2328","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1988,0],"end":[1988,65]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:896:3789":{"id":"0:896:3789","crate_id":0,"name":"RawEntryBuilder","span":{"filename":"src/map.rs","begin":[3143,0],"end":[3145,1]},"visibility":"public","docs":"A builder for computing where in a [`HashMap`] a key-value pair would be stored.\n\nSee the [`HashMap::raw_entry`] docs for usage examples.\n\n[`HashMap::raw_entry`]: struct.HashMap.html#method.raw_entry\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryBuilder};\nuse core::hash::{BuildHasher, Hash};\n\nlet mut map = HashMap::new();\nmap.extend([(1, 10), (2, 20), (3, 30)]);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nfor k in 0..6 {\n    let hash = compute_hash(map.hasher(), &k);\n    let v = map.get(&k).cloned();\n    let kv = v.as_ref().map(|v| (&k, v));\n\n    println!(\"Key: {} and value: {:?}\", k, v);\n    let builder: RawEntryBuilder<_, _, _> = map.raw_entry();\n    assert_eq!(builder.from_key(&k), kv);\n    assert_eq!(map.raw_entry().from_hash(hash, |q| *q == k), kv);\n    assert_eq!(map.raw_entry().from_key_hashed_nocheck(hash, &k), kv);\n}\n```","links":{"`HashMap`":"0:483:154"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:926","a:1:42468:5939-0:896:3789","a:1:2997:246-0:896:3789","a:1:42469:5938-0:896:3789","a:1:32833:237-0:896:3789","a:1:32890:5735-0:896:3789","b:1:3610-0:896:3789","b:1:2471-0:896:3789","b:1:2789-0:896:3789","b:1:2784-0:896:3789","b:1:2778-0:896:3789","b:1:2774-0:896:3789","b:1:2474-0:896:3789","0:1014"]}}},"0:2368:174":{"id":"0:2368:174","crate_id":0,"name":"Item","span":{"filename":"src/table.rs","begin":[2051,4],"end":[2051,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:1416:1855":{"id":"0:1416:1855","crate_id":0,"name":"key","span":{"filename":"src/map.rs","begin":[5635,4],"end":[5637,5]},"visibility":"public","docs":"Gets a reference to the key that would be used when inserting a value\nthrough the `VacantEntry`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nassert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1434:1855":{"id":"0:1434:1855","crate_id":0,"name":"key","span":{"filename":"src/map.rs","begin":[5846,4],"end":[5854,5]},"visibility":"public","docs":"Returns a reference to this entry's key.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nmap.entry_ref(\"poneyland\").or_insert(3);\n// existing key\nassert_eq!(map.entry_ref(\"poneyland\").key(), \"poneyland\");\n// nonexistent key\nassert_eq!(map.entry_ref(\"horseland\").key(), \"horseland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2784-0:1775:2963":{"id":"b:1:2784-0:1775:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1186:724":{"id":"0:1186:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4603,4],"end":[4609,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2202":{"id":"0:2202","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1204,0],"end":[1211,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2192:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2205:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1838:174":{"id":"0:1838:174","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1689,4],"end":[1689,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}}}}},"0:2302:3042":{"id":"0:2302:3042","crate_id":0,"name":"fold","span":{"filename":"src/table.rs","begin":[1921,4],"end":[1928,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2147:863":{"id":"0:2147:863","crate_id":0,"name":"iter_mut","span":{"filename":"src/table.rs","begin":[749,4],"end":[754,5]},"visibility":"public","docs":"An iterator visiting all elements in arbitrary order,\nwith mutable references to the elements.\nThe iterator element type is `&'a mut T`.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\ntable.insert_unique(hasher(&1), 1, hasher);\ntable.insert_unique(hasher(&2), 2, hasher);\ntable.insert_unique(hasher(&3), 3, hasher);\n\n// Update all values\nfor val in table.iter_mut() {\n    *val *= 2;\n}\n\nassert_eq!(table.len(), 3);\nlet mut vec: Vec<i32> = Vec::new();\n\nfor val in &table {\n    println!(\"val: {}\", val);\n    vec.push(*val);\n}\n\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [2, 4, 6]);\n\nassert_eq!(table.len(), 3);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1391:4375":{"id":"0:1391:4375","crate_id":0,"name":"or_default","span":{"filename":"src/map.rs","begin":[5255,4],"end":[5264,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the default value if empty,\nand returns a mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, Option<u32>> = HashMap::new();\n\n// nonexistent key\nmap.entry(\"poneyland\").or_default();\nassert_eq!(map[\"poneyland\"], None);\n\nmap.insert(\"horseland\", Some(3));\n\n// existing key\nassert_eq!(map.entry(\"horseland\").or_default(), &mut Some(3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13112:20214":{"id":"1:13112:20214","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:53676:454","self::pattern":"1:12697:14610"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12717:14616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2476:4603":{"id":"1:2476:4603","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32833:237-0:483:154":{"id":"a:1:32833:237-0:483:154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:850:3773":{"id":"0:850:3773","crate_id":0,"name":"RawEntryBuilderMut","span":{"filename":"src/map.rs","begin":[2854,0],"end":[2856,1]},"visibility":"public","docs":"A builder for computing where in a [`HashMap`] a key-value pair would be stored.\n\nSee the [`HashMap::raw_entry_mut`] docs for usage examples.\n\n[`HashMap::raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut\n\n# Examples\n\n```\nuse hashbrown::hash_map::{RawEntryBuilderMut, RawEntryMut::Vacant, RawEntryMut::Occupied};\nuse hashbrown::HashMap;\nuse core::hash::{BuildHasher, Hash};\n\nlet mut map = HashMap::new();\nmap.extend([(1, 11), (2, 12), (3, 13), (4, 14), (5, 15), (6, 16)]);\nassert_eq!(map.len(), 6);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet builder: RawEntryBuilderMut<_, _, _> = map.raw_entry_mut();\n\n// Existing key\nmatch builder.from_key(&6) {\n    Vacant(_) => unreachable!(),\n    Occupied(view) => assert_eq!(view.get(), &16),\n}\n\nfor key in 0..12 {\n    let hash = compute_hash(map.hasher(), &key);\n    let value = map.get(&key).cloned();\n    let key_value = value.as_ref().map(|v| (&key, v));\n\n    println!(\"Key: {} and value: {:?}\", key, value);\n\n    match map.raw_entry_mut().from_key(&key) {\n        Occupied(mut o) => assert_eq!(Some(o.get_key_value()), key_value),\n        Vacant(_) => assert_eq!(value, None),\n    }\n    match map.raw_entry_mut().from_key_hashed_nocheck(hash, &key) {\n        Occupied(mut o) => assert_eq!(Some(o.get_key_value()), key_value),\n        Vacant(_) => assert_eq!(value, None),\n    }\n    match map.raw_entry_mut().from_hash(hash, |q| *q == key) {\n        Occupied(mut o) => assert_eq!(Some(o.get_key_value()), key_value),\n        Vacant(_) => assert_eq!(value, None),\n    }\n}\n\nassert_eq!(map.len(), 6);\n```","links":{"`HashMap`":"0:483:154"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:903","0:913","a:1:42468:5939-0:850:3773","a:1:2997:246-0:850:3773","a:1:42469:5938-0:850:3773","a:1:32833:237-0:850:3773","a:1:32890:5735-0:850:3773","b:1:3610-0:850:3773","b:1:2471-0:850:3773","b:1:2789-0:850:3773","b:1:2784-0:850:3773","b:1:2778-0:850:3773","b:1:2774-0:850:3773","b:1:2474-0:850:3773","0:990"]}}},"1:13013:21523":{"id":"1:13013:21523","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:2001":{"id":"0:2001","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2039,0],"end":[2063,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2006:174","0:2007:1062","0:2008:3008","0:2009:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8044-0:1791:5006":{"id":"b:1:8044-0:1791:5006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2471-0:850:3773":{"id":"b:1:2471-0:850:3773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1219:846":{"id":"0:1219:846","crate_id":0,"name":"into_iter","span":{"filename":"src/map.rs","begin":[4716,4],"end":[4720,5]},"visibility":"default","docs":"Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(\"a\", 1), (\"b\", 2), (\"c\", 3)].into();\n\n// Not possible with .iter()\nlet mut vec: Vec<(&str, i32)> = map.into_iter().collect();\n// The `IntoIter` iterator produces items in arbitrary order, so\n// the items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(\"a\", 1), (\"b\", 2), (\"c\", 3)]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2146:862":{"id":"0:2146:862","crate_id":0,"name":"iter","span":{"filename":"src/table.rs","begin":[697,4],"end":[702,5]},"visibility":"public","docs":"An iterator visiting all elements in arbitrary order.\nThe iterator element type is `&'a T`.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\ntable.insert_unique(hasher(&\"a\"), \"b\", hasher);\ntable.insert_unique(hasher(&\"b\"), \"b\", hasher);\n\n// Will print in an arbitrary order.\nfor x in table.iter() {\n    println!(\"{}\", x);\n}\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3610-0:2291:3404":{"id":"b:1:3610-0:2291:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2240:3543":{"id":"0:2240:3543","crate_id":0,"name":"VacantEntry","span":{"filename":"src/table.rs","begin":[1711,0],"end":[1718,1]},"visibility":"public","docs":"A view into a vacant entry in a `HashTable`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::hash_table::{Entry, HashTable, VacantEntry};\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table: HashTable<&str> = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\n\nlet entry_v: VacantEntry<_, _> = match table.entry(hasher(&\"a\"), |&x| x == \"a\", hasher) {\n    Entry::Vacant(view) => view,\n    Entry::Occupied(_) => unreachable!(),\n};\nentry_v.insert(\"a\");\nassert!(table.find(hasher(&\"a\"), |&x| x == \"a\").is_some() && table.len() == 1);\n\n// Nonexistent key (insert)\nmatch table.entry(hasher(&\"b\"), |&x| x == \"b\", hasher) {\n    Entry::Vacant(view) => {\n        view.insert(\"b\");\n    }\n    Entry::Occupied(_) => unreachable!(),\n}\nassert!(table.find(hasher(&\"b\"), |&x| x == \"b\").is_some() && table.len() == 2);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:2251","a:1:42468:5939-0:2240:3543","a:1:2997:246-0:2240:3543","a:1:42469:5938-0:2240:3543","a:1:32833:237-0:2240:3543","a:1:32890:5735-0:2240:3543","b:1:3610-0:2240:3543","b:1:2471-0:2240:3543","b:1:2789-0:2240:3543","b:1:2784-0:2240:3543","b:1:2778-0:2240:3543","b:1:2774-0:2240:3543","b:1:2474-0:2240:3543","0:2247"]}}},"0:2266":{"id":"0:2266","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1836,0],"end":[1845,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"AbsentEntry","id":"0:2257:5389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2270:5546"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42468:5939-0:713:2963":{"id":"a:1:42468:5939-0:713:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:699:724":{"id":"0:699:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[2329,4],"end":[2331,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:869:3990":{"id":"b:1:2474-0:869:3990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42469:5938-0:2214:3541":{"id":"a:1:42469:5938-0:2214:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13007:21521":{"id":"1:13007:21521","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:755:3485":{"id":"b:1:2774-0:755:3485","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:573:3571":{"id":"0:573:3571","crate_id":0,"name":"get_key_value","span":{"filename":"src/map.rs","begin":[1339,4],"end":[1348,5]},"visibility":"public","docs":"Returns the key-value pair corresponding to the supplied key.\n\nThe supplied key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\nassert_eq!(map.get_key_value(&2), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:483:154":{"id":"b:1:2774-0:483:154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32833:237-0:813:3431":{"id":"a:1:32833:237-0:813:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2020:3542":{"id":"0:2020:3542","crate_id":0,"name":"Vacant","span":{"filename":"src/set.rs","begin":[2133,4],"end":[2133,36]},"visibility":"default","docs":"A vacant entry.\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet};\nlet mut set: HashSet<&str> = HashSet::new();\n\nmatch set.entry(\"a\") {\n    Entry::Occupied(_) => unreachable!(),\n    Entry::Vacant(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2022:1764"]},"discriminant":null}}},"b:4:725-0:2119:1838":{"id":"b:4:725-0:2119:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:727:4269","4:728:4693","4:729:11909"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2471-0:888:3994":{"id":"b:1:2471-0:888:3994","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:888:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1991:458":{"id":"0:1991:458","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[2013,4],"end":[2017,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:1798:4987":{"id":"a:1:42469:5938-0:1798:4987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13068:21529":{"id":"1:13068:21529","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12697:14610","str::split":"1:13056:2982","prim@char":"1:53676:454","str::split_terminator":"1:13065:21528"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44295:12732","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12717:14616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:2311:2963":{"id":"b:1:2789-0:2311:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:552:3464":{"id":"0:552:3464","crate_id":0,"name":"extract_if","span":{"filename":"src/map.rs","begin":[978,4],"end":[989,5]},"visibility":"public","docs":"Drains elements which are true under the given predicate,\nand returns an iterator over the removed items.\n\nIn other words, move all pairs `(k, v)` such that `f(&k, &mut v)` returns `true` out\ninto another iterator.\n\nNote that `extract_if` lets you mutate every value in the filter closure, regardless of\nwhether you choose to keep or remove it.\n\nIf the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse [`retain()`] with a negated predicate if you do not need the returned iterator.\n\nKeeps the allocated memory for reuse.\n\n[`retain()`]: HashMap::retain\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x)).collect();\n\nlet drained: HashMap<i32, i32> = map.extract_if(|k, _v| k % 2 == 0).collect();\n\nlet mut evens = drained.keys().cloned().collect::<Vec<_>>();\nlet mut odds = map.keys().cloned().collect::<Vec<_>>();\nevens.sort();\nodds.sort();\n\nassert_eq!(evens, vec![0, 2, 4, 6]);\nassert_eq!(odds, vec![1, 3, 5, 7]);\n\nlet mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x)).collect();\n\n{   // Iterator is dropped without being consumed.\n    let d = map.extract_if(|k, _v| k % 2 != 0);\n}\n\n// ExtractIf was not exhausted, therefore no elements were drained.\nassert_eq!(map.len(), 8);\n```","links":{"HashMap::retain":"0:550:3442"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:832":{"id":"0:832","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2748,0],"end":[2764,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:837:174","0:838:1062","0:840:3008"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1063:724":{"id":"0:1063:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4275,4],"end":[4280,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1844":{"id":"0:1844","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1708,0],"end":[1713,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["0:1847:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2387:1839":{"id":"0:2387:1839","crate_id":0,"name":"equivalent","span":{"filename":"src/lib.rs","begin":[161,4],"end":[161,42]},"visibility":"default","docs":"Checks if this value is equivalent to the given key.\n\nReturns `true` if both values are equivalent, and `false` otherwise.\n\n# Correctness\n\nWhen this function returns `true`, both `self` and `key` must hash to\nthe same value.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1435:4080":{"id":"0:1435:4080","crate_id":0,"name":"and_modify","span":{"filename":"src/map.rs","begin":[5877,4],"end":[5888,5]},"visibility":"public","docs":"Provides in-place mutable access to an occupied entry before any\npotential inserts into the map.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\n\nmap.entry_ref(\"poneyland\")\n   .and_modify(|e| { *e += 1 })\n   .or_insert(42);\nassert_eq!(map[\"poneyland\"], 42);\n\nmap.entry_ref(\"poneyland\")\n   .and_modify(|e| { *e += 1 })\n   .or_insert(42);\nassert_eq!(map[\"poneyland\"], 43);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13095:21533":{"id":"1:13095:21533","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1730":{"id":"0:1730","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1347,0],"end":[1369,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8049:4538","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1734:4559"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42468:5939-0:869:3990":{"id":"a:1:42468:5939-0:869:3990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:2997:246-0:2331:3431":{"id":"a:1:2997:246-0:2331:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32833:237-0:1173:3702":{"id":"a:1:32833:237-0:1173:3702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13037:21527":{"id":"1:13037:21527","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44491:12743","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2780:751":{"id":"1:2780:751","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2784-0:1771:3395":{"id":"b:1:2784-0:1771:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1407:4104":{"id":"0:1407:4104","crate_id":0,"name":"replace_entry_with","span":{"filename":"src/map.rs","begin":[5591,4],"end":[5619,5]},"visibility":"public","docs":"Provides shared access to the key and owned access to the value of\nthe entry and allows to replace or remove it based on the\nvalue of the returned option.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nmap.insert(\"poneyland\", 42);\n\nlet entry = match map.entry(\"poneyland\") {\n    Entry::Occupied(e) => {\n        e.replace_entry_with(|k, v| {\n            assert_eq!(k, &\"poneyland\");\n            assert_eq!(v, 42);\n            Some(v + 1)\n        })\n    }\n    Entry::Vacant(_) => panic!(),\n};\n\nmatch entry {\n    Entry::Occupied(e) => {\n        assert_eq!(e.key(), &\"poneyland\");\n        assert_eq!(e.get(), &43);\n    }\n    Entry::Vacant(_) => panic!(),\n}\n\nassert_eq!(map[\"poneyland\"], 43);\n\nlet entry = match map.entry(\"poneyland\") {\n    Entry::Occupied(e) => e.replace_entry_with(|_k, _v| None),\n    Entry::Vacant(_) => panic!(),\n};\n\nmatch entry {\n    Entry::Vacant(e) => {\n        assert_eq!(e.key(), &\"poneyland\");\n    }\n    Entry::Occupied(_) => panic!(),\n}\n\nassert!(!map.contains_key(\"poneyland\"));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"generic":"V"}],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2163:174":{"id":"0:2163:174","crate_id":0,"name":"Item","span":{"filename":"src/table.rs","begin":[1022,4],"end":[1022,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:42469:5938-0:1805:4997":{"id":"a:1:42469:5938-0:1805:4997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32833:237-0:2331:3431":{"id":"a:1:32833:237-0:2331:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2474-0:1120:3554":{"id":"b:1:2474-0:1120:3554","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2997:246-0:1775:2963":{"id":"a:1:2997:246-0:1775:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:745":{"id":"0:745","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2489,0],"end":[2489,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2774-0:1791:5006":{"id":"b:1:2774-0:1791:5006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:749":{"id":"0:749","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2491,0],"end":[2497,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:753:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32833:237-0:1798:4987":{"id":"a:1:32833:237-0:1798:4987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2471-0:2012:3538":{"id":"b:1:2471-0:2012:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2012:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3610-0:2214:3541":{"id":"b:1:3610-0:2214:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1630:882":{"id":"0:1630:882","crate_id":0,"name":"len","span":{"filename":"src/set.rs","begin":[310,4],"end":[312,5]},"visibility":"public","docs":"Returns the number of elements in the set.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut v = HashSet::new();\nassert_eq!(v.len(), 0);\nv.insert(1);\nassert_eq!(v.len(), 1);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2184":{"id":"0:2184","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1067,0],"end":[1077,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2187:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:753:724":{"id":"0:753:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[2492,4],"end":[2496,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1712":{"id":"0:1712","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1303,0],"end":[1310,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"tuple":[]}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1716:751"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32833:237-0:850:3773":{"id":"a:1:32833:237-0:850:3773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32890:5735-0:755:3485":{"id":"a:1:32890:5735-0:755:3485","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2778-0:869:3990":{"id":"b:1:2778-0:869:3990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2789-0:483:154":{"id":"b:1:2789-0:483:154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:663:724":{"id":"0:663:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[2201,4],"end":[2203,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:850:3773":{"id":"b:1:2774-0:850:3773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2171:2963":{"id":"0:2171:2963","crate_id":0,"name":"IntoIter","span":{"filename":"src/table.rs","begin":[1037,4],"end":[1037,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"a:1:32833:237-0:1064:3543":{"id":"a:1:32833:237-0:1064:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1064:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2291:3404":{"id":"0:2291:3404","crate_id":0,"name":"IterMut","span":{"filename":"src/table.rs","begin":[1901,0],"end":[1904,1]},"visibility":"public","docs":"A mutable iterator over the entries of a `HashTable` in arbitrary order.\nThe iterator element type is `&'a mut T`.\n\nThis `struct` is created by the [`iter_mut`] method on [`HashTable`]. See its\ndocumentation for more.\n\n[`iter_mut`]: struct.HashTable.html#method.iter_mut\n[`HashTable`]: struct.HashTable.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:2291:3404","a:1:2997:246-0:2291:3404","a:1:42469:5938-0:2291:3404","a:1:32833:237-0:2291:3404","a:1:32890:5735-0:2291:3404","b:1:3610-0:2291:3404","b:1:2471-0:2291:3404","b:1:2789-0:2291:3404","b:1:8044-0:2291:3404","b:1:2784-0:2291:3404","b:1:2778-0:2291:3404","b:1:2774-0:2291:3404","b:1:2474-0:2291:3404","0:2309","0:2296","0:2306"]}}},"0:2457:1862":{"id":"0:2457:1862","crate_id":0,"name":"CapacityOverflow","span":{"filename":"src/lib.rs","begin":[180,4],"end":[180,20]},"visibility":"default","docs":"Error due to the computed capacity exceeding the collection's maximum\n(usually `isize::MAX` bytes).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1284":{"id":"0:1284","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4844,0],"end":[4867,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1288:174","0:1289:1062","0:1290:3008","0:1291:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:808:458":{"id":"0:808:458","crate_id":0,"name":"clone","span":{"filename":"src/map.rs","begin":[2652,4],"end":[2656,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:883":{"id":"0:883","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3047,0],"end":[3054,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32890:5735-0:1805:4997":{"id":"a:1:32890:5735-0:1805:4997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2205:724":{"id":"0:2205:724","crate_id":0,"name":"fmt","span":{"filename":"src/table.rs","begin":[1205,4],"end":[1210,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:1604:156":{"id":"b:1:2474-0:1604:156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2774-0:700:3404":{"id":"b:1:2774-0:700:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13022:2476":{"id":"1:13022:2476","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:947:2410":{"id":"0:947:2410","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[3362,4],"end":[3374,5]},"visibility":"public","docs":"Sets the value of the entry, and returns a RawOccupiedEntryMut.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nlet entry = map.raw_entry_mut().from_key(\"horseyland\").insert(\"horseyland\", 37);\n\nassert_eq!(entry.remove_entry(), (\"horseyland\", 37));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1873:724":{"id":"0:1873:724","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1755,4],"end":[1758,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:744:882":{"id":"0:744:882","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[2484,4],"end":[2486,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8044-0:845:3385":{"id":"b:1:8044-0:845:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2784-0:700:3404":{"id":"b:1:2784-0:700:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:8047:2963":{"id":"1:8047:2963","crate_id":1,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"b:1:2474-0:2311:2963":{"id":"b:1:2474-0:2311:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2381-0:2102:1829":{"id":"0:2381-0:2102:1829","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,4],"end":[119,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::table","name":"table","id":"0:2102:1829","glob":true}}},"0:1948:3008":{"id":"0:1948:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1918,4],"end":[1921,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:1811:5015":{"id":"b:1:2778-0:1811:5015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2778-0:2291:3404":{"id":"b:1:2778-0:2291:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2463":{"id":"0:2463","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[176,16],"end":[176,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:32835:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:650:667":{"id":"0:650:667","crate_id":0,"name":"eq","span":{"filename":"src/map.rs","begin":[2176,4],"end":[2183,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:1779:3431":{"id":"b:1:2471-0:1779:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2139:3520":{"id":"0:2139:3520","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/table.rs","begin":[478,4],"end":[480,5]},"visibility":"public","docs":"Shrinks the capacity of the table as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.\n\n`hasher` is called if entries need to be moved or copied to a new table.\nThis must return the same hash value that each entry was inserted with.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table = HashTable::with_capacity(100);\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\ntable.insert_unique(hasher(&1), 1, hasher);\ntable.insert_unique(hasher(&2), 2, hasher);\nassert!(table.capacity() >= 100);\ntable.shrink_to_fit(hasher);\nassert!(table.capacity() >= 2);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["hasher",{"impl_trait":[{"trait_bound":{"trait":{"name":"Fn","id":"1:3237:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"u64"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"impl Fn(&T) -> u64","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"1:3237:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"u64"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32833:237-0:1805:4997":{"id":"a:1:32833:237-0:1805:4997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2257:5389":{"id":"0:2257:5389","crate_id":0,"name":"AbsentEntry","span":{"filename":"src/table.rs","begin":[1823,0],"end":[1828,1]},"visibility":"public","docs":"Type representing the absence of an entry, as returned by [`HashTable::find_entry`].\n\nThis type only exists due to [limitations] in Rust's NLL borrow checker. In\nthe future, `find_entry` will return an `Option<OccupiedEntry>` and this\ntype will be removed.\n\n[limitations]: https://smallcultfollowing.com/babysteps/blog/2018/06/15/mir-based-borrow-check-nll-status-update/#polonius\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::hash_table::{AbsentEntry, Entry, HashTable};\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table: HashTable<&str> = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\n\nlet entry_v: AbsentEntry<_, _> = table.find_entry(hasher(&\"a\"), |&x| x == \"a\").unwrap_err();\nentry_v\n    .into_table()\n    .insert_unique(hasher(&\"a\"), \"a\", hasher);\nassert!(table.find(hasher(&\"a\"), |&x| x == \"a\").is_some() && table.len() == 1);\n\n// Nonexistent key (insert)\nmatch table.entry(hasher(&\"b\"), |&x| x == \"b\", hasher) {\n    Entry::Vacant(view) => {\n        view.insert(\"b\");\n    }\n    Entry::Occupied(_) => unreachable!(),\n}\nassert!(table.find(hasher(&\"b\"), |&x| x == \"b\").is_some() && table.len() == 2);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{"`HashTable::find_entry`":"0:2135:5388"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:2266","a:1:42468:5939-0:2257:5389","a:1:2997:246-0:2257:5389","a:1:42469:5938-0:2257:5389","a:1:32833:237-0:2257:5389","a:1:32890:5735-0:2257:5389","b:1:3610-0:2257:5389","b:1:2471-0:2257:5389","b:1:2789-0:2257:5389","b:1:2784-0:2257:5389","b:1:2778-0:2257:5389","b:1:2774-0:2257:5389","b:1:2474-0:2257:5389","0:2262"]}}},"0:2343:174":{"id":"0:2343:174","crate_id":0,"name":"Item","span":{"filename":"src/table.rs","begin":[2012,4],"end":[2012,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:2045":{"id":"0:2045","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2223,0],"end":[2227,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2039:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2049:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2471-0:1784:3465":{"id":"b:1:2471-0:1784:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2778-0:1120:3554":{"id":"b:1:2778-0:1120:3554","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5600:22253":{"id":"4:5600:22253","crate_id":4,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"4:7629:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:1173:3702":{"id":"a:1:42469:5938-0:1173:3702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1274:882":{"id":"0:1274:882","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[4832,4],"end":[4834,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1839:1062":{"id":"0:1839:1062","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1692,4],"end":[1694,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2784-0:2028:3541":{"id":"b:1:2784-0:2028:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32833:237-0:1784:3465":{"id":"a:1:32833:237-0:1784:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:706":{"id":"0:706","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2370,0],"end":[2370,59]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:984:2410":{"id":"0:984:2410","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[3960,4],"end":[3967,5]},"visibility":"public","docs":"Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"c\") {\n    RawEntryMut::Occupied(_) => panic!(),\n    RawEntryMut::Vacant(v) => assert_eq!(v.insert(\"c\", 300), (&mut \"c\", &mut 300)),\n}\n\nassert_eq!(map[&\"c\"], 300);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1859:3042":{"id":"0:1859:3042","crate_id":0,"name":"fold","span":{"filename":"src/set.rs","begin":[1738,4],"end":[1744,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:2012:3538":{"id":"b:1:2774-0:2012:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2012:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42469:5938-0:2331:3431":{"id":"a:1:42469:5938-0:2331:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3610-0:2311:2963":{"id":"b:1:3610-0:2311:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:556:3484":{"id":"0:556:3484","crate_id":0,"name":"into_values","span":{"filename":"src/map.rs","begin":[1065,4],"end":[1069,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the values in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `V`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\n\nlet mut vec: Vec<i32> = map.into_values().collect();\n\n// The `IntoValues` iterator produces values in arbitrary order, so\n// the values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [1, 2, 3]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:631:2410":{"id":"0:631:2410","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[1751,4],"end":[1766,5]},"visibility":"public","docs":"Inserts a key-value pair into the map.\n\nIf the map did not have this key present, [`None`] is returned.\n\nIf the map did have this key present, the value is updated, and the old\nvalue is returned. The key is not updated, though; this matters for\ntypes that can be `==` without being identical. See the [`std::collections`]\n[module-level documentation] for more.\n\n[`None`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.None\n[`std::collections`]: https://doc.rust-lang.org/std/collections/index.html\n[module-level documentation]: https://doc.rust-lang.org/std/collections/index.html#insert-and-complex-keys\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nassert_eq!(map.insert(37, \"a\"), None);\nassert_eq!(map.is_empty(), false);\n\nmap.insert(37, \"b\");\nassert_eq!(map.insert(37, \"c\"), Some(\"b\"));\nassert_eq!(map[&37], \"c\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"generic":"K"}],["v",{"generic":"V"}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42468:5939-0:755:3485":{"id":"a:1:42468:5939-0:755:3485","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:643:3772":{"id":"0:643:3772","crate_id":0,"name":"raw_entry_mut","span":{"filename":"src/map.rs","begin":[2042,4],"end":[2044,5]},"visibility":"public","docs":"Creates a raw entry builder for the HashMap.\n\nRaw entries provide the lowest level of control for searching and\nmanipulating a map. They must be manually initialized with a hash and\nthen manually searched. After this, insertions into a vacant entry\nstill require an owned key to be provided.\n\nRaw entries are useful for such exotic situations as:\n\n* Hash memoization\n* Deferring the creation of an owned key until it is known to be required\n* Using a search key that doesn't work with the Borrow trait\n* Using custom comparison logic without newtype wrappers\n\nBecause raw entries provide much more low-level control, it's much easier\nto put the HashMap into an inconsistent state which, while memory-safe,\nwill cause the map to produce seemingly random results. Higher-level and\nmore foolproof APIs like `entry` should be preferred when possible.\n\nIn particular, the hash used to initialized the raw entry must still be\nconsistent with the hash of the key that is ultimately stored in the entry.\nThis is because implementations of HashMap may need to recompute hashes\nwhen resizing, at which point only the keys are available.\n\nRaw entries give mutable access to the keys. This must not be used\nto modify how the key would compare or hash, as the map will not re-evaluate\nwhere the key should go, meaning the keys may become \"lost\" if their\nlocation does not reflect their state. For instance, if you change a key\nso that the map now contains keys which compare equal, search may start\nacting erratically, with two keys randomly masking each other. Implementations\nare free to assume this doesn't happen (within the limits of memory-safety).\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\", 100), (\"b\", 200), (\"c\", 300)]);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\n// Existing key (insert and update)\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(mut view) => {\n        assert_eq!(view.get(), &100);\n        let v = view.get_mut();\n        let new_v = (*v) * 10;\n        *v = new_v;\n        assert_eq!(view.insert(1111), 1000);\n    }\n}\n\nassert_eq!(map[&\"a\"], 1111);\nassert_eq!(map.len(), 3);\n\n// Existing key (take)\nlet hash = compute_hash(map.hasher(), &\"c\");\nmatch map.raw_entry_mut().from_key_hashed_nocheck(hash, &\"c\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"c\", 300));\n    }\n}\nassert_eq!(map.raw_entry().from_key(&\"c\"), None);\nassert_eq!(map.len(), 2);\n\n// Nonexistent key (insert and update)\nlet key = \"d\";\nlet hash = compute_hash(map.hasher(), &key);\nmatch map.raw_entry_mut().from_hash(hash, |q| *q == key) {\n    RawEntryMut::Occupied(_) => unreachable!(),\n    RawEntryMut::Vacant(view) => {\n        let (k, value) = view.insert(\"d\", 4000);\n        assert_eq!((*k, *value), (\"d\", 4000));\n        *value = 40000;\n    }\n}\nassert_eq!(map[&\"d\"], 40000);\nassert_eq!(map.len(), 3);\n\nmatch map.raw_entry_mut().from_hash(hash, |q| *q == key) {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"d\", 40000));\n    }\n}\nassert_eq!(map.get(&\"d\"), None);\nassert_eq!(map.len(), 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2126:2299":{"id":"0:2126:2299","crate_id":0,"name":"with_capacity","span":{"filename":"src/table.rs","begin":[85,4],"end":[89,5]},"visibility":"public","docs":"Creates an empty `HashTable` with the specified capacity.\n\nThe hash table will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash table will not allocate.\n\n# Examples\n\n```\nuse hashbrown::HashTable;\nlet mut table: HashTable<&str> = HashTable::with_capacity(10);\nassert_eq!(table.len(), 0);\nassert!(table.capacity() >= 10);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:800:3378":{"id":"0:800:3378","crate_id":0,"name":"Values","span":{"filename":"src/map.rs","begin":[2645,0],"end":[2647,1]},"visibility":"public","docs":"An iterator over the values of a `HashMap` in arbitrary order.\nThe iterator element type is `&'a V`.\n\nThis `struct` is created by the [`values`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`values`]: struct.HashMap.html#method.values\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut values = map.values();\nlet mut vec = vec![values.next(), values.next(), values.next()];\n\n// The `Values` iterator produces values in arbitrary order, so the\n// values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some(&\"a\"), Some(&\"b\"), Some(&\"c\")]);\n\n// It is fused iterator\nassert_eq!(values.next(), None);\nassert_eq!(values.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:800:3378","a:1:2997:246-0:800:3378","a:1:42469:5938-0:800:3378","a:1:32833:237-0:800:3378","a:1:32890:5735-0:800:3378","b:1:3610-0:800:3378","b:1:2471-0:800:3378","b:1:2789-0:800:3378","b:1:8044-0:800:3378","b:1:2784-0:800:3378","b:1:2778-0:800:3378","b:1:2774-0:800:3378","b:1:2474-0:800:3378","b:4:725-0:800:3378","0:1317","0:805","0:809","0:1313","0:1302"]}}},"0:2130:2304":{"id":"0:2130:2304","crate_id":0,"name":"new_in","span":{"filename":"src/table.rs","begin":[134,4],"end":[138,5]},"visibility":"public","docs":"Creates an empty `HashTable` using the given allocator.\n\nThe hash table is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse bumpalo::Bump;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet bump = Bump::new();\nlet mut table = HashTable::new_in(&bump);\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\n\n// The created HashTable holds none elements\nassert_eq!(table.len(), 0);\n\n// The created HashTable also doesn't allocate memory\nassert_eq!(table.capacity(), 0);\n\n// Now we insert element inside created HashTable\ntable.insert_unique(hasher(&\"One\"), \"One\", hasher);\n// We can see that the HashTable holds 1 element\nassert_eq!(table.len(), 1);\n// And it also allocates some capacity\nassert!(table.capacity() > 1);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1378:4355":{"id":"0:1378:4355","crate_id":0,"name":"or_insert_with_key","span":{"filename":"src/map.rs","begin":[5098,4],"end":[5110,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting, if empty, the result of the default function.\nThis method allows for generating key-derived values for insertion by providing the default\nfunction a reference to the key that was moved during the `.entry(key)` method call.\n\nThe reference to the moved key is provided so that cloning or copying the key is\nunnecessary, unlike with `.or_insert_with(|| ... )`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, usize> = HashMap::new();\n\n// nonexistent key\nmap.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());\nassert_eq!(map[\"poneyland\"], 9);\n\n// existing key\n*map.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count() * 10) *= 2;\nassert_eq!(map[\"poneyland\"], 18);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}],"output":{"generic":"V"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1961:724":{"id":"0:1961:724","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1952,4],"end":[1954,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2166":{"id":"0:2166","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1032,0],"end":[1042,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:2170:174","0:2171:2963","0:2172:846"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:696":{"id":"0:696","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2328,0],"end":[2332,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:699:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2778-0:787:3368":{"id":"b:1:2778-0:787:3368","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2474-0:2192:3538":{"id":"b:1:2474-0:2192:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2192:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1376:4070":{"id":"0:1376:4070","crate_id":0,"name":"or_insert_with","span":{"filename":"src/map.rs","begin":[5064,4],"end":[5073,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\n// nonexistent key\nmap.entry(\"poneyland\").or_insert_with(|| 3);\nassert_eq!(map[\"poneyland\"], 3);\n\n// existing key\n*map.entry(\"poneyland\").or_insert_with(|| 10) *= 2;\nassert_eq!(map[\"poneyland\"], 6);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"V"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:813:3431":{"id":"b:1:2778-0:813:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42468:5939-0:800:3378":{"id":"a:1:42468:5939-0:800:3378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3610-0:2119:1838":{"id":"b:1:3610-0:2119:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:695:458":{"id":"0:695:458","crate_id":0,"name":"clone","span":{"filename":"src/map.rs","begin":[2320,4],"end":[2325,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2239:5546":{"id":"0:2239:5546","crate_id":0,"name":"into_table","span":{"filename":"src/table.rs","begin":[1667,4],"end":[1669,5]},"visibility":"public","docs":"Converts the OccupiedEntry into a mutable reference to the underlying\ntable.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2788:1631":{"id":"1:2788:1631","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42487:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:1779:3431":{"id":"b:1:2474-0:1779:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2255:2410":{"id":"0:2255:2410","crate_id":0,"name":"insert","span":{"filename":"src/table.rs","begin":[1762,4],"end":[1773,5]},"visibility":"public","docs":"Inserts a new element into the table with the hash that was used to\nobtain the `VacantEntry`.\n\nAn `OccupiedEntry` is returned for the newly inserted element.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::hash_table::Entry;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table: HashTable<&str> = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\n\nif let Entry::Vacant(o) = table.entry(hasher(&\"poneyland\"), |&x| x == \"poneyland\", hasher) {\n    o.insert(\"poneyland\");\n}\nassert_eq!(\n    table.find(hasher(&\"poneyland\"), |&x| x == \"poneyland\"),\n    Some(&\"poneyland\")\n);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1363":{"id":"0:1363","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4976,0],"end":[4985,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1367:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13024:21524":{"id":"1:13024:21524","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:53682:1549","str::slice_mut_unchecked":"1:13025:21525","crate::ops::Index":"1:39963:3151"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32890:5735-0:2311:2963":{"id":"a:1:32890:5735-0:2311:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2315":{"id":"0:2315","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1956,0],"end":[1977,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2318:174","0:2319:1062","0:2320:3008","0:2321:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3610-0:700:3404":{"id":"b:1:3610-0:700:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1264:174":{"id":"0:1264:174","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4811,4],"end":[4811,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"1:13128:21378":{"id":"1:13128:21378","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13103:21538":{"id":"1:13103:21538","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:53676:454","self::pattern":"1:12697:14610"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12722:14615","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:537:311":{"id":"0:537:311","crate_id":0,"name":"allocator","span":{"filename":"src/map.rs","begin":[513,4],"end":[515,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:723:3478":{"id":"0:723:3478","crate_id":0,"name":"IntoKeys","span":{"filename":"src/map.rs","begin":[2457,0],"end":[2459,1]},"visibility":"public","docs":"An owning iterator over the keys of a `HashMap` in arbitrary order.\nThe iterator element type is `K`.\n\nThis `struct` is created by the [`into_keys`] method on [`HashMap`].\nSee its documentation for more.\nThe map cannot be used after calling that method.\n\n[`into_keys`]: struct.HashMap.html#method.into_keys\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut keys = map.into_keys();\nlet mut vec = vec![keys.next(), keys.next(), keys.next()];\n\n// The `IntoKeys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some(1), Some(2), Some(3)]);\n\n// It is fused iterator\nassert_eq!(keys.next(), None);\nassert_eq!(keys.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:723:3478","a:1:2997:246-0:723:3478","a:1:42469:5938-0:723:3478","a:1:32833:237-0:723:3478","a:1:32890:5735-0:723:3478","b:1:3610-0:723:3478","b:1:2471-0:723:3478","b:1:2789-0:723:3478","b:1:8044-0:723:3478","b:1:2784-0:723:3478","b:1:2778-0:723:3478","b:1:2774-0:723:3478","b:1:2474-0:723:3478","0:740","0:749","0:728","0:745"]}}},"0:1020:3538":{"id":"0:1020:3538","crate_id":0,"name":"Entry","span":{"filename":"src/map.rs","begin":[4166,0],"end":[4199,1]},"visibility":"public","docs":"A view into a single entry in a map, which may either be vacant or occupied.\n\nThis `enum` is constructed from the [`entry`] method on [`HashMap`].\n\n[`HashMap`]: struct.HashMap.html\n[`entry`]: struct.HashMap.html#method.entry\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap, OccupiedEntry};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\", 10), (\"b\", 20), (\"c\", 30)]);\nassert_eq!(map.len(), 3);\n\n// Existing key (insert)\nlet entry: Entry<_, _, _> = map.entry(\"a\");\nlet _raw_o: OccupiedEntry<_, _, _> = entry.insert(1);\nassert_eq!(map.len(), 3);\n// Nonexistent key (insert)\nmap.entry(\"d\").insert(4);\n\n// Existing key (or_insert)\nlet v = map.entry(\"b\").or_insert(2);\nassert_eq!(std::mem::replace(v, 2), 20);\n// Nonexistent key (or_insert)\nmap.entry(\"e\").or_insert(5);\n\n// Existing key (or_insert_with)\nlet v = map.entry(\"c\").or_insert_with(|| 3);\nassert_eq!(std::mem::replace(v, 3), 30);\n// Nonexistent key (or_insert_with)\nmap.entry(\"f\").or_insert_with(|| 6);\n\nprintln!(\"Our HashMap: {:?}\", map);\n\nlet mut vec: Vec<_> = map.iter().map(|(&k, &v)| (k, v)).collect();\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4), (\"e\", 5), (\"f\", 6)]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"variants_stripped":false,"variants":["0:1026:3540","0:1029:3542"],"impls":["0:1368","0:1385","a:1:42468:5939-0:1020:3538","a:1:2997:246-0:1020:3538","a:1:42469:5938-0:1020:3538","a:1:32833:237-0:1020:3538","a:1:32890:5735-0:1020:3538","b:1:3610-0:1020:3538","b:1:2471-0:1020:3538","b:1:2789-0:1020:3538","b:1:2784-0:1020:3538","b:1:2778-0:1020:3538","b:1:2774-0:1020:3538","b:1:2474-0:1020:3538","0:1032"]}}},"0:1889":{"id":"0:1889","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1791,0],"end":[1791,58]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1324:174":{"id":"0:1324:174","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4909,4],"end":[4909,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}}}},"b:4:725-0:1791:5006":{"id":"b:4:725-0:1791:5006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:727:4269","4:728:4693","4:729:11909"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2456:1859":{"id":"0:2456:1859","crate_id":0,"name":"TryReserveError","span":{"filename":"src/lib.rs","begin":[177,0],"end":[187,1]},"visibility":"public","docs":"The error type for `try_reserve` methods.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:2457:1862","0:2459:1864"],"impls":["a:1:42468:5939-0:2456:1859","a:1:2997:246-0:2456:1859","a:1:42469:5938-0:2456:1859","a:1:32833:237-0:2456:1859","a:1:32890:5735-0:2456:1859","b:0:2388-0:2456:1859","b:1:3610-0:2456:1859","b:1:2471-0:2456:1859","b:1:2789-0:2456:1859","b:1:2784-0:2456:1859","b:1:2778-0:2456:1859","b:1:2774-0:2456:1859","b:1:2474-0:2456:1859","b:4:725-0:2456:1859","0:2468","0:2461","0:2464","0:2463","0:2466"]}}},"4:5609:22255":{"id":"4:5609:22255","crate_id":4,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"4:294:12268","`String`":"4:7629:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:294:12268","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"4:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1019:724":{"id":"0:1019:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4118,4],"end":[4120,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1335":{"id":"0:1335","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4938,0],"end":[4938,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2131:2300":{"id":"0:2131:2300","crate_id":0,"name":"with_capacity_in","span":{"filename":"src/table.rs","begin":[183,4],"end":[187,5]},"visibility":"public","docs":"Creates an empty `HashTable` with the specified capacity using the given allocator.\n\nThe hash table will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash table will not allocate.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse bumpalo::Bump;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet bump = Bump::new();\nlet mut table = HashTable::with_capacity_in(5, &bump);\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\n\n// The created HashTable holds none elements\nassert_eq!(table.len(), 0);\n// But it can hold at least 5 elements without reallocating\nlet empty_map_capacity = table.capacity();\nassert!(empty_map_capacity >= 5);\n\n// Now we insert some 5 elements inside created HashTable\ntable.insert_unique(hasher(&\"One\"), \"One\", hasher);\ntable.insert_unique(hasher(&\"Two\"), \"Two\", hasher);\ntable.insert_unique(hasher(&\"Three\"), \"Three\", hasher);\ntable.insert_unique(hasher(&\"Four\"), \"Four\", hasher);\ntable.insert_unique(hasher(&\"Five\"), \"Five\", hasher);\n\n// We can see that the HashTable holds 5 elements\nassert_eq!(table.len(), 5);\n// But its capacity isn't changed\nassert_eq!(table.capacity(), empty_map_capacity)\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:813:3431":{"id":"a:1:2997:246-0:813:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2102:1829":{"id":"0:2102:1829","crate_id":0,"name":"table","span":{"filename":"src/table.rs","begin":[1,0],"end":[2064,99]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:2119:1838","0:2192:3538","0:2214:3541","0:2240:3543","0:2257:5389","0:2271:3395","0:2291:3404","0:2311:2963","0:2331:3431","0:2357:3465"],"is_stripped":true}}},"0:2192:3538":{"id":"0:2192:3538","crate_id":0,"name":"Entry","span":{"filename":"src/table.rs","begin":[1142,0],"end":[1202,1]},"visibility":"public","docs":"A view into a single entry in a table, which may either be vacant or occupied.\n\nThis `enum` is constructed from the [`entry`] method on [`HashTable`].\n\n[`HashTable`]: struct.HashTable.html\n[`entry`]: struct.HashTable.html#method.entry\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::hash_table::{Entry, HashTable, OccupiedEntry};\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\nfor x in [\"a\", \"b\", \"c\"] {\n    table.insert_unique(hasher(&x), x, hasher);\n}\nassert_eq!(table.len(), 3);\n\n// Existing value (insert)\nlet entry: Entry<_> = table.entry(hasher(&\"a\"), |&x| x == \"a\", hasher);\nlet _raw_o: OccupiedEntry<_, _> = entry.insert(\"a\");\nassert_eq!(table.len(), 3);\n// Nonexistent value (insert)\ntable.entry(hasher(&\"d\"), |&x| x == \"d\", hasher).insert(\"d\");\n\n// Existing value (or_insert)\ntable\n    .entry(hasher(&\"b\"), |&x| x == \"b\", hasher)\n    .or_insert(\"b\");\n// Nonexistent value (or_insert)\ntable\n    .entry(hasher(&\"e\"), |&x| x == \"e\", hasher)\n    .or_insert(\"e\");\n\nprintln!(\"Our HashTable: {:?}\", table);\n\nlet mut vec: Vec<_> = table.iter().copied().collect();\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\", \"d\", \"e\"]);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"variants_stripped":false,"variants":["0:2196:3540","0:2199:3542"],"impls":["0:2206","a:1:42468:5939-0:2192:3538","a:1:2997:246-0:2192:3538","a:1:42469:5938-0:2192:3538","a:1:32833:237-0:2192:3538","a:1:32890:5735-0:2192:3538","b:1:3610-0:2192:3538","b:1:2471-0:2192:3538","b:1:2789-0:2192:3538","b:1:2784-0:2192:3538","b:1:2778-0:2192:3538","b:1:2774-0:2192:3538","b:1:2474-0:2192:3538","0:2202"]}}},"0:2300:1062":{"id":"0:2300:1062","crate_id":0,"name":"next","span":{"filename":"src/table.rs","begin":[1909,4],"end":[1915,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1462:2358":{"id":"0:1462:2358","crate_id":0,"name":"remove","span":{"filename":"src/map.rs","begin":[6167,4],"end":[6169,5]},"visibility":"public","docs":"Takes the value out of the entry, and returns it.\nKeeps the allocated memory for reuse.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\n// The map is empty\nassert!(map.is_empty() && map.capacity() == 0);\n\nmap.entry_ref(\"poneyland\").or_insert(12);\n\nif let EntryRef::Occupied(o) = map.entry_ref(\"poneyland\") {\n    assert_eq!(o.remove(), 12);\n}\n\nassert_eq!(map.contains_key(\"poneyland\"), false);\n// Now map hold none elements but capacity is equal to the old one\nassert!(map.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3610-0:1020:3538":{"id":"b:1:3610-0:1020:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42468:5939-0:1120:3554":{"id":"a:1:42468:5939-0:1120:3554","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2778-0:1805:4997":{"id":"b:1:2778-0:1805:4997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3610-0:1038:3541":{"id":"b:1:3610-0:1038:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32890:5735-0:800:3378":{"id":"a:1:32890:5735-0:800:3378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1825":{"id":"0:1825","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1648,0],"end":[1678,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1829:174","0:1830:2963","0:1831:846"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2787:138":{"id":"1:2787:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:963:4127":{"id":"0:963:4127","crate_id":0,"name":"into_key","span":{"filename":"src/map.rs","begin":[3623,4],"end":[3625,5]},"visibility":"public","docs":"Converts the entry into a mutable reference to the key in the entry\nwith a lifetime bound to the map itself.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\nuse std::rc::Rc;\n\nlet key_one = Rc::new(\"a\");\nlet key_two = Rc::new(\"a\");\n\nlet mut map: HashMap<Rc<&str>, u32> = HashMap::new();\nmap.insert(key_one.clone(), 10);\n\nassert_eq!(map[&key_one], 10);\nassert!(Rc::strong_count(&key_one) == 2 && Rc::strong_count(&key_two) == 1);\n\nlet inside_key: &mut Rc<&str>;\n\nmatch map.raw_entry_mut().from_key(&key_one) {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => inside_key = o.into_key(),\n}\n*inside_key = key_two.clone();\n\nassert_eq!(map[&key_two], 10);\nassert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:1079:3553":{"id":"b:1:2778-0:1079:3553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13038:17187":{"id":"1:13038:17187","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44519:12746","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42468:5939-0:1784:3465":{"id":"a:1:42468:5939-0:1784:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:8044-0:1784:3465":{"id":"b:1:8044-0:1784:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:4:725-0:483:154":{"id":"b:4:725-0:483:154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:727:4269","4:728:4693","4:729:11909"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1974:3008":{"id":"0:1974:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1979,4],"end":[1981,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32833:237-0:1020:3538":{"id":"a:1:32833:237-0:1020:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2471-0:869:3990":{"id":"b:1:2471-0:869:3990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1875":{"id":"0:1875","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1761,0],"end":[1784,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1878:174","0:1879:1062","0:1880:3008","0:1881:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42468:5939-0:1079:3553":{"id":"a:1:42468:5939-0:1079:3553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2474-0:800:3378":{"id":"b:1:2474-0:800:3378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13027:20196":{"id":"1:13027:20196","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13026:20195","str::split_at_mut_checked":"1:13029:20200"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:713:2963":{"id":"b:1:2789-0:713:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2471-0:1798:4987":{"id":"b:1:2471-0:1798:4987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1973:1062":{"id":"0:1973:1062","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1975,4],"end":[1977,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:2271:3395":{"id":"a:1:2997:246-0:2271:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1447:4375":{"id":"0:1447:4375","crate_id":0,"name":"or_default","span":{"filename":"src/map.rs","begin":[5977,4],"end":[5986,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the default value if empty,\nand returns a mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, Option<u32>> = HashMap::new();\n\n// nonexistent key\nmap.entry_ref(\"poneyland\").or_default();\nassert_eq!(map[\"poneyland\"], None);\n\nmap.insert(\"horseland\".to_string(), Some(3));\n\n// existing key\nassert_eq!(map.entry_ref(\"horseland\").or_default(), &mut Some(3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42468:5939-0:2456:1859":{"id":"a:1:42468:5939-0:2456:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42468:5939-0:813:3431":{"id":"a:1:42468:5939-0:813:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:563:2388":{"id":"0:563:2388","crate_id":0,"name":"try_reserve","span":{"filename":"src/map.rs","begin":[1155,4],"end":[1158,5]},"visibility":"public","docs":"Tries to reserve capacity for at least `additional` more elements to be inserted\nin the given `HashMap<K,V>`. The collection may reserve more space to avoid\nfrequent reallocations.\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, isize> = HashMap::new();\n// Map is empty and doesn't allocate memory\nassert_eq!(map.capacity(), 0);\n\nmap.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n\n// And now map can hold at least 10 elements\nassert!(map.capacity() >= 10);\n```\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned:\n```\n# fn test() {\nuse hashbrown::HashMap;\nuse hashbrown::TryReserveError;\nlet mut map: HashMap<i32, i32> = HashMap::new();\n\nmatch map.try_reserve(usize::MAX) {\n    Err(error) => match error {\n        TryReserveError::CapacityOverflow => {}\n        _ => panic!(\"TryReserveError::AllocError ?\"),\n    },\n    _ => panic!(),\n}\n# }\n# fn main() {\n#     #[cfg(not(miri))]\n#     test()\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42487:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:686:3395":{"id":"b:1:2474-0:686:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2271:3395":{"id":"0:2271:3395","crate_id":0,"name":"Iter","span":{"filename":"src/table.rs","begin":[1855,0],"end":[1858,1]},"visibility":"public","docs":"An iterator over the entries of a `HashTable` in arbitrary order.\nThe iterator element type is `&'a T`.\n\nThis `struct` is created by the [`iter`] method on [`HashTable`]. See its\ndocumentation for more.\n\n[`iter`]: struct.HashTable.html#method.iter\n[`HashTable`]: struct.HashTable.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:2271:3395","a:1:2997:246-0:2271:3395","a:1:42469:5938-0:2271:3395","a:1:32833:237-0:2271:3395","a:1:32890:5735-0:2271:3395","b:1:3610-0:2271:3395","b:1:2471-0:2271:3395","b:1:2789-0:2271:3395","b:1:8044-0:2271:3395","b:1:2784-0:2271:3395","b:1:2778-0:2271:3395","b:1:2774-0:2271:3395","b:1:2474-0:2271:3395","0:2286","0:2289","0:2276"]}}},"b:1:3610-0:2331:3431":{"id":"b:1:3610-0:2331:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2474-0:2291:3404":{"id":"b:1:2474-0:2291:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8044-0:813:3431":{"id":"b:1:8044-0:813:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1367:724":{"id":"0:1367:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4982,4],"end":[4984,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2247":{"id":"0:2247","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1720,0],"end":[1724,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2250:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2471-0:1791:5006":{"id":"b:1:2471-0:1791:5006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42469:5938-0:2257:5389":{"id":"a:1:42469:5938-0:2257:5389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AbsentEntry","id":"0:2257:5389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2784-0:2331:3431":{"id":"b:1:2784-0:2331:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1358:882":{"id":"0:1358:882","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[4970,4],"end":[4972,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13077:20209":{"id":"1:13077:20209","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3610-0:869:3990":{"id":"b:1:3610-0:869:3990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1231":{"id":"0:1231","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4753,0],"end":[4758,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1234:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:857:3985":{"id":"0:857:3985","crate_id":0,"name":"RawEntryMut","span":{"filename":"src/map.rs","begin":[2942,0],"end":[2971,1]},"visibility":"public","docs":"A view into a single entry in a map, which may either be vacant or occupied.\n\nThis is a lower-level version of [`Entry`].\n\nThis `enum` is constructed through the [`raw_entry_mut`] method on [`HashMap`],\nthen calling one of the methods of that [`RawEntryBuilderMut`].\n\n[`HashMap`]: struct.HashMap.html\n[`Entry`]: enum.Entry.html\n[`raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut\n[`RawEntryBuilderMut`]: struct.RawEntryBuilderMut.html\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut, RawOccupiedEntryMut};\n\nlet mut map = HashMap::new();\nmap.extend([('a', 1), ('b', 2), ('c', 3)]);\nassert_eq!(map.len(), 3);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\n// Existing key (insert)\nlet raw: RawEntryMut<_, _, _> = map.raw_entry_mut().from_key(&'a');\nlet _raw_o: RawOccupiedEntryMut<_, _, _> = raw.insert('a', 10);\nassert_eq!(map.len(), 3);\n\n// Nonexistent key (insert)\nmap.raw_entry_mut().from_key(&'d').insert('d', 40);\nassert_eq!(map.len(), 4);\n\n// Existing key (or_insert)\nlet hash = compute_hash(map.hasher(), &'b');\nlet kv = map\n    .raw_entry_mut()\n    .from_key_hashed_nocheck(hash, &'b')\n    .or_insert('b', 20);\nassert_eq!(kv, (&mut 'b', &mut 2));\n*kv.1 = 20;\nassert_eq!(map.len(), 4);\n\n// Nonexistent key (or_insert)\nlet hash = compute_hash(map.hasher(), &'e');\nlet kv = map\n    .raw_entry_mut()\n    .from_key_hashed_nocheck(hash, &'e')\n    .or_insert('e', 50);\nassert_eq!(kv, (&mut 'e', &mut 50));\nassert_eq!(map.len(), 5);\n\n// Existing key (or_insert_with)\nlet hash = compute_hash(map.hasher(), &'c');\nlet kv = map\n    .raw_entry_mut()\n    .from_hash(hash, |q| q == &'c')\n    .or_insert_with(|| ('c', 30));\nassert_eq!(kv, (&mut 'c', &mut 3));\n*kv.1 = 30;\nassert_eq!(map.len(), 5);\n\n// Nonexistent key (or_insert_with)\nlet hash = compute_hash(map.hasher(), &'f');\nlet kv = map\n    .raw_entry_mut()\n    .from_hash(hash, |q| q == &'f')\n    .or_insert_with(|| ('f', 60));\nassert_eq!(kv, (&mut 'f', &mut 60));\nassert_eq!(map.len(), 6);\n\nprintln!(\"Our HashMap: {:?}\", map);\n\nlet mut vec: Vec<_> = map.iter().map(|(&k, &v)| (k, v)).collect();\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [('a', 10), ('b', 20), ('c', 30), ('d', 40), ('e', 50), ('f', 60)]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:863:3540","0:866:3542"],"impls":["0:941","a:1:42468:5939-0:857:3985","a:1:2997:246-0:857:3985","a:1:42469:5938-0:857:3985","a:1:32833:237-0:857:3985","a:1:32890:5735-0:857:3985","b:1:3610-0:857:3985","b:1:2471-0:857:3985","b:1:2789-0:857:3985","b:1:2784-0:857:3985","b:1:2778-0:857:3985","b:1:2774-0:857:3985","b:1:2474-0:857:3985","0:996"]}}},"b:1:2471-0:483:154":{"id":"b:1:2471-0:483:154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42468:5939-0:1173:3702":{"id":"a:1:42468:5939-0:1173:3702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"4:5593:22251":{"id":"4:5593:22251","crate_id":4,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"4:294:12268","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"4:294:12268","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13126:21375":{"id":"1:13126:21375","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1385":{"id":"0:1385","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[5234,0],"end":[5265,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1391:4375"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1429:4059":{"id":"0:1429:4059","crate_id":0,"name":"or_insert","span":{"filename":"src/map.rs","begin":[5756,4],"end":[5765,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\n\n// nonexistent key\nmap.entry_ref(\"poneyland\").or_insert(3);\nassert_eq!(map[\"poneyland\"], 3);\n\n// existing key\n*map.entry_ref(\"poneyland\").or_insert(10) *= 2;\nassert_eq!(map[\"poneyland\"], 6);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1457:2360":{"id":"0:1457:2360","crate_id":0,"name":"remove_entry","span":{"filename":"src/map.rs","begin":[6035,4],"end":[6037,5]},"visibility":"public","docs":"Take the ownership of the key and value from the map.\nKeeps the allocated memory for reuse.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\n// The map is empty\nassert!(map.is_empty() && map.capacity() == 0);\n\nmap.entry_ref(\"poneyland\").or_insert(12);\n\nif let EntryRef::Occupied(o) = map.entry_ref(\"poneyland\") {\n    // We delete the entry from the map.\n    assert_eq!(o.remove_entry(), (\"poneyland\".to_owned(), 12));\n}\n\nassert_eq!(map.contains_key(\"poneyland\"), false);\n// Now map hold none elements but capacity is equal to the old one\nassert!(map.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"K"},{"generic":"V"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32890:5735-0:869:3990":{"id":"a:1:32890:5735-0:869:3990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3610-0:2012:3538":{"id":"b:1:3610-0:2012:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2012:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2774-0:1604:156":{"id":"b:1:2774-0:1604:156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2778-0:1155:3557":{"id":"b:1:2778-0:1155:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1155:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1817":{"id":"0:1817","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1638,0],"end":[1646,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:1822:174","0:1823:2963","0:1824:846"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2357:3465":{"id":"0:2357:3465","crate_id":0,"name":"ExtractIf","span":{"filename":"src/table.rs","begin":[2039,0],"end":[2045,1]},"visibility":"public","docs":"A draining iterator over entries of a `HashTable` which don't satisfy the predicate `f`.\n\nThis `struct` is created by [`HashTable::extract_if`]. See its\ndocumentation for more.","links":{"`HashTable::extract_if`":"0:2150:3464"},"attrs":["#[must_use = \"Iterators are lazy unless consumed\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["a:1:42468:5939-0:2357:3465","a:1:2997:246-0:2357:3465","a:1:42469:5938-0:2357:3465","a:1:32833:237-0:2357:3465","a:1:32890:5735-0:2357:3465","b:1:3610-0:2357:3465","b:1:2471-0:2357:3465","b:1:2789-0:2357:3465","b:1:8044-0:2357:3465","b:1:2784-0:2357:3465","b:1:2778-0:2357:3465","b:1:2774-0:2357:3465","b:1:2474-0:2357:3465","0:2364","0:2372"]}}},"0:1914:458":{"id":"0:1914:458","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[1823,4],"end":[1828,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42468:5939-0:888:3994":{"id":"a:1:42468:5939-0:888:3994","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:888:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:2201:1764":{"id":"0:2201:1764","crate_id":0,"name":"0","span":{"filename":"src/table.rs","begin":[1201,11],"end":[1201,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"a:1:32833:237-0:2456:1859":{"id":"a:1:32833:237-0:2456:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:0:2388-0:483:154":{"id":"b:0:2388-0:483:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,0],"end":[173,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2391:1839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"Q"}}}},"1:13005:2365":{"id":"1:13005:2365","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1456:1855":{"id":"0:1456:1855","crate_id":0,"name":"key","span":{"filename":"src/map.rs","begin":[6006,4],"end":[6008,5]},"visibility":"public","docs":"Gets a reference to the key in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nmap.entry_ref(\"poneyland\").or_insert(12);\n\nmatch map.entry_ref(\"poneyland\") {\n    EntryRef::Vacant(_) => panic!(),\n    EntryRef::Occupied(entry) => assert_eq!(entry.key(), \"poneyland\"),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:800:3378":{"id":"b:1:2774-0:800:3378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13099:21535":{"id":"1:13099:21535","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13132:21383":{"id":"1:13132:21383","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:919:23546"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1831:846":{"id":"0:1831:846","crate_id":0,"name":"into_iter","span":{"filename":"src/set.rs","begin":[1673,4],"end":[1677,5]},"visibility":"default","docs":"Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet mut set = HashSet::new();\nset.insert(\"a\".to_string());\nset.insert(\"b\".to_string());\n\n// Not possible to collect to a Vec<String> with a regular `.iter()`.\nlet v: Vec<String> = set.into_iter().collect();\n\n// Will print in an arbitrary order.\nfor x in &v {\n    println!(\"{}\", x);\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2309":{"id":"0:2309","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1937,0],"end":[1937,43]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3610-0:2271:3395":{"id":"b:1:3610-0:2271:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13059:17188":{"id":"1:13059:17188","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:53676:454","self::pattern":"1:12697:14610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12513:12456","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1359":{"id":"0:1359","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4974,0],"end":[4974,64]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13014:334":{"id":"1:13014:334","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13015:2474","`u8`":"1:53693:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:518:1048":{"id":"0:518:1048","crate_id":0,"name":"new","span":{"filename":"src/map.rs","begin":[293,4],"end":[295,5]},"visibility":"public","docs":"Creates an empty `HashMap`.\n\nThe hash map is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`], for example with\n[`with_hasher`](HashMap::with_hasher) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet mut map: HashMap<&str, i32> = HashMap::new();\nassert_eq!(map.len(), 0);\nassert_eq!(map.capacity(), 0);\n```","links":{"HashMap::with_hasher":"0:530:3339","`ahash::RandomState`":"6:1315:11846","`HashMap`":"0:483:154"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13115:21540":{"id":"1:13115:21540","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:53676:454","self::pattern":"1:12697:14610"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12717:14616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13137:21545":{"id":"1:13137:21545","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4792:21545"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44544:12651","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2050":{"id":"0:2050","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2229,0],"end":[2304,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Entry","id":"0:2012:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2055:2410","0:2056:4059","0:2057:2453"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1835":{"id":"0:1835","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1688,0],"end":[1707,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["0:1838:174","0:1839:1062","0:1840:3008","0:1841:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1771:3395":{"id":"0:1771:3395","crate_id":0,"name":"Iter","span":{"filename":"src/set.rs","begin":[1546,0],"end":[1548,1]},"visibility":"public","docs":"An iterator over the items of a `HashSet`.\n\nThis `struct` is created by the [`iter`] method on [`HashSet`].\nSee its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`iter`]: struct.HashSet.html#method.iter","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:1771:3395","a:1:2997:246-0:1771:3395","a:1:42469:5938-0:1771:3395","a:1:32833:237-0:1771:3395","a:1:32890:5735-0:1771:3395","b:1:3610-0:1771:3395","b:1:2471-0:1771:3395","b:1:2789-0:1771:3395","b:1:8044-0:1771:3395","b:1:2784-0:1771:3395","b:1:2778-0:1771:3395","b:1:2774-0:1771:3395","b:1:2474-0:1771:3395","b:4:725-0:1771:3395","0:1835","0:1844","0:1848","0:1832","0:1850"]}}},"0:1996":{"id":"0:1996","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2028,0],"end":[2037,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2000:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:490":{"id":"0:490","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[195,0],"end":[209,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:495:458","0:496:460"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2460:1866":{"id":"0:2460:1866","crate_id":0,"name":"layout","span":{"filename":"src/lib.rs","begin":[185,8],"end":[185,36]},"visibility":"default","docs":"The layout of the allocation request that failed.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"alloc::alloc::Layout","id":"1:45220:181","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:1249":{"id":"0:1249","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4792,0],"end":[4797,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1252:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:996":{"id":"0:996","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4093,0],"end":[4100,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1001:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1203":{"id":"0:1203","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4656,0],"end":[4691,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:1209:174","0:1210:2963","0:1211:846"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1906":{"id":"0:1906","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1819,0],"end":[1819,95]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:755:3485":{"id":"0:755:3485","crate_id":0,"name":"IntoValues","span":{"filename":"src/map.rs","begin":[2527,0],"end":[2529,1]},"visibility":"public","docs":"An owning iterator over the values of a `HashMap` in arbitrary order.\nThe iterator element type is `V`.\n\nThis `struct` is created by the [`into_values`] method on [`HashMap`].\nSee its documentation for more. The map cannot be used after calling that method.\n\n[`into_values`]: struct.HashMap.html#method.into_values\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut values = map.into_values();\nlet mut vec = vec![values.next(), values.next(), values.next()];\n\n// The `IntoValues` iterator produces values in arbitrary order, so\n// the values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some(\"a\"), Some(\"b\"), Some(\"c\")]);\n\n// It is fused iterator\nassert_eq!(values.next(), None);\nassert_eq!(values.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:755:3485","a:1:2997:246-0:755:3485","a:1:42469:5938-0:755:3485","a:1:32833:237-0:755:3485","a:1:32890:5735-0:755:3485","b:1:3610-0:755:3485","b:1:2471-0:755:3485","b:1:2789-0:755:3485","b:1:8044-0:755:3485","b:1:2784-0:755:3485","b:1:2778-0:755:3485","b:1:2774-0:755:3485","b:1:2474-0:755:3485","0:781","0:760","0:777","0:772"]}}},"b:4:725-0:1811:5015":{"id":"b:4:725-0:1811:5015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:727:4269","4:728:4693","4:729:11909"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1291:3042":{"id":"0:1291:3042","crate_id":0,"name":"fold","span":{"filename":"src/map.rs","begin":[4860,4],"end":[4866,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:2039:3543":{"id":"b:1:2471-0:2039:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2039:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2213:4080":{"id":"0:2213:4080","crate_id":0,"name":"and_modify","span":{"filename":"src/table.rs","begin":[1384,4],"end":[1392,5]},"visibility":"public","docs":"Provides in-place mutable access to an occupied entry before any\npotential inserts into the table.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table: HashTable<(&str, u32)> = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\n\ntable\n    .entry(\n        hasher(&\"poneyland\"),\n        |&(x, _)| x == \"poneyland\",\n        |(k, _)| hasher(&k),\n    )\n    .and_modify(|(_, v)| *v += 1)\n    .or_insert((\"poneyland\", 42));\nassert_eq!(\n    table.find(hasher(&\"poneyland\"), |&(k, _)| k == \"poneyland\"),\n    Some(&(\"poneyland\", 42))\n);\n\ntable\n    .entry(\n        hasher(&\"poneyland\"),\n        |&(x, _)| x == \"poneyland\",\n        |(k, _)| hasher(&k),\n    )\n    .and_modify(|(_, v)| *v += 1)\n    .or_insert((\"poneyland\", 42));\nassert_eq!(\n    table.find(hasher(&\"poneyland\"), |&(k, _)| k == \"poneyland\"),\n    Some(&(\"poneyland\", 43))\n);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":null}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"impl FnOnce(&mut T)","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2319:1062":{"id":"0:2319:1062","crate_id":0,"name":"next","span":{"filename":"src/table.rs","begin":[1962,4],"end":[1964,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:2357:3465":{"id":"b:1:2471-0:2357:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:725-0:787:3368":{"id":"b:4:725-0:787:3368","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["4:727:4269","4:728:4693","4:729:11909"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2774-0:1155:3557":{"id":"b:1:2774-0:1155:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1155:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32833:237-0:713:2963":{"id":"a:1:32833:237-0:713:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2471-0:800:3378":{"id":"b:1:2471-0:800:3378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32890:5735-0:824:3465":{"id":"a:1:32890:5735-0:824:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1140":{"id":"0:1140","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4506,0],"end":[4514,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2784-0:2039:3543":{"id":"b:1:2784-0:2039:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2039:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2123":{"id":"0:2123","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[52,0],"end":[90,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:2125:1048","0:2126:2299"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1224:174":{"id":"0:1224:174","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4724,4],"end":[4724,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}},"a:1:32833:237-0:686:3395":{"id":"a:1:32833:237-0:686:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13092:21532":{"id":"1:13092:21532","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12697:14610","`DoubleEndedIterator`":"1:8078:131","prim@char":"1:53676:454","str::match_indices":"1:13089:21531"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44395:12738","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12717:14616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1309:3042":{"id":"0:1309:3042","crate_id":0,"name":"fold","span":{"filename":"src/map.rs","begin":[4892,4],"end":[4898,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:2012:3538":{"id":"b:1:2789-0:2012:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2012:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2997:246-0:1784:3465":{"id":"a:1:2997:246-0:1784:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2173":{"id":"0:2173","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1044,0],"end":[1054,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:2177:174","0:2178:2963","0:2179:846"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3610-0:1604:156":{"id":"b:1:3610-0:1604:156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:845:3385":{"id":"0:845:3385","crate_id":0,"name":"ValuesMut","span":{"filename":"src/map.rs","begin":[2795,0],"end":[2797,1]},"visibility":"public","docs":"A mutable iterator over the values of a `HashMap` in arbitrary order.\nThe iterator element type is `&'a mut V`.\n\nThis `struct` is created by the [`values_mut`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`values_mut`]: struct.HashMap.html#method.values_mut\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<_, _> = [(1, \"One\".to_owned()), (2, \"Two\".into())].into();\n\nlet mut values = map.values_mut();\nvalues.next().map(|v| v.push_str(\" Mississippi\"));\nvalues.next().map(|v| v.push_str(\" Mississippi\"));\n\n// It is fused iterator\nassert_eq!(values.next(), None);\nassert_eq!(values.next(), None);\n\nassert_eq!(map.get(&1).unwrap(), &\"One Mississippi\".to_owned());\nassert_eq!(map.get(&2).unwrap(), &\"Two Mississippi\".to_owned());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:845:3385","a:1:2997:246-0:845:3385","a:1:42469:5938-0:845:3385","a:1:32833:237-0:845:3385","a:1:32890:5735-0:845:3385","b:1:3610-0:845:3385","b:1:2471-0:845:3385","b:1:2789-0:845:3385","b:1:8044-0:845:3385","b:1:2784-0:845:3385","b:1:2778-0:845:3385","b:1:2774-0:845:3385","b:1:2474-0:845:3385","0:1338","0:1320","0:1331","0:1335"]}}},"0:1662:4996":{"id":"0:1662:4996","crate_id":0,"name":"symmetric_difference","span":{"filename":"src/set.rs","begin":[773,4],"end":[777,5]},"visibility":"public","docs":"Visits the values representing the symmetric difference,\ni.e., the values that are in `self` or in `other` but not in both.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Print 1, 4 in arbitrary order.\nfor x in a.symmetric_difference(&b) {\n    println!(\"{}\", x);\n}\n\nlet diff1: HashSet<_> = a.symmetric_difference(&b).collect();\nlet diff2: HashSet<_> = b.symmetric_difference(&a).collect();\n\nassert_eq!(diff1, diff2);\nassert_eq!(diff1, [1, 4].iter().collect());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1707":{"id":"0:1707","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1293,0],"end":[1301,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1711:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3610-0:1771:3395":{"id":"b:1:3610-0:1771:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2784-0:2192:3538":{"id":"b:1:2784-0:2192:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2192:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42468:5939-0:2291:3404":{"id":"a:1:42468:5939-0:2291:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:1856:174":{"id":"0:1856:174","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1723,4],"end":[1723,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"K"}}}},"1:13089:21531":{"id":"1:13089:21531","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12697:14610","`DoubleEndedIterator`":"1:8078:131","prim@char":"1:53676:454","str::rmatch_indices":"1:13092:21532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44377:12737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:686:3395":{"id":"a:1:42469:5938-0:686:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42469:5938-0:723:3478":{"id":"a:1:42469:5938-0:723:3478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1921:1062":{"id":"0:1921:1062","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1840,4],"end":[1847,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32890:5735-0:2357:3465":{"id":"a:1:32890:5735-0:2357:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:538:3309":{"id":"0:538:3309","crate_id":0,"name":"with_hasher_in","span":{"filename":"src/map.rs","begin":[545,4],"end":[550,5]},"visibility":"public","docs":"Creates an empty `HashMap` which will use the given hash builder to hash\nkeys. It will be allocated with the given allocator.\n\nThe hash map is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`].\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut map = HashMap::with_hasher(s);\nmap.insert(1, 2);\n```","links":{"`ahash::RandomState`":"6:1315:11846","`HashMap`":"0:483:154"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hash_builder",{"generic":"S"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32833:237-0:2257:5389":{"id":"a:1:32833:237-0:2257:5389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AbsentEntry","id":"0:2257:5389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2784-0:1798:4987":{"id":"b:1:2784-0:1798:4987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42468:5939-0:2240:3543":{"id":"a:1:42468:5939-0:2240:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:838:1062":{"id":"0:838:1062","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[2756,4],"end":[2758,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13083:5633":{"id":"1:13083:5633","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12697:14610","`DoubleEndedIterator`":"1:8078:131","prim@char":"1:53676:454","str::rmatches":"1:13086:21530"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44431:12740","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1253":{"id":"0:1253","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4798,0],"end":[4798,49]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1829:174":{"id":"0:1829:174","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1649,4],"end":[1649,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:1666:65":{"id":"0:1666:65","crate_id":0,"name":"union","span":{"filename":"src/set.rs","begin":[829,4],"end":[840,5]},"visibility":"public","docs":"Visits the values representing the union,\ni.e., all the values in `self` or `other`, without duplicates.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Print 1, 2, 3, 4 in arbitrary order.\nfor x in a.union(&b) {\n    println!(\"{}\", x);\n}\n\nlet union: HashSet<_> = a.union(&b).collect();\nassert_eq!(union, [1, 2, 3, 4].iter().collect());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:1771:3395":{"id":"b:1:2778-0:1771:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1013:724":{"id":"0:1013:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4112,4],"end":[4114,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1609":{"id":"0:1609","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[119,0],"end":[129,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1613:458","0:1614:460"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2997:246-0:1173:3702":{"id":"a:1:2997:246-0:1173:3702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13016:2453":{"id":"1:13016:2453","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42346:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13109:20213":{"id":"1:13109:20213","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:53676:454","self::pattern":"1:12697:14610"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:919:4038":{"id":"0:919:4038","crate_id":0,"name":"from_hash","span":{"filename":"src/map.rs","begin":[3229,4],"end":[3234,5]},"visibility":"public","docs":"Creates a `RawEntryMut` from the given hash and matching function.\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nlet key = \"a\";\nlet hash = compute_hash(map.hasher(), &key);\nlet entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(hash, |k| k == &key);\nentry.insert(key, 100);\nassert_eq!(map[&\"a\"], 100);\n```","links":{},"attrs":["#[inline]","#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hash",{"primitive":"u64"}],["is_match",{"generic":"F"}]],"output":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"K"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[{"name":"'b","kind":{"lifetime":{"outlives":[]}}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:1020:3538":{"id":"b:1:2789-0:1020:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13029:20200":{"id":"1:13029:20200","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13028:20199"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32890:5735-0:2257:5389":{"id":"a:1:32890:5735-0:2257:5389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AbsentEntry","id":"0:2257:5389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1148":{"id":"0:1148","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4516,0],"end":[4525,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1154:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:866:3542":{"id":"0:866:3542","crate_id":0,"name":"Vacant","span":{"filename":"src/map.rs","begin":[2970,4],"end":[2970,45]},"visibility":"default","docs":"A vacant entry.\n\n# Examples\n\n```\nuse hashbrown::{hash_map::RawEntryMut, HashMap};\nlet mut map: HashMap<&str, i32> = HashMap::new();\n\nmatch map.raw_entry_mut().from_key(\"a\") {\n    RawEntryMut::Occupied(_) => unreachable!(),\n    RawEntryMut::Vacant(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:868:1764"]},"discriminant":null}}},"0:2198:1764":{"id":"0:2198:1764","crate_id":0,"name":"0","span":{"filename":"src/table.rs","begin":[1174,13],"end":[1174,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"0:638":{"id":"0:638","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1943,0],"end":[2167,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:643:3772","0:644:3788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:913":{"id":"0:913","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3204,0],"end":[3253,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:919:4038"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2784-0:2291:3404":{"id":"b:1:2784-0:2291:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2301:3008":{"id":"0:2301:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/table.rs","begin":[1917,4],"end":[1919,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32890:5735-0:1775:2963":{"id":"a:1:32890:5735-0:1775:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1275":{"id":"0:1275","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4836,0],"end":[4836,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:967:3571":{"id":"0:967:3571","crate_id":0,"name":"get_key_value","span":{"filename":"src/map.rs","begin":[3707,4],"end":[3712,5]},"visibility":"public","docs":"Gets a reference to the key and value in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => assert_eq!(o.get_key_value(), (&\"a\", &100)),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1680:3537":{"id":"0:1680:3537","crate_id":0,"name":"entry","span":{"filename":"src/set.rs","begin":[1022,4],"end":[1027,5]},"visibility":"public","docs":"Gets the given value's corresponding entry in the set for in-place manipulation.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_set::Entry::*;\n\nlet mut singles = HashSet::new();\nlet mut dupes = HashSet::new();\n\nfor ch in \"a short treatise on fungi\".chars() {\n    if let Vacant(dupe_entry) = dupes.entry(ch) {\n        // We haven't already seen a duplicate, so\n        // check if we've at least seen it once.\n        match singles.entry(ch) {\n            Vacant(single_entry) => {\n                // We found a new character for the first time.\n                single_entry.insert()\n            }\n            Occupied(single_entry) => {\n                // We've already seen this once, \"move\" it to dupes.\n                single_entry.remove();\n                dupe_entry.insert();\n            }\n        }\n    }\n}\n\nassert!(!singles.contains(&'t') && dupes.contains(&'t'));\nassert!(singles.contains(&'u') && !dupes.contains(&'u'));\nassert!(!singles.contains(&'v') && !dupes.contains(&'v'));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Entry","id":"0:2012:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:2388-0:1604:156":{"id":"b:0:2388-0:1604:156","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,0],"end":[173,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2391:1839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"Q"}}}},"b:1:2778-0:1038:3541":{"id":"b:1:2778-0:1038:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2997:246-0:1798:4987":{"id":"a:1:2997:246-0:1798:4987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1978":{"id":"0:1978","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1992,0],"end":[1998,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32890:5735-0:2119:1838":{"id":"a:1:32890:5735-0:2119:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1791:5006":{"id":"0:1791:5006","crate_id":0,"name":"Intersection","span":{"filename":"src/set.rs","begin":[1595,0],"end":[1600,1]},"visibility":"public","docs":"A lazy iterator producing elements in the intersection of `HashSet`s.\n\nThis `struct` is created by the [`intersection`] method on [`HashSet`].\nSee its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`intersection`]: struct.HashSet.html#method.intersection","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:1791:5006","a:1:2997:246-0:1791:5006","a:1:42469:5938-0:1791:5006","a:1:32833:237-0:1791:5006","a:1:32890:5735-0:1791:5006","b:1:3610-0:1791:5006","b:1:2471-0:1791:5006","b:1:2789-0:1791:5006","b:1:8044-0:1791:5006","b:1:2784-0:1791:5006","b:1:2778-0:1791:5006","b:1:2774-0:1791:5006","b:1:2474-0:1791:5006","b:4:725-0:1791:5006","0:1932","0:1915","0:1927","0:1910"]}}},"0:686:3395":{"id":"0:686:3395","crate_id":0,"name":"Iter","span":{"filename":"src/map.rs","begin":[2312,0],"end":[2315,1]},"visibility":"public","docs":"An iterator over the entries of a `HashMap` in arbitrary order.\nThe iterator element type is `(&'a K, &'a V)`.\n\nThis `struct` is created by the [`iter`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`iter`]: struct.HashMap.html#method.iter\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut iter = map.iter();\nlet mut vec = vec![iter.next(), iter.next(), iter.next()];\n\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some((&1, &\"a\")), Some((&2, &\"b\")), Some((&3, &\"c\"))]);\n\n// It is fused iterator\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:686:3395","a:1:2997:246-0:686:3395","a:1:42469:5938-0:686:3395","a:1:32833:237-0:686:3395","a:1:32890:5735-0:686:3395","b:1:3610-0:686:3395","b:1:2471-0:686:3395","b:1:2789-0:686:3395","b:1:8044-0:686:3395","b:1:2784-0:686:3395","b:1:2778-0:686:3395","b:1:2774-0:686:3395","b:1:2474-0:686:3395","b:4:725-0:686:3395","0:1231","0:1220","0:1235","0:692","0:696"]}}},"b:1:3610-0:713:2963":{"id":"b:1:3610-0:713:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42469:5938-0:845:3385":{"id":"a:1:42469:5938-0:845:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1327:3042":{"id":"0:1327:3042","crate_id":0,"name":"fold","span":{"filename":"src/map.rs","begin":[4924,4],"end":[4930,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1048":{"id":"0:1048","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4257,0],"end":[4264,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1002":{"id":"0:1002","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4102,0],"end":[4109,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1007:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32833:237-0:896:3789":{"id":"a:1:32833:237-0:896:3789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:896:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2177:174":{"id":"0:2177:174","crate_id":0,"name":"Item","span":{"filename":"src/table.rs","begin":[1048,4],"end":[1048,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}}},"b:1:2474-0:1064:3543":{"id":"b:1:2474-0:1064:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1064:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3610-0:755:3485":{"id":"b:1:3610-0:755:3485","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2474-0:700:3404":{"id":"b:1:2474-0:700:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1351:3042":{"id":"0:1351:3042","crate_id":0,"name":"fold","span":{"filename":"src/map.rs","begin":[4960,4],"end":[4966,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:2271:3395":{"id":"b:1:2789-0:2271:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:968:3579":{"id":"0:968:3579","crate_id":0,"name":"get_key_value_mut","span":{"filename":"src/map.rs","begin":[3743,4],"end":[3748,5]},"visibility":"public","docs":"Gets a mutable reference to the key and value in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\nuse std::rc::Rc;\n\nlet key_one = Rc::new(\"a\");\nlet key_two = Rc::new(\"a\");\n\nlet mut map: HashMap<Rc<&str>, u32> = HashMap::new();\nmap.insert(key_one.clone(), 10);\n\nassert_eq!(map[&key_one], 10);\nassert!(Rc::strong_count(&key_one) == 2 && Rc::strong_count(&key_two) == 1);\n\nmatch map.raw_entry_mut().from_key(&key_one) {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(mut o) => {\n        let (inside_key, inside_value) = o.get_key_value_mut();\n        *inside_key = key_two.clone();\n        *inside_value = 100;\n    }\n}\nassert_eq!(map[&key_two], 100);\nassert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1417:4127":{"id":"0:1417:4127","crate_id":0,"name":"into_key","span":{"filename":"src/map.rs","begin":[5654,4],"end":[5656,5]},"visibility":"public","docs":"Take ownership of the key.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap};\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nmatch map.entry(\"poneyland\") {\n    Entry::Occupied(_) => panic!(),\n    Entry::Vacant(v) => assert_eq!(v.into_key(), \"poneyland\"),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"K"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:2271:3395":{"id":"b:1:2774-0:2271:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2997:246-0:713:2963":{"id":"a:1:2997:246-0:713:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2778-0:1173:3702":{"id":"b:1:2778-0:1173:3702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13136:14494":{"id":"1:13136:14494","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4795:14494"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44535:12642","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1298:882":{"id":"0:1298:882","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[4870,4],"end":[4872,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:456:933":{"id":"0:456:933","crate_id":0,"name":"map","span":{"filename":"src/map.rs","begin":[1,0],"end":[8960,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:482:3153","0:483:154","0:686:3395","0:700:3404","0:713:2963","0:723:3478","0:755:3485","0:787:3368","0:800:3378","0:813:3431","0:824:3465","0:845:3385","0:850:3773","0:857:3985","0:869:3990","0:888:3994","0:896:3789","0:1020:3538","0:1038:3541","0:1064:3543","0:1079:3553","0:1120:3554","0:1155:3557","0:1173:3702"],"is_stripped":true}}},"0:1672:5030":{"id":"0:1672:5030","crate_id":0,"name":"get_or_insert","span":{"filename":"src/set.rs","begin":[913,4],"end":[921,5]},"visibility":"public","docs":"Inserts the given `value` into the set if it is not present, then\nreturns a reference to the value in the set.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert_eq!(set.len(), 3);\nassert_eq!(set.get_or_insert(2), &2);\nassert_eq!(set.get_or_insert(100), &100);\nassert_eq!(set.len(), 4); // 100 was inserted\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1202:846":{"id":"0:1202:846","crate_id":0,"name":"into_iter","span":{"filename":"src/map.rs","begin":[4651,4],"end":[4653,5]},"visibility":"default","docs":"Creates an iterator over the entries of a `HashMap` in arbitrary order.\nThe iterator element type is `(&'a K, &'a V)`.\n\nReturn the same `Iter` struct as by the [`iter`] method on [`HashMap`].\n\n[`iter`]: struct.HashMap.html#method.iter\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet map_one: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\nlet mut map_two = HashMap::new();\n\nfor (key, value) in &map_one {\n    println!(\"Key: {}, Value: {}\", key, value);\n    map_two.insert_unique_unchecked(*key, *value);\n}\n\nassert_eq!(map_one, map_two);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32833:237-0:2012:3538":{"id":"a:1:32833:237-0:2012:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2012:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2265:724":{"id":"0:2265:724","crate_id":0,"name":"fmt","span":{"filename":"src/table.rs","begin":[1831,4],"end":[1833,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2320:3008":{"id":"0:2320:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/table.rs","begin":[1966,4],"end":[1968,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2331:3431":{"id":"0:2331:3431","crate_id":0,"name":"Drain","span":{"filename":"src/table.rs","begin":[1997,0],"end":[1999,1]},"visibility":"public","docs":"A draining iterator over the items of a `HashTable`.\n\nThis `struct` is created by the [`drain`] method on [`HashTable`].\nSee its documentation for more.\n\n[`HashTable`]: struct.HashTable.html\n[`drain`]: struct.HashTable.html#method.drain","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:2331:3431","a:1:2997:246-0:2331:3431","a:1:42469:5938-0:2331:3431","a:1:32833:237-0:2331:3431","a:1:32890:5735-0:2331:3431","b:1:3610-0:2331:3431","b:1:2471-0:2331:3431","b:1:2789-0:2331:3431","b:1:8044-0:2331:3431","b:1:2784-0:2331:3431","b:1:2778-0:2331:3431","b:1:2774-0:2331:3431","b:1:2474-0:2331:3431","0:2353","0:2346","0:2340","0:2350"]}}},"0:953:4103":{"id":"0:953:4103","crate_id":0,"name":"and_replace_entry_with","span":{"filename":"src/map.rs","begin":[3531,4],"end":[3539,5]},"visibility":"public","docs":"Provides shared access to the key and owned access to the value of\nan occupied entry and allows to replace or remove it based on the\nvalue of the returned option.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::RawEntryMut;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nlet entry = map\n    .raw_entry_mut()\n    .from_key(\"poneyland\")\n    .and_replace_entry_with(|_k, _v| panic!());\n\nmatch entry {\n    RawEntryMut::Vacant(_) => {},\n    RawEntryMut::Occupied(_) => panic!(),\n}\n\nmap.insert(\"poneyland\", 42);\n\nlet entry = map\n    .raw_entry_mut()\n    .from_key(\"poneyland\")\n    .and_replace_entry_with(|k, v| {\n        assert_eq!(k, &\"poneyland\");\n        assert_eq!(v, 42);\n        Some(v + 1)\n    });\n\nmatch entry {\n    RawEntryMut::Occupied(e) => {\n        assert_eq!(e.key(), &\"poneyland\");\n        assert_eq!(e.get(), &43);\n    },\n    RawEntryMut::Vacant(_) => panic!(),\n}\n\nassert_eq!(map[\"poneyland\"], 43);\n\nlet entry = map\n    .raw_entry_mut()\n    .from_key(\"poneyland\")\n    .and_replace_entry_with(|_k, _v| None);\n\nmatch entry {\n    RawEntryMut::Vacant(_) => {},\n    RawEntryMut::Occupied(_) => panic!(),\n}\n\nassert!(!map.contains_key(\"poneyland\"));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"generic":"V"}],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32890:5735-0:2214:3541":{"id":"a:1:32890:5735-0:2214:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2774-0:2039:3543":{"id":"b:1:2774-0:2039:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2039:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:951:4080":{"id":"0:951:4080","crate_id":0,"name":"and_modify","span":{"filename":"src/map.rs","begin":[3459,4],"end":[3473,5]},"visibility":"public","docs":"Provides in-place mutable access to an occupied entry before any\npotential inserts into the map.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nmap.raw_entry_mut()\n   .from_key(\"poneyland\")\n   .and_modify(|_k, v| { *v += 1 })\n   .or_insert(\"poneyland\", 42);\nassert_eq!(map[\"poneyland\"], 42);\n\nmap.raw_entry_mut()\n   .from_key(\"poneyland\")\n   .and_modify(|_k, v| { *v += 1 })\n   .or_insert(\"poneyland\", 0);\nassert_eq!(map[\"poneyland\"], 43);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:2271:3395":{"id":"b:1:2474-0:2271:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2468":{"id":"0:2468","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[176,31],"end":[176,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2469:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2466":{"id":"0:2466","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[176,27],"end":[176,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2784-0:1155:3557":{"id":"b:1:2784-0:1155:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1155:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42468:5939-0:1064:3543":{"id":"a:1:42468:5939-0:1064:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"BuildHasherDefault","id":"1:10395:3154","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"AHasher","id":"6:1268:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1064:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:32833:237-0:2119:1838":{"id":"a:1:32833:237-0:2119:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2784-0:1020:3538":{"id":"b:1:2784-0:1020:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1784:3465":{"id":"0:1784:3465","crate_id":0,"name":"ExtractIf","span":{"filename":"src/set.rs","begin":[1580,0],"end":[1586,1]},"visibility":"public","docs":"A draining iterator over entries of a `HashSet` which don't satisfy the predicate `f`.\n\nThis `struct` is created by the [`extract_if`] method on [`HashSet`]. See its\ndocumentation for more.\n\n[`extract_if`]: struct.HashSet.html#method.extract_if\n[`HashSet`]: struct.HashSet.html","links":{},"attrs":["#[must_use = \"Iterators are lazy unless consumed\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["a:1:42468:5939-0:1784:3465","a:1:2997:246-0:1784:3465","a:1:42469:5938-0:1784:3465","a:1:32833:237-0:1784:3465","a:1:32890:5735-0:1784:3465","b:1:3610-0:1784:3465","b:1:2471-0:1784:3465","b:1:2789-0:1784:3465","b:1:8044-0:1784:3465","b:1:2784-0:1784:3465","b:1:2778-0:1784:3465","b:1:2774-0:1784:3465","b:1:2474-0:1784:3465","0:1897","0:1906"]}}},"0:2028:3541":{"id":"0:2028:3541","crate_id":0,"name":"OccupiedEntry","span":{"filename":"src/set.rs","begin":[2181,0],"end":[2183,1]},"visibility":"public","docs":"A view into an occupied entry in a `HashSet`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet, OccupiedEntry};\n\nlet mut set = HashSet::new();\nset.extend([\"a\", \"b\", \"c\"]);\n\nlet _entry_o: OccupiedEntry<_, _> = set.entry(\"a\").insert();\nassert_eq!(set.len(), 3);\n\n// Existing key\nmatch set.entry(\"a\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(view) => {\n        assert_eq!(view.get(), &\"a\");\n    }\n}\n\nassert_eq!(set.len(), 3);\n\n// Existing key (take)\nmatch set.entry(\"c\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(view) => {\n        assert_eq!(view.remove(), \"c\");\n    }\n}\nassert_eq!(set.get(&\"c\"), None);\nassert_eq!(set.len(), 2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:2058","a:1:42468:5939-0:2028:3541","a:1:2997:246-0:2028:3541","a:1:42469:5938-0:2028:3541","a:1:32833:237-0:2028:3541","a:1:32890:5735-0:2028:3541","b:1:3610-0:2028:3541","b:1:2471-0:2028:3541","b:1:2789-0:2028:3541","b:1:2784-0:2028:3541","b:1:2778-0:2028:3541","b:1:2774-0:2028:3541","b:1:2474-0:2028:3541","0:2034"]}}},"0:1749":{"id":"0:1749","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1409,0],"end":[1440,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"1:34462:4848","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:1753:199","0:1754:397"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2774-0:787:3368":{"id":"b:1:2774-0:787:3368","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42468:5939-0:1791:5006":{"id":"a:1:42468:5939-0:1791:5006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2997:246-0:845:3385":{"id":"a:1:2997:246-0:845:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42469:5938-0:869:3990":{"id":"a:1:42469:5938-0:869:3990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42469:5938-0:1120:3554":{"id":"a:1:42469:5938-0:1120:3554","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1673:5039":{"id":"0:1673:5039","crate_id":0,"name":"get_or_insert_owned","span":{"filename":"src/set.rs","begin":[942,4],"end":[953,5]},"visibility":"public","docs":"Inserts an owned copy of the given `value` into the set if it is not\npresent, then returns a reference to the value in the set.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]\n    .iter().map(|&pet| pet.to_owned()).collect();\n\nassert_eq!(set.len(), 3);\nfor &pet in &[\"cat\", \"dog\", \"fish\"] {\n    let value = set.get_or_insert_owned(pet);\n    assert_eq!(value, pet);\n}\nassert_eq!(set.len(), 4); // a new \"fish\" was inserted\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32833:237-0:824:3465":{"id":"a:1:32833:237-0:824:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32833:237-0:845:3385":{"id":"a:1:32833:237-0:845:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1008":{"id":"0:1008","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4111,0],"end":[4115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:888:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1013:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2183:60":{"id":"0:2183:60","crate_id":0,"name":"default","span":{"filename":"src/table.rs","begin":[1060,4],"end":[1064,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1406:4444":{"id":"0:1406:4444","crate_id":0,"name":"replace_key","span":{"filename":"src/map.rs","begin":[5537,4],"end":[5540,5]},"visibility":"public","docs":"Replaces the key in the hash map with the key used to create this entry.\n\n# Panics\n\nWill panic if this OccupiedEntry was created through [`Entry::insert`].\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap};\nuse std::rc::Rc;\n\nlet mut map: HashMap<Rc<String>, usize> = HashMap::with_capacity(6);\nlet mut keys_one: Vec<Rc<String>> = Vec::with_capacity(6);\nlet mut keys_two: Vec<Rc<String>> = Vec::with_capacity(6);\n\nfor (value, key) in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"].into_iter().enumerate() {\n    let rc_key = Rc::new(key.to_owned());\n    keys_one.push(rc_key.clone());\n    map.insert(rc_key.clone(), value);\n    keys_two.push(Rc::new(key.to_owned()));\n}\n\nassert!(\n    keys_one.iter().all(|key| Rc::strong_count(key) == 2)\n        && keys_two.iter().all(|key| Rc::strong_count(key) == 1)\n);\n\nreclaim_memory(&mut map, &keys_two);\n\nassert!(\n    keys_one.iter().all(|key| Rc::strong_count(key) == 1)\n        && keys_two.iter().all(|key| Rc::strong_count(key) == 2)\n);\n\nfn reclaim_memory(map: &mut HashMap<Rc<String>, usize>, keys: &[Rc<String>]) {\n    for key in keys {\n        if let Entry::Occupied(entry) = map.entry(key.clone()) {\n        // Replaces the entry's key with our version of it in `keys`.\n            entry.replace_key();\n        }\n    }\n}\n```","links":{"`Entry::insert`":"0:1374:2410"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"K"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1619":{"id":"0:1619","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[196,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"super::map::DefaultHashBuilder","id":"0:482:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1622:2304","0:1623:2300"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:941":{"id":"0:941","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3348,0],"end":[3540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:947:2410","0:948:4059","0:949:4070","0:951:4080","0:953:4103"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1181":{"id":"0:1181","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4602,0],"end":[4610,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1186:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2784-0:2311:2963":{"id":"b:1:2784-0:2311:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2774-0:1038:3541":{"id":"b:1:2774-0:1038:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:955":{"id":"0:955","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3542,0],"end":[3939,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:961:1855","0:962:4121","0:963:4127","0:964:2453","0:965:4135","0:966:2455","0:967:3571","0:968:3579","0:969:4062","0:970:2410","0:971:4156","0:972:2358","0:973:2360","0:974:4104"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1617:1048":{"id":"0:1617:1048","crate_id":0,"name":"new","span":{"filename":"src/set.rs","begin":[157,4],"end":[161,5]},"visibility":"public","docs":"Creates an empty `HashSet`.\n\nThe hash set is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`], for example with\n[`with_hasher`](HashSet::with_hasher) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet set: HashSet<i32> = HashSet::new();\n```","links":{"`ahash::RandomState`":"6:1315:11846","`HashSet`":"0:1604:156","HashSet::with_hasher":"0:1642:3339"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1026:3540":{"id":"0:1026:3540","crate_id":0,"name":"Occupied","span":{"filename":"src/map.rs","begin":[4183,4],"end":[4183,43]},"visibility":"default","docs":"An occupied entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap};\nlet mut map: HashMap<_, _> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.entry(\"a\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:1028:1764"]},"discriminant":null}}},"b:1:2778-0:1798:4987":{"id":"b:1:2778-0:1798:4987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2152:2462":{"id":"0:2152:2462","crate_id":0,"name":"get_many_mut","span":{"filename":"src/table.rs","begin":[939,4],"end":[945,5]},"visibility":"public","docs":"Attempts to get mutable references to `N` values in the map at once.\n\nThe `eq` argument should be a closure such that `eq(i, k)` returns true if `k` is equal to\nthe `i`th key to be looked up.\n\nReturns an array of length `N` with the results of each query. For soundness, at most one\nmutable reference will be returned to any value. `None` will be returned if any of the\nkeys are duplicates or missing.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::hash_table::Entry;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut libraries: HashTable<(&str, u32)> = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\nfor (k, v) in [\n    (\"Bodleian Library\", 1602),\n    (\"Athenæum\", 1807),\n    (\"Herzogin-Anna-Amalia-Bibliothek\", 1691),\n    (\"Library of Congress\", 1800),\n] {\n    libraries.insert_unique(hasher(&k), (k, v), |(k, _)| hasher(&k));\n}\n\nlet keys = [\"Athenæum\", \"Library of Congress\"];\nlet got = libraries.get_many_mut(keys.map(|k| hasher(&k)), |i, val| keys[i] == val.0);\nassert_eq!(\n    got,\n    Some([&mut (\"Athenæum\", 1807), &mut (\"Library of Congress\", 1800),]),\n);\n\n// Missing keys result in None\nlet keys = [\"Athenæum\", \"New York Public Library\"];\nlet got = libraries.get_many_mut(keys.map(|k| hasher(&k)), |i, val| keys[i] == val.0);\nassert_eq!(got, None);\n\n// Duplicate keys result in None\nlet keys = [\"Athenæum\", \"Athenæum\"];\nlet got = libraries.get_many_mut(keys.map(|k| hasher(&k)), |i, val| keys[i] == val.0);\nassert_eq!(got, None);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["hashes",{"array":{"type":{"primitive":"u64"},"len":"N"}}],["eq",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"len":"N"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}},{"name":"impl FnMut(usize, &T) -> bool","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:760":{"id":"0:760","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2531,0],"end":[2550,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:764:174","0:765:1062","0:767:3008","0:768:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2778-0:2039:3543":{"id":"b:1:2778-0:2039:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2039:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42469:5938-0:2012:3538":{"id":"a:1:42469:5938-0:2012:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2012:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2784-0:850:3773":{"id":"b:1:2784-0:850:3773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42469:5938-0:1020:3538":{"id":"a:1:42469:5938-0:1020:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1468":{"id":"0:1468","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[6341,0],"end":[6435,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1155:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1476:1855","0:1477:4127","0:1478:2410"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2372":{"id":"0:2372","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[2064,0],"end":[2064,99]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1850":{"id":"0:1850","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1716,0],"end":[1720,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["0:1852:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42468:5939-0:686:3395":{"id":"a:1:42468:5939-0:686:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:765:1062":{"id":"0:765:1062","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[2535,4],"end":[2537,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13045:20212":{"id":"1:13045:20212","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:53676:454","self::pattern":"1:12697:14610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12717:14616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:949:4070":{"id":"0:949:4070","crate_id":0,"name":"or_insert_with","span":{"filename":"src/map.rs","begin":[3421,4],"end":[3434,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns mutable references to the key and value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, String> = HashMap::new();\n\nmap.raw_entry_mut().from_key(\"poneyland\").or_insert_with(|| {\n    (\"poneyland\", \"hoho\".to_string())\n});\n\nassert_eq!(map[\"poneyland\"], \"hoho\".to_string());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"F"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[],"output":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1613:458":{"id":"0:1613:458","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[120,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32833:237-0:1604:156":{"id":"a:1:32833:237-0:1604:156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2997:246-0:1779:3431":{"id":"a:1:2997:246-0:1779:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42468:5939-0:2192:3538":{"id":"a:1:42468:5939-0:2192:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2192:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:1901:174":{"id":"0:1901:174","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1804,4],"end":[1804,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"K"}}}},"0:2376:1830":{"id":"0:2376:1830","crate_id":0,"name":"hash_map","span":{"filename":"src/lib.rs","begin":[86,0],"end":[86,16]},"visibility":"public","docs":"A hash map implemented with quadratic probing and SIMD lookup.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:2377-0:456:933"],"is_stripped":false}}},"0:1748:60":{"id":"0:1748:60","crate_id":0,"name":"default","span":{"filename":"src/set.rs","begin":[1402,4],"end":[1406,5]},"visibility":"default","docs":"Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13106:21539":{"id":"1:13106:21539","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:53676:454","self::pattern":"1:12697:14610"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:857:3985":{"id":"b:1:2778-0:857:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1448":{"id":"0:1448","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[5989,0],"end":[6339,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1456:1855","0:1457:2360","0:1458:2453","0:1459:2455","0:1460:4135","0:1461:2410","0:1462:2358","0:1463:4421","0:1464:4444","0:1465:4104"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1915":{"id":"0:1915","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1831,0],"end":[1868,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1920:174","0:1921:1062","0:1922:3008","0:1923:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1368":{"id":"0:1368","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4987,0],"end":[5232,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1374:2410","0:1375:4059","0:1376:4070","0:1378:4355","0:1380:1855","0:1381:4080","0:1383:4103"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1374:2410":{"id":"0:1374:2410","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[5001,4],"end":[5013,5]},"visibility":"public","docs":"Sets the value of the entry, and returns an OccupiedEntry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nlet entry = map.entry(\"horseyland\").insert(37);\n\nassert_eq!(entry.key(), &\"horseyland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"generic":"V"}]],"output":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:785:724":{"id":"0:785:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[2562,4],"end":[2566,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:1079:3553":{"id":"b:1:2789-0:1079:3553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2778-0:2192:3538":{"id":"b:1:2778-0:2192:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2192:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2997:246-0:483:154":{"id":"a:1:2997:246-0:483:154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2774-0:2311:2963":{"id":"b:1:2774-0:2311:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2212:4070":{"id":"0:2212:4070","crate_id":0,"name":"or_insert_with","span":{"filename":"src/table.rs","begin":[1330,4],"end":[1335,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the result of the default function if empty..\n\nReturns an [`OccupiedEntry`] pointing to the now-occupied entry.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table: HashTable<String> = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\n\ntable\n    .entry(hasher(\"poneyland\"), |x| x == \"poneyland\", |val| hasher(val))\n    .or_insert_with(|| \"poneyland\".to_string());\n\nassert!(table\n    .find(hasher(&\"poneyland\"), |x| x == \"poneyland\")\n    .is_some());\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{"`OccupiedEntry`":"0:2214:3541"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl FnOnce() -> T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:1604:156":{"id":"b:1:2471-0:1604:156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1338":{"id":"0:1338","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4940,0],"end":[4946,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1341:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3610-0:1120:3554":{"id":"b:1:3610-0:1120:3554","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:809":{"id":"0:809","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2659,0],"end":[2663,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:812:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2774-0:2257:5389":{"id":"b:1:2774-0:2257:5389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AbsentEntry","id":"0:2257:5389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2778-0:2257:5389":{"id":"b:1:2778-0:2257:5389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AbsentEntry","id":"0:2257:5389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:542:3367":{"id":"0:542:3367","crate_id":0,"name":"keys","span":{"filename":"src/map.rs","begin":[652,4],"end":[654,5]},"visibility":"public","docs":"An iterator visiting all keys in arbitrary order.\nThe iterator element type is `&'a K`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\nassert_eq!(map.len(), 3);\nlet mut vec: Vec<&str> = Vec::new();\n\nfor key in map.keys() {\n    println!(\"{}\", key);\n    vec.push(*key);\n}\n\n// The `Keys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\"]);\n\nassert_eq!(map.len(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1432:4355":{"id":"0:1432:4355","crate_id":0,"name":"or_insert_with_key","span":{"filename":"src/map.rs","begin":[5817,4],"end":[5829,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting, if empty, the result of the default function.\nThis method allows for generating key-derived values for insertion by providing the default\nfunction an access to the borrower form of the key.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, usize> = HashMap::new();\n\n// nonexistent key\nmap.entry_ref(\"poneyland\").or_insert_with_key(|key| key.chars().count());\nassert_eq!(map[\"poneyland\"], 9);\n\n// existing key\n*map.entry_ref(\"poneyland\").or_insert_with_key(|key| key.chars().count() * 10) *= 2;\nassert_eq!(map[\"poneyland\"], 18);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}],"output":{"generic":"V"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:2240:3543":{"id":"b:1:2471-0:2240:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2474-0:845:3385":{"id":"b:1:2474-0:845:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:546:863":{"id":"0:546:863","crate_id":0,"name":"iter_mut","span":{"filename":"src/map.rs","begin":[801,4],"end":[809,5]},"visibility":"public","docs":"An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nThe iterator element type is `(&'a K, &'a mut V)`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\n\n// Update all values\nfor (_, val) in map.iter_mut() {\n    *val *= 2;\n}\n\nassert_eq!(map.len(), 3);\nlet mut vec: Vec<(&str, i32)> = Vec::new();\n\nfor (key, val) in &map {\n    println!(\"key: {} val: {}\", key, val);\n    vec.push((*key, *val));\n}\n\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(\"a\", 2), (\"b\", 4), (\"c\", 6)]);\n\nassert_eq!(map.len(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2784-0:755:3485":{"id":"b:1:2784-0:755:3485","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:985:4180":{"id":"0:985:4180","crate_id":0,"name":"insert_hashed_nocheck","span":{"filename":"src/map.rs","begin":[4001,4],"end":[4012,5]},"visibility":"public","docs":"Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\nlet key = \"c\";\nlet hash = compute_hash(map.hasher(), &key);\n\nmatch map.raw_entry_mut().from_key_hashed_nocheck(hash, &key) {\n    RawEntryMut::Occupied(_) => panic!(),\n    RawEntryMut::Vacant(v) => assert_eq!(\n        v.insert_hashed_nocheck(hash, key, 300),\n        (&mut \"c\", &mut 300)\n    ),\n}\n\nassert_eq!(map[&\"c\"], 300);\n```","links":{},"attrs":["#[inline]","#[allow(clippy::shadow_unrelated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hash",{"primitive":"u64"}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:562:2383":{"id":"0:562:2383","crate_id":0,"name":"reserve","span":{"filename":"src/map.rs","begin":[1105,4],"end":[1108,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.\n\n# Panics\n\nPanics if the new capacity exceeds [`isize::MAX`] bytes and [`abort`] the program\nin case of allocation error. Use [`try_reserve`](HashMap::try_reserve) instead\nif you want to handle memory allocation failure.\n\n[`isize::MAX`]: https://doc.rust-lang.org/std/primitive.isize.html\n[`abort`]: https://doc.rust-lang.org/alloc/alloc/fn.handle_alloc_error.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet mut map: HashMap<&str, i32> = HashMap::new();\n// Map is empty and doesn't allocate memory\nassert_eq!(map.capacity(), 0);\n\nmap.reserve(10);\n\n// And now map can hold at least 10 elements\nassert!(map.capacity() >= 10);\n```","links":{"HashMap::try_reserve":"0:563:2388"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:1805:4997":{"id":"b:1:2774-0:1805:4997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2282:3042":{"id":"0:2282:3042","crate_id":0,"name":"fold","span":{"filename":"src/table.rs","begin":[1875,4],"end":[1882,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2784-0:483:154":{"id":"b:1:2784-0:483:154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8044-0:2291:3404":{"id":"b:1:8044-0:2291:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2784-0:1120:3554":{"id":"b:1:2784-0:1120:3554","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:932:4034":{"id":"0:932:4034","crate_id":0,"name":"from_key","span":{"filename":"src/map.rs","begin":[3269,4],"end":[3276,5]},"visibility":"public","docs":"Access an immutable entry by key.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\nlet key = \"a\";\nassert_eq!(map.raw_entry().from_key(&key), Some((&\"a\", &100)));\n```","links":{},"attrs":["#[inline]","#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1659:2369":{"id":"0:1659:2369","crate_id":0,"name":"shrink_to","span":{"filename":"src/set.rs","begin":[716,4],"end":[718,5]},"visibility":"public","docs":"Shrinks the capacity of the set with a lower limit. It will drop\ndown no lower than the supplied limit while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.\n\nPanics if the current capacity is smaller than the supplied\nminimum capacity.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set = HashSet::with_capacity(100);\nset.insert(1);\nset.insert(2);\nassert!(set.capacity() >= 100);\nset.shrink_to(10);\nassert!(set.capacity() >= 10);\nset.shrink_to(0);\nassert!(set.capacity() >= 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["min_capacity",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1459:2455":{"id":"0:1459:2455","crate_id":0,"name":"get_mut","span":{"filename":"src/map.rs","begin":[6088,4],"end":[6090,5]},"visibility":"public","docs":"Gets a mutable reference to the value in the entry.\n\nIf you need a reference to the `OccupiedEntryRef` which may outlive the\ndestruction of the `EntryRef` value, see [`into_mut`].\n\n[`into_mut`]: #method.into_mut\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nmap.entry_ref(\"poneyland\").or_insert(12);\n\nassert_eq!(map[\"poneyland\"], 12);\nif let EntryRef::Occupied(mut o) = map.entry_ref(\"poneyland\") {\n    *o.get_mut() += 10;\n    assert_eq!(*o.get(), 22);\n\n    // We can use the same Entry multiple times.\n    *o.get_mut() += 2;\n}\n\nassert_eq!(map[\"poneyland\"], 24);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1658:3520":{"id":"0:1658:3520","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/set.rs","begin":[690,4],"end":[692,5]},"visibility":"public","docs":"Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set = HashSet::with_capacity(100);\nset.insert(1);\nset.insert(2);\nassert!(set.capacity() >= 100);\nset.shrink_to_fit();\nassert!(set.capacity() >= 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5868:1606":{"id":"4:5868:1606","crate_id":4,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2039:3543":{"id":"0:2039:3543","crate_id":0,"name":"VacantEntry","span":{"filename":"src/set.rs","begin":[2219,0],"end":[2221,1]},"visibility":"public","docs":"A view into a vacant entry in a `HashSet`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet, VacantEntry};\n\nlet mut set = HashSet::<&str>::new();\n\nlet entry_v: VacantEntry<_, _> = match set.entry(\"a\") {\n    Entry::Vacant(view) => view,\n    Entry::Occupied(_) => unreachable!(),\n};\nentry_v.insert();\nassert!(set.contains(\"a\") && set.len() == 1);\n\n// Nonexistent key (insert)\nmatch set.entry(\"b\") {\n    Entry::Vacant(view) => view.insert(),\n    Entry::Occupied(_) => unreachable!(),\n}\nassert!(set.contains(\"b\") && set.len() == 2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:2065","a:1:42468:5939-0:2039:3543","a:1:2997:246-0:2039:3543","a:1:42469:5938-0:2039:3543","a:1:32833:237-0:2039:3543","a:1:32890:5735-0:2039:3543","b:1:3610-0:2039:3543","b:1:2471-0:2039:3543","b:1:2789-0:2039:3543","b:1:2784-0:2039:3543","b:1:2778-0:2039:3543","b:1:2774-0:2039:3543","b:1:2474-0:2039:3543","0:2045"]}}},"b:1:2778-0:723:3478":{"id":"b:1:2778-0:723:3478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42468:5939-0:787:3368":{"id":"a:1:42468:5939-0:787:3368","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32890:5735-0:2291:3404":{"id":"a:1:32890:5735-0:2291:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:555:3477":{"id":"0:555:3477","crate_id":0,"name":"into_keys","span":{"filename":"src/map.rs","begin":[1037,4],"end":[1041,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the keys in arbitrary order.\nThe map cannot be used after calling this.\nThe iterator element type is `K`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\n\nlet mut vec: Vec<&str> = map.into_keys().collect();\n\n// The `IntoKeys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\"]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2324":{"id":"0:2324","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1979,0],"end":[1986,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2327:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2789-0:1791:5006":{"id":"b:1:2789-0:1791:5006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32890:5735-0:1173:3702":{"id":"a:1:32890:5735-0:1173:3702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2150:3464":{"id":"0:2150:3464","crate_id":0,"name":"extract_if","span":{"filename":"src/table.rs","begin":[873,4],"end":[884,5]},"visibility":"public","docs":"Drains elements which are true under the given predicate,\nand returns an iterator over the removed items.\n\nIn other words, move all elements `e` such that `f(&e)` returns `true` out\ninto another iterator.\n\nIf the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse [`retain()`] with a negated predicate if you do not need the returned iterator.\n\n[`retain()`]: HashTable::retain\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\nfor x in 0..8 {\n    table.insert_unique(hasher(&x), x, hasher);\n}\nlet drained: Vec<i32> = table.extract_if(|&mut v| v % 2 == 0).collect();\n\nlet mut evens = drained.into_iter().collect::<Vec<_>>();\nlet mut odds = table.into_iter().collect::<Vec<_>>();\nevens.sort();\nodds.sort();\n\nassert_eq!(evens, vec![0, 2, 4, 6]);\nassert_eq!(odds, vec![1, 3, 5, 7]);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{"HashTable::retain":"0:2148:3442"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2349:882":{"id":"0:2349:882","crate_id":0,"name":"len","span":{"filename":"src/table.rs","begin":[2022,4],"end":[2024,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:2357:3465":{"id":"a:1:2997:246-0:2357:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1260":{"id":"0:1260","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4810,0],"end":[4829,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1264:174","0:1265:1062","0:1266:3008","0:1267:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1967":{"id":"0:1967","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1966,0],"end":[1990,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1972:174","0:1973:1062","0:1974:3008","0:1975:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32890:5735-0:2456:1859":{"id":"a:1:32890:5735-0:2456:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32890:5735-0:1155:3557":{"id":"a:1:32890:5735-0:1155:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1155:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2474-0:2456:1859":{"id":"b:1:2474-0:2456:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13074:20207":{"id":"1:13074:20207","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:53676:454","str::splitn":"1:13071:20205","self::pattern":"1:12697:14610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44349:12735","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12717:14616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1354":{"id":"0:1354","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4968,0],"end":[4973,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1358:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13080:20210":{"id":"1:13080:20210","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12717:14616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:548:2365":{"id":"0:548:2365","crate_id":0,"name":"is_empty","span":{"filename":"src/map.rs","begin":[847,4],"end":[849,5]},"visibility":"public","docs":"Returns `true` if the map contains no elements.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut a = HashMap::new();\nassert!(a.is_empty());\na.insert(1, \"a\");\nassert!(!a.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3610-0:686:3395":{"id":"b:1:3610-0:686:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2778-0:800:3378":{"id":"b:1:2778-0:800:3378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2997:246-0:2119:1838":{"id":"a:1:2997:246-0:2119:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2125:1048":{"id":"0:2125:1048","crate_id":0,"name":"new","span":{"filename":"src/table.rs","begin":[66,4],"end":[70,5]},"visibility":"public","docs":"Creates an empty `HashTable`.\n\nThe hash table is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.\n\n# Examples\n\n```\nuse hashbrown::HashTable;\nlet mut table: HashTable<&str> = HashTable::new();\nassert_eq!(table.len(), 0);\nassert_eq!(table.capacity(), 0);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2306":{"id":"0:2306","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1931,0],"end":[1935,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:2308:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1496":{"id":"0:1496","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[6540,0],"end":[6601,1]},"visibility":"default","docs":"Inserts all new key-values from the iterator and replaces values with existing\nkeys with new values returned from the iterator.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:2992:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2992:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8049:4538","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1502:4559"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2789-0:824:3465":{"id":"b:1:2789-0:824:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5612:21431":{"id":"4:5612:21431","crate_id":4,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13130:21380"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:1064:3543":{"id":"a:1:2997:246-0:1064:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1064:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1341:724":{"id":"0:1341:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4941,4],"end":[4945,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:824:3465":{"id":"b:1:2778-0:824:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2471-0:723:3478":{"id":"b:1:2471-0:723:3478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:978":{"id":"0:978","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3941,0],"end":[4085,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:888:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:984:2410","0:985:4180","0:986:4203"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2997:246-0:1155:3557":{"id":"a:1:2997:246-0:1155:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1155:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1832":{"id":"0:1832","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1680,0],"end":[1687,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["0:1834:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2299:174":{"id":"0:2299:174","crate_id":0,"name":"Item","span":{"filename":"src/table.rs","begin":[1907,4],"end":[1907,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}}}}},"0:2191:724":{"id":"0:2191:724","crate_id":0,"name":"fmt","span":{"filename":"src/table.rs","begin":[1084,4],"end":[1086,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2784-0:845:3385":{"id":"b:1:2784-0:845:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1381:4080":{"id":"0:1381:4080","crate_id":0,"name":"and_modify","span":{"filename":"src/map.rs","begin":[5155,4],"end":[5166,5]},"visibility":"public","docs":"Provides in-place mutable access to an occupied entry before any\npotential inserts into the map.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nmap.entry(\"poneyland\")\n   .and_modify(|e| { *e += 1 })\n   .or_insert(42);\nassert_eq!(map[\"poneyland\"], 42);\n\nmap.entry(\"poneyland\")\n   .and_modify(|e| { *e += 1 })\n   .or_insert(42);\nassert_eq!(map[\"poneyland\"], 43);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:2192:3538":{"id":"b:1:2789-0:2192:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2192:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:636:2360":{"id":"0:636:2360","crate_id":0,"name":"remove_entry","span":{"filename":"src/map.rs","begin":[1934,4],"end":[1940,5]},"visibility":"public","docs":"Removes a key from the map, returning the stored key and value if the\nkey was previously in the map. Keeps the allocated memory for reuse.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\n// The map is empty\nassert!(map.is_empty() && map.capacity() == 0);\n\nmap.insert(1, \"a\");\n\nassert_eq!(map.remove_entry(&1), Some((1, \"a\")));\nassert_eq!(map.remove(&1), None);\n\n// Now map hold none elements\nassert!(map.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1029:3542":{"id":"0:1029:3542","crate_id":0,"name":"Vacant","span":{"filename":"src/map.rs","begin":[4198,4],"end":[4198,39]},"visibility":"default","docs":"A vacant entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap};\nlet mut map: HashMap<&str, i32> = HashMap::new();\n\nmatch map.entry(\"a\") {\n    Entry::Occupied(_) => unreachable!(),\n    Entry::Vacant(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:1031:1764"]},"discriminant":null}}},"0:736:3042":{"id":"0:736:3042","crate_id":0,"name":"fold","span":{"filename":"src/map.rs","begin":[2473,4],"end":[2479,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:725-0:800:3378":{"id":"b:4:725-0:800:3378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["4:727:4269","4:728:4693","4:729:11909"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2778-0:1604:156":{"id":"b:1:2778-0:1604:156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2474-0:713:2963":{"id":"b:1:2474-0:713:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2471-0:686:3395":{"id":"b:1:2471-0:686:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2774-0:888:3994":{"id":"b:1:2774-0:888:3994","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:888:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2774-0:1079:3553":{"id":"b:1:2774-0:1079:3553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8044-0:1771:3395":{"id":"b:1:8044-0:1771:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:2142:2388":{"id":"0:2142:2388","crate_id":0,"name":"try_reserve","span":{"filename":"src/table.rs","begin":[594,4],"end":[600,5]},"visibility":"public","docs":"Tries to reserve capacity for at least `additional` more elements to be inserted\nin the given `HashTable`. The collection may reserve more space to avoid\nfrequent reallocations.\n\n`hasher` is called if entries need to be moved or copied to a new table.\nThis must return the same hash value that each entry was inserted with.\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table: HashTable<i32> = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\ntable\n    .try_reserve(10, hasher)\n    .expect(\"why is the test harness OOMing on 10 bytes?\");\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}],["hasher",{"impl_trait":[{"trait_bound":{"trait":{"name":"Fn","id":"1:3237:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"u64"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"Result","id":"1:42487:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl Fn(&T) -> u64","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"1:3237:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"u64"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:857:3985":{"id":"b:1:2774-0:857:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:676:199":{"id":"0:676:199","crate_id":0,"name":"Output","span":{"filename":"src/map.rs","begin":[2239,4],"end":[2239,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"V"}}}},"a:1:42469:5938-0:800:3378":{"id":"a:1:42469:5938-0:800:3378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2774-0:1020:3538":{"id":"b:1:2774-0:1020:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32890:5735-0:1784:3465":{"id":"a:1:32890:5735-0:1784:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2206":{"id":"0:2206","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1213,0],"end":[1393,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Entry","id":"0:2192:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2210:2410","0:2211:4059","0:2212:4070","0:2213:4080"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2789-0:850:3773":{"id":"b:1:2789-0:850:3773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2789-0:2214:3541":{"id":"b:1:2789-0:2214:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42469:5938-0:2271:3395":{"id":"a:1:42469:5938-0:2271:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42468:5939-0:824:3465":{"id":"a:1:42468:5939-0:824:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2778-0:2028:3541":{"id":"b:1:2778-0:2028:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1155:3557":{"id":"0:1155:3557","crate_id":0,"name":"VacantEntryRef","span":{"filename":"src/map.rs","begin":[4557,0],"end":[4561,1]},"visibility":"public","docs":"A view into a vacant entry in a `HashMap`.\nIt is part of the [`EntryRef`] enum.\n\n[`EntryRef`]: enum.EntryRef.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap, VacantEntryRef};\n\nlet mut map = HashMap::<String, i32>::new();\n\nlet entry_v: VacantEntryRef<_, _, _, _> = match map.entry_ref(\"a\") {\n    EntryRef::Vacant(view) => view,\n    EntryRef::Occupied(_) => unreachable!(),\n};\nentry_v.insert(10);\nassert!(map[\"a\"] == 10 && map.len() == 1);\n\n// Nonexistent key (insert and update)\nmatch map.entry_ref(\"b\") {\n    EntryRef::Occupied(_) => unreachable!(),\n    EntryRef::Vacant(view) => {\n        let value = view.insert(2);\n        assert_eq!(*value, 2);\n        *value = 20;\n    }\n}\nassert!(map[\"b\"] == 20 && map.len() == 2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1468","a:1:42468:5939-0:1155:3557","a:1:2997:246-0:1155:3557","a:1:42469:5938-0:1155:3557","a:1:32833:237-0:1155:3557","a:1:32890:5735-0:1155:3557","b:1:3610-0:1155:3557","b:1:2471-0:1155:3557","b:1:2789-0:1155:3557","b:1:2784-0:1155:3557","b:1:2778-0:1155:3557","b:1:2774-0:1155:3557","b:1:2474-0:1155:3557","0:1166"]}}},"a:1:32833:237-0:1155:3557":{"id":"a:1:32833:237-0:1155:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1155:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42469:5938-0:1604:156":{"id":"a:1:42469:5938-0:1604:156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2070:2453":{"id":"0:2070:2453","crate_id":0,"name":"get","span":{"filename":"src/set.rs","begin":[2406,4],"end":[2408,5]},"visibility":"public","docs":"Gets a reference to the value that would be used when inserting\nthrough the `VacantEntry`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<&str> = HashSet::new();\nassert_eq!(set.entry(\"poneyland\").get(), &\"poneyland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1220":{"id":"0:1220","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4723,0],"end":[4752,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1224:174","0:1225:1062","0:1226:3008","0:1227:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1927":{"id":"0:1927","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1870,0],"end":[1879,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1931:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2784-0:888:3994":{"id":"b:1:2784-0:888:3994","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:888:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3610-0:483:154":{"id":"b:1:3610-0:483:154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2236:2453":{"id":"0:2236:2453","crate_id":0,"name":"get","span":{"filename":"src/table.rs","begin":[1556,4],"end":[1558,5]},"visibility":"public","docs":"Gets a reference to the value in the entry.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::hash_table::Entry;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table: HashTable<&str> = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\ntable.insert_unique(hasher(&\"poneyland\"), \"poneyland\", hasher);\n\nmatch table.entry(hasher(&\"poneyland\"), |&x| x == \"poneyland\", hasher) {\n    Entry::Vacant(_) => panic!(),\n    Entry::Occupied(entry) => assert_eq!(entry.get(), &\"poneyland\"),\n}\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2388":{"id":"0:2388","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,0],"end":[173,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(feature = \"equivalent\"))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"core::borrow::Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"for":{"generic":"Q"},"items":["0:2391:1839"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2180":{"id":"0:2180","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1056,0],"end":[1065,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2183:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1957":{"id":"0:1957","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1946,0],"end":[1955,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1961:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:965:4135":{"id":"0:965:4135","crate_id":0,"name":"into_mut","span":{"filename":"src/map.rs","begin":[3667,4],"end":[3669,5]},"visibility":"public","docs":"Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nlet value: &mut u32;\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => value = o.into_mut(),\n}\n*value += 900;\n\nassert_eq!(map[&\"a\"], 1000);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2784-0:1604:156":{"id":"b:1:2784-0:1604:156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:767:3008":{"id":"0:767:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[2539,4],"end":[2541,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:2456:1859":{"id":"b:1:2471-0:2456:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:926":{"id":"0:926","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3255,0],"end":[3346,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:896:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:932:4034","0:934:4035","0:939:4038"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1614:460":{"id":"0:1614:460","crate_id":0,"name":"clone_from","span":{"filename":"src/set.rs","begin":[126,4],"end":[128,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8044-0:723:3478":{"id":"b:1:8044-0:723:3478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1064:3543":{"id":"0:1064:3543","crate_id":0,"name":"VacantEntry","span":{"filename":"src/map.rs","begin":[4313,0],"end":[4317,1]},"visibility":"public","docs":"A view into a vacant entry in a `HashMap`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap, VacantEntry};\n\nlet mut map = HashMap::<&str, i32>::new();\n\nlet entry_v: VacantEntry<_, _, _> = match map.entry(\"a\") {\n    Entry::Vacant(view) => view,\n    Entry::Occupied(_) => unreachable!(),\n};\nentry_v.insert(10);\nassert!(map[&\"a\"] == 10 && map.len() == 1);\n\n// Nonexistent key (insert and update)\nmatch map.entry(\"b\") {\n    Entry::Occupied(_) => unreachable!(),\n    Entry::Vacant(view) => {\n        let value = view.insert(2);\n        assert_eq!(*value, 2);\n        *value = 20;\n    }\n}\nassert!(map[&\"b\"] == 20 && map.len() == 2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"DefaultHashBuilder","id":"0:482:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1410","a:1:42468:5939-0:1064:3543","a:1:2997:246-0:1064:3543","a:1:42469:5938-0:1064:3543","a:1:32833:237-0:1064:3543","a:1:32890:5735-0:1064:3543","b:1:3610-0:1064:3543","b:1:2471-0:1064:3543","b:1:2789-0:1064:3543","b:1:2784-0:1064:3543","b:1:2778-0:1064:3543","b:1:2774-0:1064:3543","b:1:2474-0:1064:3543","0:1073"]}}},"0:2072:2410":{"id":"0:2072:2410","crate_id":0,"name":"insert","span":{"filename":"src/set.rs","begin":[2445,4],"end":[2451,5]},"visibility":"public","docs":"Sets the value of the entry with the VacantEntry's value.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_set::Entry;\n\nlet mut set: HashSet<&str> = HashSet::new();\n\nif let Entry::Vacant(o) = set.entry(\"poneyland\") {\n    o.insert();\n}\nassert!(set.contains(\"poneyland\"));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5611:21430":{"id":"4:5611:21430","crate_id":4,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13129:21379"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:579:3584":{"id":"0:579:3584","crate_id":0,"name":"contains_key","span":{"filename":"src/map.rs","begin":[1418,4],"end":[1423,5]},"visibility":"public","docs":"Returns `true` if the map contains a value for the specified key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.contains_key(&1), true);\nassert_eq!(map.contains_key(&2), false);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:713:2963":{"id":"b:1:2778-0:713:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2474-0:857:3985":{"id":"b:1:2474-0:857:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2469:724":{"id":"0:2469:724","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[176,31],"end":[176,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2065":{"id":"0:2065","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2393,0],"end":[2463,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"VacantEntry","id":"0:2039:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2070:2453","0:2071:5249","0:2072:2410"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1089:1764":{"id":"0:1089:1764","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[4394,13],"end":[4394,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"b:1:2471-0:1775:2963":{"id":"b:1:2471-0:1775:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1349:1062":{"id":"0:1349:1062","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[4952,4],"end":[4954,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1270":{"id":"0:1270","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4830,0],"end":[4835,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1274:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:740":{"id":"0:740","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2482,0],"end":[2487,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:744:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2471-0:824:3465":{"id":"b:1:2471-0:824:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3610-0:723:3478":{"id":"b:1:3610-0:723:3478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3610-0:813:3431":{"id":"b:1:3610-0:813:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:911:4035":{"id":"0:911:4035","crate_id":0,"name":"from_key_hashed_nocheck","span":{"filename":"src/map.rs","begin":[3196,4],"end":[3201,5]},"visibility":"public","docs":"Creates a `RawEntryMut` from the given key and its hash.\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nlet key = \"a\";\nlet hash = compute_hash(map.hasher(), &key);\nlet entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_key_hashed_nocheck(hash, &key);\nentry.insert(key, 100);\nassert_eq!(map[&\"a\"], 100);\n```","links":{},"attrs":["#[inline]","#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hash",{"primitive":"u64"}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:755:3485":{"id":"b:1:2474-0:755:3485","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42468:5939-0:1038:3541":{"id":"a:1:42468:5939-0:1038:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"BuildHasherDefault","id":"1:10395:3154","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"AHasher","id":"6:1268:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:1090:3542":{"id":"0:1090:3542","crate_id":0,"name":"Vacant","span":{"filename":"src/map.rs","begin":[4409,4],"end":[4409,49]},"visibility":"default","docs":"A vacant entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\nlet mut map: HashMap<String, i32> = HashMap::new();\n\nmatch map.entry_ref(\"a\") {\n    EntryRef::Occupied(_) => unreachable!(),\n    EntryRef::Vacant(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:1092:1764"]},"discriminant":null}}},"0:1824:846":{"id":"0:1824:846","crate_id":0,"name":"into_iter","span":{"filename":"src/set.rs","begin":[1643,4],"end":[1645,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1760:395":{"id":"0:1760:395","crate_id":0,"name":"bitand","span":{"filename":"src/set.rs","begin":[1470,4],"end":[1472,5]},"visibility":"default","docs":"Returns the intersection of `self` and `rhs` as a new `HashSet<T, S>`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: HashSet<_> = vec![2, 3, 4].into_iter().collect();\n\nlet set = &a & &b;\n\nlet mut i = 0;\nlet expected = [2, 3];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:483:154":{"id":"0:483:154","crate_id":0,"name":"HashMap","span":{"filename":"src/map.rs","begin":[190,0],"end":[193,1]},"visibility":"public","docs":"A hash map implemented with quadratic probing and SIMD lookup.\n\nThe default hashing algorithm is currently [`AHash`], though this is\nsubject to change at any point in the future. This hash function is very\nfast for all types of keys, but this algorithm will typically *not* protect\nagainst attacks such as HashDoS.\n\nThe hashing algorithm can be replaced on a per-`HashMap` basis using the\n[`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many\nalternative algorithms are available on crates.io, such as the [`fnv`] crate.\n\nIt is required that the keys implement the [`Eq`] and [`Hash`] traits, although\nthis can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.\nIf you implement these yourself, it is important that the following\nproperty holds:\n\n```text\nk1 == k2 -> hash(k1) == hash(k2)\n```\n\nIn other words, if two keys are equal, their hashes must be equal.\n\nIt is a logic error for a key to be modified in such a way that the key's\nhash, as determined by the [`Hash`] trait, or its equality, as determined by\nthe [`Eq`] trait, changes while it is in the map. This is normally only\npossible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n\nIt is also a logic error for the [`Hash`] implementation of a key to panic.\nThis is generally only possible if the trait is implemented manually. If a\npanic does occur then the contents of the `HashMap` may become corrupted and\nsome items may be dropped from the table.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\n// Type inference lets us omit an explicit type signature (which\n// would be `HashMap<String, String>` in this example).\nlet mut book_reviews = HashMap::new();\n\n// Review some books.\nbook_reviews.insert(\n    \"Adventures of Huckleberry Finn\".to_string(),\n    \"My favorite book.\".to_string(),\n);\nbook_reviews.insert(\n    \"Grimms' Fairy Tales\".to_string(),\n    \"Masterpiece.\".to_string(),\n);\nbook_reviews.insert(\n    \"Pride and Prejudice\".to_string(),\n    \"Very enjoyable.\".to_string(),\n);\nbook_reviews.insert(\n    \"The Adventures of Sherlock Holmes\".to_string(),\n    \"Eye lyked it alot.\".to_string(),\n);\n\n// Check for a specific one.\n// When collections store owned values (String), they can still be\n// queried using references (&str).\nif !book_reviews.contains_key(\"Les Misérables\") {\n    println!(\"We've got {} reviews, but Les Misérables ain't one.\",\n             book_reviews.len());\n}\n\n// oops, this review has a lot of spelling mistakes, let's delete it.\nbook_reviews.remove(\"The Adventures of Sherlock Holmes\");\n\n// Look up the values associated with some keys.\nlet to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];\nfor &book in &to_find {\n    match book_reviews.get(book) {\n        Some(review) => println!(\"{}: {}\", book, review),\n        None => println!(\"{} is unreviewed.\", book)\n    }\n}\n\n// Look up the value for a key (will panic if the key is not found).\nprintln!(\"Review for Jane: {}\", book_reviews[\"Pride and Prejudice\"]);\n\n// Iterate over everything.\nfor (book, review) in &book_reviews {\n    println!(\"{}: \\\"{}\\\"\", book, review);\n}\n```\n\n`HashMap` also implements an [`Entry API`](#method.entry), which allows\nfor more complex methods of getting, setting, updating and removing keys and\ntheir values:\n\n```\nuse hashbrown::HashMap;\n\n// type inference lets us omit an explicit type signature (which\n// would be `HashMap<&str, u8>` in this example).\nlet mut player_stats = HashMap::new();\n\nfn random_stat_buff() -> u8 {\n    // could actually return some random value here - let's just return\n    // some fixed value for now\n    42\n}\n\n// insert a key only if it doesn't already exist\nplayer_stats.entry(\"health\").or_insert(100);\n\n// insert a key using a function that provides a new value only if it\n// doesn't already exist\nplayer_stats.entry(\"defence\").or_insert_with(random_stat_buff);\n\n// update a key, guarding against the key possibly not being set\nlet stat = player_stats.entry(\"attack\").or_insert(100);\n*stat += random_stat_buff();\n```\n\nThe easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].\nWe must also derive [`PartialEq`].\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n[`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html\n[`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n[`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html\n[`default`]: #method.default\n[`with_hasher`]: #method.with_hasher\n[`with_capacity_and_hasher`]: #method.with_capacity_and_hasher\n[`fnv`]: https://crates.io/crates/fnv\n[`AHash`]: https://crates.io/crates/ahash\n\n```\nuse hashbrown::HashMap;\n\n#[derive(Hash, Eq, PartialEq, Debug)]\nstruct Viking {\n    name: String,\n    country: String,\n}\n\nimpl Viking {\n    /// Creates a new Viking.\n    fn new(name: &str, country: &str) -> Viking {\n        Viking { name: name.to_string(), country: country.to_string() }\n    }\n}\n\n// Use a HashMap to store the vikings' health points.\nlet mut vikings = HashMap::new();\n\nvikings.insert(Viking::new(\"Einar\", \"Norway\"), 25);\nvikings.insert(Viking::new(\"Olaf\", \"Denmark\"), 24);\nvikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12);\n\n// Use derived implementation to print the status of the vikings.\nfor (viking, health) in &vikings {\n    println!(\"{:?} has {} hp\", viking, health);\n}\n```\n\nA `HashMap` with fixed list of elements can be initialized from an array:\n\n```\nuse hashbrown::HashMap;\n\nlet timber_resources: HashMap<&str, i32> = [(\"Norway\", 100), (\"Denmark\", 50), (\"Iceland\", 10)]\n    .iter().cloned().collect();\n// use the values stored in map\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"DefaultHashBuilder","id":"0:482:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:515","0:520","0:526","0:532","0:557","0:638","a:1:42468:5939-0:483:154","a:1:2997:246-0:483:154","a:1:42469:5938-0:483:154","a:1:32833:237-0:483:154","a:1:32890:5735-0:483:154","b:0:2388-0:483:154","b:1:3610-0:483:154","b:1:2471-0:483:154","b:1:2789-0:483:154","b:1:2784-0:483:154","b:1:2778-0:483:154","b:1:2774-0:483:154","b:1:2474-0:483:154","b:4:725-0:483:154","0:1488","0:1496","0:1480","0:658","0:664","0:1212","0:1203","0:1194","0:490","0:1505","0:670","0:645","0:653","0:678","0:1712"]}}},"b:4:725-0:1771:3395":{"id":"b:4:725-0:1771:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["4:727:4269","4:728:4693","4:729:11909"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1840:3008":{"id":"0:1840:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1696,4],"end":[1698,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42468:5939-0:845:3385":{"id":"a:1:42468:5939-0:845:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2778-0:1791:5006":{"id":"b:1:2778-0:1791:5006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2471-0:1811:5015":{"id":"b:1:2471-0:1811:5015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1093":{"id":"0:1093","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4412,0],"end":[4421,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1099:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2784-0:1805:4997":{"id":"b:1:2784-0:1805:4997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1770:1566":{"id":"0:1770:1566","crate_id":0,"name":"sub","span":{"filename":"src/set.rs","begin":[1534,4],"end":[1536,5]},"visibility":"default","docs":"Returns the difference of `self` and `rhs` as a new `HashSet<T, S>`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a - &b;\n\nlet mut i = 0;\nlet expected = [1, 2];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:2240:3543":{"id":"a:1:42469:5938-0:2240:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42469:5938-0:1775:2963":{"id":"a:1:42469:5938-0:1775:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42468:5939-0:2271:3395":{"id":"a:1:42468:5939-0:2271:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2276":{"id":"0:2276","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1860,0],"end":[1883,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:2279:174","0:2280:1062","0:2281:3008","0:2282:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2188":{"id":"0:2188","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1079,0],"end":[1087,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2191:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:32-5:51:2005":{"id":"0:32-5:51:2005","crate_id":0,"name":null,"span":{"filename":"src/raw/alloc.rs","begin":[31,36],"end":[31,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"allocator_api2::alloc::Allocator","name":"Allocator","id":"5:51:2005","glob":false}}},"0:1256":{"id":"0:1256","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4800,0],"end":[4808,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1259:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2778-0:2271:3395":{"id":"b:1:2778-0:2271:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2461":{"id":"0:2461","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[176,9],"end":[176,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2462:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1210:2963":{"id":"0:1210:2963","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[4658,4],"end":[4658,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"a:1:32833:237-0:888:3994":{"id":"a:1:32833:237-0:888:3994","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:888:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2789-0:896:3789":{"id":"b:1:2789-0:896:3789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:896:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:812:724":{"id":"0:812:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[2660,4],"end":[2662,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1243:1062":{"id":"0:1243:1062","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[4766,4],"end":[4775,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1477:4127":{"id":"0:1477:4127","crate_id":0,"name":"into_key","span":{"filename":"src/map.rs","begin":[6378,4],"end":[6383,5]},"visibility":"public","docs":"Take ownership of the key.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nlet key: &str = \"poneyland\";\n\nmatch map.entry_ref(key) {\n    EntryRef::Occupied(_) => panic!(),\n    EntryRef::Vacant(v) => assert_eq!(v.into_key(), \"poneyland\".to_owned()),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"K"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1847:882":{"id":"0:1847:882","crate_id":0,"name":"len","span":{"filename":"src/set.rs","begin":[1710,4],"end":[1712,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:2028:3541":{"id":"b:1:2774-0:2028:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1644":{"id":"0:1644","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[514,0],"end":[618,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1648:311","0:1649:3309","0:1650:3326","0:1651:2371"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2474-0:2119:1838":{"id":"b:1:2474-0:2119:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1681:5070":{"id":"0:1681:5070","crate_id":0,"name":"is_disjoint","span":{"filename":"src/set.rs","begin":[1046,4],"end":[1048,5]},"visibility":"public","docs":"Returns `true` if `self` has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet mut b = HashSet::new();\n\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(4);\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(1);\nassert_eq!(a.is_disjoint(&b), false);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1881:3042":{"id":"0:1881:3042","crate_id":0,"name":"fold","span":{"filename":"src/set.rs","begin":[1777,4],"end":[1783,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1073":{"id":"0:1073","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4319,0],"end":[4323,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1064:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1078:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1691:3098":{"id":"0:1691:3098","crate_id":0,"name":"take","span":{"filename":"src/set.rs","begin":[1216,4],"end":[1225,5]},"visibility":"public","docs":"Removes and returns the value in the set, if any, that is equal to the given one.\n\nThe value may be any borrowed form of the set's value type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe value type.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert_eq!(set.take(&2), Some(2));\nassert_eq!(set.take(&2), None);\n```\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1766":{"id":"0:1766","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1507,0],"end":[1537,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"1:3048:4850","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1769:199","0:1770:1566"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:973:2360":{"id":"0:973:2360","crate_id":0,"name":"remove_entry","span":{"filename":"src/map.rs","begin":[3880,4],"end":[3882,5]},"visibility":"public","docs":"Take the ownership of the key and value from the map.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => assert_eq!(o.remove_entry(), (\"a\", 100)),\n}\nassert_eq!(map.get(&\"a\"), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"K"},{"generic":"V"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2055:2410":{"id":"0:2055:2410","crate_id":0,"name":"insert","span":{"filename":"src/set.rs","begin":[2243,4],"end":[2252,5]},"visibility":"public","docs":"Sets the value of the entry, and returns an OccupiedEntry.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<&str> = HashSet::new();\nlet entry = set.entry(\"horseyland\").insert();\n\nassert_eq!(entry.get(), &\"horseyland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8044-0:686:3395":{"id":"b:1:8044-0:686:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:878":{"id":"0:878","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3039,0],"end":[3046,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1217:174":{"id":"0:1217:174","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4694,4],"end":[4694,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"b:1:2471-0:755:3485":{"id":"b:1:2471-0:755:3485","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2789-0:2357:3465":{"id":"b:1:2789-0:2357:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13018:2455":{"id":"1:13018:2455","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42346:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:700:3404":{"id":"a:1:2997:246-0:700:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2474-0:1775:2963":{"id":"b:1:2474-0:1775:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2789-0:800:3378":{"id":"b:1:2789-0:800:3378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2784-0:824:3465":{"id":"b:1:2784-0:824:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13035:17191":{"id":"1:13035:17191","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13034:17167"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44510:12745","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13015:2474":{"id":"1:13015:2474","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:53693:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:857:3985":{"id":"a:1:2997:246-0:857:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2789-0:1779:3431":{"id":"b:1:2789-0:1779:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2471-0:813:3431":{"id":"b:1:2471-0:813:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2172:846":{"id":"0:2172:846","crate_id":0,"name":"into_iter","span":{"filename":"src/table.rs","begin":[1039,4],"end":[1041,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:1798:4987":{"id":"b:1:2474-0:1798:4987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:571:2453":{"id":"0:571:2453","crate_id":0,"name":"get","span":{"filename":"src/map.rs","begin":[1308,4],"end":[1317,5]},"visibility":"public","docs":"Returns a reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get(&1), Some(&\"a\"));\nassert_eq!(map.get(&2), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:2311:2963":{"id":"b:1:2471-0:2311:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8044-0:1775:2963":{"id":"b:1:8044-0:1775:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:567:3551":{"id":"0:567:3551","crate_id":0,"name":"entry_ref","span":{"filename":"src/map.rs","begin":[1267,4],"end":[1286,5]},"visibility":"public","docs":"Gets the given key's corresponding entry by reference in the map for in-place manipulation.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut words: HashMap<String, usize> = HashMap::new();\nlet source = [\"poneyland\", \"horseyland\", \"poneyland\", \"poneyland\"];\nfor (i, &s) in source.iter().enumerate() {\n    let counter = words.entry_ref(s).or_insert(0);\n    *counter += 1;\n}\n\nassert_eq!(words[\"poneyland\"], 3);\nassert_eq!(words[\"horseyland\"], 1);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1172:724":{"id":"0:1172:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4566,4],"end":[4568,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1857:1062":{"id":"0:1857:1062","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1726,4],"end":[1732,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13020:18091":{"id":"1:13020:18091","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10787:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42468:5939-0:700:3404":{"id":"a:1:42468:5939-0:700:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"1:13039:4650":{"id":"1:13039:4650","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:53676:454","self::pattern":"1:12697:14610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1283:724":{"id":"0:1283:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4839,4],"end":[4841,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:781":{"id":"0:781","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2561,0],"end":[2567,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:785:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1493:4559":{"id":"0:1493:4559","crate_id":0,"name":"extend","span":{"filename":"src/map.rs","begin":[6499,4],"end":[6514,5]},"visibility":"default","docs":"Inserts all new key-values from the iterator to existing `HashMap<K, V, S, A>`.\nReplace values with existing keys with new values returned from the iterator.\n\n# Examples\n\n```\nuse hashbrown::hash_map::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, 100);\n\nlet some_iter = [(1, 1), (2, 2)].into_iter();\nmap.extend(some_iter);\n// Replace values with existing keys with new values returned from the iterator.\n// So that the map.get(&1) doesn't return Some(&100).\nassert_eq!(map.get(&1), Some(&1));\n\nlet some_vec: Vec<_> = vec![(3, 3), (4, 4)];\nmap.extend(some_vec);\n\nlet some_arr = [(5, 5), (6, 6)];\nmap.extend(some_arr);\nlet old_map_len = map.len();\n\n// You can also extend from another HashMap\nlet mut new_map = HashMap::new();\nnew_map.extend(map);\nassert_eq!(new_map.len(), old_map_len);\n\nlet mut vec: Vec<_> = new_map.into_iter().collect();\n// The `IntoIter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2377-0:456:933":{"id":"0:2377-0:456:933","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[88,4],"end":[88,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::map","name":"map","id":"0:456:933","glob":true}}},"b:1:3610-0:1155:3557":{"id":"b:1:3610-0:1155:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1155:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2789-0:845:3385":{"id":"b:1:2789-0:845:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2997:246-0:755:3485":{"id":"a:1:2997:246-0:755:3485","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2997:246-0:800:3378":{"id":"a:1:2997:246-0:800:3378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2137:5406":{"id":"0:2137:5406","crate_id":0,"name":"insert_unique","span":{"filename":"src/table.rs","begin":[407,4],"end":[419,5]},"visibility":"public","docs":"Inserts an element into the `HashTable` with the given hash value, but\nwithout checking whether an equivalent element already exists within the\ntable.\n\n`hasher` is called if entries need to be moved or copied to a new table.\nThis must return the same hash value that each entry was inserted with.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut v = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\nv.insert_unique(hasher(&1), 1, hasher);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["hash",{"primitive":"u64"}],["value",{"generic":"T"}],["hasher",{"impl_trait":[{"trait_bound":{"trait":{"name":"Fn","id":"1:3237:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"u64"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl Fn(&T) -> u64","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"1:3237:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"u64"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:869:3990":{"id":"b:1:2789-0:869:3990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1852:724":{"id":"0:1852:724","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1717,4],"end":[1719,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:863:3540":{"id":"0:863:3540","crate_id":0,"name":"Occupied","span":{"filename":"src/map.rs","begin":[2956,4],"end":[2956,49]},"visibility":"default","docs":"An occupied entry.\n\n# Examples\n\n```\nuse hashbrown::{hash_map::RawEntryMut, HashMap};\nlet mut map: HashMap<_, _> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:865:1764"]},"discriminant":null}}},"a:1:32890:5735-0:1771:3395":{"id":"a:1:32890:5735-0:1771:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1834:458":{"id":"0:1834:458","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[1682,4],"end":[1686,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:8048:846":{"id":"1:8048:846","crate_id":1,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:2257:5389":{"id":"b:1:2474-0:2257:5389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AbsentEntry","id":"0:2257:5389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2789-0:2039:3543":{"id":"b:1:2789-0:2039:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2039:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2382-0:483:154":{"id":"0:2382-0:483:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[132,0],"end":[132,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::map::HashMap","name":"HashMap","id":"0:483:154","glob":false}}},"1:13127:21376":{"id":"1:13127:21376","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40317:14476","Self::is_ascii":"1:13126:21375"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40317:14476","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:496:460":{"id":"0:496:460","crate_id":0,"name":"clone_from","span":{"filename":"src/map.rs","begin":[203,4],"end":[208,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["source",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1343":{"id":"0:1343","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4948,0],"end":[4967,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1348:174","0:1349:1062","0:1350:3008","0:1351:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1670:2453":{"id":"0:1670:2453","crate_id":0,"name":"get","span":{"filename":"src/set.rs","begin":[887,4],"end":[896,5]},"visibility":"public","docs":"Returns a reference to the value in the set, if any, that is equal to the given value.\n\nThe value may be any borrowed form of the set's value type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe value type.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert_eq!(set.get(&2), Some(&2));\nassert_eq!(set.get(&4), None);\n```\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:845:3385":{"id":"b:1:2774-0:845:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1853":{"id":"0:1853","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1722,0],"end":[1745,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1856:174","0:1857:1062","0:1858:3008","0:1859:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32833:237-0:2311:2963":{"id":"a:1:32833:237-0:2311:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"4:727:4269":{"id":"4:727:4269","crate_id":4,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13042:20211":{"id":"1:13042:20211","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:53676:454","self::pattern":"1:12697:14610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3610-0:2456:1859":{"id":"b:1:3610-0:2456:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2062:2453":{"id":"0:2062:2453","crate_id":0,"name":"get","span":{"filename":"src/set.rs","begin":[2323,4],"end":[2325,5]},"visibility":"public","docs":"Gets a reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet};\n\nlet mut set: HashSet<&str> = HashSet::new();\nset.entry(\"poneyland\").or_insert();\n\nmatch set.entry(\"poneyland\") {\n    Entry::Vacant(_) => panic!(),\n    Entry::Occupied(entry) => assert_eq!(entry.get(), &\"poneyland\"),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1313":{"id":"0:1313","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4900,0],"end":[4905,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1316:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2006:174":{"id":"0:2006:174","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[2045,4],"end":[2045,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"b:1:2784-0:713:2963":{"id":"b:1:2784-0:713:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1910":{"id":"0:1910","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1821,0],"end":[1829,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1914:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32890:5735-0:2012:3538":{"id":"a:1:32890:5735-0:2012:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2012:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:515":{"id":"0:515","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[266,0],"end":[326,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"DefaultHashBuilder","id":"0:482:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:518:1048","0:519:2299"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8044-0:2311:2963":{"id":"b:1:8044-0:2311:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:4:5866-0:1173:3702":{"id":"b:4:5866-0:1173:3702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:10136:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"4:5864:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:5868:1606"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2356:724":{"id":"0:2356:724","crate_id":0,"name":"fmt","span":{"filename":"src/table.rs","begin":[2029,4],"end":[2031,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:1811:5015":{"id":"a:1:42469:5938-0:1811:5015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2353":{"id":"0:2353","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[2028,0],"end":[2032,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2356:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32890:5735-0:787:3368":{"id":"a:1:32890:5735-0:787:3368","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8044-0:824:3465":{"id":"b:1:8044-0:824:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2471-0:2291:3404":{"id":"b:1:2471-0:2291:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2774-0:869:3990":{"id":"b:1:2774-0:869:3990","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:939:4038":{"id":"0:939:4038","crate_id":0,"name":"from_hash","span":{"filename":"src/map.rs","begin":[3340,4],"end":[3345,5]},"visibility":"public","docs":"Access an immutable entry by hash and matching function.\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::HashMap;\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\nlet key = \"a\";\nlet hash = compute_hash(map.hasher(), &key);\nassert_eq!(map.raw_entry().from_hash(hash, |k| k == &key), Some((&\"a\", &100)));\n```","links":{},"attrs":["#[inline]","#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hash",{"primitive":"u64"}],["is_match",{"generic":"F"}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2385:1840":{"id":"0:2385:1840","crate_id":0,"name":"Equivalent","span":{"filename":"src/lib.rs","begin":[152,0],"end":[162,1]},"visibility":"public","docs":"Key equivalence trait.\n\nThis trait defines the function used to compare the input value with the\nmap keys (or set values) during a lookup operation such as [`HashMap::get`]\nor [`HashSet::contains`].\nIt is provided with a blanket implementation based on the\n[`Borrow`](core::borrow::Borrow) trait.\n\n# Correctness\n\nEquivalent values must hash to the same value.","links":{"core::borrow::Borrow":"1:2465:103","`HashMap::get`":"0:571:2453","`HashSet::contains`":"0:1668:4650"},"attrs":["#[cfg(not(feature = \"equivalent\"))]"],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:2387:1839"],"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":["0:2388"]}}},"0:1946:174":{"id":"0:1946:174","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1905,4],"end":[1905,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:869:3990":{"id":"0:869:3990","crate_id":0,"name":"RawOccupiedEntryMut","span":{"filename":"src/map.rs","begin":[3033,0],"end":[3037,1]},"visibility":"public","docs":"A view into an occupied entry in a `HashMap`.\nIt is part of the [`RawEntryMut`] enum.\n\n[`RawEntryMut`]: enum.RawEntryMut.html\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut, RawOccupiedEntryMut};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\", 10), (\"b\", 20), (\"c\", 30)]);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet _raw_o: RawOccupiedEntryMut<_, _, _> = map.raw_entry_mut().from_key(&\"a\").insert(\"a\", 100);\nassert_eq!(map.len(), 3);\n\n// Existing key (insert and update)\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(mut view) => {\n        assert_eq!(view.get(), &100);\n        let v = view.get_mut();\n        let new_v = (*v) * 10;\n        *v = new_v;\n        assert_eq!(view.insert(1111), 1000);\n    }\n}\n\nassert_eq!(map[&\"a\"], 1111);\nassert_eq!(map.len(), 3);\n\n// Existing key (take)\nlet hash = compute_hash(map.hasher(), &\"c\");\nmatch map.raw_entry_mut().from_key_hashed_nocheck(hash, &\"c\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"c\", 30));\n    }\n}\nassert_eq!(map.raw_entry().from_key(&\"c\"), None);\nassert_eq!(map.len(), 2);\n\nlet hash = compute_hash(map.hasher(), &\"b\");\nmatch map.raw_entry_mut().from_hash(hash, |q| *q == \"b\") {\n    RawEntryMut::Vacant(_) => unreachable!(),\n    RawEntryMut::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"b\", 20));\n    }\n}\nassert_eq!(map.get(&\"b\"), None);\nassert_eq!(map.len(), 1);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:955","a:1:42468:5939-0:869:3990","a:1:42469:5938-0:869:3990","a:1:32890:5735-0:869:3990","b:1:3610-0:869:3990","b:1:2471-0:869:3990","b:1:2789-0:869:3990","b:1:2784-0:869:3990","b:1:2778-0:869:3990","b:1:2774-0:869:3990","b:1:2474-0:869:3990","0:883","0:1002","0:878"]}}},"0:1622:2304":{"id":"0:1622:2304","crate_id":0,"name":"new_in","span":{"filename":"src/set.rs","begin":[221,4],"end":[225,5]},"visibility":"public","docs":"Creates an empty `HashSet`.\n\nThe hash set is initially created with a capacity of 0, so it will not allocate until it\nis first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`], for example with\n[`with_hasher_in`](HashSet::with_hasher_in) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet set: HashSet<i32> = HashSet::new();\n```","links":{"`ahash::RandomState`":"6:1315:11846","`HashSet`":"0:1604:156","HashSet::with_hasher_in":"0:1649:3309"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1683:5077":{"id":"0:1683:5077","crate_id":0,"name":"is_subset","span":{"filename":"src/set.rs","begin":[1067,4],"end":[1069,5]},"visibility":"public","docs":"Returns `true` if the set is a subset of another,\ni.e., `other` contains at least all the values in `self`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet mut set = HashSet::new();\n\nassert_eq!(set.is_subset(&sup), true);\nset.insert(2);\nassert_eq!(set.is_subset(&sup), true);\nset.insert(4);\nassert_eq!(set.is_subset(&sup), false);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1966:458":{"id":"0:1966:458","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[1959,4],"end":[1963,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1439":{"id":"0:1439","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[5956,0],"end":[5987,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1447:4375"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:713:2963":{"id":"0:713:2963","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[2413,0],"end":[2415,1]},"visibility":"public","docs":"An owning iterator over the entries of a `HashMap` in arbitrary order.\nThe iterator element type is `(K, V)`.\n\nThis `struct` is created by the [`into_iter`] method on [`HashMap`]\n(provided by the [`IntoIterator`] trait). See its documentation for more.\nThe map cannot be used after calling that method.\n\n[`into_iter`]: struct.HashMap.html#method.into_iter\n[`HashMap`]: struct.HashMap.html\n[`IntoIterator`]: https://doc.rust-lang.org/core/iter/trait.IntoIterator.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut iter = map.into_iter();\nlet mut vec = vec![iter.next(), iter.next(), iter.next()];\n\n// The `IntoIter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some((1, \"a\")), Some((2, \"b\")), Some((3, \"c\"))]);\n\n// It is fused iterator\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:713:2963","a:1:2997:246-0:713:2963","a:1:42469:5938-0:713:2963","a:1:32833:237-0:713:2963","a:1:32890:5735-0:713:2963","b:1:3610-0:713:2963","b:1:2471-0:713:2963","b:1:2789-0:713:2963","b:1:8044-0:713:2963","b:1:2784-0:713:2963","b:1:2778-0:713:2963","b:1:2774-0:713:2963","b:1:2474-0:713:2963","0:1275","0:1270","0:1279","0:1260"]}}},"b:1:2774-0:1775:2963":{"id":"b:1:2774-0:1775:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8044-0:2271:3395":{"id":"b:1:8044-0:2271:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:42469:5938-0:700:3404":{"id":"a:1:42469:5938-0:700:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3610-0:824:3465":{"id":"b:1:3610-0:824:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42468:5939-0:1020:3538":{"id":"a:1:42468:5939-0:1020:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:2462:458":{"id":"0:2462:458","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[176,9],"end":[176,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1897":{"id":"0:1897","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1800,0],"end":[1817,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1901:174","0:1902:1062","0:1905:3008"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1266:3008":{"id":"0:1266:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[4818,4],"end":[4820,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1932":{"id":"0:1932","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1881,0],"end":[1887,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:632:3685":{"id":"0:632:3685","crate_id":0,"name":"insert_unique_unchecked","span":{"filename":"src/map.rs","begin":[1818,4],"end":[1825,5]},"visibility":"public","docs":"Insert a key-value pair into the map without checking\nif the key already exists in the map.\n\nReturns a reference to the key and value just inserted.\n\nThis operation is safe if a key does not exist in the map.\n\nHowever, if a key exists in the map already, the behavior is unspecified:\nthis operation may panic, loop forever, or any following operation with the map\nmay panic, loop forever or return arbitrary result.\n\nThat said, this operation (and following operations) are guaranteed to\nnot violate memory safety.\n\nThis operation is faster than regular insert, because it does not perform\nlookup before insertion.\n\nThis operation is useful during initial population of the map.\nFor example, when constructing a map from another map, we know\nthat keys are unique.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map1 = HashMap::new();\nassert_eq!(map1.insert(1, \"a\"), None);\nassert_eq!(map1.insert(2, \"b\"), None);\nassert_eq!(map1.insert(3, \"c\"), None);\nassert_eq!(map1.len(), 3);\n\nlet mut map2 = HashMap::new();\n\nfor (key, value) in map1.into_iter() {\n    map2.insert_unique_unchecked(key, value);\n}\n\nlet (key, value) = map2.insert_unique_unchecked(4, \"d\");\nassert_eq!(key, &4);\nassert_eq!(value, &mut \"d\");\n*value = \"e\";\n\nassert_eq!(map2[&1], \"a\");\nassert_eq!(map2[&2], \"b\");\nassert_eq!(map2[&3], \"c\");\nassert_eq!(map2[&4], \"e\");\nassert_eq!(map2.len(), 4);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"generic":"K"}],["v",{"generic":"V"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2071:5249":{"id":"0:2071:5249","crate_id":0,"name":"into_value","span":{"filename":"src/set.rs","begin":[2425,4],"end":[2427,5]},"visibility":"public","docs":"Take ownership of the value.\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet};\n\nlet mut set: HashSet<&str> = HashSet::new();\n\nmatch set.entry(\"poneyland\") {\n    Entry::Occupied(_) => panic!(),\n    Entry::Vacant(v) => assert_eq!(v.into_value(), \"poneyland\"),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:495:458":{"id":"0:495:458","crate_id":0,"name":"clone","span":{"filename":"src/map.rs","begin":[196,4],"end":[201,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3610-0:787:3368":{"id":"b:1:3610-0:787:3368","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1754:397":{"id":"0:1754:397","crate_id":0,"name":"bitor","span":{"filename":"src/set.rs","begin":[1437,4],"end":[1439,5]},"visibility":"default","docs":"Returns the union of `self` and `rhs` as a new `HashSet<T, S>`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a | &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 3, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42468:5939-0:2357:3465":{"id":"a:1:42468:5939-0:2357:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:2149:2501":{"id":"0:2149:2501","crate_id":0,"name":"drain","span":{"filename":"src/table.rs","begin":[825,4],"end":[829,5]},"visibility":"public","docs":"Clears the set, returning all elements in an iterator.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\nfor x in 1..=3 {\n    table.insert_unique(hasher(&x), x, hasher);\n}\nassert!(!table.is_empty());\n\n// print 1, 2, 3 in an arbitrary order\nfor i in table.drain() {\n    println!(\"{}\", i);\n}\n\nassert!(table.is_empty());\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1316:882":{"id":"0:1316:882","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[4902,4],"end":[4904,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:995:724":{"id":"0:995:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4088,4],"end":[4090,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:2119:1838":{"id":"a:1:42469:5938-0:2119:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2784-0:2271:3395":{"id":"b:1:2784-0:2271:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:725-0:1604:156":{"id":"b:4:725-0:1604:156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:727:4269","4:728:4693","4:729:11909"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1962":{"id":"0:1962","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1957,0],"end":[1964,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1966:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2997:246-0:1771:3395":{"id":"a:1:2997:246-0:1771:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2471-0:2119:1838":{"id":"b:1:2471-0:2119:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2063:2358":{"id":"0:2063:2358","crate_id":0,"name":"remove","span":{"filename":"src/set.rs","begin":[2352,4],"end":[2354,5]},"visibility":"public","docs":"Takes the value out of the entry, and returns it.\nKeeps the allocated memory for reuse.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_set::Entry;\n\nlet mut set: HashSet<&str> = HashSet::new();\n// The set is empty\nassert!(set.is_empty() && set.capacity() == 0);\n\nset.entry(\"poneyland\").or_insert();\nlet capacity_before_remove = set.capacity();\n\nif let Entry::Occupied(o) = set.entry(\"poneyland\") {\n    assert_eq!(o.remove(), \"poneyland\");\n}\n\nassert_eq!(set.contains(\"poneyland\"), false);\n// Now set hold none elements but capacity is equal to the old one\nassert!(set.len() == 0 && set.capacity() == capacity_before_remove);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:2240:3543":{"id":"b:1:2474-0:2240:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2383-0:1604:156":{"id":"0:2383-0:1604:156","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,0],"end":[133,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::set::HashSet","name":"HashSet","id":"0:1604:156","glob":false}}},"0:2250:724":{"id":"0:2250:724","crate_id":0,"name":"fmt","span":{"filename":"src/table.rs","begin":[1721,4],"end":[1723,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1633:3442":{"id":"0:1633:3442","crate_id":0,"name":"retain","span":{"filename":"src/set.rs","begin":[369,4],"end":[374,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` such that `f(&e)` returns `false`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet xs = [1,2,3,4,5,6];\nlet mut set: HashSet<i32> = xs.iter().cloned().collect();\nset.retain(|&k| k % 2 == 0);\nassert_eq!(set.len(), 3);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2164:2963":{"id":"0:2164:2963","crate_id":0,"name":"IntoIter","span":{"filename":"src/table.rs","begin":[1023,4],"end":[1023,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"a:1:32833:237-0:2357:3465":{"id":"a:1:32833:237-0:2357:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32890:5735-0:845:3385":{"id":"a:1:32890:5735-0:845:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1092:1764":{"id":"0:1092:1764","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[4409,11],"end":[4409,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"VacantEntryRef","id":"0:1155:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"0:2221":{"id":"0:2221","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1454,0],"end":[1459,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2784-0:2119:1838":{"id":"b:1:2784-0:2119:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:645":{"id":"0:645","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2169,0],"end":[2184,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2534:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2534:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:650:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:566:3537":{"id":"0:566:3537","crate_id":0,"name":"entry","span":{"filename":"src/map.rs","begin":[1231,4],"end":[1247,5]},"visibility":"public","docs":"Gets the given key's corresponding entry in the map for in-place manipulation.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut letters = HashMap::new();\n\nfor ch in \"a short treatise on fungi\".chars() {\n    let counter = letters.entry(ch).or_insert(0);\n    *counter += 1;\n}\n\nassert_eq!(letters[&'s'], 2);\nassert_eq!(letters[&'t'], 3);\nassert_eq!(letters[&'u'], 1);\nassert_eq!(letters.get(&'y'), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}]],"output":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:1784:3465":{"id":"b:1:2789-0:1784:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1947:1062":{"id":"0:1947:1062","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1908,4],"end":[1915,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:5594:2374":{"id":"4:5594:2374","crate_id":4,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"4:7629:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1723":{"id":"0:1723","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1328,0],"end":[1345,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"generic":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"super::map::DefaultHashBuilder","id":"0:482:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1728:751"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32833:237-0:2028:3541":{"id":"a:1:32833:237-0:2028:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2148:3442":{"id":"0:2148:3442","crate_id":0,"name":"retain","span":{"filename":"src/table.rs","begin":[783,4],"end":[792,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` such that `f(&e)` returns `false`.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\nfor x in 1..=6 {\n    table.insert_unique(hasher(&x), x, hasher);\n}\ntable.retain(|&mut x| x % 2 == 0);\nassert_eq!(table.len(), 3);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"impl FnMut(&mut T) -> bool","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2251":{"id":"0:2251","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1726,0],"end":[1780,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2255:2410","0:2256:5546"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2997:246-0:2291:3404":{"id":"a:1:2997:246-0:2291:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2789-0:813:3431":{"id":"b:1:2789-0:813:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:971:4156":{"id":"0:971:4156","crate_id":0,"name":"insert_key","span":{"filename":"src/map.rs","begin":[3840,4],"end":[3842,5]},"visibility":"public","docs":"Sets the value of the entry, and returns the entry's old value.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\nuse std::rc::Rc;\n\nlet key_one = Rc::new(\"a\");\nlet key_two = Rc::new(\"a\");\n\nlet mut map: HashMap<Rc<&str>, u32> = HashMap::new();\nmap.insert(key_one.clone(), 10);\n\nassert_eq!(map[&key_one], 10);\nassert!(Rc::strong_count(&key_one) == 2 && Rc::strong_count(&key_two) == 1);\n\nmatch map.raw_entry_mut().from_key(&key_one) {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(mut o) => {\n        let old_key = o.insert_key(key_two.clone());\n        assert!(Rc::ptr_eq(&old_key, &key_one));\n    }\n}\nassert_eq!(map[&key_two], 10);\nassert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}]],"output":{"generic":"K"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:2311:2963":{"id":"b:1:2778-0:2311:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1252:882":{"id":"0:1252:882","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[4794,4],"end":[4796,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:755:3485":{"id":"a:1:42469:5938-0:755:3485","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2778-0:1020:3538":{"id":"b:1:2778-0:1020:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2119:1838":{"id":"0:2119:1838","crate_id":0,"name":"HashTable","span":{"filename":"src/table.rs","begin":[45,0],"end":[50,1]},"visibility":"public","docs":"Low-level hash table with explicit hashing.\n\nThe primary use case for this type over [`HashMap`] or [`HashSet`] is to\nsupport types that do not implement the [`Hash`] and [`Eq`] traits, but\ninstead require additional data not contained in the key itself to compute a\nhash and compare two elements for equality.\n\nExamples of when this can be useful include:\n- An `IndexMap` implementation where indices into a `Vec` are stored as\n  elements in a `HashTable<usize>`. Hashing and comparing the elements\n  requires indexing the associated `Vec` to get the actual value referred to\n  by the index.\n- Avoiding re-computing a hash when it is already known.\n- Mutating the key of an element in a way that doesn't affect its hash.\n\nTo achieve this, `HashTable` methods that search for an element in the table\nrequire a hash value and equality function to be explicitly passed in as\narguments. The method will then iterate over the elements with the given\nhash and call the equality function on each of them, until a match is found.\n\nIn most cases, a `HashTable` will not be exposed directly in an API. It will\ninstead be wrapped in a helper type which handles the work of calculating\nhash values and comparing elements.\n\nDue to its low-level nature, this type provides fewer guarantees than\n[`HashMap`] and [`HashSet`]. Specifically, the API allows you to shoot\nyourself in the foot by having multiple elements with identical keys in the\ntable. The table itself will still function correctly and lookups will\narbitrarily return one of the matching elements. However you should avoid\ndoing this because it changes the runtime of hash table operations from\n`O(1)` to `O(k)` where `k` is the number of duplicate entries.\n\n[`HashMap`]: super::HashMap\n[`HashSet`]: super::HashSet","links":{"super::HashMap":"0:483:154","`Eq`":"1:2539:135","super::HashSet":"0:1604:156","`Hash`":"1:10353:153"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:2123","0:2127","a:1:42468:5939-0:2119:1838","a:1:2997:246-0:2119:1838","a:1:42469:5938-0:2119:1838","a:1:32833:237-0:2119:1838","a:1:32890:5735-0:2119:1838","b:1:3610-0:2119:1838","b:1:2471-0:2119:1838","b:1:2789-0:2119:1838","b:1:2784-0:2119:1838","b:1:2778-0:2119:1838","b:1:2774-0:2119:1838","b:1:2474-0:2119:1838","b:4:725-0:2119:1838","0:2160","0:2180","0:2173","0:2166","0:2188","0:2184"]}}},"b:1:2471-0:1020:3538":{"id":"b:1:2471-0:1020:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2784-0:2257:5389":{"id":"b:1:2784-0:2257:5389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AbsentEntry","id":"0:2257:5389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1173:3702":{"id":"0:1173:3702","crate_id":0,"name":"OccupiedError","span":{"filename":"src/map.rs","begin":[4595,0],"end":[4600,1]},"visibility":"public","docs":"The error returned by [`try_insert`](HashMap::try_insert) when the key already exists.\n\nContains the occupied entry, and the value that was not inserted.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, OccupiedError};\n\nlet mut map: HashMap<_, _> = [(\"a\", 10), (\"b\", 20)].into();\n\n// try_insert method returns mutable reference to the value if keys are vacant,\n// but if the map did have key present, nothing is updated, and the provided\n// value is returned inside `Err(_)` variant\nmatch map.try_insert(\"a\", 100) {\n    Err(OccupiedError { mut entry, value }) => {\n        assert_eq!(entry.key(), &\"a\");\n        assert_eq!(value, 100);\n        assert_eq!(entry.insert(100), 10)\n    }\n    _ => unreachable!(),\n}\nassert_eq!(map[&\"a\"], 100);\n```","links":{"HashMap::try_insert":"0:633:3701"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:1179:3537","0:1180:2411"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:1173:3702","a:1:2997:246-0:1173:3702","a:1:42469:5938-0:1173:3702","a:1:32833:237-0:1173:3702","a:1:32890:5735-0:1173:3702","b:1:3610-0:1173:3702","b:1:2471-0:1173:3702","b:1:2789-0:1173:3702","b:1:2784-0:1173:3702","b:1:2778-0:1173:3702","b:1:2774-0:1173:3702","b:1:2474-0:1173:3702","b:4:5866-0:1173:3702","0:1181","0:1187"]}}},"0:1685:5084":{"id":"0:1685:5084","crate_id":0,"name":"is_superset","span":{"filename":"src/set.rs","begin":[1092,4],"end":[1094,5]},"visibility":"public","docs":"Returns `true` if the set is a superset of another,\ni.e., `self` contains at least all the values in `other`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet sub: HashSet<_> = [1, 2].iter().cloned().collect();\nlet mut set = HashSet::new();\n\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(0);\nset.insert(1);\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(2);\nassert_eq!(set.is_superset(&sub), true);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1235":{"id":"0:1235","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4760,0],"end":[4760,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32833:237-0:755:3485":{"id":"a:1:32833:237-0:755:3485","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32833:237-0:787:3368":{"id":"a:1:32833:237-0:787:3368","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2140:2369":{"id":"0:2140:2369","crate_id":0,"name":"shrink_to","span":{"filename":"src/table.rs","begin":[517,4],"end":[519,5]},"visibility":"public","docs":"Shrinks the capacity of the table with a lower limit. It will drop\ndown no lower than the supplied limit while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.\n\n`hasher` is called if entries need to be moved or copied to a new table.\nThis must return the same hash value that each entry was inserted with.\n\nPanics if the current capacity is smaller than the supplied\nminimum capacity.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table = HashTable::with_capacity(100);\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\ntable.insert_unique(hasher(&1), 1, hasher);\ntable.insert_unique(hasher(&2), 2, hasher);\nassert!(table.capacity() >= 100);\ntable.shrink_to(10, hasher);\nassert!(table.capacity() >= 10);\ntable.shrink_to(0, hasher);\nassert!(table.capacity() >= 2);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["min_capacity",{"primitive":"usize"}],["hasher",{"impl_trait":[{"trait_bound":{"trait":{"name":"Fn","id":"1:3237:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"u64"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"impl Fn(&T) -> u64","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"1:3237:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"u64"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13130:21380":{"id":"1:13130:21380","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:1064:3543":{"id":"a:1:42469:5938-0:1064:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1064:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2308:882":{"id":"0:2308:882","crate_id":0,"name":"len","span":{"filename":"src/table.rs","begin":[1932,4],"end":[1934,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:896:3789":{"id":"a:1:42469:5938-0:896:3789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:896:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42468:5939-0:1805:4997":{"id":"a:1:42468:5939-0:1805:4997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32890:5735-0:713:2963":{"id":"a:1:32890:5735-0:713:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3610-0:1173:3702":{"id":"b:1:3610-0:1173:3702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1511:4559":{"id":"0:1511:4559","crate_id":0,"name":"extend","span":{"filename":"src/map.rs","begin":[6646,4],"end":[6648,5]},"visibility":"default","docs":"Inserts all new key-values from the iterator to existing `HashMap<K, V, S, A>`.\nReplace values with existing keys with new values returned from the iterator.\nThe keys and values must implement [`Copy`] trait.\n\n[`Copy`]: https://doc.rust-lang.org/core/marker/trait.Copy.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, 100);\n\nlet arr = [(1, 1), (2, 2)];\nlet some_iter = arr.iter();\nmap.extend(some_iter);\n// Replace values with existing keys with new values returned from the iterator.\n// So that the map.get(&1) doesn't return Some(&100).\nassert_eq!(map.get(&1), Some(&1));\n\nlet some_vec: Vec<_> = vec![(3, 3), (4, 4)];\nmap.extend(&some_vec);\n\nlet some_arr = [(5, 5), (6, 6)];\nmap.extend(&some_arr);\n\nlet mut vec: Vec<_> = map.into_iter().collect();\n// The `IntoIter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:2192:3538":{"id":"b:1:2774-0:2192:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2192:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42468:5939-0:1775:2963":{"id":"a:1:42468:5939-0:1775:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:777":{"id":"0:777","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2559,0],"end":[2559,65]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42468:5939-0:2311:2963":{"id":"a:1:42468:5939-0:2311:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2789-0:686:3395":{"id":"b:1:2789-0:686:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1404:2358":{"id":"0:1404:2358","crate_id":0,"name":"remove","span":{"filename":"src/map.rs","begin":[5447,4],"end":[5449,5]},"visibility":"public","docs":"Takes the value out of the entry, and returns it.\nKeeps the allocated memory for reuse.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n// The map is empty\nassert!(map.is_empty() && map.capacity() == 0);\n\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    assert_eq!(o.remove(), 12);\n}\n\nassert_eq!(map.contains_key(\"poneyland\"), false);\n// Now map hold none elements\nassert!(map.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:1791:5006":{"id":"a:1:42469:5938-0:1791:5006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2227":{"id":"0:2227","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1467,0],"end":[1473,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2230:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1755":{"id":"0:1755","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1442,0],"end":[1473,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitAnd","id":"1:34289:4847","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:1759:199","0:1760:395"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42469:5938-0:824:3465":{"id":"a:1:42469:5938-0:824:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:986:4203":{"id":"0:986:4203","crate_id":0,"name":"insert_with_hasher","span":{"filename":"src/map.rs","begin":[4051,4],"end":[4065,5]},"visibility":"public","docs":"Set the value of an entry with a custom hasher function.\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nfn make_hasher<K, S>(hash_builder: &S) -> impl Fn(&K) -> u64 + '_\nwhere\n    K: Hash + ?Sized,\n    S: BuildHasher,\n{\n    move |key: &K| {\n        use core::hash::Hasher;\n        let mut state = hash_builder.build_hasher();\n        key.hash(&mut state);\n        state.finish()\n    }\n}\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nlet key = \"a\";\nlet hash_builder = map.hasher().clone();\nlet hash = make_hasher(&hash_builder)(&key);\n\nmatch map.raw_entry_mut().from_hash(hash, |q| q == &key) {\n    RawEntryMut::Occupied(_) => panic!(),\n    RawEntryMut::Vacant(v) => assert_eq!(\n        v.insert_with_hasher(hash, key, 100, make_hasher(&hash_builder)),\n        (&mut \"a\", &mut 100)\n    ),\n}\nmap.extend([(\"b\", 200), (\"c\", 300), (\"d\", 400), (\"e\", 500), (\"f\", 600)]);\nassert_eq!(map[&\"a\"], 100);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hash",{"primitive":"u64"}],["key",{"generic":"K"}],["value",{"generic":"V"}],["hasher",{"generic":"H"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"H"},"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"1:3237:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}],"output":{"primitive":"u64"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1623:2300":{"id":"0:1623:2300","crate_id":0,"name":"with_capacity_in","span":{"filename":"src/set.rs","begin":[252,4],"end":[256,5]},"visibility":"public","docs":"Creates an empty `HashSet` with the specified capacity.\n\nThe hash set will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash set will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`], for example with\n[`with_capacity_and_hasher_in`](HashSet::with_capacity_and_hasher_in) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet set: HashSet<i32> = HashSet::with_capacity(10);\nassert!(set.capacity() >= 10);\n```","links":{"`ahash::RandomState`":"6:1315:11846","`HashSet`":"0:1604:156","HashSet::with_capacity_and_hasher_in":"0:1650:3326"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:772":{"id":"0:772","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2552,0],"end":[2557,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:776:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2471-0:700:3404":{"id":"b:1:2471-0:700:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1402:4135":{"id":"0:1402:4135","crate_id":0,"name":"into_mut","span":{"filename":"src/map.rs","begin":[5397,4],"end":[5399,5]},"visibility":"public","docs":"Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself.\n\nIf you need multiple references to the `OccupiedEntry`, see [`get_mut`].\n\n[`get_mut`]: #method.get_mut\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap};\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nassert_eq!(map[\"poneyland\"], 12);\n\nlet value: &mut u32;\nmatch map.entry(\"poneyland\") {\n    Entry::Occupied(entry) => value = entry.into_mut(),\n    Entry::Vacant(_) => panic!(),\n}\n*value += 10;\n\nassert_eq!(map[\"poneyland\"], 22);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32890:5735-0:483:154":{"id":"a:1:32890:5735-0:483:154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1299":{"id":"0:1299","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4874,0],"end":[4874,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1001:724":{"id":"0:1001:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4094,4],"end":[4099,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:1064:3543":{"id":"b:1:2789-0:1064:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1064:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1867":{"id":"0:1867","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1752,0],"end":[1752,57]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1902:1062":{"id":"0:1902:1062","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1807,4],"end":[1811,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1798:4987":{"id":"0:1798:4987","crate_id":0,"name":"Difference","span":{"filename":"src/set.rs","begin":[1609,0],"end":[1614,1]},"visibility":"public","docs":"A lazy iterator producing elements in the difference of `HashSet`s.\n\nThis `struct` is created by the [`difference`] method on [`HashSet`].\nSee its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`difference`]: struct.HashSet.html#method.difference","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:1798:4987","a:1:2997:246-0:1798:4987","a:1:42469:5938-0:1798:4987","a:1:32833:237-0:1798:4987","a:1:32890:5735-0:1798:4987","b:1:3610-0:1798:4987","b:1:2471-0:1798:4987","b:1:2789-0:1798:4987","b:1:8044-0:1798:4987","b:1:2784-0:1798:4987","b:1:2778-0:1798:4987","b:1:2774-0:1798:4987","b:1:2474-0:1798:4987","b:4:725-0:1798:4987","0:1957","0:1936","0:1941","0:1953"]}}},"b:1:2774-0:2119:1838":{"id":"b:1:2774-0:2119:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2784-0:896:3789":{"id":"b:1:2784-0:896:3789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:896:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2784-0:2214:3541":{"id":"b:1:2784-0:2214:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32833:237-0:2271:3395":{"id":"a:1:32833:237-0:2271:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2327:882":{"id":"0:2327:882","crate_id":0,"name":"len","span":{"filename":"src/table.rs","begin":[1983,4],"end":[1985,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13102:21537":{"id":"1:13102:21537","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:755:3485":{"id":"b:1:2789-0:755:3485","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2774-0:1173:3702":{"id":"b:1:2774-0:1173:3702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2288:882":{"id":"0:2288:882","crate_id":0,"name":"len","span":{"filename":"src/table.rs","begin":[1886,4],"end":[1888,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1867":{"id":"0:0:1867","crate_id":0,"name":"hashbrown","span":{"filename":"src/lib.rs","begin":[1,0],"end":[187,1]},"visibility":"public","docs":"This crate is a Rust port of Google's high-performance [SwissTable] hash\nmap, adapted to make it a drop-in replacement for Rust's standard `HashMap`\nand `HashSet` types.\n\nThe original C++ version of [SwissTable] can be found [here], and this\n[CppCon talk] gives an overview of how the algorithm works.\n\n[SwissTable]: https://abseil.io/blog/20180927-swisstables\n[here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h\n[CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4","links":{},"attrs":["#![no_std]","#![allow(clippy::doc_markdown, clippy::module_name_repetitions,\nclippy::must_use_candidate, clippy::option_if_let_else,\nclippy::redundant_else, clippy::manual_map, clippy::missing_safety_doc,\nclippy::missing_errors_doc)]","#![warn(missing_docs)]","#![warn(rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:2376:1830","0:2378:1832","0:2380:1835","0:2382-0:483:154","0:2383-0:1604:156","0:2384-0:2119:1838","0:2385:1840","0:2456:1859"],"is_stripped":false}}},"1:13101:21536":{"id":"1:13101:21536","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:670":{"id":"0:670","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2232,0],"end":[2261,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:39963:3151","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:676:199","0:677:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2774-0:824:3465":{"id":"b:1:2774-0:824:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1761":{"id":"0:1761","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1475,0],"end":[1505,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BitXor","id":"1:34635:4849","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}},"items":["0:1764:199","0:1765:400"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1879:1062":{"id":"0:1879:1062","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[1765,4],"end":[1771,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:1064:3543":{"id":"b:1:2471-0:1064:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1064:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1244:3008":{"id":"0:1244:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[4777,4],"end":[4779,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:824:3465":{"id":"0:824:3465","crate_id":0,"name":"ExtractIf","span":{"filename":"src/map.rs","begin":[2740,0],"end":[2746,1]},"visibility":"public","docs":"A draining iterator over entries of a `HashMap` which don't satisfy the predicate\n`f(&k, &mut v)` in arbitrary order. The iterator element type is `(K, V)`.\n\nThis `struct` is created by the [`extract_if`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`extract_if`]: struct.HashMap.html#method.extract_if\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<i32, &str> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut extract_if = map.extract_if(|k, _v| k % 2 != 0);\nlet mut vec = vec![extract_if.next(), extract_if.next()];\n\n// The `ExtractIf` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some((1, \"a\")),Some((3, \"c\"))]);\n\n// It is fused iterator\nassert_eq!(extract_if.next(), None);\nassert_eq!(extract_if.next(), None);\ndrop(extract_if);\n\nassert_eq!(map.len(), 1);\n```","links":{},"attrs":["#[must_use = \"Iterators are lazy unless consumed\"]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["a:1:42468:5939-0:824:3465","a:1:2997:246-0:824:3465","a:1:42469:5938-0:824:3465","a:1:32833:237-0:824:3465","a:1:32890:5735-0:824:3465","b:1:3610-0:824:3465","b:1:2471-0:824:3465","b:1:2789-0:824:3465","b:1:8044-0:824:3465","b:1:2784-0:824:3465","b:1:2778-0:824:3465","b:1:2774-0:824:3465","b:1:2474-0:824:3465","0:841","0:832"]}}},"a:1:32890:5735-0:1038:3541":{"id":"a:1:32890:5735-0:1038:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42469:5938-0:1779:3431":{"id":"a:1:42469:5938-0:1779:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2471-0:1805:4997":{"id":"b:1:2471-0:1805:4997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2774-0:686:3395":{"id":"b:1:2774-0:686:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:974:4104":{"id":"0:974:4104","crate_id":0,"name":"replace_entry_with","span":{"filename":"src/map.rs","begin":[3918,4],"end":[3938,5]},"visibility":"public","docs":"Provides shared access to the key and owned access to the value of\nthe entry and allows to replace or remove it based on the\nvalue of the returned option.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nlet raw_entry = match map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => o.replace_entry_with(|k, v| {\n        assert_eq!(k, &\"a\");\n        assert_eq!(v, 100);\n        Some(v + 900)\n    }),\n};\nlet raw_entry = match raw_entry {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => o.replace_entry_with(|k, v| {\n        assert_eq!(k, &\"a\");\n        assert_eq!(v, 1000);\n        None\n    }),\n};\nmatch raw_entry {\n    RawEntryMut::Vacant(_) => { },\n    RawEntryMut::Occupied(_) => panic!(),\n};\nassert_eq!(map.get(&\"a\"), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"generic":"V"}],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1668:4650":{"id":"0:1668:4650","crate_id":0,"name":"contains","span":{"filename":"src/set.rs","begin":[861,4],"end":[866,5]},"visibility":"public","docs":"Returns `true` if the set contains a value.\n\nThe value may be any borrowed form of the set's value type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe value type.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert_eq!(set.contains(&1), true);\nassert_eq!(set.contains(&4), false);\n```\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:530:3339":{"id":"0:530:3339","crate_id":0,"name":"with_hasher","span":{"filename":"src/map.rs","begin":[460,4],"end":[465,5]},"visibility":"public","docs":"Creates an empty `HashMap` which will use the given hash builder to hash\nkeys.\n\nThe hash map is initially created with a capacity of 0, so it will not\nallocate until it is first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`].\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashMap to be useful, see its documentation for details.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut map = HashMap::with_hasher(s);\nassert_eq!(map.len(), 0);\nassert_eq!(map.capacity(), 0);\n\nmap.insert(1, 2);\n```","links":{"`ahash::RandomState`":"6:1315:11846","`HashMap`":"0:483:154"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1737":{"id":"0:1737","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1371,0],"end":[1393,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:2992:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8049:4538","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1742:4559"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1577:1828":{"id":"0:1577:1828","crate_id":0,"name":"set","span":{"filename":"src/set.rs","begin":[1,0],"end":[2969,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1604:156","0:1771:3395","0:1775:2963","0:1779:3431","0:1784:3465","0:1791:5006","0:1798:4987","0:1805:4997","0:1811:5015","0:2012:3538","0:2028:3541","0:2039:3543"],"is_stripped":true}}},"a:1:32890:5735-0:1079:3553":{"id":"a:1:32890:5735-0:1079:3553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2127":{"id":"0:2127","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[92,0],"end":[1016,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2130:2304","0:2131:2300","0:2132:311","0:2133:2355","0:2134:5380","0:2135:5388","0:2136:3537","0:2137:5406","0:2138:2364","0:2139:3520","0:2140:2369","0:2141:2383","0:2142:2388","0:2143:2295","0:2144:882","0:2145:2365","0:2146:862","0:2147:863","0:2148:3442","0:2149:2501","0:2150:3464","0:2152:2462","0:2156:2470"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13006:21520":{"id":"1:13006:21520","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2784-0:2240:3543":{"id":"b:1:2784-0:2240:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1348:174":{"id":"0:1348:174","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4949,4],"end":[4949,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"1:13033:5866":{"id":"1:13033:5866","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44213:12653","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2134:5380":{"id":"0:2134:5380","crate_id":0,"name":"find_mut","span":{"filename":"src/table.rs","begin":[263,4],"end":[265,5]},"visibility":"public","docs":"Returns a mutable reference to an entry in the table with the given hash\nand which satisfies the equality function passed.\n\nThis method will call `eq` for all entries with the given hash, but may\nalso call it for entries with a different hash. `eq` should only return\ntrue for the desired entry, at which point the search is stopped.\n\nWhen mutating an entry, you should ensure that it still retains the same\nhash value as when it was inserted, otherwise lookups of that entry may\nfail to find it.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\ntable.insert_unique(hasher(&1), (1, \"a\"), |val| hasher(&val.0));\nif let Some(val) = table.find_mut(hasher(&1), |val| val.0 == 1) {\n    val.1 = \"b\";\n}\nassert_eq!(table.find(hasher(&1), |val| val.0 == 1), Some(&(1, \"b\")));\nassert_eq!(table.find(hasher(&2), |val| val.0 == 2), None);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["hash",{"primitive":"u64"}],["eq",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl FnMut(&T) -> bool","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:990":{"id":"0:990","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4087,0],"end":[4091,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:995:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1949:3042":{"id":"0:1949:3042","crate_id":0,"name":"fold","span":{"filename":"src/set.rs","begin":[1923,4],"end":[1935,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:686:3395":{"id":"b:1:2778-0:686:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5610:3097":{"id":"4:5610:3097","crate_id":4,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"4:7629:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42468:5939-0:2331:3431":{"id":"a:1:42468:5939-0:2331:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42469:5938-0:1079:3553":{"id":"a:1:42469:5938-0:1079:3553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:564:3520":{"id":"0:564:3520","crate_id":0,"name":"shrink_to_fit","span":{"filename":"src/map.rs","begin":[1177,4],"end":[1180,5]},"visibility":"public","docs":"Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<i32, i32> = HashMap::with_capacity(100);\nmap.insert(1, 2);\nmap.insert(3, 4);\nassert!(map.capacity() >= 100);\nmap.shrink_to_fit();\nassert!(map.capacity() >= 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1400:2453":{"id":"0:1400:2453","crate_id":0,"name":"get","span":{"filename":"src/map.rs","begin":[5334,4],"end":[5336,5]},"visibility":"public","docs":"Gets a reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nmatch map.entry(\"poneyland\") {\n    Entry::Vacant(_) => panic!(),\n    Entry::Occupied(entry) => assert_eq!(entry.get(), &12),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1717":{"id":"0:1717","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1312,0],"end":[1324,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8036:146","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1721:754"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2789-0:2456:1859":{"id":"b:1:2789-0:2456:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1166":{"id":"0:1166","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4563,0],"end":[4569,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1155:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1172:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3610-0:2257:5389":{"id":"b:1:3610-0:2257:5389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AbsentEntry","id":"0:2257:5389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:684:751":{"id":"0:684:751","crate_id":0,"name":"from","span":{"filename":"src/map.rs","begin":[2279,4],"end":[2281,5]},"visibility":"default","docs":"# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map1 = HashMap::from([(1, 2), (3, 4)]);\nlet map2: HashMap<_, _> = [(1, 2), (3, 4)].into();\nassert_eq!(map1, map2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2179:846":{"id":"0:2179:846","crate_id":0,"name":"into_iter","span":{"filename":"src/table.rs","begin":[1051,4],"end":[1053,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"4:729:11909":{"id":"4:729:11909","crate_id":4,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:868:1764":{"id":"0:868:1764","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[2970,11],"end":[2970,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:888:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"b:1:2471-0:1120:3554":{"id":"b:1:2471-0:1120:3554","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:966:2455":{"id":"0:966:2455","crate_id":0,"name":"get_mut","span":{"filename":"src/map.rs","begin":[3688,4],"end":[3690,5]},"visibility":"public","docs":"Gets a mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(mut o) => *o.get_mut() += 900,\n}\n\nassert_eq!(map[&\"a\"], 1000);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:845:3385":{"id":"b:1:2471-0:845:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:669:60":{"id":"0:669:60","crate_id":0,"name":"default","span":{"filename":"src/map.rs","begin":[2227,4],"end":[2229,5]},"visibility":"default","docs":"Creates an empty `HashMap<K, V, S, A>`, with the `Default` value for the hasher and allocator.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse std::collections::hash_map::RandomState;\n\n// You can specify all types of HashMap, including hasher and allocator.\n// Created map is empty and don't allocate memory\nlet map: HashMap<u32, String> = Default::default();\nassert_eq!(map.capacity(), 0);\nlet map: HashMap<u32, String, RandomState> = HashMap::default();\nassert_eq!(map.capacity(), 0);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32890:5735-0:896:3789":{"id":"a:1:32890:5735-0:896:3789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:896:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2789-0:700:3404":{"id":"b:1:2789-0:700:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1636:3464":{"id":"0:1636:3464","crate_id":0,"name":"extract_if","span":{"filename":"src/set.rs","begin":[405,4],"end":[416,5]},"visibility":"public","docs":"Drains elements which are true under the given predicate,\nand returns an iterator over the removed items.\n\nIn other words, move all elements `e` such that `f(&e)` returns `true` out\ninto another iterator.\n\nIf the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse [`retain()`] with a negated predicate if you do not need the returned iterator.\n\n[`retain()`]: HashSet::retain\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<i32> = (0..8).collect();\nlet drained: HashSet<i32> = set.extract_if(|v| v % 2 == 0).collect();\n\nlet mut evens = drained.into_iter().collect::<Vec<_>>();\nlet mut odds = set.into_iter().collect::<Vec<_>>();\nevens.sort();\nodds.sort();\n\nassert_eq!(evens, vec![0, 2, 4, 6]);\nassert_eq!(odds, vec![1, 3, 5, 7]);\n```","links":{"HashSet::retain":"0:1633:3442"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1380:1855":{"id":"0:1380:1855","crate_id":0,"name":"key","span":{"filename":"src/map.rs","begin":[5127,4],"end":[5132,5]},"visibility":"public","docs":"Returns a reference to this entry's key.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nmap.entry(\"poneyland\").or_insert(3);\n// existing key\nassert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");\n// nonexistent key\nassert_eq!(map.entry(\"horseland\").key(), &\"horseland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1775:2963":{"id":"0:1775:2963","crate_id":0,"name":"IntoIter","span":{"filename":"src/set.rs","begin":[1557,0],"end":[1559,1]},"visibility":"public","docs":"An owning iterator over the items of a `HashSet`.\n\nThis `struct` is created by the [`into_iter`] method on [`HashSet`]\n(provided by the `IntoIterator` trait). See its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`into_iter`]: struct.HashSet.html#method.into_iter","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:1775:2963","a:1:2997:246-0:1775:2963","a:1:42469:5938-0:1775:2963","a:1:32833:237-0:1775:2963","a:1:32890:5735-0:1775:2963","b:1:3610-0:1775:2963","b:1:2471-0:1775:2963","b:1:2789-0:1775:2963","b:1:8044-0:1775:2963","b:1:2784-0:1775:2963","b:1:2778-0:1775:2963","b:1:2774-0:1775:2963","b:1:2474-0:1775:2963","0:1867","0:1870","0:1863","0:1853"]}}},"1:8046:174":{"id":"1:8046:174","crate_id":1,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:1226:3008":{"id":"0:1226:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[4738,4],"end":[4740,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:896:3789":{"id":"b:1:2474-0:896:3789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:896:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13025:21525":{"id":"1:13025:21525","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:53682:1549","crate::ops::IndexMut":"1:3272:5840","str::slice_unchecked":"1:13024:21524"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32833:237-0:1779:3431":{"id":"a:1:32833:237-0:1779:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2784-0:2456:1859":{"id":"b:1:2784-0:2456:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1087:3540":{"id":"0:1087:3540","crate_id":0,"name":"Occupied","span":{"filename":"src/map.rs","begin":[4394,4],"end":[4394,53]},"visibility":"default","docs":"An occupied entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\nlet mut map: HashMap<_, _> = [(\"a\".to_owned(), 100), (\"b\".into(), 200)].into();\n\nmatch map.entry_ref(\"a\") {\n    EntryRef::Vacant(_) => unreachable!(),\n    EntryRef::Occupied(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:1089:1764"]},"discriminant":null}}},"0:2464":{"id":"0:2464","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[176,16],"end":[176,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2534:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2465:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1307:1062":{"id":"0:1307:1062","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[4880,4],"end":[4886,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32890:5735-0:1798:4987":{"id":"a:1:32890:5735-0:1798:4987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2471-0:2028:3541":{"id":"b:1:2471-0:2028:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32890:5735-0:2192:3538":{"id":"a:1:32890:5735-0:2192:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2192:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1180:2411":{"id":"0:1180:2411","crate_id":0,"name":"value","span":{"filename":"src/map.rs","begin":[4599,4],"end":[4599,16]},"visibility":"public","docs":"The value which was not inserted, because the entry was already occupied.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"V"}}},"0:2340":{"id":"0:2340","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[2011,0],"end":[2020,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2343:174","0:2344:1062","0:2345:3008"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:4:725-0:2456:1859":{"id":"b:4:725-0:2456:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["4:727:4269","4:728:4693","4:729:11909"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1437:4103":{"id":"0:1437:4103","crate_id":0,"name":"and_replace_entry_with","span":{"filename":"src/map.rs","begin":[5945,4],"end":[5953,5]},"visibility":"public","docs":"Provides shared access to the key and owned access to the value of\nan occupied entry and allows to replace or remove it based on the\nvalue of the returned option.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\n\nlet entry = map\n    .entry_ref(\"poneyland\")\n    .and_replace_entry_with(|_k, _v| panic!());\n\nmatch entry {\n    EntryRef::Vacant(e) => {\n        assert_eq!(e.key(), \"poneyland\");\n    }\n    EntryRef::Occupied(_) => panic!(),\n}\n\nmap.insert(\"poneyland\".to_string(), 42);\n\nlet entry = map\n    .entry_ref(\"poneyland\")\n    .and_replace_entry_with(|k, v| {\n        assert_eq!(k, \"poneyland\");\n        assert_eq!(v, 42);\n        Some(v + 1)\n    });\n\nmatch entry {\n    EntryRef::Occupied(e) => {\n        assert_eq!(e.key(), \"poneyland\");\n        assert_eq!(e.get(), &43);\n    }\n    EntryRef::Vacant(_) => panic!(),\n}\n\nassert_eq!(map[\"poneyland\"], 43);\n\nlet entry = map\n    .entry_ref(\"poneyland\")\n    .and_replace_entry_with(|_k, _v| None);\n\nmatch entry {\n    EntryRef::Vacant(e) => assert_eq!(e.key(), \"poneyland\"),\n    EntryRef::Occupied(_) => panic!(),\n}\n\nassert!(!map.contains_key(\"poneyland\"));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"generic":"V"}],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1628:2295":{"id":"0:1628:2295","crate_id":0,"name":"capacity","span":{"filename":"src/set.rs","begin":[270,4],"end":[272,5]},"visibility":"public","docs":"Returns the number of elements the set can hold without reallocating.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet set: HashSet<i32> = HashSet::with_capacity(100);\nassert!(set.capacity() >= 100);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:1784:3465":{"id":"a:1:42469:5938-0:1784:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1037:724":{"id":"0:1037:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4202,4],"end":[4207,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:713:2963":{"id":"a:1:42469:5938-0:713:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:8044-0:1798:4987":{"id":"b:1:8044-0:1798:4987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2789-0:2331:3431":{"id":"b:1:2789-0:2331:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13086:21530":{"id":"1:13086:21530","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12697:14610","`DoubleEndedIterator`":"1:8078:131","prim@char":"1:53676:454","str::matches":"1:13083:5633"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44449:12741","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12717:14616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3610-0:845:3385":{"id":"b:1:3610-0:845:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:725-0:1798:4987":{"id":"b:4:725-0:1798:4987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:727:4269","4:728:4693","4:729:11909"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2789-0:1805:4997":{"id":"b:1:2789-0:1805:4997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8044-0:1811:5015":{"id":"b:1:8044-0:1811:5015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2774-0:813:3431":{"id":"b:1:2774-0:813:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:733:1062":{"id":"0:733:1062","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[2465,4],"end":[2467,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:539:3326":{"id":"0:539:3326","crate_id":0,"name":"with_capacity_and_hasher_in","span":{"filename":"src/map.rs","begin":[580,4],"end":[585,5]},"visibility":"public","docs":"Creates an empty `HashMap` with the specified capacity, using `hash_builder`\nto hash the keys. It will be allocated with the given allocator.\n\nThe hash map will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash map will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`].\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut map = HashMap::with_capacity_and_hasher(10, s);\nmap.insert(1, 2);\n```","links":{"`ahash::RandomState`":"6:1315:11846","`HashMap`":"0:483:154"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hash_builder",{"generic":"S"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:1079:3553":{"id":"a:1:2997:246-0:1079:3553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2364":{"id":"0:2364","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[2047,0],"end":[2062,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2368:174","0:2369:1062","0:2371:3008"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32890:5735-0:1791:5006":{"id":"a:1:32890:5735-0:1791:5006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:972:2358":{"id":"0:972:2358","crate_id":0,"name":"remove","span":{"filename":"src/map.rs","begin":[3860,4],"end":[3862,5]},"visibility":"public","docs":"Takes the value out of the entry, and returns it.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => assert_eq!(o.remove(), 100),\n}\nassert_eq!(map.get(&\"a\"), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1154:724":{"id":"0:1154:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4519,4],"end":[4524,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1480":{"id":"0:1480","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[6437,0],"end":[6453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:8036:146","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1485:754"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2474-0:723:3478":{"id":"b:1:2474-0:723:3478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1464:4444":{"id":"0:1464:4444","crate_id":0,"name":"replace_key","span":{"filename":"src/map.rs","begin":[6253,4],"end":[6259,5]},"visibility":"public","docs":"Replaces the key in the hash map with the key used to create this entry.\n\n# Panics\n\nWill panic if this OccupiedEntryRef was created through [`EntryRef::insert`].\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\nuse std::rc::Rc;\n\nlet mut map: HashMap<Rc<str>, usize> = HashMap::with_capacity(6);\nlet mut keys: Vec<Rc<str>> = Vec::with_capacity(6);\n\nfor (value, key) in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"].into_iter().enumerate() {\n    let rc_key: Rc<str> = Rc::from(key);\n    keys.push(rc_key.clone());\n    map.insert(rc_key.clone(), value);\n}\n\nassert!(keys.iter().all(|key| Rc::strong_count(key) == 2));\n\n// It doesn't matter that we kind of use a vector with the same keys,\n// because all keys will be newly created from the references\nreclaim_memory(&mut map, &keys);\n\nassert!(keys.iter().all(|key| Rc::strong_count(key) == 1));\n\nfn reclaim_memory(map: &mut HashMap<Rc<str>, usize>, keys: &[Rc<str>]) {\n    for key in keys {\n        if let EntryRef::Occupied(entry) = map.entry_ref(key.as_ref()) {\n            // Replaces the entry's key with our version of it in `keys`.\n            entry.replace_key();\n        }\n    }\n}\n```","links":{"`EntryRef::insert`":"0:1428:2410"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"K"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32890:5735-0:1779:3431":{"id":"a:1:32890:5735-0:1779:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2778-0:2012:3538":{"id":"b:1:2778-0:2012:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2012:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1716:751":{"id":"0:1716:751","crate_id":0,"name":"from","span":{"filename":"src/set.rs","begin":[1307,4],"end":[1309,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["map",{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"tuple":[]}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1895:724":{"id":"0:1895:724","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1794,4],"end":[1797,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13121:21542":{"id":"1:13121:21542","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:53676:454","self::pattern":"1:12697:14610"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12717:14616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:545:862":{"id":"0:545:862","crate_id":0,"name":"iter","span":{"filename":"src/map.rs","begin":[756,4],"end":[764,5]},"visibility":"public","docs":"An iterator visiting all key-value pairs in arbitrary order.\nThe iterator element type is `(&'a K, &'a V)`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\nassert_eq!(map.len(), 3);\nlet mut vec: Vec<(&str, i32)> = Vec::new();\n\nfor (key, val) in map.iter() {\n    println!(\"key: {} val: {}\", key, val);\n    vec.push((*key, *val));\n}\n\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(\"a\", 1), (\"b\", 2), (\"c\", 3)]);\n\nassert_eq!(map.len(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:483:154":{"id":"b:1:2778-0:483:154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1289:1062":{"id":"0:1289:1062","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[4848,4],"end":[4854,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:1079:3553":{"id":"b:1:2471-0:1079:3553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32890:5735-0:1811:5015":{"id":"a:1:32890:5735-0:1811:5015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42469:5938-0:2039:3543":{"id":"a:1:42469:5938-0:2039:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2039:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1639":{"id":"0:1639","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[436,0],"end":[512,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1642:3339","0:1643:3295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2789-0:888:3994":{"id":"b:1:2789-0:888:3994","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:888:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1485:754":{"id":"0:1485:754","crate_id":0,"name":"from_iter","span":{"filename":"src/map.rs","begin":[6444,4],"end":[6452,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"T"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:4:725-0:686:3395":{"id":"b:4:725-0:686:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["4:727:4269","4:728:4693","4:729:11909"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2778-0:755:3485":{"id":"b:1:2778-0:755:3485","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:903":{"id":"0:903","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[3147,0],"end":[3202,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:909:4034","0:911:4035"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42468:5939-0:2028:3541":{"id":"a:1:42468:5939-0:2028:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:2346":{"id":"0:2346","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[2021,0],"end":[2025,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2349:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:550:3442":{"id":"0:550:3442","crate_id":0,"name":"retain","span":{"filename":"src/map.rs","begin":[919,4],"end":[932,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate. Keeps the\nallocated memory for reuse.\n\nIn other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\nThe elements are visited in unsorted (and unspecified) order.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();\nassert_eq!(map.len(), 8);\n\nmap.retain(|&k, _| k % 2 == 0);\n\n// We can see, that the number of elements inside map is changed.\nassert_eq!(map.len(), 4);\n\nlet mut vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();\nvec.sort_unstable();\nassert_eq!(vec, [(0, 0), (2, 20), (4, 40), (6, 60)]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["f",{"generic":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1058":{"id":"0:1058","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4274,0],"end":[4281,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1063:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1410":{"id":"0:1410","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[5622,0],"end":[5707,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"VacantEntry","id":"0:1064:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1416:1855","0:1417:4127","0:1418:2410"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1759:199":{"id":"0:1759:199","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1448,4],"end":[1448,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:1742:4559":{"id":"0:1742:4559","crate_id":0,"name":"extend","span":{"filename":"src/set.rs","begin":[1378,4],"end":[1380,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:581:2455":{"id":"0:581:2455","crate_id":0,"name":"get_mut","span":{"filename":"src/map.rs","begin":[1449,4],"end":[1458,5]},"visibility":"public","docs":"Returns a mutable reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nif let Some(x) = map.get_mut(&1) {\n    *x = \"b\";\n}\nassert_eq!(map[&1], \"b\");\n\nassert_eq!(map.get_mut(&2), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:787:3368":{"id":"0:787:3368","crate_id":0,"name":"Keys","span":{"filename":"src/map.rs","begin":[2597,0],"end":[2599,1]},"visibility":"public","docs":"An iterator over the keys of a `HashMap` in arbitrary order.\nThe iterator element type is `&'a K`.\n\nThis `struct` is created by the [`keys`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`keys`]: struct.HashMap.html#method.keys\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut keys = map.keys();\nlet mut vec = vec![keys.next(), keys.next(), keys.next()];\n\n// The `Keys` iterator produces keys in arbitrary order, so the\n// keys must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some(&1), Some(&2), Some(&3)]);\n\n// It is fused iterator\nassert_eq!(keys.next(), None);\nassert_eq!(keys.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:787:3368","a:1:2997:246-0:787:3368","a:1:42469:5938-0:787:3368","a:1:32833:237-0:787:3368","a:1:32890:5735-0:787:3368","b:1:3610-0:787:3368","b:1:2471-0:787:3368","b:1:2789-0:787:3368","b:1:8044-0:787:3368","b:1:2784-0:787:3368","b:1:2778-0:787:3368","b:1:2774-0:787:3368","b:1:2474-0:787:3368","b:4:725-0:787:3368","0:1284","0:796","0:1295","0:1299","0:792"]}}},"0:1711:724":{"id":"0:1711:724","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1298,4],"end":[1300,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42468:5939-0:1798:4987":{"id":"a:1:42468:5939-0:1798:4987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2471-0:2257:5389":{"id":"b:1:2471-0:2257:5389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AbsentEntry","id":"0:2257:5389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32890:5735-0:850:3773":{"id":"a:1:32890:5735-0:850:3773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2350":{"id":"0:2350","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[2026,0],"end":[2026,58]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2296":{"id":"0:2296","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1906,0],"end":[1929,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:2299:174","0:2300:1062","0:2301:3008","0:2302:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2471-0:1173:3702":{"id":"b:1:2471-0:1173:3702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2474-0:2357:3465":{"id":"b:1:2474-0:2357:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3610-0:2192:3538":{"id":"b:1:3610-0:2192:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2192:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13032:12760":{"id":"1:13032:12760","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:53676:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44203:12726","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:1811:5015":{"id":"b:1:2774-0:1811:5015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1878:174":{"id":"0:1878:174","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1762,4],"end":[1762,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"K"}}}},"0:1187":{"id":"0:1187","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4612,0],"end":[4622,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10136:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1193:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2778-0:850:3773":{"id":"b:1:2778-0:850:3773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1218:2963":{"id":"0:1218:2963","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[4695,4],"end":[4695,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"0:1488":{"id":"0:1488","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[6457,0],"end":[6536,1]},"visibility":"default","docs":"Inserts all new key-values from the iterator and replaces values with existing\nkeys with new values returned from the iterator.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8049:4538","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1493:4559"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1870":{"id":"0:1870","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1754,0],"end":[1759,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1873:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2789-0:1604:156":{"id":"b:1:2789-0:1604:156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1941":{"id":"0:1941","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1899,0],"end":[1936,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1946:174","0:1947:1062","0:1948:3008","0:1949:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:964:2453":{"id":"0:964:2453","crate_id":0,"name":"get","span":{"filename":"src/map.rs","begin":[3642,4],"end":[3644,5]},"visibility":"public","docs":"Gets a reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => assert_eq!(o.get(), &100),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:2331:3431":{"id":"b:1:2774-0:2331:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2778-0:2357:3465":{"id":"b:1:2778-0:2357:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2784-0:1784:3465":{"id":"b:1:2784-0:1784:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32833:237-0:2240:3543":{"id":"a:1:32833:237-0:2240:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32890:5735-0:723:3478":{"id":"a:1:32890:5735-0:723:3478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2474-0:1038:3541":{"id":"b:1:2474-0:1038:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32890:5735-0:686:3395":{"id":"a:1:32890:5735-0:686:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2230:724":{"id":"0:2230:724","crate_id":0,"name":"fmt","span":{"filename":"src/table.rs","begin":[1468,4],"end":[1472,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:2271:3395":{"id":"b:1:2471-0:2271:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2280:1062":{"id":"0:2280:1062","crate_id":0,"name":"next","span":{"filename":"src/table.rs","begin":[1863,4],"end":[1869,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13031:12747":{"id":"1:13031:12747","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:53676:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44197:12725","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1753:199":{"id":"0:1753:199","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1415,4],"end":[1415,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"b:1:3610-0:1779:3431":{"id":"b:1:3610-0:1779:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2474-0:1811:5015":{"id":"b:1:2474-0:1811:5015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:592:2470":{"id":"0:592:2470","crate_id":0,"name":"get_many_unchecked_mut","span":{"filename":"src/map.rs","begin":[1568,4],"end":[1577,5]},"visibility":"public","docs":"Attempts to get mutable references to `N` values in the map at once, without validating that\nthe values are unique.\n\nReturns an array of length `N` with the results of each query. `None` will be returned if\nany of the keys are missing.\n\nFor a safe alternative see [`get_many_mut`](`HashMap::get_many_mut`).\n\n# Safety\n\nCalling this method with overlapping keys is *[undefined behavior]* even if the resulting\nreferences are not used.\n\n[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut libraries = HashMap::new();\nlibraries.insert(\"Bodleian Library\".to_string(), 1602);\nlibraries.insert(\"Athenæum\".to_string(), 1807);\nlibraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\nlibraries.insert(\"Library of Congress\".to_string(), 1800);\n\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"Library of Congress\",\n]);\nassert_eq!(\n    got,\n    Some([\n        &mut 1807,\n        &mut 1800,\n    ]),\n);\n\n// Missing keys result in None\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"New York Public Library\",\n]);\nassert_eq!(got, None);\n```","links":{"`HashMap::get_many_mut`":"0:585:2462"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ks",{"array":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}},"len":"N"}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}},"len":"N"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1461:2410":{"id":"0:1461:2410","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[6139,4],"end":[6141,5]},"visibility":"public","docs":"Sets the value of the entry, and returns the entry's old value.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nmap.entry_ref(\"poneyland\").or_insert(12);\n\nif let EntryRef::Occupied(mut o) = map.entry_ref(\"poneyland\") {\n    assert_eq!(o.insert(15), 12);\n}\n\nassert_eq!(map[\"poneyland\"], 15);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"V"}]],"output":{"generic":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:2192:3538":{"id":"a:1:42469:5938-0:2192:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2192:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32833:237-0:2291:3404":{"id":"a:1:32833:237-0:2291:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2777:4272":{"id":"1:2777:4272","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2751:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42468:5939-0:1155:3557":{"id":"a:1:42468:5939-0:1155:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1155:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:32890:5735-0:1020:3538":{"id":"a:1:32890:5735-0:1020:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2474-0:2214:3541":{"id":"b:1:2474-0:2214:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13012:21346":{"id":"1:13012:21346","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12243:14618"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:526":{"id":"0:526","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[424,0],"end":[508,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"items":["0:530:3339","0:531:3295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:606:3637":{"id":"0:606:3637","crate_id":0,"name":"get_many_key_value_unchecked_mut","span":{"filename":"src/map.rs","begin":[1678,4],"end":[1687,5]},"visibility":"public","docs":"Attempts to get mutable references to `N` values in the map at once, with immutable\nreferences to the corresponding keys, without validating that the values are unique.\n\nReturns an array of length `N` with the results of each query. `None` will be returned if\nany of the keys are missing.\n\nFor a safe alternative see [`get_many_key_value_mut`](`HashMap::get_many_key_value_mut`).\n\n# Safety\n\nCalling this method with overlapping keys is *[undefined behavior]* even if the resulting\nreferences are not used.\n\n[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut libraries = HashMap::new();\nlibraries.insert(\"Bodleian Library\".to_string(), 1602);\nlibraries.insert(\"Athenæum\".to_string(), 1807);\nlibraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\nlibraries.insert(\"Library of Congress\".to_string(), 1800);\n\nlet got = libraries.get_many_key_value_mut([\n    \"Bodleian Library\",\n    \"Herzogin-Anna-Amalia-Bibliothek\",\n]);\nassert_eq!(\n    got,\n    Some([\n        (&\"Bodleian Library\".to_string(), &mut 1602),\n        (&\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), &mut 1691),\n    ]),\n);\n// Missing keys result in None\nlet got = libraries.get_many_key_value_mut([\n    \"Bodleian Library\",\n    \"Gewandhaus\",\n]);\nassert_eq!(got, None);\n```","links":{"`HashMap::get_many_key_value_mut`":"0:599:3634"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ks",{"array":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}},"len":"N"}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]},"len":"N"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3610-0:800:3378":{"id":"b:1:3610-0:800:3378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2378:1832":{"id":"0:2378:1832","crate_id":0,"name":"hash_set","span":{"filename":"src/lib.rs","begin":[103,0],"end":[103,16]},"visibility":"public","docs":"A hash set implemented as a `HashMap` where the value is `()`.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:2379-0:1577:1828"],"is_stripped":false}}},"a:1:2997:246-0:2456:1859":{"id":"a:1:2997:246-0:2456:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:776:882":{"id":"0:776:882","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[2554,4],"end":[2556,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:841":{"id":"0:841","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2766,0],"end":[2766,92]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1079:3553":{"id":"0:1079:3553","crate_id":0,"name":"EntryRef","span":{"filename":"src/map.rs","begin":[4377,0],"end":[4410,1]},"visibility":"public","docs":"A view into a single entry in a map, which may either be vacant or occupied,\nwith any borrowed form of the map's key type.\n\n\nThis `enum` is constructed from the [`entry_ref`] method on [`HashMap`].\n\n[`Hash`] and [`Eq`] on the borrowed form of the map's key type *must* match those\nfor the key type. It also require that key may be constructed from the borrowed\nform through the [`From`] trait.\n\n[`HashMap`]: struct.HashMap.html\n[`entry_ref`]: struct.HashMap.html#method.entry_ref\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n[`From`]: https://doc.rust-lang.org/std/convert/trait.From.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap, OccupiedEntryRef};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\".to_owned(), 10), (\"b\".into(), 20), (\"c\".into(), 30)]);\nassert_eq!(map.len(), 3);\n\n// Existing key (insert)\nlet key = String::from(\"a\");\nlet entry: EntryRef<_, _, _, _> = map.entry_ref(&key);\nlet _raw_o: OccupiedEntryRef<_, _, _, _> = entry.insert(1);\nassert_eq!(map.len(), 3);\n// Nonexistent key (insert)\nmap.entry_ref(\"d\").insert(4);\n\n// Existing key (or_insert)\nlet v = map.entry_ref(\"b\").or_insert(2);\nassert_eq!(std::mem::replace(v, 2), 20);\n// Nonexistent key (or_insert)\nmap.entry_ref(\"e\").or_insert(5);\n\n// Existing key (or_insert_with)\nlet v = map.entry_ref(\"c\").or_insert_with(|| 3);\nassert_eq!(std::mem::replace(v, 3), 30);\n// Nonexistent key (or_insert_with)\nmap.entry_ref(\"f\").or_insert_with(|| 6);\n\nprintln!(\"Our HashMap: {:?}\", map);\n\nfor (key, value) in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"].into_iter().zip(1..=6) {\n    assert_eq!(map[key], value)\n}\nassert_eq!(map.len(), 6);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"variants_stripped":false,"variants":["0:1087:3540","0:1090:3542"],"impls":["0:1420","0:1439","a:1:42468:5939-0:1079:3553","a:1:2997:246-0:1079:3553","a:1:42469:5938-0:1079:3553","a:1:32833:237-0:1079:3553","a:1:32890:5735-0:1079:3553","b:1:3610-0:1079:3553","b:1:2471-0:1079:3553","b:1:2789-0:1079:3553","b:1:2784-0:1079:3553","b:1:2778-0:1079:3553","b:1:2774-0:1079:3553","b:1:2474-0:1079:3553","0:1093"]}}},"0:549:2501":{"id":"0:549:2501","crate_id":0,"name":"drain","span":{"filename":"src/map.rs","begin":[890,4],"end":[894,5]},"visibility":"public","docs":"Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.\n\nIf the returned iterator is dropped before being fully consumed, it\ndrops the remaining key-value pairs. The returned iterator keeps a\nmutable borrow on the vector to optimize its implementation.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut a = HashMap::new();\na.insert(1, \"a\");\na.insert(2, \"b\");\nlet capacity_before_drain = a.capacity();\n\nfor (k, v) in a.drain().take(1) {\n    assert!(k == 1 || k == 2);\n    assert!(v == \"a\" || v == \"b\");\n}\n\n// As we can see, the map is empty and contains no element.\nassert!(a.is_empty() && a.len() == 0);\n// But map capacity is equal to old one.\nassert_eq!(a.capacity(), capacity_before_drain);\n\nlet mut a = HashMap::new();\na.insert(1, \"a\");\na.insert(2, \"b\");\n\n{   // Iterator is dropped without being consumed.\n    let d = a.drain();\n}\n\n// But the map is empty even if we do not use Drain iterator.\nassert!(a.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32833:237-0:1811:5015":{"id":"a:1:32833:237-0:1811:5015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2262":{"id":"0:2262","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1830,0],"end":[1834,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AbsentEntry","id":"0:2257:5389","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2265:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1405:4421":{"id":"0:1405:4421","crate_id":0,"name":"replace_entry","span":{"filename":"src/map.rs","begin":[5483,4],"end":[5490,5]},"visibility":"public","docs":"Replaces the entry, returning the old key and value. The new key in the hash map will be\nthe key used to create this entry.\n\n# Panics\n\nWill panic if this OccupiedEntry was created through [`Entry::insert`].\n\n# Examples\n\n```\n use hashbrown::hash_map::{Entry, HashMap};\n use std::rc::Rc;\n\n let mut map: HashMap<Rc<String>, u32> = HashMap::new();\n let key_one = Rc::new(\"Stringthing\".to_string());\n let key_two = Rc::new(\"Stringthing\".to_string());\n\n map.insert(key_one.clone(), 15);\n assert!(Rc::strong_count(&key_one) == 2 && Rc::strong_count(&key_two) == 1);\n\n match map.entry(key_two.clone()) {\n     Entry::Occupied(entry) => {\n         let (old_key, old_value): (Rc<String>, u32) = entry.replace_entry(16);\n         assert!(Rc::ptr_eq(&key_one, &old_key) && old_value == 15);\n     }\n     Entry::Vacant(_) => panic!(),\n }\n\n assert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);\n assert_eq!(map[&\"Stringthing\".to_owned()], 16);\n```","links":{"`Entry::insert`":"0:1374:2410"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"generic":"V"}]],"output":{"tuple":[{"generic":"K"},{"generic":"V"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1212":{"id":"0:1212","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4693,0],"end":[4721,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1217:174","0:1218:2963","0:1219:846"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2471-0:1155:3557":{"id":"b:1:2471-0:1155:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1155:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:799:724":{"id":"0:799:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[2612,4],"end":[2614,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:1020:3538":{"id":"a:1:2997:246-0:1020:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2997:246-0:2257:5389":{"id":"a:1:2997:246-0:2257:5389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AbsentEntry","id":"0:2257:5389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:934:4035":{"id":"0:934:4035","crate_id":0,"name":"from_key_hashed_nocheck","span":{"filename":"src/map.rs","begin":[3300,4],"end":[3305,5]},"visibility":"public","docs":"Access an immutable entry by a key and its hash.\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::HashMap;\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\nlet key = \"a\";\nlet hash = compute_hash(map.hasher(), &key);\nassert_eq!(map.raw_entry().from_key_hashed_nocheck(hash, &key), Some((&\"a\", &100)));\n```","links":{},"attrs":["#[inline]","#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hash",{"primitive":"u64"}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1648:311":{"id":"0:1648:311","crate_id":0,"name":"allocator","span":{"filename":"src/set.rs","begin":[520,4],"end":[522,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1211:846":{"id":"0:1211:846","crate_id":0,"name":"into_iter","span":{"filename":"src/map.rs","begin":[4688,4],"end":[4690,5]},"visibility":"default","docs":"Creates an iterator over the entries of a `HashMap` in arbitrary order\nwith mutable references to the values. The iterator element type is\n`(&'a K, &'a mut V)`.\n\nReturn the same `IterMut` struct as by the [`iter_mut`] method on\n[`HashMap`].\n\n[`iter_mut`]: struct.HashMap.html#method.iter_mut\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet mut map: HashMap<_, _> = [(\"a\", 1), (\"b\", 2), (\"c\", 3)].into();\n\nfor (key, value) in &mut map {\n    println!(\"Key: {}, Value: {}\", key, value);\n    *value *= 2;\n}\n\nlet mut vec = map.iter().collect::<Vec<_>>();\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(&\"a\", &2), (&\"b\", &4), (&\"c\", &6)]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32833:237-0:2039:3543":{"id":"a:1:32833:237-0:2039:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2039:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2135:5388":{"id":"0:2135:5388","crate_id":0,"name":"find_entry","span":{"filename":"src/table.rs","begin":[301,4],"end":[314,5]},"visibility":"public","docs":"Returns an `OccupiedEntry` for an entry in the table with the given hash\nand which satisfies the equality function passed.\n\nThis can be used to remove the entry from the table. Call\n[`HashTable::entry`] instead if you wish to insert an entry if the\nlookup fails.\n\nThis method will call `eq` for all entries with the given hash, but may\nalso call it for entries with a different hash. `eq` should only return\ntrue for the desired entry, at which point the search is stopped.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\ntable.insert_unique(hasher(&1), (1, \"a\"), |val| hasher(&val.0));\nif let Ok(entry) = table.find_entry(hasher(&1), |val| val.0 == 1) {\n    entry.remove();\n}\nassert_eq!(table.find(hasher(&1), |val| val.0 == 1), None);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{"`HashTable::entry`":"0:2136:3537"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["hash",{"primitive":"u64"}],["eq",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"Result","id":"1:42487:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"AbsentEntry","id":"0:2257:5389","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl FnMut(&T) -> bool","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13009:21522":{"id":"1:13009:21522","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13007:21521"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:1120:3554":{"id":"b:1:2789-0:1120:3554","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1931:724":{"id":"0:1931:724","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[1876,4],"end":[1878,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:1811:5015":{"id":"a:1:2997:246-0:1811:5015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1225:1062":{"id":"0:1225:1062","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[4727,4],"end":[4736,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1805:4997":{"id":"0:1805:4997","crate_id":0,"name":"SymmetricDifference","span":{"filename":"src/set.rs","begin":[1623,0],"end":[1625,1]},"visibility":"public","docs":"A lazy iterator producing elements in the symmetric difference of `HashSet`s.\n\nThis `struct` is created by the [`symmetric_difference`] method on\n[`HashSet`]. See its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:1805:4997","a:1:2997:246-0:1805:4997","a:1:42469:5938-0:1805:4997","a:1:32833:237-0:1805:4997","a:1:32890:5735-0:1805:4997","b:1:3610-0:1805:4997","b:1:2471-0:1805:4997","b:1:2789-0:1805:4997","b:1:8044-0:1805:4997","b:1:2784-0:1805:4997","b:1:2778-0:1805:4997","b:1:2774-0:1805:4997","b:1:2474-0:1805:4997","b:4:725-0:1805:4997","0:1978","0:1982","0:1967","0:1962"]}}},"a:1:32890:5735-0:1064:3543":{"id":"a:1:32890:5735-0:1064:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1064:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2784-0:1079:3553":{"id":"b:1:2784-0:1079:3553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:796":{"id":"0:796","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2611,0],"end":[2615,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:799:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2145:2365":{"id":"0:2145:2365","crate_id":0,"name":"is_empty","span":{"filename":"src/table.rs","begin":[665,4],"end":[667,5]},"visibility":"public","docs":"Returns `true` if the set contains no elements.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\nlet mut v = HashTable::new();\nassert!(v.is_empty());\nv.insert_unique(hasher(&1), 1, hasher);\nassert!(!v.is_empty());\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:787:3368":{"id":"a:1:2997:246-0:787:3368","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2022:1764":{"id":"0:2022:1764","crate_id":0,"name":"0","span":{"filename":"src/set.rs","begin":[2133,11],"end":[2133,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"VacantEntry","id":"0:2039:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"b:1:2471-0:2214:3541":{"id":"b:1:2471-0:2214:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32890:5735-0:2331:3431":{"id":"a:1:32890:5735-0:2331:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1866:882":{"id":"0:1866:882","crate_id":0,"name":"len","span":{"filename":"src/set.rs","begin":[1748,4],"end":[1750,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:2028:3541":{"id":"a:1:2997:246-0:2028:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2132:311":{"id":"0:2132:311","crate_id":0,"name":"allocator","span":{"filename":"src/table.rs","begin":[190,4],"end":[192,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13036:21526":{"id":"1:13036:21526","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44481:12742","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1302":{"id":"0:1302","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4876,0],"end":[4899,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1306:174","0:1307:1062","0:1308:3008","0:1309:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2012:3538":{"id":"0:2012:3538","crate_id":0,"name":"Entry","span":{"filename":"src/set.rs","begin":[2101,0],"end":[2134,1]},"visibility":"public","docs":"A view into a single entry in a set, which may either be vacant or occupied.\n\nThis `enum` is constructed from the [`entry`] method on [`HashSet`].\n\n[`HashSet`]: struct.HashSet.html\n[`entry`]: struct.HashSet.html#method.entry\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet, OccupiedEntry};\n\nlet mut set = HashSet::new();\nset.extend([\"a\", \"b\", \"c\"]);\nassert_eq!(set.len(), 3);\n\n// Existing value (insert)\nlet entry: Entry<_, _> = set.entry(\"a\");\nlet _raw_o: OccupiedEntry<_, _> = entry.insert();\nassert_eq!(set.len(), 3);\n// Nonexistent value (insert)\nset.entry(\"d\").insert();\n\n// Existing value (or_insert)\nset.entry(\"b\").or_insert();\n// Nonexistent value (or_insert)\nset.entry(\"e\").or_insert();\n\nprintln!(\"Our HashSet: {:?}\", set);\n\nlet mut vec: Vec<_> = set.iter().copied().collect();\n// The `Iter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [\"a\", \"b\", \"c\", \"d\", \"e\"]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"variants_stripped":false,"variants":["0:2017:3540","0:2020:3542"],"impls":["0:2050","a:1:42468:5939-0:2012:3538","a:1:2997:246-0:2012:3538","a:1:42469:5938-0:2012:3538","a:1:32833:237-0:2012:3538","a:1:32890:5735-0:2012:3538","b:1:3610-0:2012:3538","b:1:2471-0:2012:3538","b:1:2789-0:2012:3538","b:1:2784-0:2012:3538","b:1:2778-0:2012:3538","b:1:2774-0:2012:3538","b:1:2474-0:2012:3538","0:2023"]}}},"0:658":{"id":"0:658","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2195,0],"end":[2204,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:663:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1200:174":{"id":"0:1200:174","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4625,4],"end":[4625,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}},"0:840:3008":{"id":"0:840:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[2761,4],"end":[2763,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1242:174":{"id":"0:1242:174","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4763,4],"end":[4763,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}}},"b:1:2778-0:1064:3543":{"id":"b:1:2778-0:1064:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1064:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2774-0:1798:4987":{"id":"b:1:2774-0:1798:4987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1652":{"id":"0:1652","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[620,0],"end":[1226,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1656:2383","0:1657:2388","0:1658:3520","0:1659:2369","0:1660:4986","0:1662:4996","0:1664:5005","0:1666:65","0:1668:4650","0:1670:2453","0:1672:5030","0:1673:5039","0:1676:5043","0:1680:3537","0:1681:5070","0:1683:5077","0:1685:5084","0:1686:2410","0:1687:3685","0:1688:2374","0:1689:2358","0:1691:3098"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2789-0:723:3478":{"id":"b:1:2789-0:723:3478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2474-0:2039:3543":{"id":"b:1:2474-0:2039:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2039:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:909:4034":{"id":"0:909:4034","crate_id":0,"name":"from_key","span":{"filename":"src/map.rs","begin":[3163,4],"end":[3170,5]},"visibility":"public","docs":"Creates a `RawEntryMut` from the given key.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nlet key = \"a\";\nlet entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_key(&key);\nentry.insert(key, 100);\nassert_eq!(map[&\"a\"], 100);\n```","links":{},"attrs":["#[inline]","#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:577:3579":{"id":"0:577:3579","crate_id":0,"name":"get_key_value_mut","span":{"filename":"src/map.rs","begin":[1387,4],"end":[1396,5]},"visibility":"public","docs":"Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.\n\nThe supplied key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, \"a\");\nlet (k, v) = map.get_key_value_mut(&1).unwrap();\nassert_eq!(k, &1);\nassert_eq!(v, &mut \"a\");\n*v = \"b\";\nassert_eq!(map.get_key_value_mut(&1), Some((&1, &mut \"b\")));\nassert_eq!(map.get_key_value_mut(&2), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1120:3554":{"id":"0:1120:3554","crate_id":0,"name":"OccupiedEntryRef","span":{"filename":"src/map.rs","begin":[4490,0],"end":[4495,1]},"visibility":"public","docs":"A view into an occupied entry in a `HashMap`.\nIt is part of the [`EntryRef`] enum.\n\n[`EntryRef`]: enum.EntryRef.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap, OccupiedEntryRef};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\".to_owned(), 10), (\"b\".into(), 20), (\"c\".into(), 30)]);\n\nlet key = String::from(\"a\");\nlet _entry_o: OccupiedEntryRef<_, _, _, _> = map.entry_ref(&key).insert(100);\nassert_eq!(map.len(), 3);\n\n// Existing key (insert and update)\nmatch map.entry_ref(\"a\") {\n    EntryRef::Vacant(_) => unreachable!(),\n    EntryRef::Occupied(mut view) => {\n        assert_eq!(view.get(), &100);\n        let v = view.get_mut();\n        *v *= 10;\n        assert_eq!(view.insert(1111), 1000);\n    }\n}\n\nassert_eq!(map[\"a\"], 1111);\nassert_eq!(map.len(), 3);\n\n// Existing key (take)\nmatch map.entry_ref(\"c\") {\n    EntryRef::Vacant(_) => unreachable!(),\n    EntryRef::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"c\".to_owned(), 30));\n    }\n}\nassert_eq!(map.get(\"c\"), None);\nassert_eq!(map.len(), 2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1448","a:1:42468:5939-0:1120:3554","a:1:42469:5938-0:1120:3554","a:1:32890:5735-0:1120:3554","b:1:3610-0:1120:3554","b:1:2471-0:1120:3554","b:1:2789-0:1120:3554","b:1:2784-0:1120:3554","b:1:2778-0:1120:3554","b:1:2774-0:1120:3554","b:1:2474-0:1120:3554","0:1140","0:1148","0:1132"]}}},"0:653":{"id":"0:653","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2186,0],"end":[2193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1656:2383":{"id":"0:1656:2383","crate_id":0,"name":"reserve","span":{"filename":"src/set.rs","begin":[648,4],"end":[650,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.\n\n# Panics\n\nPanics if the new capacity exceeds [`isize::MAX`] bytes and [`abort`] the program\nin case of allocation error. Use [`try_reserve`](HashSet::try_reserve) instead\nif you want to handle memory allocation failure.\n\n[`isize::MAX`]: https://doc.rust-lang.org/std/primitive.isize.html\n[`abort`]: https://doc.rust-lang.org/alloc/alloc/fn.handle_alloc_error.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet mut set: HashSet<i32> = HashSet::new();\nset.reserve(10);\nassert!(set.capacity() >= 10);\n```","links":{"HashSet::try_reserve":"0:1657:2388"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1953":{"id":"0:1953","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1938,0],"end":[1944,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3610-0:2039:3543":{"id":"b:1:3610-0:2039:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2039:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32833:237-0:800:3378":{"id":"a:1:32833:237-0:800:3378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2187:458":{"id":"0:2187:458","crate_id":0,"name":"clone","span":{"filename":"src/table.rs","begin":[1072,4],"end":[1076,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2224":{"id":"0:2224","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1460,0],"end":[1465,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2789-0:2291:3404":{"id":"b:1:2789-0:2291:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2379-0:1577:1828":{"id":"0:2379-0:1577:1828","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,4],"end":[105,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::set","name":"set","id":"0:1577:1828","glob":true}}},"0:1350:3008":{"id":"0:1350:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[4956,4],"end":[4958,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1028:1764":{"id":"0:1028:1764","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[4183,13],"end":[4183,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"b:1:2774-0:1771:3395":{"id":"b:1:2774-0:1771:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13129:21379":{"id":"1:13129:21379","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2321:3042":{"id":"0:2321:3042","crate_id":0,"name":"fold","span":{"filename":"src/table.rs","begin":[1970,4],"end":[1976,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42468:5939-0:857:3985":{"id":"a:1:42468:5939-0:857:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"b:1:2474-0:1079:3553":{"id":"b:1:2474-0:1079:3553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1238":{"id":"0:1238","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4762,0],"end":[4791,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1242:174","0:1243:1062","0:1244:3008","0:1245:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1334:882":{"id":"0:1334:882","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[4934,4],"end":[4936,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:1604:156":{"id":"a:1:2997:246-0:1604:156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1848":{"id":"0:1848","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1714,0],"end":[1714,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2784-0:1811:5015":{"id":"b:1:2784-0:1811:5015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1632:2501":{"id":"0:1632:2501","crate_id":0,"name":"drain","span":{"filename":"src/set.rs","begin":[349,4],"end":[353,5]},"visibility":"public","docs":"Clears the set, returning all elements in an iterator.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nassert!(!set.is_empty());\n\n// print 1, 2, 3 in an arbitrary order\nfor i in set.drain() {\n    println!(\"{}\", i);\n}\n\nassert!(set.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:531:3295":{"id":"0:531:3295","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/map.rs","begin":[502,4],"end":[507,5]},"visibility":"public","docs":"Creates an empty `HashMap` with the specified capacity, using `hash_builder`\nto hash the keys.\n\nThe hash map will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash map will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`].\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashMap to be useful, see its documentation for details.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut map = HashMap::with_capacity_and_hasher(10, s);\nassert_eq!(map.len(), 0);\nassert!(map.capacity() >= 10);\n\nmap.insert(1, 2);\n```","links":{"`ahash::RandomState`":"6:1315:11846","`HashMap`":"0:483:154"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hash_builder",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:1784:3465":{"id":"b:1:2474-0:1784:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:792":{"id":"0:792","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2602,0],"end":[2609,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:795:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1987":{"id":"0:1987","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2011,0],"end":[2018,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1991:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:633:3701":{"id":"0:633:3701","crate_id":0,"name":"try_insert","span":{"filename":"src/map.rs","begin":[1856,4],"end":[1865,5]},"visibility":"public","docs":"Tries to insert a key-value pair into the map, and returns\na mutable reference to the value in the entry.\n\n# Errors\n\nIf the map already had this key present, nothing is updated, and\nan error containing the occupied entry and the value is returned.\n\n# Examples\n\nBasic usage:\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::OccupiedError;\n\nlet mut map = HashMap::new();\nassert_eq!(map.try_insert(37, \"a\").unwrap(), &\"a\");\n\nmatch map.try_insert(37, \"b\") {\n    Err(OccupiedError { entry, value }) => {\n        assert_eq!(entry.key(), &37);\n        assert_eq!(entry.get(), &\"a\");\n        assert_eq!(value, \"b\");\n    }\n    _ => panic!()\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["key",{"generic":"K"}],["value",{"generic":"V"}]],"output":{"resolved_path":{"name":"Result","id":"1:42487:226","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}},{"type":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:795:458":{"id":"0:795:458","crate_id":0,"name":"clone","span":{"filename":"src/map.rs","begin":[2604,4],"end":[2608,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42468:5939-0:1771:3395":{"id":"a:1:42468:5939-0:1771:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2384-0:2119:1838":{"id":"0:2384-0:2119:1838","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[134,0],"end":[134,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::table::HashTable","name":"HashTable","id":"0:2119:1838","glob":false}}},"1:13118:21541":{"id":"1:13118:21541","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:53676:454","self::pattern":"1:12697:14610"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:692":{"id":"0:692","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2318,0],"end":[2326,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:695:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2369:1062":{"id":"0:2369:1062","crate_id":0,"name":"next","span":{"filename":"src/table.rs","begin":[2054,4],"end":[2056,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1234:882":{"id":"0:1234:882","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[4755,4],"end":[4757,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:713:2963":{"id":"b:1:2774-0:713:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:4:725-0:1805:4997":{"id":"b:4:725-0:1805:4997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"4:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["4:727:4269","4:728:4693","4:729:11909"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1430:4070":{"id":"0:1430:4070","crate_id":0,"name":"or_insert_with","span":{"filename":"src/map.rs","begin":[5786,4],"end":[5795,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\n\n// nonexistent key\nmap.entry_ref(\"poneyland\").or_insert_with(|| 3);\nassert_eq!(map[\"poneyland\"], 3);\n\n// existing key\n*map.entry_ref(\"poneyland\").or_insert_with(|| 10) *= 2;\nassert_eq!(map[\"poneyland\"], 6);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[],"output":{"generic":"V"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1290:3008":{"id":"0:1290:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[4856,4],"end":[4858,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2235:2358":{"id":"0:2235:2358","crate_id":0,"name":"remove","span":{"filename":"src/table.rs","begin":[1517,4],"end":[1527,5]},"visibility":"public","docs":"Takes the value out of the entry, and returns it along with a\n`VacantEntry` that can be used to insert another value with the same\nhash as the one that was just removed.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::hash_table::Entry;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table: HashTable<&str> = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\n// The table is empty\nassert!(table.is_empty() && table.capacity() == 0);\n\ntable.insert_unique(hasher(&\"poneyland\"), \"poneyland\", hasher);\nlet capacity_before_remove = table.capacity();\n\nif let Entry::Occupied(o) = table.entry(hasher(&\"poneyland\"), |&x| x == \"poneyland\", hasher) {\n    assert_eq!(o.remove().0, \"poneyland\");\n}\n\nassert!(table\n    .find(hasher(&\"poneyland\"), |&x| x == \"poneyland\")\n    .is_none());\n// Now table hold none elements but capacity is equal to the old one\nassert!(table.len() == 0 && table.capacity() == capacity_before_remove);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"T"},{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1399:2360":{"id":"0:1399:2360","crate_id":0,"name":"remove_entry","span":{"filename":"src/map.rs","begin":[5313,4],"end":[5315,5]},"visibility":"public","docs":"Take the ownership of the key and value from the map.\nKeeps the allocated memory for reuse.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n// The map is empty\nassert!(map.is_empty() && map.capacity() == 0);\n\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    // We delete the entry from the map.\n    assert_eq!(o.remove_entry(), (\"poneyland\", 12));\n}\n\nassert_eq!(map.contains_key(\"poneyland\"), false);\n// Now map hold none elements\nassert!(map.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"generic":"K"},{"generic":"V"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1664:5005":{"id":"0:1664:5005","crate_id":0,"name":"intersection","span":{"filename":"src/set.rs","begin":[798,4],"end":[808,5]},"visibility":"public","docs":"Visits the values representing the intersection,\ni.e., the values that are both in `self` and `other`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n\n// Print 2, 3 in arbitrary order.\nfor x in a.intersection(&b) {\n    println!(\"{}\", x);\n}\n\nlet intersection: HashSet<_> = a.intersection(&b).collect();\nassert_eq!(intersection, [2, 3].iter().collect());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1624":{"id":"0:1624","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[259,0],"end":[434,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1628:2295","0:1629:862","0:1630:882","0:1631:2365","0:1632:2501","0:1633:3442","0:1636:3464","0:1638:2364"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3610-0:888:3994":{"id":"b:1:3610-0:888:3994","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:888:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1326:3008":{"id":"0:1326:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[4920,4],"end":[4922,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32890:5735-0:2039:3543":{"id":"a:1:32890:5735-0:2039:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2039:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42468:5939-0:2119:1838":{"id":"a:1:42468:5939-0:2119:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2778-0:1784:3465":{"id":"b:1:2778-0:1784:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:540:2371":{"id":"0:540:2371","crate_id":0,"name":"hasher","span":{"filename":"src/map.rs","begin":[602,4],"end":[604,5]},"visibility":"public","docs":"Returns a reference to the map's [`BuildHasher`].\n\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet hasher = DefaultHashBuilder::default();\nlet map: HashMap<i32, i32> = HashMap::with_hasher(hasher);\nlet hasher: &DefaultHashBuilder = map.hasher();\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"S"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1308:3008":{"id":"0:1308:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[4888,4],"end":[4890,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:1038:3541":{"id":"a:1:42469:5938-0:1038:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1923:3042":{"id":"0:1923:3042","crate_id":0,"name":"fold","span":{"filename":"src/set.rs","begin":[1855,4],"end":[1867,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1038:3541":{"id":"0:1038:3541","crate_id":0,"name":"OccupiedEntry","span":{"filename":"src/map.rs","begin":[4250,0],"end":[4255,1]},"visibility":"public","docs":"A view into an occupied entry in a `HashMap`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap, OccupiedEntry};\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\", 10), (\"b\", 20), (\"c\", 30)]);\n\nlet _entry_o: OccupiedEntry<_, _, _> = map.entry(\"a\").insert(100);\nassert_eq!(map.len(), 3);\n\n// Existing key (insert and update)\nmatch map.entry(\"a\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(mut view) => {\n        assert_eq!(view.get(), &100);\n        let v = view.get_mut();\n        *v *= 10;\n        assert_eq!(view.insert(1111), 1000);\n    }\n}\n\nassert_eq!(map[&\"a\"], 1111);\nassert_eq!(map.len(), 3);\n\n// Existing key (take)\nmatch map.entry(\"c\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(view) => {\n        assert_eq!(view.remove_entry(), (\"c\", 30));\n    }\n}\nassert_eq!(map.get(&\"c\"), None);\nassert_eq!(map.len(), 2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"DefaultHashBuilder","id":"0:482:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1392","a:1:42468:5939-0:1038:3541","a:1:42469:5938-0:1038:3541","a:1:32890:5735-0:1038:3541","b:1:3610-0:1038:3541","b:1:2471-0:1038:3541","b:1:2789-0:1038:3541","b:1:2784-0:1038:3541","b:1:2778-0:1038:3541","b:1:2774-0:1038:3541","b:1:2474-0:1038:3541","0:1058","0:1048","0:1053"]}}},"0:1830:2963":{"id":"0:1830:2963","crate_id":0,"name":"IntoIter","span":{"filename":"src/set.rs","begin":[1650,4],"end":[1650,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}}},"0:837:174":{"id":"0:837:174","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[2753,4],"end":[2753,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}},"4:728:4693":{"id":"4:728:4693","crate_id":4,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:970:2410":{"id":"0:970:2410","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[3808,4],"end":[3810,5]},"visibility":"public","docs":"Sets the value of the entry, and returns the entry's old value.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\n\nlet mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n\nmatch map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(mut o) => assert_eq!(o.insert(1000), 100),\n}\n\nassert_eq!(map[&\"a\"], 1000);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"V"}]],"output":{"generic":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1765:400":{"id":"0:1765:400","crate_id":0,"name":"bitxor","span":{"filename":"src/set.rs","begin":[1502,4],"end":[1504,5]},"visibility":"default","docs":"Returns the symmetric difference of `self` and `rhs` as a new `HashSet<T, S>`.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\nlet b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n\nlet set = &a ^ &b;\n\nlet mut i = 0;\nlet expected = [1, 2, 4, 5];\nfor x in &set {\n    assert!(expected.contains(x));\n    i += 1;\n}\nassert_eq!(i, expected.len());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2238:4135":{"id":"0:2238:4135","crate_id":0,"name":"into_mut","span":{"filename":"src/table.rs","begin":[1661,4],"end":[1663,5]},"visibility":"public","docs":"Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the table itself.\n\nIf you need multiple references to the `OccupiedEntry`, see [`get_mut`].\n\n[`get_mut`]: #method.get_mut\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::hash_table::Entry;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table: HashTable<(&str, u32)> = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\ntable.insert_unique(hasher(&\"poneyland\"), (\"poneyland\", 12), |(k, _)| hasher(&k));\n\nassert_eq!(\n    table.find(hasher(&\"poneyland\"), |&(x, _)| x == \"poneyland\",),\n    Some(&(\"poneyland\", 12))\n);\n\nlet value: &mut (&str, u32);\nmatch table.entry(\n    hasher(&\"poneyland\"),\n    |&(x, _)| x == \"poneyland\",\n    |(k, _)| hasher(&k),\n) {\n    Entry::Occupied(entry) => value = entry.into_mut(),\n    Entry::Vacant(_) => panic!(),\n}\nvalue.1 += 10;\n\nassert_eq!(\n    table.find(hasher(&\"poneyland\"), |&(x, _)| x == \"poneyland\",),\n    Some(&(\"poneyland\", 22))\n);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32890:5735-0:700:3404":{"id":"a:1:32890:5735-0:700:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2000:724":{"id":"0:2000:724","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[2034,4],"end":[2036,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2345:3008":{"id":"0:2345:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/table.rs","begin":[2017,4],"end":[2019,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32833:237-0:1771:3395":{"id":"a:1:32833:237-0:1771:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1245:3042":{"id":"0:1245:3042","crate_id":0,"name":"fold","span":{"filename":"src/map.rs","begin":[4781,4],"end":[4790,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:519:2299":{"id":"0:519:2299","crate_id":0,"name":"with_capacity","span":{"filename":"src/map.rs","begin":[323,4],"end":[325,5]},"visibility":"public","docs":"Creates an empty `HashMap` with the specified capacity.\n\nThe hash map will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash map will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`], for example with\n[`with_capacity_and_hasher`](HashMap::with_capacity_and_hasher) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet mut map: HashMap<&str, i32> = HashMap::with_capacity(10);\nassert_eq!(map.len(), 0);\nassert!(map.capacity() >= 10);\n```","links":{"`ahash::RandomState`":"6:1315:11846","HashMap::with_capacity_and_hasher":"0:531:3295","`HashMap`":"0:483:154"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:644:3788":{"id":"0:644:3788","crate_id":0,"name":"raw_entry","span":{"filename":"src/map.rs","begin":[2091,4],"end":[2093,5]},"visibility":"public","docs":"Creates a raw immutable entry builder for the HashMap.\n\nRaw entries provide the lowest level of control for searching and\nmanipulating a map. They must be manually initialized with a hash and\nthen manually searched.\n\nThis is useful for\n* Hash memoization\n* Using a search key that doesn't work with the Borrow trait\n* Using custom comparison logic without newtype wrappers\n\nUnless you are in such a situation, higher-level and more foolproof APIs like\n`get` should be preferred.\n\nImmutable raw entries have very limited use; you might instead want `raw_entry_mut`.\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.extend([(\"a\", 100), (\"b\", 200), (\"c\", 300)]);\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nfor k in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"] {\n    let hash = compute_hash(map.hasher(), k);\n    let v = map.get(&k).cloned();\n    let kv = v.as_ref().map(|v| (&k, v));\n\n    println!(\"Key: {} and value: {:?}\", k, v);\n\n    assert_eq!(map.raw_entry().from_key(&k), kv);\n    assert_eq!(map.raw_entry().from_hash(hash, |q| *q == k), kv);\n    assert_eq!(map.raw_entry().from_key_hashed_nocheck(hash, &k), kv);\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RawEntryBuilder","id":"0:896:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1375:4059":{"id":"0:1375:4059","crate_id":0,"name":"or_insert","span":{"filename":"src/map.rs","begin":[5034,4],"end":[5043,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\n// nonexistent key\nmap.entry(\"poneyland\").or_insert(3);\nassert_eq!(map[\"poneyland\"], 3);\n\n// existing key\n*map.entry(\"poneyland\").or_insert(10) *= 2;\nassert_eq!(map[\"poneyland\"], 6);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1201:2963":{"id":"0:1201:2963","crate_id":0,"name":"IntoIter","span":{"filename":"src/map.rs","begin":[4626,4],"end":[4626,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"0:888:3994":{"id":"0:888:3994","crate_id":0,"name":"RawVacantEntryMut","span":{"filename":"src/map.rs","begin":[3104,0],"end":[3107,1]},"visibility":"public","docs":"A view into a vacant entry in a `HashMap`.\nIt is part of the [`RawEntryMut`] enum.\n\n[`RawEntryMut`]: enum.RawEntryMut.html\n\n# Examples\n\n```\nuse core::hash::{BuildHasher, Hash};\nuse hashbrown::hash_map::{HashMap, RawEntryMut, RawVacantEntryMut};\n\nlet mut map = HashMap::<&str, i32>::new();\n\nfn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n    use core::hash::Hasher;\n    let mut state = hash_builder.build_hasher();\n    key.hash(&mut state);\n    state.finish()\n}\n\nlet raw_v: RawVacantEntryMut<_, _, _> = match map.raw_entry_mut().from_key(&\"a\") {\n    RawEntryMut::Vacant(view) => view,\n    RawEntryMut::Occupied(_) => unreachable!(),\n};\nraw_v.insert(\"a\", 10);\nassert!(map[&\"a\"] == 10 && map.len() == 1);\n\n// Nonexistent key (insert and update)\nlet hash = compute_hash(map.hasher(), &\"b\");\nmatch map.raw_entry_mut().from_key_hashed_nocheck(hash, &\"b\") {\n    RawEntryMut::Occupied(_) => unreachable!(),\n    RawEntryMut::Vacant(view) => {\n        let (k, value) = view.insert(\"b\", 2);\n        assert_eq!((*k, *value), (\"b\", 2));\n        *value = 20;\n    }\n}\nassert!(map[&\"b\"] == 20 && map.len() == 2);\n\nlet hash = compute_hash(map.hasher(), &\"c\");\nmatch map.raw_entry_mut().from_hash(hash, |q| *q == \"c\") {\n    RawEntryMut::Occupied(_) => unreachable!(),\n    RawEntryMut::Vacant(view) => {\n        assert_eq!(view.insert(\"c\", 30), (&mut \"c\", &mut 30));\n    }\n}\nassert!(map[&\"c\"] == 30 && map.len() == 3);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:978","a:1:42468:5939-0:888:3994","a:1:2997:246-0:888:3994","a:1:42469:5938-0:888:3994","a:1:32833:237-0:888:3994","a:1:32890:5735-0:888:3994","b:1:3610-0:888:3994","b:1:2471-0:888:3994","b:1:2789-0:888:3994","b:1:2784-0:888:3994","b:1:2778-0:888:3994","b:1:2774-0:888:3994","b:1:2474-0:888:3994","0:1008"]}}},"b:1:2789-0:1798:4987":{"id":"b:1:2789-0:1798:4987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13048:2355":{"id":"1:13048:2355","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42346:191","prim@char":"1:53676:454","self::pattern":"1:12697:14610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:735:3008":{"id":"0:735:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/map.rs","begin":[2469,4],"end":[2471,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1505":{"id":"0:1505","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[6605,0],"end":[6661,1]},"visibility":"default","docs":"Inserts all new key-values from the iterator and replaces values with existing\nkeys with new values returned from the iterator.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:2992:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2992:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:8049:4538","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1511:4559"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2774-0:1064:3543":{"id":"b:1:2774-0:1064:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1064:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1227:3042":{"id":"0:1227:3042","crate_id":0,"name":"fold","span":{"filename":"src/map.rs","begin":[4742,4],"end":[4751,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:483:154":{"id":"b:1:2474-0:483:154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:764:174":{"id":"0:764:174","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[2532,4],"end":[2532,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"V"}}}},"b:1:2784-0:1173:3702":{"id":"b:1:2784-0:1173:3702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2160":{"id":"0:2160","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1018,0],"end":[1030,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2163:174","0:2164:2963","0:2165:846"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2471-0:857:3985":{"id":"b:1:2471-0:857:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2138:2364":{"id":"0:2138:2364","crate_id":0,"name":"clear","span":{"filename":"src/table.rs","begin":[444,4],"end":[446,5]},"visibility":"public","docs":"Clears the table, removing all values.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut v = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\nv.insert_unique(hasher(&1), 1, hasher);\nv.clear();\nassert!(v.is_empty());\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2784-0:723:3478":{"id":"b:1:2784-0:723:3478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2784-0:2357:3465":{"id":"b:1:2784-0:2357:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2774-0:2357:3465":{"id":"b:1:2774-0:2357:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2789-0:787:3368":{"id":"b:1:2789-0:787:3368","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3610-0:1811:5015":{"id":"b:1:3610-0:1811:5015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1631:2365":{"id":"0:1631:2365","crate_id":0,"name":"is_empty","span":{"filename":"src/set.rs","begin":[327,4],"end":[329,5]},"visibility":"public","docs":"Returns `true` if the set contains no elements.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut v = HashSet::new();\nassert!(v.is_empty());\nv.insert(1);\nassert!(!v.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:1779:3431":{"id":"b:1:2774-0:1779:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1638:2364":{"id":"0:1638:2364","crate_id":0,"name":"clear","span":{"filename":"src/set.rs","begin":[431,4],"end":[433,5]},"visibility":"public","docs":"Clears the set, removing all values.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut v = HashSet::new();\nv.insert(1);\nv.clear();\nassert!(v.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2199:3542":{"id":"0:2199:3542","crate_id":0,"name":"Vacant","span":{"filename":"src/table.rs","begin":[1201,4],"end":[1201,33]},"visibility":"default","docs":"A vacant entry.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::hash_table::{Entry, HashTable, OccupiedEntry};\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table = HashTable::<&str>::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\n\nmatch table.entry(hasher(&\"a\"), |&x| x == \"a\", hasher) {\n    Entry::Vacant(_) => {}\n    Entry::Occupied(_) => unreachable!(),\n}\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2201:1764"]},"discriminant":null}}},"0:2210:2410":{"id":"0:2210:2410","crate_id":0,"name":"insert","span":{"filename":"src/table.rs","begin":[1244,4],"end":[1252,5]},"visibility":"public","docs":"Sets the value of the entry, replacing any existing value if there is\none, and returns an [`OccupiedEntry`].\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table: HashTable<&str> = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\n\nlet entry = table\n    .entry(hasher(&\"horseyland\"), |&x| x == \"horseyland\", hasher)\n    .insert(\"horseyland\");\n\nassert_eq!(entry.get(), &\"horseyland\");\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{"`OccupiedEntry`":"0:2214:3541"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:896:3789":{"id":"b:1:2778-0:896:3789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:896:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1053":{"id":"0:1053","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4265,0],"end":[4272,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1744":{"id":"0:1744","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1395,0],"end":[1407,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1748:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3610-0:1791:5006":{"id":"b:1:3610-0:1791:5006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:732:174":{"id":"0:732:174","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[2462,4],"end":[2462,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"K"}}}},"0:2136:3537":{"id":"0:2136:3537","crate_id":0,"name":"entry","span":{"filename":"src/table.rs","begin":[361,4],"end":[379,5]},"visibility":"public","docs":"Returns an `Entry` for an entry in the table with the given hash\nand which satisfies the equality function passed.\n\nThis can be used to remove the entry from the table, or insert a new\nentry with the given hash if one doesn't already exist.\n\nThis method will call `eq` for all entries with the given hash, but may\nalso call it for entries with a different hash. `eq` should only return\ntrue for the desired entry, at which point the search is stopped.\n\nThis method may grow the table in preparation for an insertion. Call\n[`HashTable::find_entry`] if this is undesirable.\n\n`hasher` is called if entries need to be moved or copied to a new table.\nThis must return the same hash value that each entry was inserted with.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::hash_table::Entry;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\ntable.insert_unique(hasher(&1), (1, \"a\"), |val| hasher(&val.0));\nif let Entry::Occupied(entry) = table.entry(hasher(&1), |val| val.0 == 1, |val| hasher(&val.0))\n{\n    entry.remove();\n}\nif let Entry::Vacant(entry) = table.entry(hasher(&2), |val| val.0 == 2, |val| hasher(&val.0)) {\n    entry.insert((2, \"b\"));\n}\nassert_eq!(table.find(hasher(&1), |val| val.0 == 1), None);\nassert_eq!(table.find(hasher(&2), |val| val.0 == 2), Some(&(2, \"b\")));\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{"`HashTable::find_entry`":"0:2135:5388"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["hash",{"primitive":"u64"}],["eq",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}]}],["hasher",{"impl_trait":[{"trait_bound":{"trait":{"name":"Fn","id":"1:3237:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"u64"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"Entry","id":"0:2192:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl FnMut(&T) -> bool","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}},{"name":"impl Fn(&T) -> u64","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"1:3237:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"u64"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2165:846":{"id":"0:2165:846","crate_id":0,"name":"into_iter","span":{"filename":"src/table.rs","begin":[1025,4],"end":[1029,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2214:3541":{"id":"0:2214:3541","crate_id":0,"name":"OccupiedEntry","span":{"filename":"src/table.rs","begin":[1445,0],"end":[1452,1]},"visibility":"public","docs":"A view into an occupied entry in a `HashTable`.\nIt is part of the [`Entry`] enum.\n\n[`Entry`]: enum.Entry.html\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::hash_table::{Entry, HashTable, OccupiedEntry};\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\nfor x in [\"a\", \"b\", \"c\"] {\n    table.insert_unique(hasher(&x), x, hasher);\n}\nassert_eq!(table.len(), 3);\n\nlet _entry_o: OccupiedEntry<_, _> = table.find_entry(hasher(&\"a\"), |&x| x == \"a\").unwrap();\nassert_eq!(table.len(), 3);\n\n// Existing key\nmatch table.entry(hasher(&\"a\"), |&x| x == \"a\", hasher) {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(view) => {\n        assert_eq!(view.get(), &\"a\");\n    }\n}\n\nassert_eq!(table.len(), 3);\n\n// Existing key (take)\nmatch table.entry(hasher(&\"c\"), |&x| x == \"c\", hasher) {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(view) => {\n        assert_eq!(view.remove().0, \"c\");\n    }\n}\nassert_eq!(table.find(hasher(&\"c\"), |&x| x == \"c\"), None);\nassert_eq!(table.len(), 2);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:2231","a:1:42468:5939-0:2214:3541","a:1:42469:5938-0:2214:3541","a:1:32890:5735-0:2214:3541","b:1:3610-0:2214:3541","b:1:2471-0:2214:3541","b:1:2789-0:2214:3541","b:1:2784-0:2214:3541","b:1:2778-0:2214:3541","b:1:2774-0:2214:3541","b:1:2474-0:2214:3541","0:2227","0:2224","0:2221"]}}},"1:13062:20203":{"id":"1:13062:20203","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12697:14610","`DoubleEndedIterator`":"1:8078:131","prim@char":"1:53676:454","str::split":"1:13056:2982"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44245:12457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12717:14616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2784-0:800:3378":{"id":"b:1:2784-0:800:3378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42469:5938-0:813:3431":{"id":"a:1:42469:5938-0:813:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2038:724":{"id":"0:2038:724","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[2186,4],"end":[2190,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:565:2369":{"id":"0:565:2369","crate_id":0,"name":"shrink_to","span":{"filename":"src/map.rs","begin":[1206,4],"end":[1209,5]},"visibility":"public","docs":"Shrinks the capacity of the map with a lower limit. It will drop\ndown no lower than the supplied limit while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.\n\nThis function does nothing if the current capacity is smaller than the\nsupplied minimum capacity.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<i32, i32> = HashMap::with_capacity(100);\nmap.insert(1, 2);\nmap.insert(3, 4);\nassert!(map.capacity() >= 100);\nmap.shrink_to(10);\nassert!(map.capacity() >= 10);\nmap.shrink_to(0);\nassert!(map.capacity() >= 2);\nmap.shrink_to(10);\nassert!(map.capacity() >= 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["min_capacity",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1885":{"id":"0:1885","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1785,0],"end":[1790,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1888:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2237:2455":{"id":"0:2237:2455","crate_id":0,"name":"get_mut","span":{"filename":"src/table.rs","begin":[1609,4],"end":[1611,5]},"visibility":"public","docs":"Gets a mutable reference to the value in the entry.\n\nIf you need a reference to the `OccupiedEntry` which may outlive the\ndestruction of the `Entry` value, see [`into_mut`].\n\n[`into_mut`]: #method.into_mut\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::hash_table::Entry;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table: HashTable<(&str, u32)> = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\ntable.insert_unique(hasher(&\"poneyland\"), (\"poneyland\", 12), |(k, _)| hasher(&k));\n\nassert_eq!(\n    table.find(hasher(&\"poneyland\"), |&(x, _)| x == \"poneyland\",),\n    Some(&(\"poneyland\", 12))\n);\n\nif let Entry::Occupied(mut o) = table.entry(\n    hasher(&\"poneyland\"),\n    |&(x, _)| x == \"poneyland\",\n    |(k, _)| hasher(&k),\n) {\n    o.get_mut().1 += 10;\n    assert_eq!(o.get().1, 22);\n\n    // We can use the same Entry multiple times.\n    o.get_mut().1 += 2;\n}\n\nassert_eq!(\n    table.find(hasher(&\"poneyland\"), |&(x, _)| x == \"poneyland\",),\n    Some(&(\"poneyland\", 24))\n);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:2028:3541":{"id":"b:1:2474-0:2028:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:557":{"id":"0:557","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[1072,0],"end":[1941,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:562:2383","0:563:2388","0:564:3520","0:565:2369","0:566:3537","0:567:3551","0:571:2453","0:573:3571","0:577:3579","0:579:3584","0:581:2455","0:585:2462","0:592:2470","0:599:3634","0:606:3637","0:631:2410","0:632:3685","0:633:3701","0:634:2358","0:636:2360"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2784-0:1038:3541":{"id":"b:1:2784-0:1038:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42468:5939-0:1779:3431":{"id":"a:1:42468:5939-0:1779:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2256:5546":{"id":"0:2256:5546","crate_id":0,"name":"into_table","span":{"filename":"src/table.rs","begin":[1777,4],"end":[1779,5]},"visibility":"public","docs":"Converts the VacantEntry into a mutable reference to the underlying\ntable.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1331":{"id":"0:1331","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4932,0],"end":[4937,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1334:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1383:4103":{"id":"0:1383:4103","crate_id":0,"name":"and_replace_entry_with","span":{"filename":"src/map.rs","begin":[5223,4],"end":[5231,5]},"visibility":"public","docs":"Provides shared access to the key and owned access to the value of\nan occupied entry and allows to replace or remove it based on the\nvalue of the returned option.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nlet entry = map\n    .entry(\"poneyland\")\n    .and_replace_entry_with(|_k, _v| panic!());\n\nmatch entry {\n    Entry::Vacant(e) => {\n        assert_eq!(e.key(), &\"poneyland\");\n    }\n    Entry::Occupied(_) => panic!(),\n}\n\nmap.insert(\"poneyland\", 42);\n\nlet entry = map\n    .entry(\"poneyland\")\n    .and_replace_entry_with(|k, v| {\n        assert_eq!(k, &\"poneyland\");\n        assert_eq!(v, 42);\n        Some(v + 1)\n    });\n\nmatch entry {\n    Entry::Occupied(e) => {\n        assert_eq!(e.key(), &\"poneyland\");\n        assert_eq!(e.get(), &43);\n    }\n    Entry::Vacant(_) => panic!(),\n}\n\nassert_eq!(map[\"poneyland\"], 43);\n\nlet entry = map\n    .entry(\"poneyland\")\n    .and_replace_entry_with(|_k, _v| None);\n\nmatch entry {\n    Entry::Vacant(e) => assert_eq!(e.key(), &\"poneyland\"),\n    Entry::Occupied(_) => panic!(),\n}\n\nassert!(!map.contains_key(\"poneyland\"));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"generic":"V"}],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:2291:3404":{"id":"a:1:42469:5938-0:2291:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42469:5938-0:888:3994":{"id":"a:1:42469:5938-0:888:3994","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:888:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1193:724":{"id":"0:1193:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4613,4],"end":[4621,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:2311:2963":{"id":"a:1:2997:246-0:2311:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:2311:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13071:20205":{"id":"1:13071:20205","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:53676:454","self::pattern":"1:12697:14610","str::rsplitn":"1:13074:20207"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44331:12734","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1463:4421":{"id":"0:1463:4421","crate_id":0,"name":"replace_entry","span":{"filename":"src/map.rs","begin":[6202,4],"end":[6212,5]},"visibility":"public","docs":"Replaces the entry, returning the old key and value. The new key in the hash map will be\nthe key used to create this entry.\n\n# Panics\n\nWill panic if this OccupiedEntryRef was created through [`EntryRef::insert`].\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\nuse std::rc::Rc;\n\nlet mut map: HashMap<Rc<str>, u32> = HashMap::new();\nlet key: Rc<str> = Rc::from(\"Stringthing\");\n\nmap.insert(key.clone(), 15);\nassert_eq!(Rc::strong_count(&key), 2);\n\nmatch map.entry_ref(\"Stringthing\") {\n    EntryRef::Occupied(entry) => {\n        let (old_key, old_value): (Rc<str>, u32) = entry.replace_entry(16);\n        assert!(Rc::ptr_eq(&key, &old_key) && old_value == 15);\n    }\n    EntryRef::Vacant(_) => panic!(),\n}\n\nassert_eq!(Rc::strong_count(&key), 1);\nassert_eq!(map[\"Stringthing\"], 16);\n```","links":{"`EntryRef::insert`":"0:1428:2410"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"generic":"V"}]],"output":{"tuple":[{"generic":"K"},{"generic":"V"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"generic":"Q"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:787:3368":{"id":"a:1:42469:5938-0:787:3368","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2009:3042":{"id":"0:2009:3042","crate_id":0,"name":"fold","span":{"filename":"src/set.rs","begin":[2056,4],"end":[2062,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:888:3994":{"id":"b:1:2474-0:888:3994","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:888:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1031:1764":{"id":"0:1031:1764","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[4198,11],"end":[4198,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"VacantEntry","id":"0:1064:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"0:865:1764":{"id":"0:865:1764","crate_id":0,"name":"0","span":{"filename":"src/map.rs","begin":[2956,13],"end":[2956,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"RawOccupiedEntryMut","id":"0:869:3990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"0:1649:3309":{"id":"0:1649:3309","crate_id":0,"name":"with_hasher_in","span":{"filename":"src/set.rs","begin":[556,4],"end":[560,5]},"visibility":"public","docs":"Creates a new empty hash set which will use the given hasher to hash\nkeys.\n\nThe hash set is initially created with a capacity of 0, so it will not\nallocate until it is first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`].\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashSet to be useful, see its documentation for details.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut set = HashSet::with_hasher(s);\nset.insert(2);\n```","links":{"`ahash::RandomState`":"6:1315:11846","`HashSet`":"0:1604:156"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hasher",{"generic":"S"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13133:21384":{"id":"1:13133:21384","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:919:23546"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3612:1644":{"id":"1:3612:1644","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40131:12512","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:1038:3541":{"id":"b:1:2789-0:1038:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1822:174":{"id":"0:1822:174","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1639,4],"end":[1639,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"b:1:2784-0:1064:3543":{"id":"b:1:2784-0:1064:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1064:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"4:5592":{"id":"4:5592","crate_id":4,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["4:5593:22251","4:5594:2374","4:5597:22252","4:5600:22253","4:5608:22254","4:5609:22255","4:5610:3097","4:5611:21430","4:5612:21431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1078:724":{"id":"0:1078:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4320,4],"end":[4322,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1179:3537":{"id":"0:1179:3537","crate_id":0,"name":"entry","span":{"filename":"src/map.rs","begin":[4597,4],"end":[4597,44]},"visibility":"public","docs":"The entry in the map that was already occupied.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"0:2156:2470":{"id":"0:2156:2470","crate_id":0,"name":"get_many_unchecked_mut","span":{"filename":"src/table.rs","begin":[1009,4],"end":[1015,5]},"visibility":"public","docs":"Attempts to get mutable references to `N` values in the map at once, without validating that\nthe values are unique.\n\nThe `eq` argument should be a closure such that `eq(i, k)` returns true if `k` is equal to\nthe `i`th key to be looked up.\n\nReturns an array of length `N` with the results of each query. `None` will be returned if\nany of the keys are missing.\n\nFor a safe alternative see [`get_many_mut`](`HashTable::get_many_mut`).\n\n# Safety\n\nCalling this method with overlapping keys is *[undefined behavior]* even if the resulting\nreferences are not used.\n\n[undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::hash_table::Entry;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut libraries: HashTable<(&str, u32)> = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\nfor (k, v) in [\n    (\"Bodleian Library\", 1602),\n    (\"Athenæum\", 1807),\n    (\"Herzogin-Anna-Amalia-Bibliothek\", 1691),\n    (\"Library of Congress\", 1800),\n] {\n    libraries.insert_unique(hasher(&k), (k, v), |(k, _)| hasher(&k));\n}\n\nlet keys = [\"Athenæum\", \"Library of Congress\"];\nlet got = libraries.get_many_mut(keys.map(|k| hasher(&k)), |i, val| keys[i] == val.0);\nassert_eq!(\n    got,\n    Some([&mut (\"Athenæum\", 1807), &mut (\"Library of Congress\", 1800),]),\n);\n\n// Missing keys result in None\nlet keys = [\"Athenæum\", \"New York Public Library\"];\nlet got = libraries.get_many_mut(keys.map(|k| hasher(&k)), |i, val| keys[i] == val.0);\nassert_eq!(got, None);\n\n// Duplicate keys result in None\nlet keys = [\"Athenæum\", \"Athenæum\"];\nlet got = libraries.get_many_mut(keys.map(|k| hasher(&k)), |i, val| keys[i] == val.0);\nassert_eq!(got, None);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{"`HashTable::get_many_mut`":"0:2152:2462"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["hashes",{"array":{"type":{"primitive":"u64"},"len":"N"}}],["eq",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"len":"N"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}},{"name":"impl FnMut(usize, &T) -> bool","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"primitive":"usize"},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:585:2462":{"id":"0:585:2462","crate_id":0,"name":"get_many_mut","span":{"filename":"src/map.rs","begin":[1516,4],"end":[1521,5]},"visibility":"public","docs":"Attempts to get mutable references to `N` values in the map at once.\n\nReturns an array of length `N` with the results of each query. For soundness, at most one\nmutable reference will be returned to any value. `None` will be returned if any of the\nkeys are duplicates or missing.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut libraries = HashMap::new();\nlibraries.insert(\"Bodleian Library\".to_string(), 1602);\nlibraries.insert(\"Athenæum\".to_string(), 1807);\nlibraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\nlibraries.insert(\"Library of Congress\".to_string(), 1800);\n\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"Library of Congress\",\n]);\nassert_eq!(\n    got,\n    Some([\n        &mut 1807,\n        &mut 1800,\n    ]),\n);\n\n// Missing keys result in None\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"New York Public Library\",\n]);\nassert_eq!(got, None);\n\n// Duplicate keys result in None\nlet got = libraries.get_many_mut([\n    \"Athenæum\",\n    \"Athenæum\",\n]);\nassert_eq!(got, None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ks",{"array":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}},"len":"N"}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}},"len":"N"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1689:2358":{"id":"0:1689:2358","crate_id":0,"name":"remove","span":{"filename":"src/set.rs","begin":[1190,4],"end":[1195,5]},"visibility":"public","docs":"Removes a value from the set. Returns whether the value was\npresent in the set.\n\nThe value may be any borrowed form of the set's value type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe value type.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set = HashSet::new();\n\nset.insert(2);\nassert_eq!(set.remove(&2), true);\nassert_eq!(set.remove(&2), false);\n```\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32890:5735-0:1604:156":{"id":"a:1:32890:5735-0:1604:156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2778-0:2331:3431":{"id":"b:1:2778-0:2331:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:554:2364":{"id":"0:554:2364","crate_id":0,"name":"clear","span":{"filename":"src/map.rs","begin":[1011,4],"end":[1013,5]},"visibility":"public","docs":"Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut a = HashMap::new();\na.insert(1, \"a\");\nlet capacity_before_clear = a.capacity();\n\na.clear();\n\n// Map is empty.\nassert!(a.is_empty());\n// But map capacity is equal to old one.\nassert_eq!(a.capacity(), capacity_before_clear);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:850:3773":{"id":"b:1:2474-0:850:3773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2784-0:686:3395":{"id":"b:1:2784-0:686:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2774-0:723:3478":{"id":"b:1:2774-0:723:3478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1325:1062":{"id":"0:1325:1062","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[4912,4],"end":[4918,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1209:174":{"id":"0:1209:174","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4657,4],"end":[4657,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]}}}},"a:1:42468:5939-0:896:3789":{"id":"a:1:42468:5939-0:896:3789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:896:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2789-0:1155:3557":{"id":"b:1:2789-0:1155:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1155:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2784-0:787:3368":{"id":"b:1:2784-0:787:3368","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1618:2299":{"id":"0:1618:2299","crate_id":0,"name":"with_capacity","span":{"filename":"src/set.rs","begin":[188,4],"end":[192,5]},"visibility":"public","docs":"Creates an empty `HashSet` with the specified capacity.\n\nThe hash set will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash set will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`], for example with\n[`with_capacity_and_hasher`](HashSet::with_capacity_and_hasher) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nlet set: HashSet<i32> = HashSet::with_capacity(10);\nassert!(set.capacity() >= 10);\n```","links":{"HashSet::with_capacity_and_hasher":"0:1643:3295","`ahash::RandomState`":"6:1315:11846","`HashSet`":"0:1604:156"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2784-0:2012:3538":{"id":"b:1:2784-0:2012:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2012:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2143:2295":{"id":"0:2143:2295","crate_id":0,"name":"capacity","span":{"filename":"src/table.rs","begin":[611,4],"end":[613,5]},"visibility":"public","docs":"Returns the number of elements the table can hold without reallocating.\n\n# Examples\n\n```\nuse hashbrown::HashTable;\nlet table: HashTable<i32> = HashTable::with_capacity(100);\nassert!(table.capacity() >= 100);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:2214:3541":{"id":"b:1:2778-0:2214:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2774-0:2291:3404":{"id":"b:1:2774-0:2291:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8044-0:2331:3431":{"id":"b:1:8044-0:2331:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:1:42469:5938-0:2357:3465":{"id":"a:1:42469:5938-0:2357:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32890:5735-0:2271:3395":{"id":"a:1:32890:5735-0:2271:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2231":{"id":"0:2231","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1475,0],"end":[1670,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2235:2358","0:2236:2453","0:2237:2455","0:2238:4135","0:2239:5546"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32890:5735-0:2240:3543":{"id":"a:1:32890:5735-0:2240:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2997:246-0:896:3789":{"id":"a:1:2997:246-0:896:3789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:896:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13131:21382":{"id":"1:13131:21382","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:919:23546"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2318:174":{"id":"0:2318:174","crate_id":0,"name":"Item","span":{"filename":"src/table.rs","begin":[1960,4],"end":[1960,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:2997:246-0:686:3395":{"id":"a:1:2997:246-0:686:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:686:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1403:2410":{"id":"0:1403:2410","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[5419,4],"end":[5421,5]},"visibility":"public","docs":"Sets the value of the entry, and returns the entry's old value.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n    assert_eq!(o.insert(15), 12);\n}\n\nassert_eq!(map[\"poneyland\"], 15);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"V"}]],"output":{"generic":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:888:3994":{"id":"a:1:2997:246-0:888:3994","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:888:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1728:751":{"id":"0:1728:751","crate_id":0,"name":"from","span":{"filename":"src/set.rs","begin":[1342,4],"end":[1344,5]},"visibility":"default","docs":"# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet set1 = HashSet::from([1, 2, 3, 4]);\nlet set2: HashSet<_> = [1, 2, 3, 4].into();\nassert_eq!(set1, set2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["arr",{"array":{"type":{"generic":"T"},"len":"N"}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1686:2410":{"id":"0:1686:2410","crate_id":0,"name":"insert","span":{"filename":"src/set.rs","begin":[1114,4],"end":[1116,5]},"visibility":"public","docs":"Adds a value to the set.\n\nIf the set did not have this value present, `true` is returned.\n\nIf the set did have this value present, `false` is returned.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set = HashSet::new();\n\nassert_eq!(set.insert(2), true);\nassert_eq!(set.insert(2), false);\nassert_eq!(set.len(), 1);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1317":{"id":"0:1317","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4906,0],"end":[4906,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8044-0:800:3378":{"id":"b:1:8044-0:800:3378","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:2170:174":{"id":"0:2170:174","crate_id":0,"name":"Item","span":{"filename":"src/table.rs","begin":[1036,4],"end":[1036,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"1:13004:882":{"id":"1:13004:882","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:53676:454"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2344:1062":{"id":"0:2344:1062","crate_id":0,"name":"next","span":{"filename":"src/table.rs","begin":[2014,4],"end":[2016,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:677:830":{"id":"0:677:830","crate_id":0,"name":"index","span":{"filename":"src/map.rs","begin":[2258,4],"end":[2260,5]},"visibility":"default","docs":"Returns a reference to the value corresponding to the supplied key.\n\n# Panics\n\nPanics if the key is not present in the `HashMap`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet map: HashMap<_, _> = [(\"a\", \"One\"), (\"b\", \"Two\")].into();\n\nassert_eq!(map[&\"a\"], \"One\");\nassert_eq!(map[&\"b\"], \"Two\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:1173:3702":{"id":"b:1:2789-0:1173:3702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedError","id":"0:1173:3702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1823:2963":{"id":"0:1823:2963","crate_id":0,"name":"IntoIter","span":{"filename":"src/set.rs","begin":[1640,4],"end":[1640,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"b:1:2471-0:1771:3395":{"id":"b:1:2471-0:1771:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32833:237-0:1791:5006":{"id":"a:1:32833:237-0:1791:5006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1986:724":{"id":"0:1986:724","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[2006,4],"end":[2008,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:713:2963":{"id":"b:1:2471-0:713:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1688:2374":{"id":"0:1688:2374","crate_id":0,"name":"replace","span":{"filename":"src/set.rs","begin":[1158,4],"end":[1166,5]},"visibility":"public","docs":"Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set = HashSet::new();\nset.insert(Vec::<i32>::new());\n\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 0);\nset.replace(Vec::with_capacity(10));\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 10);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:2240:3543":{"id":"b:1:2789-0:2240:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2789-0:2257:5389":{"id":"b:1:2789-0:2257:5389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"AbsentEntry","id":"0:2257:5389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42468:5939-0:723:3478":{"id":"a:1:42468:5939-0:723:3478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32833:237-0:857:3985":{"id":"a:1:32833:237-0:857:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2784-0:1779:3431":{"id":"b:1:2784-0:1779:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8044-0:2357:3465":{"id":"b:1:8044-0:2357:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:8044-0:787:3368":{"id":"b:1:8044-0:787:3368","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:1:2784-0:813:3431":{"id":"b:1:2784-0:813:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1992":{"id":"0:1992","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2020,0],"end":[2026,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:700:3404":{"id":"0:700:3404","crate_id":0,"name":"IterMut","span":{"filename":"src/map.rs","begin":[2361,0],"end":[2365,1]},"visibility":"public","docs":"A mutable iterator over the entries of a `HashMap` in arbitrary order.\nThe iterator element type is `(&'a K, &'a mut V)`.\n\nThis `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`iter_mut`]: struct.HashMap.html#method.iter_mut\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<_, _> = [(1, \"One\".to_owned()), (2, \"Two\".into())].into();\n\nlet mut iter = map.iter_mut();\niter.next().map(|(_, v)| v.push_str(\" Mississippi\"));\niter.next().map(|(_, v)| v.push_str(\" Mississippi\"));\n\n// It is fused iterator\nassert_eq!(iter.next(), None);\nassert_eq!(iter.next(), None);\n\nassert_eq!(map.get(&1).unwrap(), &\"One Mississippi\".to_owned());\nassert_eq!(map.get(&2).unwrap(), &\"Two Mississippi\".to_owned());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:700:3404","a:1:2997:246-0:700:3404","a:1:42469:5938-0:700:3404","a:1:32890:5735-0:700:3404","b:1:3610-0:700:3404","b:1:2471-0:700:3404","b:1:2789-0:700:3404","b:1:8044-0:700:3404","b:1:2784-0:700:3404","b:1:2778-0:700:3404","b:1:2774-0:700:3404","b:1:2474-0:700:3404","0:1249","0:1253","0:1238","0:706","0:1256"]}}},"0:1888:882":{"id":"0:1888:882","crate_id":0,"name":"len","span":{"filename":"src/set.rs","begin":[1787,4],"end":[1789,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:787:3368":{"id":"b:1:2474-0:787:3368","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2778-0:845:3385":{"id":"b:1:2778-0:845:3385","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2211:4059":{"id":"0:2211:4059","crate_id":0,"name":"or_insert","span":{"filename":"src/table.rs","begin":[1293,4],"end":[1298,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting if it was vacant.\n\nReturns an [`OccupiedEntry`] pointing to the now-occupied entry.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table: HashTable<&str> = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\n\n// nonexistent key\ntable\n    .entry(hasher(&\"poneyland\"), |&x| x == \"poneyland\", hasher)\n    .or_insert(\"poneyland\");\nassert!(table\n    .find(hasher(&\"poneyland\"), |&x| x == \"poneyland\")\n    .is_some());\n\n// existing key\ntable\n    .entry(hasher(&\"poneyland\"), |&x| x == \"poneyland\", hasher)\n    .or_insert(\"poneyland\");\nassert!(table\n    .find(hasher(&\"poneyland\"), |&x| x == \"poneyland\")\n    .is_some());\nassert_eq!(table.len(), 1);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{"`OccupiedEntry`":"0:2214:3541"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default",{"generic":"T"}]],"output":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:2192:3538":{"id":"b:1:2471-0:2192:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2192:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:634:2358":{"id":"0:634:2358","crate_id":0,"name":"remove","span":{"filename":"src/map.rs","begin":[1895,4],"end":[1904,5]},"visibility":"public","docs":"Removes a key from the map, returning the value at the key if the key\nwas previously in the map. Keeps the allocated memory for reuse.\n\nThe key may be any borrowed form of the map's key type, but\n[`Hash`] and [`Eq`] on the borrowed form *must* match those for\nthe key type.\n\n[`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n[`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\n// The map is empty\nassert!(map.is_empty() && map.capacity() == 0);\n\nmap.insert(1, \"a\");\n\nassert_eq!(map.remove(&1), Some(\"a\"));\nassert_eq!(map.remove(&1), None);\n\n// Now map holds none elements\nassert!(map.is_empty());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["k",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2289":{"id":"0:2289","crate_id":0,"name":null,"span":{"filename":"src/table.rs","begin":[1891,0],"end":[1891,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:8496:1995","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:2271:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2471-0:896:3789":{"id":"b:1:2471-0:896:3789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:896:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2774-0:1784:3465":{"id":"b:1:2774-0:1784:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:1784:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1194":{"id":"0:1194","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4624,0],"end":[4654,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"items":["0:1200:174","0:1201:2963","0:1202:846"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2474-0:824:3465":{"id":"b:1:2474-0:824:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1841:3042":{"id":"0:1841:3042","crate_id":0,"name":"fold","span":{"filename":"src/set.rs","begin":[1700,4],"end":[1706,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32833:237-0:723:3478":{"id":"a:1:32833:237-0:723:3478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42469:5938-0:483:154":{"id":"a:1:42469:5938-0:483:154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1936":{"id":"0:1936","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1889,0],"end":[1897,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1940:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8044-0:700:3404":{"id":"b:1:8044-0:700:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"1:2792:138":{"id":"1:2792:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32761:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1811:5015":{"id":"0:1811:5015","crate_id":0,"name":"Union","span":{"filename":"src/set.rs","begin":[1634,0],"end":[1636,1]},"visibility":"public","docs":"A lazy iterator producing elements in the union of `HashSet`s.\n\nThis `struct` is created by the [`union`] method on [`HashSet`].\nSee its documentation for more.\n\n[`HashSet`]: struct.HashSet.html\n[`union`]: struct.HashSet.html#method.union","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:1811:5015","a:1:2997:246-0:1811:5015","a:1:42469:5938-0:1811:5015","a:1:32833:237-0:1811:5015","a:1:32890:5735-0:1811:5015","b:1:3610-0:1811:5015","b:1:2471-0:1811:5015","b:1:2789-0:1811:5015","b:1:8044-0:1811:5015","b:1:2784-0:1811:5015","b:1:2778-0:1811:5015","b:1:2774-0:1811:5015","b:1:2474-0:1811:5015","b:4:725-0:1811:5015","0:1987","0:1992","0:1996","0:2001"]}}},"0:2371:3008":{"id":"0:2371:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/table.rs","begin":[2059,4],"end":[2061,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:969:4062":{"id":"0:969:4062","crate_id":0,"name":"into_key_value","span":{"filename":"src/map.rs","begin":[3784,4],"end":[3789,5]},"visibility":"public","docs":"Converts the OccupiedEntry into a mutable reference to the key and value in the entry\nwith a lifetime bound to the map itself.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\nuse std::rc::Rc;\n\nlet key_one = Rc::new(\"a\");\nlet key_two = Rc::new(\"a\");\n\nlet mut map: HashMap<Rc<&str>, u32> = HashMap::new();\nmap.insert(key_one.clone(), 10);\n\nassert_eq!(map[&key_one], 10);\nassert!(Rc::strong_count(&key_one) == 2 && Rc::strong_count(&key_two) == 1);\n\nlet inside_key: &mut Rc<&str>;\nlet inside_value: &mut u32;\nmatch map.raw_entry_mut().from_key(&key_one) {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(o) => {\n        let tuple = o.into_key_value();\n        inside_key = tuple.0;\n        inside_value = tuple.1;\n    }\n}\n*inside_key = key_two.clone();\n*inside_value = 100;\nassert_eq!(map[&key_two], 100);\nassert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3610-0:2240:3543":{"id":"b:1:3610-0:2240:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8044-0:1779:3431":{"id":"b:1:8044-0:1779:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:541:2295":{"id":"0:541:2295","crate_id":0,"name":"capacity","span":{"filename":"src/map.rs","begin":[620,4],"end":[622,5]},"visibility":"public","docs":"Returns the number of elements the map can hold without reallocating.\n\nThis number is a lower bound; the `HashMap<K, V>` might be able to hold\nmore, but is guaranteed to be able to hold at least this many.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nlet map: HashMap<i32, i32> = HashMap::with_capacity(100);\nassert_eq!(map.len(), 0);\nassert!(map.capacity() >= 100);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1703":{"id":"0:1703","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1285,0],"end":[1291,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2778-0:2119:1838":{"id":"b:1:2778-0:2119:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3610-0:1079:3553":{"id":"b:1:3610-0:1079:3553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42469:5938-0:850:3773":{"id":"a:1:42469:5938-0:850:3773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1099:724":{"id":"0:1099:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4415,4],"end":[4420,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:850:3773":{"id":"a:1:2997:246-0:850:3773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42468:5939-0:2039:3543":{"id":"a:1:42468:5939-0:2039:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2039:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:2141:2383":{"id":"0:2141:2383","crate_id":0,"name":"reserve","span":{"filename":"src/table.rs","begin":[557,4],"end":[559,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` more elements to be inserted\nin the `HashTable`. The collection may reserve more space to avoid\nfrequent reallocations.\n\n`hasher` is called if entries need to be moved or copied to a new table.\nThis must return the same hash value that each entry was inserted with.\n\n# Panics\n\nPanics if the new capacity exceeds [`isize::MAX`] bytes and [`abort`] the program\nin case of allocation error. Use [`try_reserve`](HashTable::try_reserve) instead\nif you want to handle memory allocation failure.\n\n[`isize::MAX`]: https://doc.rust-lang.org/std/primitive.isize.html\n[`abort`]: https://doc.rust-lang.org/alloc/alloc/fn.handle_alloc_error.html\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table: HashTable<i32> = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\ntable.reserve(10, hasher);\nassert!(table.capacity() >= 10);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{"HashTable::try_reserve":"0:2142:2388"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["additional",{"primitive":"usize"}],["hasher",{"impl_trait":[{"trait_bound":{"trait":{"name":"Fn","id":"1:3237:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"u64"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"impl Fn(&T) -> u64","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"1:3237:141","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"u64"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:1775:2963":{"id":"b:1:2778-0:1775:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32833:237-0:2192:3538":{"id":"a:1:32833:237-0:2192:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2192:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42468:5939-0:2257:5389":{"id":"a:1:42468:5939-0:2257:5389","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"AbsentEntry","id":"0:2257:5389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:2459:1864":{"id":"0:2459:1864","crate_id":0,"name":"AllocError","span":{"filename":"src/lib.rs","begin":[183,4],"end":[186,5]},"visibility":"default","docs":"The memory allocator returned an error","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"struct":{"fields":["0:2460:1866"],"fields_stripped":false}},"discriminant":null}}},"1:13026:20195":{"id":"1:13026:20195","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13028:20199","str::split_at_mut":"1:13027:20196"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:1791:5006":{"id":"b:1:2474-0:1791:5006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1769:199":{"id":"0:1769:199","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1512,4],"end":[1512,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"b:1:2774-0:2214:3541":{"id":"b:1:2774-0:2214:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1863":{"id":"0:1863","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1746,0],"end":[1751,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1866:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1295":{"id":"0:1295","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4868,0],"end":[4873,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"1:8131:3044","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:1298:882"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:8044-0:1805:4997":{"id":"b:1:8044-0:1805:4997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"1:2793:1629":{"id":"1:2793:1629","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42487:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42468:5939-0:2012:3538":{"id":"a:1:42468:5939-0:2012:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2012:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:1032":{"id":"0:1032","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4201,0],"end":[4208,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:1020:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1037:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5597:22252":{"id":"4:5597:22252","crate_id":4,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"4:7629:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"4:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3610-0:1805:4997":{"id":"b:1:3610-0:1805:4997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:8044-0:755:3485":{"id":"b:1:8044-0:755:3485","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoValues","id":"0:755:3485","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1132":{"id":"0:1132","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4497,0],"end":[4505,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:962:4121":{"id":"0:962:4121","crate_id":0,"name":"key_mut","span":{"filename":"src/map.rs","begin":[3589,4],"end":[3591,5]},"visibility":"public","docs":"Gets a mutable reference to the key in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{HashMap, RawEntryMut};\nuse std::rc::Rc;\n\nlet key_one = Rc::new(\"a\");\nlet key_two = Rc::new(\"a\");\n\nlet mut map: HashMap<Rc<&str>, u32> = HashMap::new();\nmap.insert(key_one.clone(), 10);\n\nassert_eq!(map[&key_one], 10);\nassert!(Rc::strong_count(&key_one) == 2 && Rc::strong_count(&key_two) == 1);\n\nmatch map.raw_entry_mut().from_key(&key_one) {\n    RawEntryMut::Vacant(_) => panic!(),\n    RawEntryMut::Occupied(mut o) => {\n        *o.key_mut() = key_two.clone();\n    }\n}\nassert_eq!(map[&key_two], 10);\nassert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:2331:3431":{"id":"b:1:2474-0:2331:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1982":{"id":"0:1982","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2000,0],"end":[2009,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1986:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"4:5608:22254":{"id":"4:5608:22254","crate_id":4,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"4:7629:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"4:7629:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:1779:3431":{"id":"b:1:2778-0:1779:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2196:3540":{"id":"0:2196:3540","crate_id":0,"name":"Occupied","span":{"filename":"src/table.rs","begin":[1174,4],"end":[1174,37]},"visibility":"default","docs":"An occupied entry.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::hash_table::{Entry, HashTable, OccupiedEntry};\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\nfor x in [\"a\", \"b\"] {\n    table.insert_unique(hasher(&x), x, hasher);\n}\n\nmatch table.entry(hasher(&\"a\"), |&x| x == \"a\", hasher) {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(_) => {}\n}\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2198:1764"]},"discriminant":null}}},"0:1398:1855":{"id":"0:1398:1855","crate_id":0,"name":"key","span":{"filename":"src/map.rs","begin":[5284,4],"end":[5286,5]},"visibility":"public","docs":"Gets a reference to the key in the entry.\n\n# Examples\n\n```\nuse hashbrown::hash_map::{Entry, HashMap};\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nmatch map.entry(\"poneyland\") {\n    Entry::Vacant(_) => panic!(),\n    Entry::Occupied(entry) => assert_eq!(entry.key(), &\"poneyland\"),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:768:3042":{"id":"0:768:3042","crate_id":0,"name":"fold","span":{"filename":"src/map.rs","begin":[2543,4],"end":[2549,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13124:21543":{"id":"1:13124:21543","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12658:137","`FromStr`":"1:12657:6139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42487:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12657:6139","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12657:6139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2778-0:700:3404":{"id":"b:1:2778-0:700:3404","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IterMut","id":"0:700:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2465:667":{"id":"0:2465:667","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[176,16],"end":[176,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2034":{"id":"0:2034","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2185,0],"end":[2191,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2038:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1502:4559":{"id":"0:1502:4559","crate_id":0,"name":"extend","span":{"filename":"src/map.rs","begin":[6586,4],"end":[6588,5]},"visibility":"default","docs":"Inserts all new key-values from the iterator to existing `HashMap<K, V, S, A>`.\nReplace values with existing keys with new values returned from the iterator.\nThe keys and values must implement [`Copy`] trait.\n\n[`Copy`]: https://doc.rust-lang.org/core/marker/trait.Copy.html\n\n# Examples\n\n```\nuse hashbrown::hash_map::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, 100);\n\nlet arr = [(1, 1), (2, 2)];\nlet some_iter = arr.iter().map(|(k, v)| (k, v));\nmap.extend(some_iter);\n// Replace values with existing keys with new values returned from the iterator.\n// So that the map.get(&1) doesn't return Some(&100).\nassert_eq!(map.get(&1), Some(&1));\n\nlet some_vec: Vec<_> = vec![(3, 3), (4, 4)];\nmap.extend(some_vec.iter().map(|(k, v)| (k, v)));\n\nlet some_arr = [(5, 5), (6, 6)];\nmap.extend(some_arr.iter().map(|(k, v)| (k, v)));\n\n// You can also extend from another HashMap\nlet mut new_map = HashMap::new();\nnew_map.extend(&map);\nassert_eq!(new_map, map);\n\nlet mut vec: Vec<_> = new_map.into_iter().collect();\n// The `IntoIter` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"V"}}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42469:5938-0:1771:3395":{"id":"a:1:42469:5938-0:1771:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2774-0:2240:3543":{"id":"b:1:2774-0:2240:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2240:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2017:3540":{"id":"0:2017:3540","crate_id":0,"name":"Occupied","span":{"filename":"src/set.rs","begin":[2118,4],"end":[2118,40]},"visibility":"default","docs":"An occupied entry.\n\n# Examples\n\n```\nuse hashbrown::hash_set::{Entry, HashSet};\nlet mut set: HashSet<_> = [\"a\", \"b\"].into();\n\nmatch set.entry(\"a\") {\n    Entry::Vacant(_) => unreachable!(),\n    Entry::Occupied(_) => { }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2019:1764"]},"discriminant":null}}},"a:1:2997:246-0:2039:3543":{"id":"a:1:2997:246-0:2039:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:2039:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:525:2300":{"id":"0:525:2300","crate_id":0,"name":"with_capacity_in","span":{"filename":"src/map.rs","begin":[419,4],"end":[421,5]},"visibility":"public","docs":"Creates an empty `HashMap` with the specified capacity using the given allocator.\n\nThe hash map will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash map will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashMap` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashMap`], for example with\n[`with_capacity_and_hasher_in`](HashMap::with_capacity_and_hasher_in) method.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse bumpalo::Bump;\n\nlet bump = Bump::new();\nlet mut map = HashMap::with_capacity_in(5, &bump);\n\n// The created HashMap holds none elements\nassert_eq!(map.len(), 0);\n// But it can hold at least 5 elements without reallocating\nlet empty_map_capacity = map.capacity();\nassert!(empty_map_capacity >= 5);\n\n// Now we insert some 5 elements inside created HashMap\nmap.insert(\"One\",   1);\nmap.insert(\"Two\",   2);\nmap.insert(\"Three\", 3);\nmap.insert(\"Four\",  4);\nmap.insert(\"Five\",  5);\n\n// We can see that the HashMap holds 5 elements\nassert_eq!(map.len(), 5);\n// But its capacity isn't changed\nassert_eq!(map.capacity(), empty_map_capacity)\n```","links":{"`ahash::RandomState`":"6:1315:11846","HashMap::with_capacity_and_hasher_in":"0:539:3326","`HashMap`":"0:483:154"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32890:5735-0:857:3985":{"id":"a:1:32890:5735-0:857:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1014":{"id":"0:1014","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4117,0],"end":[4121,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:896:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1019:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1265:1062":{"id":"0:1265:1062","crate_id":0,"name":"next","span":{"filename":"src/map.rs","begin":[4814,4],"end":[4816,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:1155:3557":{"id":"b:1:2474-0:1155:3557","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntryRef","id":"0:1155:3557","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2056:4059":{"id":"0:2056:4059","crate_id":0,"name":"or_insert","span":{"filename":"src/set.rs","begin":[2273,4],"end":[2281,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting if it was vacant.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<&str> = HashSet::new();\n\n// nonexistent key\nset.entry(\"poneyland\").or_insert();\nassert!(set.contains(\"poneyland\"));\n\n// existing key\nset.entry(\"poneyland\").or_insert();\nassert!(set.contains(\"poneyland\"));\nassert_eq!(set.len(), 1);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2049:724":{"id":"0:2049:724","crate_id":0,"name":"fmt","span":{"filename":"src/set.rs","begin":[2224,4],"end":[2226,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1267:3042":{"id":"0:1267:3042","crate_id":0,"name":"fold","span":{"filename":"src/map.rs","begin":[4822,4],"end":[4828,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2380:1835":{"id":"0:2380:1835","crate_id":0,"name":"hash_table","span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,18]},"visibility":"public","docs":"A hash table implemented with quadratic probing and SIMD lookup.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:2381-0:2102:1829"],"is_stripped":false}}},"b:1:3610-0:850:3773":{"id":"b:1:3610-0:850:3773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:948:4059":{"id":"0:948:4059","crate_id":0,"name":"or_insert","span":{"filename":"src/map.rs","begin":[3393,4],"end":[3402,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the default if empty, and returns\nmutable references to the key and value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nmap.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 3);\nassert_eq!(map[\"poneyland\"], 3);\n\n*map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 10).1 *= 2;\nassert_eq!(map[\"poneyland\"], 6);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["default_key",{"generic":"K"}],["default_val",{"generic":"V"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1007:724":{"id":"0:1007:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4103,4],"end":[4108,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2784-0:1791:5006":{"id":"b:1:2784-0:1791:5006","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Intersection","id":"0:1791:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32833:237-0:1775:2963":{"id":"a:1:32833:237-0:1775:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1922:3008":{"id":"0:1922:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1850,4],"end":[1853,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2279:174":{"id":"0:2279:174","crate_id":0,"name":"Item","span":{"filename":"src/table.rs","begin":[1861,4],"end":[1861,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"0:1701:667":{"id":"0:1701:667","crate_id":0,"name":"eq","span":{"filename":"src/set.rs","begin":[1276,4],"end":[1282,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2058":{"id":"0:2058","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[2306,0],"end":[2391,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:2062:2453","0:2063:2358","0:2064:2374"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2473:1857":{"id":"1:2473:1857","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3610-0:2357:3465":{"id":"b:1:3610-0:2357:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:2357:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42469:5938-0:2456:1859":{"id":"a:1:42469:5938-0:2456:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32833:237-0:1079:3553":{"id":"a:1:32833:237-0:1079:3553","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32833:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:728":{"id":"0:728","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2461,0],"end":[2480,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["collect","ge","partial_cmp","for_each","partial_cmp_by","count","map","fold","try_for_each","unzip","zip","try_collect","scan","intersperse_with","max","all","eq_by","cycle","reduce","take","collect_into","flat_map","min","filter_map","cmp","next_chunk","any","find","is_sorted","array_chunks","try_reduce","eq","partition","flatten","min_by","peekable","ne","last","size_hint","le","is_sorted_by","sum","find_map","partition_in_place","lt","map_windows","min_by_key","skip_while","advance_by","by_ref","step_by","skip","copied","product","enumerate","try_find","is_sorted_by_key","is_partitioned","fuse","max_by","take_while","gt","nth","position","__iterator_get_unchecked","cmp_by","rposition","try_fold","cloned","inspect","max_by_key","rev","map_while","intersperse","chain","filter"],"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:732:174","0:733:1062","0:735:3008","0:736:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1676:5043":{"id":"0:1676:5043","crate_id":0,"name":"get_or_insert_with","span":{"filename":"src/set.rs","begin":[974,4],"end":[986,5]},"visibility":"public","docs":"Inserts a value computed from `f` into the set if the given `value` is\nnot present, then returns a reference to the value in the set.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]\n    .iter().map(|&pet| pet.to_owned()).collect();\n\nassert_eq!(set.len(), 3);\nfor &pet in &[\"cat\", \"dog\", \"fish\"] {\n    let value = set.get_or_insert_with(pet, str::to_owned);\n    assert_eq!(value, pet);\n}\nassert_eq!(set.len(), 4); // a new \"fish\" was inserted\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}],["f",{"generic":"F"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}}],"output":{"generic":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:787:3368":{"id":"b:1:2471-0:787:3368","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Keys","id":"0:787:3368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42468:5939-0:850:3773":{"id":"a:1:42468:5939-0:850:3773","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilderMut","id":"0:850:3773","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"0:1460:4135":{"id":"0:1460:4135","crate_id":0,"name":"into_mut","span":{"filename":"src/map.rs","begin":[6117,4],"end":[6119,5]},"visibility":"public","docs":"Converts the OccupiedEntryRef into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself.\n\nIf you need multiple references to the `OccupiedEntryRef`, see [`get_mut`].\n\n[`get_mut`]: #method.get_mut\n\n# Examples\n\n```\nuse hashbrown::hash_map::{EntryRef, HashMap};\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nmap.entry_ref(\"poneyland\").or_insert(12);\n\nlet value: &mut u32;\nmatch map.entry_ref(\"poneyland\") {\n    EntryRef::Occupied(entry) => value = entry.into_mut(),\n    EntryRef::Vacant(_) => panic!(),\n}\n*value += 10;\n\nassert_eq!(map[\"poneyland\"], 22);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13052:11204":{"id":"1:13052:11204","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42346:191","prim@char":"1:53676:454","self::pattern":"1:12697:14610"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12717:14616","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1420":{"id":"0:1420","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[5709,0],"end":[5954,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1428:2410","0:1429:4059","0:1430:4070","0:1432:4355","0:1434:1855","0:1435:4080","0:1437:4103"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:599:3634":{"id":"0:599:3634","crate_id":0,"name":"get_many_key_value_mut","span":{"filename":"src/map.rs","begin":[1623,4],"end":[1632,5]},"visibility":"public","docs":"Attempts to get mutable references to `N` values in the map at once, with immutable\nreferences to the corresponding keys.\n\nReturns an array of length `N` with the results of each query. For soundness, at most one\nmutable reference will be returned to any value. `None` will be returned if any of the keys\nare duplicates or missing.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut libraries = HashMap::new();\nlibraries.insert(\"Bodleian Library\".to_string(), 1602);\nlibraries.insert(\"Athenæum\".to_string(), 1807);\nlibraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\nlibraries.insert(\"Library of Congress\".to_string(), 1800);\n\nlet got = libraries.get_many_key_value_mut([\n    \"Bodleian Library\",\n    \"Herzogin-Anna-Amalia-Bibliothek\",\n]);\nassert_eq!(\n    got,\n    Some([\n        (&\"Bodleian Library\".to_string(), &mut 1602),\n        (&\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), &mut 1691),\n    ]),\n);\n// Missing keys result in None\nlet got = libraries.get_many_key_value_mut([\n    \"Bodleian Library\",\n    \"Gewandhaus\",\n]);\nassert_eq!(got, None);\n\n// Duplicate keys result in None\nlet got = libraries.get_many_key_value_mut([\n    \"Bodleian Library\",\n    \"Herzogin-Anna-Amalia-Bibliothek\",\n    \"Herzogin-Anna-Amalia-Bibliothek\",\n]);\nassert_eq!(got, None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["ks",{"array":{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}},"len":"N"}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}}]},"len":"N"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2391:1839":{"id":"0:2391:1839","crate_id":0,"name":"equivalent","span":{"filename":"src/lib.rs","begin":[170,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["key",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1476:1855":{"id":"0:1476:1855","crate_id":0,"name":"key","span":{"filename":"src/map.rs","begin":[6355,4],"end":[6360,5]},"visibility":"public","docs":"Gets a reference to the key that would be used when inserting a value\nthrough the `VacantEntryRef`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nlet key: &str = \"poneyland\";\nassert_eq!(map.entry_ref(key).key(), \"poneyland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Q"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:678":{"id":"0:678","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2265,0],"end":[2282,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"primitive":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"array":{"type":{"tuple":[{"generic":"K"},{"generic":"V"}]},"len":"N"}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"DefaultHashBuilder","id":"0:482:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:684:751"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13065:21528":{"id":"1:13065:21528","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12697:14610","str::split":"1:13056:2982","prim@char":"1:53676:454","`DoubleEndedIterator`":"1:8078:131","str::rsplit_terminator":"1:13068:21529"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44277:12731","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13134:21544":{"id":"1:13134:21544","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4794:21544"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44526:12652","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32890:5735-0:813:3431":{"id":"a:1:32890:5735-0:813:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1279":{"id":"0:1279","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[4838,0],"end":[4842,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1283:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1972:174":{"id":"0:1972:174","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1972,4],"end":[1972,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"b:1:2789-0:2119:1838":{"id":"b:1:2789-0:2119:1838","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2789-0:2028:3541":{"id":"b:1:2789-0:2028:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:543:1716":{"id":"0:543:1716","crate_id":0,"name":"values","span":{"filename":"src/map.rs","begin":[684,4],"end":[686,5]},"visibility":"public","docs":"An iterator visiting all values in arbitrary order.\nThe iterator element type is `&'a V`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\nassert_eq!(map.len(), 3);\nlet mut vec: Vec<i32> = Vec::new();\n\nfor val in map.values() {\n    println!(\"{}\", val);\n    vec.push(*val);\n}\n\n// The `Values` iterator produces values in arbitrary order, so the\n// values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [1, 2, 3]);\n\nassert_eq!(map.len(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:520":{"id":"0:520","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[329,0],"end":[422,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"resolved_path":{"name":"DefaultHashBuilder","id":"0:482:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:524:2304","0:525:2300"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:805":{"id":"0:805","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2650,0],"end":[2657,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2487:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Values","id":"0:800:3378","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"items":["0:808:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2789-0:857:3985":{"id":"b:1:2789-0:857:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1643:3295":{"id":"0:1643:3295","crate_id":0,"name":"with_capacity_and_hasher","span":{"filename":"src/set.rs","begin":[507,4],"end":[511,5]},"visibility":"public","docs":"Creates an empty `HashSet` with the specified capacity, using\n`hasher` to hash the keys.\n\nThe hash set will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash set will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`].\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashSet to be useful, see its documentation for details.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut set = HashSet::with_capacity_and_hasher(10, s);\nset.insert(1);\n```","links":{"`ahash::RandomState`":"6:1315:11846","`HashSet`":"0:1604:156"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hasher",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1905:3008":{"id":"0:1905:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1814,4],"end":[1816,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:532":{"id":"0:532","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[510,0],"end":[1070,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:537:311","0:538:3309","0:539:3326","0:540:2371","0:541:2295","0:542:3367","0:543:1716","0:544:3384","0:545:862","0:546:863","0:547:882","0:548:2365","0:549:2501","0:550:3442","0:552:3464","0:554:2364","0:555:3477","0:556:3484"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32890:5735-0:1120:3554":{"id":"a:1:32890:5735-0:1120:3554","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3610-0:1798:4987":{"id":"b:1:3610-0:1798:4987","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Difference","id":"0:1798:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2789-0:1811:5015":{"id":"b:1:2789-0:1811:5015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32890:5735-0:2028:3541":{"id":"a:1:32890:5735-0:2028:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32890:5735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2281:3008":{"id":"0:2281:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/table.rs","begin":[1871,4],"end":[1873,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:2331:3431":{"id":"b:1:2471-0:2331:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:2331:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2311:2963":{"id":"0:2311:2963","crate_id":0,"name":"IntoIter","span":{"filename":"src/table.rs","begin":[1949,0],"end":[1954,1]},"visibility":"public","docs":"An owning iterator over the entries of a `HashTable` in arbitrary order.\nThe iterator element type is `T`.\n\nThis `struct` is created by the [`into_iter`] method on [`HashTable`]\n(provided by the [`IntoIterator`] trait). See its documentation for more.\nThe table cannot be used after calling that method.\n\n[`into_iter`]: struct.HashTable.html#method.into_iter\n[`HashTable`]: struct.HashTable.html\n[`IntoIterator`]: https://doc.rust-lang.org/core/iter/trait.IntoIterator.html","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["a:1:42468:5939-0:2311:2963","a:1:2997:246-0:2311:2963","a:1:42469:5938-0:2311:2963","a:1:32833:237-0:2311:2963","a:1:32890:5735-0:2311:2963","b:1:3610-0:2311:2963","b:1:2471-0:2311:2963","b:1:2789-0:2311:2963","b:1:8044-0:2311:2963","b:1:2784-0:2311:2963","b:1:2778-0:2311:2963","b:1:2774-0:2311:2963","b:1:2474-0:2311:2963","0:2324","0:2328","0:2315"]}}},"0:664":{"id":"0:664","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[2206,0],"end":[2230,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2826:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:669:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1615":{"id":"0:1615","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[132,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"ahash\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"super::map::DefaultHashBuilder","id":"0:482:3153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1617:1048","0:1618:2299"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1401:2455":{"id":"0:1401:2455","crate_id":0,"name":"get_mut","span":{"filename":"src/map.rs","begin":[5366,4],"end":[5368,5]},"visibility":"public","docs":"Gets a mutable reference to the value in the entry.\n\nIf you need a reference to the `OccupiedEntry` which may outlive the\ndestruction of the `Entry` value, see [`into_mut`].\n\n[`into_mut`]: #method.into_mut\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nassert_eq!(map[\"poneyland\"], 12);\nif let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n    *o.get_mut() += 10;\n    assert_eq!(*o.get(), 22);\n\n    // We can use the same Entry multiple times.\n    *o.get_mut() += 2;\n}\n\nassert_eq!(map[\"poneyland\"], 24);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:1805:4997":{"id":"a:1:2997:246-0:1805:4997","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SymmetricDifference","id":"0:1805:4997","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1642:3339":{"id":"0:1642:3339","crate_id":0,"name":"with_hasher","span":{"filename":"src/set.rs","begin":[469,4],"end":[473,5]},"visibility":"public","docs":"Creates a new empty hash set which will use the given hasher to hash\nkeys.\n\nThe hash set is initially created with a capacity of 0, so it will not\nallocate until it is first inserted into.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`].\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashSet to be useful, see its documentation for details.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut set = HashSet::with_hasher(s);\nset.insert(2);\n```","links":{"`ahash::RandomState`":"6:1315:11846","`HashSet`":"0:1604:156"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hasher",{"generic":"S"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1764:199":{"id":"0:1764:199","crate_id":0,"name":"Output","span":{"filename":"src/set.rs","begin":[1480,4],"end":[1480,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}}],"bindings":[]}}}}}}},"0:2270:5546":{"id":"0:2270:5546","crate_id":0,"name":"into_table","span":{"filename":"src/table.rs","begin":[1842,4],"end":[1844,5]},"visibility":"public","docs":"Converts the AbsentEntry into a mutable reference to the underlying\ntable.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"resolved_path":{"name":"HashTable","id":"0:2119:1838","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1734:4559":{"id":"0:1734:4559","crate_id":0,"name":"extend","span":{"filename":"src/set.rs","begin":[1354,4],"end":[1356,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["iter",{"generic":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:1120:3554":{"id":"b:1:2774-0:1120:3554","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntryRef","id":"0:1120:3554","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42468:5939-0:483:154":{"id":"a:1:42468:5939-0:483:154","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashMap","id":"0:483:154","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42469:5938-0:857:3985":{"id":"a:1:42469:5938-0:857:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1458:2453":{"id":"0:1458:2453","crate_id":0,"name":"get","span":{"filename":"src/map.rs","begin":[6056,4],"end":[6058,5]},"visibility":"public","docs":"Gets a reference to the value in the entry.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nmap.entry_ref(\"poneyland\").or_insert(12);\n\nmatch map.entry_ref(\"poneyland\") {\n    EntryRef::Vacant(_) => panic!(),\n    EntryRef::Occupied(entry) => assert_eq!(entry.get(), &12),\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3610-0:896:3789":{"id":"b:1:3610-0:896:3789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:896:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1880:3008":{"id":"0:1880:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1773,4],"end":[1775,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13056:2982":{"id":"1:13056:2982","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12697:14610","`DoubleEndedIterator`":"1:8078:131","prim@char":"1:53676:454","str::split_whitespace":"1:13034:17167","str::rsplit":"1:13062:20203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44227:12453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12702:13247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:813:3431":{"id":"0:813:3431","crate_id":0,"name":"Drain","span":{"filename":"src/map.rs","begin":[2693,0],"end":[2695,1]},"visibility":"public","docs":"A draining iterator over the entries of a `HashMap` in arbitrary\norder. The iterator element type is `(K, V)`.\n\nThis `struct` is created by the [`drain`] method on [`HashMap`]. See its\ndocumentation for more.\n\n[`drain`]: struct.HashMap.html#method.drain\n[`HashMap`]: struct.HashMap.html\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n\nlet mut drain_iter = map.drain();\nlet mut vec = vec![drain_iter.next(), drain_iter.next(), drain_iter.next()];\n\n// The `Drain` iterator produces items in arbitrary order, so the\n// items must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [Some((1, \"a\")), Some((2, \"b\")), Some((3, \"c\"))]);\n\n// It is fused iterator\nassert_eq!(drain_iter.next(), None);\nassert_eq!(drain_iter.next(), None);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"resolved_path":{"name":"self::inner::Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:42468:5939-0:813:3431","a:1:2997:246-0:813:3431","a:1:42469:5938-0:813:3431","a:1:32833:237-0:813:3431","a:1:32890:5735-0:813:3431","b:1:3610-0:813:3431","b:1:2471-0:813:3431","b:1:2789-0:813:3431","b:1:8044-0:813:3431","b:1:2784-0:813:3431","b:1:2778-0:813:3431","b:1:2774-0:813:3431","b:1:2474-0:813:3431","0:1359","0:1354","0:1363","0:1343"]}}},"b:1:2784-0:857:3985":{"id":"b:1:2784-0:857:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2754:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2787:138","1:2788:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1721:754":{"id":"0:1721:754","crate_id":0,"name":"from_iter","span":{"filename":"src/set.rs","begin":[1319,4],"end":[1323,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2471-0:1038:3541":{"id":"b:1:2471-0:1038:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2473:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1392":{"id":"0:1392","crate_id":0,"name":null,"span":{"filename":"src/map.rs","begin":[5267,0],"end":[5620,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:1038:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1398:1855","0:1399:2360","0:1400:2453","0:1401:2455","0:1402:4135","0:1403:2410","0:1404:2358","0:1405:4421","0:1406:4444","0:1407:4104"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13097:21534":{"id":"1:13097:21534","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2789-0:1775:2963":{"id":"b:1:2789-0:1775:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:1775:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2997:246-0:2012:3538":{"id":"a:1:2997:246-0:2012:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2012:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3610-0:1064:3543":{"id":"b:1:3610-0:1064:3543","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"VacantEntry","id":"0:1064:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1259:724":{"id":"0:1259:724","crate_id":0,"name":"fmt","span":{"filename":"src/map.rs","begin":[4805,4],"end":[4807,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10106:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10087:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1288:174":{"id":"0:1288:174","crate_id":0,"name":"Item","span":{"filename":"src/map.rs","begin":[4845,4],"end":[4845,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"K"}}}}}},"b:1:2789-0:1771:3395":{"id":"b:1:2789-0:1771:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2758:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:2792:138","1:2793:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3610-0:2028:3541":{"id":"b:1:3610-0:2028:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2997:246-0:2192:3538":{"id":"a:1:2997:246-0:2192:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2192:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:547:882":{"id":"0:547:882","crate_id":0,"name":"len","span":{"filename":"src/map.rs","begin":[830,4],"end":[832,5]},"visibility":"public","docs":"Returns the number of elements in the map.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut a = HashMap::new();\nassert_eq!(a.len(), 0);\na.insert(1, \"a\");\nassert_eq!(a.len(), 1);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2057:2453":{"id":"0:2057:2453","crate_id":0,"name":"get","span":{"filename":"src/set.rs","begin":[2298,4],"end":[2303,5]},"visibility":"public","docs":"Returns a reference to this entry's value.\n\n# Examples\n\n```\nuse hashbrown::HashSet;\n\nlet mut set: HashSet<&str> = HashSet::new();\nset.entry(\"poneyland\").or_insert();\n// existing key\nassert_eq!(set.entry(\"poneyland\").get(), &\"poneyland\");\n// nonexistent key\nassert_eq!(set.entry(\"horseland\").get(), &\"horseland\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:8044-0:713:2963":{"id":"b:1:8044-0:713:2963","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:8187:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:8040:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoIter","id":"0:713:2963","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:8046:174","1:8047:2963","1:8048:846"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1940:458":{"id":"0:1940:458","crate_id":0,"name":"clone","span":{"filename":"src/set.rs","begin":[1891,4],"end":[1896,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1687:3685":{"id":"0:1687:3685","crate_id":0,"name":"insert_unique_unchecked","span":{"filename":"src/set.rs","begin":[1138,4],"end":[1140,5]},"visibility":"public","docs":"Insert a value the set without checking if the value already exists in the set.\n\nReturns a reference to the value just inserted.\n\nThis operation is safe if a value does not exist in the set.\n\nHowever, if a value exists in the set already, the behavior is unspecified:\nthis operation may panic, loop forever, or any following operation with the set\nmay panic, loop forever or return arbitrary result.\n\nThat said, this operation (and following operations) are guaranteed to\nnot violate memory safety.\n\nThis operation is faster than regular insert, because it does not perform\nlookup before insertion.\n\nThis operation is useful during initial population of the set.\nFor example, when constructing a set from another set, we know\nthat values are unique.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"generic":"T"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2474-0:2012:3538":{"id":"b:1:2474-0:2012:3538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Entry","id":"0:2012:3538","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:544:3384":{"id":"0:544:3384","crate_id":0,"name":"values_mut","span":{"filename":"src/map.rs","begin":[722,4],"end":[726,5]},"visibility":"public","docs":"An iterator visiting all values mutably in arbitrary order.\nThe iterator element type is `&'a mut V`.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\n\nlet mut map = HashMap::new();\n\nmap.insert(\"a\", 1);\nmap.insert(\"b\", 2);\nmap.insert(\"c\", 3);\n\nfor val in map.values_mut() {\n    *val = *val + 10;\n}\n\nassert_eq!(map.len(), 3);\nlet mut vec: Vec<i32> = Vec::new();\n\nfor val in map.values() {\n    println!(\"{}\", val);\n    vec.push(*val);\n}\n\n// The `Values` iterator produces values in arbitrary order, so the\n// values must be sorted to test them against a sorted array.\nvec.sort_unstable();\nassert_eq!(vec, [11, 12, 13]);\n\nassert_eq!(map.len(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ValuesMut","id":"0:845:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1465:4104":{"id":"0:1465:4104","crate_id":0,"name":"replace_entry_with","span":{"filename":"src/map.rs","begin":[6310,4],"end":[6338,5]},"visibility":"public","docs":"Provides shared access to the key and owned access to the value of\nthe entry and allows to replace or remove it based on the\nvalue of the returned option.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::EntryRef;\n\nlet mut map: HashMap<String, u32> = HashMap::new();\nmap.insert(\"poneyland\".to_string(), 42);\n\nlet entry = match map.entry_ref(\"poneyland\") {\n    EntryRef::Occupied(e) => {\n        e.replace_entry_with(|k, v| {\n            assert_eq!(k, \"poneyland\");\n            assert_eq!(v, 42);\n            Some(v + 1)\n        })\n    }\n    EntryRef::Vacant(_) => panic!(),\n};\n\nmatch entry {\n    EntryRef::Occupied(e) => {\n        assert_eq!(e.key(), \"poneyland\");\n        assert_eq!(e.get(), &43);\n    }\n    EntryRef::Vacant(_) => panic!(),\n}\n\nassert_eq!(map[\"poneyland\"], 43);\n\nlet entry = match map.entry_ref(\"poneyland\") {\n    EntryRef::Occupied(e) => e.replace_entry_with(|_k, _v| None),\n    EntryRef::Vacant(_) => panic!(),\n};\n\nmatch entry {\n    EntryRef::Vacant(e) => {\n        assert_eq!(e.key(), \"poneyland\");\n    }\n    EntryRef::Occupied(_) => panic!(),\n}\n\nassert!(!map.contains_key(\"poneyland\"));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"EntryRef","id":"0:1079:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"lifetime":"'b"},{"type":{"generic":"K"}},{"type":{"generic":"Q"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:3243:143","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"K"}}},{"generic":"V"}],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"V"}}],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2997:246-0:824:3465":{"id":"a:1:2997:246-0:824:3465","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ExtractIf","id":"0:824:3465","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"F"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1650:3326":{"id":"0:1650:3326","crate_id":0,"name":"with_capacity_and_hasher_in","span":{"filename":"src/set.rs","begin":[594,4],"end":[598,5]},"visibility":"public","docs":"Creates an empty `HashSet` with the specified capacity, using\n`hasher` to hash the keys.\n\nThe hash set will be able to hold at least `capacity` elements without\nreallocating. If `capacity` is 0, the hash set will not allocate.\n\n# HashDoS resistance\n\nThe `hash_builder` normally use a fixed key by default and that does\nnot allow the `HashSet` to be protected against attacks such as [`HashDoS`].\nUsers who require HashDoS resistance should explicitly use\n[`ahash::RandomState`] or [`std::collections::hash_map::RandomState`]\nas the hasher when creating a [`HashSet`].\n\nThe `hash_builder` passed should implement the [`BuildHasher`] trait for\nthe HashSet to be useful, see its documentation for details.\n\n[`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n[`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n[`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n\n# Examples\n\n```\nuse hashbrown::HashSet;\nuse hashbrown::hash_map::DefaultHashBuilder;\n\nlet s = DefaultHashBuilder::default();\nlet mut set = HashSet::with_capacity_and_hasher(10, s);\nset.insert(1);\n```","links":{"`ahash::RandomState`":"6:1315:11846","`HashSet`":"0:1604:156"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["capacity",{"primitive":"usize"}],["hasher",{"generic":"S"}],["alloc",{"generic":"A"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3610-0:857:3985":{"id":"b:1:3610-0:857:3985","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3608:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryMut","id":"0:857:3985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:3612:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1697":{"id":"0:1697","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1270,0],"end":[1283,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2534:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1701:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1975:3042":{"id":"0:1975:3042","crate_id":0,"name":"fold","span":{"filename":"src/set.rs","begin":[1983,4],"end":[1989,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["init",{"generic":"B"}],["f",{"generic":"F"}]],"output":{"generic":"B"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"generic":"B"},{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"1:8187:179","args":null}}}],"output":{"generic":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1920:174":{"id":"0:1920:174","crate_id":0,"name":"Item","span":{"filename":"src/set.rs","begin":[1837,4],"end":[1837,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}}},"a:1:42469:5938-0:2028:3541":{"id":"a:1:42469:5938-0:2028:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2028:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:0:2388-0:2456:1859":{"id":"b:0:2388-0:2456:1859","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[165,0],"end":[173,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2539:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2465:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Equivalent","id":"0:2385:1840","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2391:1839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"Q"}}}},"b:1:2474-0:1771:3395":{"id":"b:1:2474-0:1771:3395","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Iter","id":"0:1771:3395","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13034:17167":{"id":"1:13034:17167","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13035:17191"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44501:12744","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:896:3789":{"id":"b:1:2774-0:896:3789","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawEntryBuilder","id":"0:896:3789","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2178:2963":{"id":"0:2178:2963","crate_id":0,"name":"IntoIter","span":{"filename":"src/table.rs","begin":[1049,4],"end":[1049,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"IterMut","id":"0:2291:3404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}}],"bindings":[]}}}}}}},"0:2064:2374":{"id":"0:2064:2374","crate_id":0,"name":"replace","span":{"filename":"src/set.rs","begin":[2388,4],"end":[2390,5]},"visibility":"public","docs":"Replaces the entry, returning the old value. The new value in the hash map will be\nthe value used to create this entry.\n\n# Panics\n\nWill panic if this OccupiedEntry was created through [`Entry::insert`].\n\n# Examples\n\n```\n use hashbrown::hash_set::{Entry, HashSet};\n use std::rc::Rc;\n\n let mut set: HashSet<Rc<String>> = HashSet::new();\n let key_one = Rc::new(\"Stringthing\".to_string());\n let key_two = Rc::new(\"Stringthing\".to_string());\n\n set.insert(key_one.clone());\n assert!(Rc::strong_count(&key_one) == 2 && Rc::strong_count(&key_two) == 1);\n\n match set.entry(key_two.clone()) {\n     Entry::Occupied(entry) => {\n         let old_key: Rc<String> = entry.replace();\n         assert!(Rc::ptr_eq(&key_one, &old_key));\n     }\n     Entry::Vacant(_) => panic!(),\n }\n\n assert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);\n assert!(set.contains(&\"Stringthing\".to_owned()));\n```","links":{"`Entry::insert`":"0:2055:2410"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1858:3008":{"id":"0:1858:3008","crate_id":0,"name":"size_hint","span":{"filename":"src/set.rs","begin":[1734,4],"end":[1736,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1892":{"id":"0:1892","crate_id":0,"name":null,"span":{"filename":"src/set.rs","begin":[1793,0],"end":[1798,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"5:51:2005","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10131:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:1779:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"K"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["0:1895:724"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1418:2410":{"id":"0:1418:2410","crate_id":0,"name":"insert","span":{"filename":"src/map.rs","begin":[5675,4],"end":[5687,5]},"visibility":"public","docs":"Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.\n\n# Examples\n\n```\nuse hashbrown::HashMap;\nuse hashbrown::hash_map::Entry;\n\nlet mut map: HashMap<&str, u32> = HashMap::new();\n\nif let Entry::Vacant(o) = map.entry(\"poneyland\") {\n    o.insert(37);\n}\nassert_eq!(map[\"poneyland\"], 37);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["value",{"generic":"V"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:10347:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"BuildHasher","id":"1:10390:3149","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2007:1062":{"id":"0:2007:1062","crate_id":0,"name":"next","span":{"filename":"src/set.rs","begin":[2048,4],"end":[2050,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2774-0:2456:1859":{"id":"b:1:2774-0:2456:1859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2748:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TryReserveError","id":"0:2456:1859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2777:4272"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2778-0:888:3994":{"id":"b:1:2778-0:888:3994","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2751:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RawVacantEntryMut","id":"0:888:3994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2780:751"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2474-0:813:3431":{"id":"b:1:2474-0:813:3431","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32834:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2468:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Drain","id":"0:813:3431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":["1:2476:4603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2997:246-0:723:3478":{"id":"a:1:2997:246-0:723:3478","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2997:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IntoKeys","id":"0:723:3478","args":{"angle_bracketed":{"args":[{"type":{"generic":"K"}},{"type":{"generic":"V"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2133:2355":{"id":"0:2133:2355","crate_id":0,"name":"find","span":{"filename":"src/table.rs","begin":[224,4],"end":[226,5]},"visibility":"public","docs":"Returns a reference to an entry in the table with the given hash and\nwhich satisfies the equality function passed.\n\nThis method will call `eq` for all entries with the given hash, but may\nalso call it for entries with a different hash. `eq` should only return\ntrue for the desired entry, at which point the search is stopped.\n\n# Examples\n\n```\n# #[cfg(feature = \"nightly\")]\n# fn test() {\nuse ahash::AHasher;\nuse hashbrown::HashTable;\nuse std::hash::{BuildHasher, BuildHasherDefault};\n\nlet mut table = HashTable::new();\nlet hasher = BuildHasherDefault::<AHasher>::default();\nlet hasher = |val: &_| hasher.hash_one(val);\ntable.insert_unique(hasher(&1), 1, hasher);\ntable.insert_unique(hasher(&2), 2, hasher);\ntable.insert_unique(hasher(&3), 3, hasher);\nassert_eq!(table.find(hasher(&2), |&val| val == 2), Some(&2));\nassert_eq!(table.find(hasher(&4), |&val| val == 4), None);\n# }\n# fn main() {\n#     #[cfg(feature = \"nightly\")]\n#     test()\n# }\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hash",{"primitive":"u64"}],["eq",{"impl_trait":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"Option","id":"1:42344:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"impl FnMut(&T) -> bool","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:3240:142","args":{"parenthesized":{"inputs":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}}],"output":{"primitive":"bool"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42468:5939-0:2214:3541":{"id":"a:1:42468:5939-0:2214:3541","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"resolved_path":{"name":"Global","id":"5:1074:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OccupiedEntry","id":"0:2214:3541","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}}},"a:1:42468:5939-0:1604:156":{"id":"a:1:42468:5939-0:1604:156","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"HashSet","id":"0:1604:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:42468:5939-0:1811:5015":{"id":"a:1:42468:5939-0:1811:5015","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"S","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"S"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42469:5938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42468:5939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Union","id":"0:1811:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"T"}},{"type":{"generic":"S"}},{"type":{"generic":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}}},"paths":{"1:22919:12482":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:9175:5937":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:3039:5734":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"9:60:13217":{"crate_id":9,"path":["once_cell","unsync","Lazy"],"kind":"struct"},"4:6771:12274":{"crate_id":4,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:53683:1634":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:41045:5705":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:53695:1651":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"6:1315:11846":{"crate_id":6,"path":["ahash","random_state","RandomState"],"kind":"struct"},"1:46239:12805":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:42470:5926":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:3132:5829":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:7469:5704":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"4:128:1992":{"crate_id":4,"path":["alloc","alloc","handle_alloc_error"],"kind":"function"},"1:22871:12476":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:53680:333":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:32833:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:40757:15690":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:53696:1652":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:10584:12334":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:41557:5678":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"4:7629:243":{"crate_id":4,"path":["alloc","string","String"],"kind":"struct"},"1:22963:15697":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:10954:3404":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:1478:3404":{"crate_id":4,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:12399:12728":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:10131:121":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:44277:12731":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:10777:17194":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:4235:12300":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"4:294:12268":{"crate_id":4,"path":["alloc","boxed","Box"],"kind":"struct"},"1:48512:11191":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:43080:5790":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"4:6608:12274":{"crate_id":4,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"4:6689:2963":{"crate_id":4,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"4:6429:14968":{"crate_id":4,"path":["alloc","task","LocalWake"],"kind":"trait"},"1:40892:12658":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:12243:14618":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:44939:12781":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:47432:12846":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:4305:3395":{"crate_id":4,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:41115:5721":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:44213:12653":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:0:1775":{"crate_id":6,"path":["ahash"],"kind":"module"},"1:8505:5691":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:48466:11187":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:43306:12701":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:48565:11194":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:13528:12343":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"5:619:12274":{"crate_id":5,"path":["allocator_api2","stable","vec","drain","drop","DropGuard"],"kind":"struct"},"1:45236:5667":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:40855:14520":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:2878:13237":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:22620:14747":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:47994:12877":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:0:537":{"crate_id":1,"path":["core"],"kind":"module"},"1:44065:13271":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:38670:5834":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:43333:18181":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:10150:5793":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:41572:5681":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:45247:1864":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"6:99:14996":{"crate_id":6,"path":["ahash","fallback_hash","AHasherStr"],"kind":"struct"},"5:1083:1864":{"crate_id":5,"path":["allocator_api2","stable","alloc","AllocError"],"kind":"struct"},"4:4464:12300":{"crate_id":4,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:46171:12802":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:43408:5798":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"7:561:22731":{"crate_id":7,"path":["zerocopy","sealed","ByteSliceSealed"],"kind":"trait"},"1:48455:11186":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:7999:5693":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"9:134:13218":{"crate_id":9,"path":["once_cell","race","OnceRef"],"kind":"struct"},"1:22520:5761":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"1:48352:12882":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:4145:12300":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:11172:13251":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:53682:1549":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:2468:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:11022:12456":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"7:355:15009":{"crate_id":7,"path":["zerocopy","AsBytes"],"kind":"trait"},"4:1354:3702":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:12436:12733":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"4:7618:12308":{"crate_id":4,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:46840:12827":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:573:3431":{"crate_id":5,"path":["allocator_api2","stable","vec","drain","Drain"],"kind":"struct"},"5:812:12283":{"crate_id":5,"path":["allocator_api2","stable","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:2383:5762":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:47072:12832":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:4637:5801":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"4:3036:13485":{"crate_id":4,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:53677:1669":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:10138:5788":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:47852:12876":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:5041:18849":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:34635:4849":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"4:7441:210":{"crate_id":4,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:45028:14642":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:46624:12820":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:21686:14669":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:44349:12735":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:1039:1999":{"crate_id":1,"path":["core","hint"],"kind":"module"},"1:1950:5779":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:44947:12783":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:32891:5737":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"4:5446:14954":{"crate_id":4,"path":["alloc","slice","Join"],"kind":"trait"},"1:42479:11258":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:21513:18485":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:10087:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:1855:1200":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"0:0:1867":{"crate_id":0,"path":["hashbrown"],"kind":"module"},"1:44971:12789":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:44519:12746":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"4:6961:12314":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"4:7477:2963":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"4:4419:264":{"crate_id":4,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:4628:12323":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"4:2287:22359":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:48104:12878":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:42122:12677":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:42402:3395":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:13334:18471":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:53697:1649":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"9:0:11840":{"crate_id":9,"path":["once_cell"],"kind":"module"},"1:33496:5821":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"4:3791:12410":{"crate_id":4,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"4:0:307":{"crate_id":4,"path":["alloc"],"kind":"module"},"1:45149:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:31580:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"4:7606:12438":{"crate_id":4,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"9:18:12402":{"crate_id":9,"path":["once_cell","unsync","OnceCell"],"kind":"struct"},"4:3806:13225":{"crate_id":4,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:46938:12829":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:42654:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:41106:5711":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:13510:117":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"6:87:14995":{"crate_id":6,"path":["ahash","fallback_hash","AHasherFixed"],"kind":"struct"},"1:48550:11193":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:22383:14752":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:22491:17194":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:40841:12655":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"5:422:12269":{"crate_id":5,"path":["allocator_api2","stable","raw_vec","RawVec"],"kind":"struct"},"1:40874:12657":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:46748:12823":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"0:2457:1862":{"crate_id":0,"path":["hashbrown","TryReserveError","CapacityOverflow"],"kind":"variant"},"1:38615:5833":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"4:7449:12432":{"crate_id":4,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:44157:13274":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:32890:5735":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:7468:5703":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"4:5707:12277":{"crate_id":4,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:2826:126":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:46526:12816":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:7389:3431":{"crate_id":4,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:3438:253":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:9608:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:53689:802":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"4:3634:183":{"crate_id":4,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"3:0:5652":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:21745:14668":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:48486:11189":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:40746:12644":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:42468:5939":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:41014:4846":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:44102:5694":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:2758:256":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:5908:5709":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:48475:11188":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:44510:12745":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:7409:12431":{"crate_id":4,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:13638:2005":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:12459:12736":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:8131:3044":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:12928:121":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:11241:13252":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:47150:12841":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:1818:640":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:45136:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:48501:11190":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"4:7377:12430":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:53674:404":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:46816:12826":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:41581:5683":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:22943:15668":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"7:598:12405":{"crate_id":7,"path":["zerocopy","wrappers","Unalign"],"kind":"struct"},"4:2234:12414":{"crate_id":4,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"4:2205:12412":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:47196:12842":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"4:1555:3485":{"crate_id":4,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:7585:5673":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:43345:18177":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:44227:12453":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:12702:13247":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:7433:2963":{"crate_id":4,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"4:3244:4987":{"crate_id":4,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:22734:12468":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:4234:13239":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"7:196:12266":{"crate_id":7,"path":["zerocopy","wrappers","update","WriteBackOnDrop"],"kind":"struct"},"1:53692:800":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"4:3304:5015":{"crate_id":4,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:41168:5715":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:3283:19556":{"crate_id":4,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:44955:12785":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:6531:5722":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:23012:6154":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:48580:11195":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:7815:5677":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:31607:6166":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:46323:12808":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"4:6562:3431":{"crate_id":4,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:44027:12458":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:22297:14667":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"4:5208:12307":{"crate_id":4,"path":["alloc","rc","Weak"],"kind":"struct"},"1:41550:5676":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:40978:13265":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"4:2756:12425":{"crate_id":4,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:3209:127":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:4684:5802":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:21865:14666":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:44036:12459":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"4:3647:3395":{"crate_id":4,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:42527:3395":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:41136:5699":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:46992:12831":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:48244:12880":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:34152:5827":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:43623:12715":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:32824:12503":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:44963:12787":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:34808:5830":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:41591:5685":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"4:7642:12439":{"crate_id":4,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:42272:12691":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:10355:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"5:1121:12270":{"crate_id":5,"path":["allocator_api2","stable","vec","splice","Splice"],"kind":"struct"},"1:30781:6138":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:44186:12724":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"0:2456:1859":{"crate_id":0,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:53681:1517":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:32803:13262":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:7533:13729":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:10142:5790":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:45017:12793":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:31058:5776":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:3608:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:33682:5824":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:7755:5675":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:31069:15710":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:44657:12761":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:4387:12402":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:44481:12742":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"7:370:5800":{"crate_id":7,"path":["zerocopy","Ref"],"kind":"struct"},"4:3025:4269":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:48603:11196":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:11099:13250":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:40074:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"4:1494:2963":{"crate_id":4,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:31126:15707":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:22518:17556":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:42418:2963":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:46770:12824":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:44173:12721":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:41208:5702":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:40317:14476":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:43066:5789":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:46341:12809":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:39919:5849":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:4583:5800":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"4:2087:12410":{"crate_id":4,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:21739:14665":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:44821:12772":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"4:7727:12270":{"crate_id":4,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:10501:12331":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:42410:3404":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"7:87:12403":{"crate_id":7,"path":["zerocopy","util","ptr","Ptr"],"kind":"struct"},"1:40958:13264":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:22143:17194":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:44786:12765":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:42393:174":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:41343:5719":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"4:7096:12279":{"crate_id":4,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:41065:5707":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:13741:1778":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"4:1309:3538":{"crate_id":4,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:12657:6139":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:42968:13248":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"4:4497:12302":{"crate_id":4,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:47462:12847":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"0:2378:1832":{"crate_id":0,"path":["hashbrown","hash_set"],"kind":"module"},"4:3249:19553":{"crate_id":4,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:39979:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:53686:698":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:4356:13240":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:728:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:46193:12803":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:40918:12659":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:44852:12780":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:33975:5828":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:41159:5714":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:13386:13258":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:40930:14530":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"4:3208:101":{"crate_id":4,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:32817:5800":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:40948:12324":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:36684:5831":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:6018:72":{"crate_id":4,"path":["alloc","sync","Arc"],"kind":"struct"},"1:34093:5825":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:3080:5839":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:53675:1044":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:42890:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:46479:12815":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:10136:130":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:1927:5780":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:21867:12466":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"4:1525:3378":{"crate_id":4,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"4:7711:3465":{"crate_id":4,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:40829:14519":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:44834:12778":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:22855:12471":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:1153:13727":{"crate_id":4,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"4:2112:13226":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:44331:12734":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:2990:5730":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:10347:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:32810:13263":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:46602:12819":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:8040:166":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:1731:12300":{"crate_id":1,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"1:53693:1653":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"5:1046:5784":{"crate_id":5,"path":["allocator_api2","stable","slice","SliceExt"],"kind":"trait"},"4:3270:4997":{"crate_id":4,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:40034:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:40094:5842":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:42615:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:3396:3465":{"crate_id":4,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:4:1125":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:22560:14756":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:46718:12822":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:10787:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:4103:12274":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:12711:14617":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:3455:5847":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:45139:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:44951:12784":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:12227:13256":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:11213:12734":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:42849:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:47308:12844":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:8049:4538":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:44959:12786":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:4222:13238":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:42929:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:44395:12738":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"4:828:12287":{"crate_id":4,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:743:263":{"crate_id":5,"path":["allocator_api2","stable","vec","Vec"],"kind":"struct"},"1:53687:700":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"4:7594:12436":{"crate_id":4,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:44245:12457":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:43370:5776":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:2139:5782":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:42427:5935":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:3233:2962":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:34289:4847":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:2465:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"4:1062:12274":{"crate_id":4,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:2487:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:42535:3404":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:43073:5788":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"4:6050:12307":{"crate_id":4,"path":["alloc","sync","Weak"],"kind":"struct"},"1:21484:18473":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"4:3032:13484":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:5864:250":{"crate_id":4,"path":["alloc","string","ToString"],"kind":"trait"},"1:22905:15704":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:4430:5799":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:44491:12743":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"4:3028:12417":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:47646:12849":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:1268:3155":{"crate_id":6,"path":["ahash","fallback_hash","AHasher"],"kind":"struct"},"1:13361:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:46891:12828":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"4:868:12289":{"crate_id":4,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:11134:12457":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:4509:13242":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:11061:13249":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:48642:11197":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:41083:12663":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"4:7652:13236":{"crate_id":4,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:46442:12813":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:42324:12695":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:41198:5717":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:40729:12642":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:725:17194":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"4:7052:263":{"crate_id":4,"path":["alloc","vec","Vec"],"kind":"struct"},"1:42344:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:42250:15672":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:44643:12758":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:0:1868":{"crate_id":5,"path":["allocator_api2"],"kind":"module"},"1:46127:12800":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:3272:5840":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:3428:5843":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:33310:5822":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:3075:5838":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:10395:3154":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:44501:12744":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:8003:5692":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:44449:12741":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:22927:12483":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:48428:12884":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:42284:14549":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"7:362:15010":{"crate_id":7,"path":["zerocopy","Unaligned"],"kind":"trait"},"1:22605:17194":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:42138:14548":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"4:7524:1859":{"crate_id":4,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:3468:18174":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:4657:5739":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:41184:5716":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:2534:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:0:481":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:44137:13273":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"4:5442:14953":{"crate_id":4,"path":["alloc","slice","Concat"],"kind":"trait"},"1:11740:13254":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:53679:1162":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:44749:12764":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:8036:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:10148:5792":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:75:14994":{"crate_id":6,"path":["ahash","fallback_hash","AHasherU64"],"kind":"struct"},"1:3070:5837":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:5121:862":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:21530:18476":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:4246:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:41055:5706":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:40124:5844":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:40814:12642":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:46794:12825":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:1575:13224":{"crate_id":4,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"4:1724:12274":{"crate_id":4,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:11817:5777":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:44431:12740":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"4:5058:12300":{"crate_id":4,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:46969:12830":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"4:3660:3404":{"crate_id":4,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:40795:12649":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:23036:6155":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:5079:13245":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:44722:12763":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:3048:4850":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:42106:12675":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"7:0:11839":{"crate_id":7,"path":["zerocopy"],"kind":"module"},"5:1056:12274":{"crate_id":5,"path":["allocator_api2","stable","slice","to_vec_in","DropGuard"],"kind":"struct"},"1:40131:12512":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:3002:1996":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"4:7469:2963":{"crate_id":4,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:43823:12717":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:3520:5851":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:11255:13253":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:42084:171":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:53698:856":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:40806:12651":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:40848:12656":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:2751:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:6175:12300":{"crate_id":4,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:44674:12762":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:38725:5835":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:34462:4848":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:46271:12806":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"4:1189:13728":{"crate_id":4,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"4:217:12285":{"crate_id":4,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:2371:641":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:43615:12714":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:39967:5841":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:42469:5938":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:23005:12496":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:6731:12330":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:2381:5761":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:40772:12647":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:22649:14748":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:23025:6141":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:41599:5687":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:40887:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:4573:12322":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:48390:12883":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:40144:12513":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:3243:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:47386:12845":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"4:2525:12421":{"crate_id":4,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:2745:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:12475:12739":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:5831:12300":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"4:2195:12295":{"crate_id":4,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:21856:17194":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:3191:5848":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:10567:12333":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:3222:4844":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:21758:12466":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:32835:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"4:1534:3385":{"crate_id":4,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:46672:12821":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:40016:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:42732:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:44975:12790":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:53676:454":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:53691:804":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:3058:5823":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:12768:14625":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:46572:12818":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:8496:1995":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:2576:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:44295:12732":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:22978:15700":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"4:1566:210":{"crate_id":4,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:46217:12804":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:924:12291":{"crate_id":4,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:9795:13652":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:1095:1859":{"crate_id":5,"path":["allocator_api2","stable","raw_vec","TryReserveError"],"kind":"struct"},"1:31005:4843":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:45157:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:4504:13241":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"0:2376:1830":{"crate_id":0,"path":["hashbrown","hash_map"],"kind":"module"},"1:5736:12300":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"4:6071:13486":{"crate_id":4,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:32922:116":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:21684:17194":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"4:4434:12302":{"crate_id":4,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"9:201:13219":{"crate_id":9,"path":["once_cell","race","OnceNonZeroUsize"],"kind":"struct"},"1:41543:12670":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:44993:132":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:3717:3431":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:12513:12456":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:3365:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:53700:1259":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"4:5934:3431":{"crate_id":4,"path":["alloc","string","Drain"],"kind":"struct"},"1:45190:12906":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:44526:12652":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:1106:14935":{"crate_id":5,"path":["allocator_api2","stable","raw_vec","TryReserveErrorKind"],"kind":"enum"},"1:13312:165":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:46402:12811":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:21496:18473":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:44607:14631":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"4:5398:12274":{"crate_id":4,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:716:12274":{"crate_id":5,"path":["allocator_api2","stable","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:43808:12716":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:10390:3149":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:42771:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:26457:266":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:39963:3151":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:42693:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:44203:12726":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:10144:5791":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:41357:5720":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:41097:5710":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:9790:18344":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:43576:12710":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:42543:2963":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:3237:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:13548:12465":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:6726:12450":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:44628:12751":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:726:6142":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:43605:12711":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:4269:14495":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"4:4265:12300":{"crate_id":4,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:1657:1997":{"crate_id":1,"path":["core","mem"],"kind":"module"},"1:44377:12737":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:658:2963":{"crate_id":5,"path":["allocator_api2","stable","vec","into_iter","IntoIter"],"kind":"struct"},"4:3871:3465":{"crate_id":4,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:43976:13269":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:51:2005":{"crate_id":5,"path":["allocator_api2","stable","alloc","Allocator"],"kind":"trait"},"4:6951:12313":{"crate_id":4,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:22894:6140":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"4:1325:3543":{"crate_id":4,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"9:207:13220":{"crate_id":9,"path":["once_cell","race","OnceBool"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:44045:13270":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:21542:18478":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:12697:14610":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:4288:14496":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:40054:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:32920:5736":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"0:2459:1864":{"crate_id":0,"path":["hashbrown","TryReserveError","AllocError"],"kind":"variant"},"1:42810:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:31043:5751":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:2740:2011":{"crate_id":1,"path":["core","convert","identity"],"kind":"function"},"4:7399:12292":{"crate_id":4,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:53690:803":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:9769:724":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:8187:179":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:22506:14755":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"4:7369:2963":{"crate_id":4,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"4:279:12274":{"crate_id":4,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:48446:5858":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:47226:12843":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:44076:12719":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:1941:12441":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:22295:17194":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:8078:131":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:53688:805":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:44197:12725":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:41005:5695":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"4:1516:3368":{"crate_id":4,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:3237:3395":{"crate_id":4,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:39304:5836":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:8543:18343":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:42576:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:44800:14632":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:4500:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:22654:14746":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:41127:5712":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:41149:5713":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:22148:14671":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"7:566:15016":{"crate_id":7,"path":["zerocopy","ByteSliceMut"],"kind":"trait"},"1:3851:2963":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:38560:5832":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"4:824:102":{"crate_id":4,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:48306:12881":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:12717:14616":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"4:7360:2006":{"crate_id":4,"path":["alloc","alloc","Global"],"kind":"struct"},"1:3032:5732":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:2539:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:2570:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:44128:12462":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:8499:5690":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:7579:15705":{"crate_id":4,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:22840:12470":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"0:2380:1835":{"crate_id":0,"path":["hashbrown","hash_table"],"kind":"module"},"1:44147:12463":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:1825:5749":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:3443:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"4:4073:3431":{"crate_id":4,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:21528:18484":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:42552:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"7:562:15015":{"crate_id":7,"path":["zerocopy","ByteSlice"],"kind":"trait"},"7:325:15008":{"crate_id":7,"path":["zerocopy","FromBytes"],"kind":"trait"},"1:40985:5694":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:34034:5826":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"4:4919:217":{"crate_id":4,"path":["alloc","rc","Rc"],"kind":"struct"},"1:32761:2020":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:47496:12848":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"7:321:15007":{"crate_id":7,"path":["zerocopy","FromZeroes"],"kind":"trait"},"4:40:12269":{"crate_id":4,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:22467:14754":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:42487:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:31231:15680":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:53701:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:43584:5812":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:2748:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:41566:5680":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"4:2307:12420":{"crate_id":4,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"8:0:1980":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:31037:1998":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:10353:153":{"crate_id":1,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1:9286:13247":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:24057:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:44535:12642":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"4:1340:3541":{"crate_id":4,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:10106:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:3449:5845":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:148:14989":{"crate_id":6,"path":["ahash","random_state","DefaultRandomSource"],"kind":"struct"},"1:10599:12338":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:22787:12469":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:42306:12692":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:43361:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"4:7535:14935":{"crate_id":4,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"4:7550:12304":{"crate_id":4,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:45198:12796":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"4:3278:5006":{"crate_id":4,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:9603:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"4:7566:12433":{"crate_id":4,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:22173:12467":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:732:12277":{"crate_id":5,"path":["allocator_api2","stable","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:48527:11192":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"4:7419:19554":{"crate_id":4,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:12211:14580":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:44055:12461":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:10088:5787":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"4:1169:13483":{"crate_id":4,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:7363:4822":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:2992:119":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:11227:12735":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:42166:12684":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:43087:5791":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:1463:3395":{"crate_id":4,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:43568:5813":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:21737:17194":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:2997:246":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:48182:12879":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:3483:5850":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:9935:5809":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"4:7121:12283":{"crate_id":4,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:22185:18482":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:41333:5718":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:6022:5698":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:44544:12651":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:10140:5789":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:40735:12643":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:6720:5700":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:53694:1650":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:44967:12788":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"4:1426:100":{"crate_id":4,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:22574:5761":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"1:4861:14513":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:3043:5820":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:45259:12799":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"4:4145:3404":{"crate_id":4,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:43827:12718":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:40785:12648":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:2754:257":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:2742:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:44115:13272":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:5020:422":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"4:730:120":{"crate_id":4,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:44811:12768":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:21474:6166":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:2706:5785":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"4:6928:12277":{"crate_id":4,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:2705:17194":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:41027:5696":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:12722:14615":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:32834:1850":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:39994:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:11773:13255":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:2837:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:46301:12807":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:39883:5852":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:53699:1708":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:10930:3395":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"4:669:13221":{"crate_id":4,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:41036:5697":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:3240:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"4:1828:3465":{"crate_id":4,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:41074:5708":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"9:173:12264":{"crate_id":9,"path":["once_cell","race","once_box","OnceBox"],"kind":"struct"},"1:40822:12652":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:46372:12810":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"4:2101:13225":{"crate_id":4,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"4:3740:12274":{"crate_id":4,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:46461:12814":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:43593:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:1074:2006":{"crate_id":5,"path":["allocator_api2","stable","alloc","global","Global"],"kind":"struct"},"1:43387:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:45220:181":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:42458:5936":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:32799:13261":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"4:941:3395":{"crate_id":4,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"4:6410:14966":{"crate_id":4,"path":["alloc","task","Wake"],"kind":"trait"},"1:43316:5776":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:21511:18480":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:787:12279":{"crate_id":5,"path":["allocator_api2","stable","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:46147:12801":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"4:3026:19923":{"crate_id":4,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"7:631:15017":{"crate_id":7,"path":["zerocopy","_CastType"],"kind":"enum"},"4:721:249":{"crate_id":4,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:22428:14753":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"4:1544:3478":{"crate_id":4,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:10146:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:10979:12453":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"0:2385:1840":{"crate_id":0,"path":["hashbrown","Equivalent"],"kind":"trait"},"1:46424:12812":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:44943:12782":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:45211:13275":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:40903:15705":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:2019:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:33916:4719":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:103:12268":{"crate_id":5,"path":["allocator_api2","stable","boxed","Box"],"kind":"struct"},"1:23164:5853":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"type_alias"},"1:10134:121":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:15:2243":{"crate_id":1,"path":["core","write"],"kind":"macro"}},"external_crates":{"7":{"name":"zerocopy","html_root_url":null},"4":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"allocator_api2","html_root_url":null},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"once_cell","html_root_url":null},"6":{"name":"ahash","html_root_url":null},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}